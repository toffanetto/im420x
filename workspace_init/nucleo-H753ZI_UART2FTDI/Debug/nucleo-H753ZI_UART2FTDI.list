
nucleo-H753ZI_UART2FTDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b78  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  08018e18  08018e18  00019e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080199ec  080199ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080199f4  080199f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080199fc  080199fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000114  24000000  08019a00  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000114  08019b14  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000174  08019b74  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0006863c  240001d8  08019bd4  0001b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24068814  08019bd4  0001b814  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e297  00000000  00000000  0001b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c4c  00000000  00000000  00049499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002038  00000000  00000000  0004f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018de  00000000  00000000  00051120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004041b  00000000  00000000  000529fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca5a  00000000  00000000  00092e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182df7  00000000  00000000  000bf873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0024266a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094dc  00000000  00000000  002426e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0024bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018e00 	.word	0x08018e00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08018e00 	.word	0x08018e00

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800074c:	f00c fbc4 	bl	800ced8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000750:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000758:	f000 f986 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800075c:	4b58      	ldr	r3, [pc, #352]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8090 	bne.w	800088a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000770:	2208      	movs	r2, #8
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d015      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	3308      	adds	r3, #8
 800078a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00b      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d865      	bhi.n	800088a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c2:	4b41      	ldr	r3, [pc, #260]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007c8:	e004      	b.n	80007d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <pvPortMallocMicroROS+0xa6>
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f1      	bne.n	80007ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d04c      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2208      	movs	r2, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d920      	bls.n	8000854 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f000 f96e 	bl	8000b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d203      	bcs.n	8000876 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	431a      	orrs	r2, r3
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088a:	f00c fb33 	bl	800cef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008b0:	69fb      	ldr	r3, [r7, #28]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24030f3c 	.word	0x24030f3c
 80008c0:	24030f48 	.word	0x24030f48
 80008c4:	24030f40 	.word	0x24030f40
 80008c8:	24030f34 	.word	0x24030f34
 80008cc:	24030f44 	.word	0x24030f44

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <vPortFreeMicroROS+0x66>
	__asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00c fabc 	bl	800ced8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8de 	bl	8000b30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00c fabe 	bl	800cef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24030f48 	.word	0x24030f48
 8000984:	24030f40 	.word	0x24030f40

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24030f48 	.word	0x24030f48

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00c fa83 	bl	800ced8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feb4 	bl	8000740 <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f017 fb0e 	bl	8018026 <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff60 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00c fa70 	bl	800cef4 <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00c fa56 	bl	800ced8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe82 	bl	8000740 <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00c fa4c 	bl	800cef4 <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <prvHeapInit+0xac>)
 8000a70:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a74:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3307      	adds	r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ac6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <prvHeapInit+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <prvHeapInit+0xbc>)
 8000af4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <prvHeapInit+0xc0>)
 8000afc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <prvHeapInit+0xc4>)
 8000b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	00030d40 	.word	0x00030d40
 8000b18:	240001f4 	.word	0x240001f4
 8000b1c:	24030f34 	.word	0x24030f34
 8000b20:	24030f3c 	.word	0x24030f3c
 8000b24:	24030f44 	.word	0x24030f44
 8000b28:	24030f40 	.word	0x24030f40
 8000b2c:	24030f48 	.word	0x24030f48

08000b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <prvInsertBlockIntoFreeList+0xac>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <prvInsertBlockIntoFreeList+0x14>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8f7      	bhi.n	8000b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d108      	bne.n	8000b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d118      	bne.n	8000bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00d      	beq.n	8000bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24030f34 	.word	0x24030f34
 8000be0:	24030f3c 	.word	0x24030f3c

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000c0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0e:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_DMA_Init+0x8c>)
 8000c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	200b      	movs	r0, #11
 8000c2c:	f001 fcde 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c30:	200b      	movs	r0, #11
 8000c32:	f001 fcf5 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f001 fcd6 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f001 fced 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2038      	movs	r0, #56	@ 0x38
 8000c4c:	f001 fcce 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c50:	2038      	movs	r0, #56	@ 0x38
 8000c52:	f001 fce5 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2039      	movs	r0, #57	@ 0x39
 8000c5c:	f001 fcc6 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c60:	2039      	movs	r0, #57	@ 0x39
 8000c62:	f001 fcdd 	bl	8002620 <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	58024400 	.word	0x58024400

08000c74 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c82:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c88:	4904      	ldr	r1, [pc, #16]	@ (8000c9c <cubemx_transport_open+0x28>)
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f008 fca2 	bl	80095d4 <HAL_UART_Receive_DMA>
    return true;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24030f4c 	.word	0x24030f4c

08000ca0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cae:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f008 fcdb 	bl	800966c <HAL_UART_DMAStop>
    return true;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cd4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cdc:	2b20      	cmp	r3, #32
 8000cde:	d11b      	bne.n	8000d18 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	f008 fbf3 	bl	80094d4 <HAL_UART_Transmit_DMA>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cf2:	e002      	b.n	8000cfa <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f00b f88d 	bl	800be14 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cfa:	7cfb      	ldrb	r3, [r7, #19]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d104      	bne.n	8000d0a <cubemx_transport_write+0x4a>
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	2b20      	cmp	r3, #32
 8000d08:	d1f4      	bne.n	8000cf4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000d0a:	7cfb      	ldrb	r3, [r7, #19]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <cubemx_transport_write+0x54>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	e002      	b.n	8000d1a <cubemx_transport_write+0x5a>
 8000d14:	2300      	movs	r3, #0
 8000d16:	e000      	b.n	8000d1a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000d18:	2300      	movs	r3, #0
    }
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d38:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3e:	b672      	cpsid	i
}
 8000d40:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000eb4 <cubemx_transport_read+0x190>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d068      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a57      	ldr	r2, [pc, #348]	@ (8000eb8 <cubemx_transport_read+0x194>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d061      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a55      	ldr	r2, [pc, #340]	@ (8000ebc <cubemx_transport_read+0x198>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d05a      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a52      	ldr	r2, [pc, #328]	@ (8000ec0 <cubemx_transport_read+0x19c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d053      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a50      	ldr	r2, [pc, #320]	@ (8000ec4 <cubemx_transport_read+0x1a0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d04c      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec8 <cubemx_transport_read+0x1a4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d045      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000ecc <cubemx_transport_read+0x1a8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d03e      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a48      	ldr	r2, [pc, #288]	@ (8000ed0 <cubemx_transport_read+0x1ac>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d037      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a46      	ldr	r2, [pc, #280]	@ (8000ed4 <cubemx_transport_read+0x1b0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d030      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a43      	ldr	r2, [pc, #268]	@ (8000ed8 <cubemx_transport_read+0x1b4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d029      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a41      	ldr	r2, [pc, #260]	@ (8000edc <cubemx_transport_read+0x1b8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d022      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee0 <cubemx_transport_read+0x1bc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01b      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee4 <cubemx_transport_read+0x1c0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d014      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <cubemx_transport_read+0x1c4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a37      	ldr	r2, [pc, #220]	@ (8000eec <cubemx_transport_read+0x1c8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d006      	beq.n	8000e22 <cubemx_transport_read+0xfe>
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a34      	ldr	r2, [pc, #208]	@ (8000ef0 <cubemx_transport_read+0x1cc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d107      	bne.n	8000e32 <cubemx_transport_read+0x10e>
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e30:	e006      	b.n	8000e40 <cubemx_transport_read+0x11c>
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e40:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <cubemx_transport_read+0x1d0>)
 8000e42:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e44:	b662      	cpsie	i
}
 8000e46:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f00a ffe0 	bl	800be14 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <cubemx_transport_read+0x1d4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <cubemx_transport_read+0x1d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d104      	bne.n	8000e6a <cubemx_transport_read+0x146>
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f6ff af6a 	blt.w	8000d3e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e6e:	e011      	b.n	8000e94 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <cubemx_transport_read+0x1d4>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	440b      	add	r3, r1
 8000e7a:	4920      	ldr	r1, [pc, #128]	@ (8000efc <cubemx_transport_read+0x1d8>)
 8000e7c:	5c8a      	ldrb	r2, [r1, r2]
 8000e7e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <cubemx_transport_read+0x1d4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <cubemx_transport_read+0x1d4>)
 8000e8c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <cubemx_transport_read+0x1d4>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <cubemx_transport_read+0x1d0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d003      	beq.n	8000ea8 <cubemx_transport_read+0x184>
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3e3      	bcc.n	8000e70 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020010 	.word	0x40020010
 8000eb8:	40020028 	.word	0x40020028
 8000ebc:	40020040 	.word	0x40020040
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	40020070 	.word	0x40020070
 8000ec8:	40020088 	.word	0x40020088
 8000ecc:	400200a0 	.word	0x400200a0
 8000ed0:	400200b8 	.word	0x400200b8
 8000ed4:	40020410 	.word	0x40020410
 8000ed8:	40020428 	.word	0x40020428
 8000edc:	40020440 	.word	0x40020440
 8000ee0:	40020458 	.word	0x40020458
 8000ee4:	40020470 	.word	0x40020470
 8000ee8:	40020488 	.word	0x40020488
 8000eec:	400204a0 	.word	0x400204a0
 8000ef0:	400204b8 	.word	0x400204b8
 8000ef4:	24031750 	.word	0x24031750
 8000ef8:	2403174c 	.word	0x2403174c
 8000efc:	24030f4c 	.word	0x24030f4c

08000f00 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f06:	4a1f      	ldr	r2, [pc, #124]	@ (8000f84 <MX_ETH_Init+0x84>)
 8000f08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f18:	22e1      	movs	r2, #225	@ 0xe1
 8000f1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f30:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <MX_ETH_Init+0x88>)
 8000f32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f3c:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <MX_ETH_Init+0x8c>)
 8000f3e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f42:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <MX_ETH_Init+0x90>)
 8000f44:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f48:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f4c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_ETH_Init+0x80>)
 8000f50:	f004 f9bc 	bl	80052cc <HAL_ETH_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f5a:	f000 fb2b 	bl	80015b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f5e:	2238      	movs	r2, #56	@ 0x38
 8000f60:	2100      	movs	r1, #0
 8000f62:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MX_ETH_Init+0x94>)
 8000f64:	f016 ff40 	bl	8017de8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_ETH_Init+0x94>)
 8000f6a:	2221      	movs	r2, #33	@ 0x21
 8000f6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_ETH_Init+0x94>)
 8000f70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_ETH_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2403178c 	.word	0x2403178c
 8000f84:	40028000 	.word	0x40028000
 8000f88:	2403183c 	.word	0x2403183c
 8000f8c:	24000174 	.word	0x24000174
 8000f90:	24000114 	.word	0x24000114
 8000f94:	24031754 	.word	0x24031754

08000f98 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	@ 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a59      	ldr	r2, [pc, #356]	@ (800111c <HAL_ETH_MspInit+0x184>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	f040 80ab 	bne.w	8001112 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fbc:	4b58      	ldr	r3, [pc, #352]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc2:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fda:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fea:	4b4d      	ldr	r3, [pc, #308]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000fec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ff8:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8000ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ffe:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001008:	4b45      	ldr	r3, [pc, #276]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 800100a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001026:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b3a      	ldr	r3, [pc, #232]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	4a39      	ldr	r2, [pc, #228]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001044:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	4a31      	ldr	r2, [pc, #196]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001062:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001070:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800108e:	2332      	movs	r3, #50	@ 0x32
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109e:	230b      	movs	r3, #11
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	481e      	ldr	r0, [pc, #120]	@ (8001124 <HAL_ETH_MspInit+0x18c>)
 80010aa:	f004 fd43 	bl	8005b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010ae:	2386      	movs	r3, #134	@ 0x86
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4817      	ldr	r0, [pc, #92]	@ (8001128 <HAL_ETH_MspInit+0x190>)
 80010ca:	f004 fd33 	bl	8005b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e0:	230b      	movs	r3, #11
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4810      	ldr	r0, [pc, #64]	@ (800112c <HAL_ETH_MspInit+0x194>)
 80010ec:	f004 fd22 	bl	8005b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001102:	230b      	movs	r3, #11
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <HAL_ETH_MspInit+0x198>)
 800110e:	f004 fd11 	bl	8005b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	@ 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40028000 	.word	0x40028000
 8001120:	58024400 	.word	0x58024400
 8001124:	58020800 	.word	0x58020800
 8001128:	58020000 	.word	0x58020000
 800112c:	58020400 	.word	0x58020400
 8001130:	58021800 	.word	0x58021800

08001134 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <MX_FREERTOS_Init+0x18>)
 800113a:	2100      	movs	r1, #0
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_FREERTOS_Init+0x1c>)
 800113e:	f00a fdd7 	bl	800bcf0 <osThreadNew>
 8001142:	4603      	mov	r3, r0
 8001144:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <MX_FREERTOS_Init+0x20>)
 8001146:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08018e74 	.word	0x08018e74
 8001150:	08001159 	.word	0x08001159
 8001154:	24031844 	.word	0x24031844

08001158 <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 800115e:	af02      	add	r7, sp, #8
 8001160:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8001164:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001168:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskMicroROS */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 800116a:	4b3f      	ldr	r3, [pc, #252]	@ (8001268 <StartTaskMicroROS+0x110>)
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b3f      	ldr	r3, [pc, #252]	@ (800126c <StartTaskMicroROS+0x114>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <StartTaskMicroROS+0x118>)
 8001174:	4a3f      	ldr	r2, [pc, #252]	@ (8001274 <StartTaskMicroROS+0x11c>)
 8001176:	4940      	ldr	r1, [pc, #256]	@ (8001278 <StartTaskMicroROS+0x120>)
 8001178:	2001      	movs	r0, #1
 800117a:	f00d fd85 	bl	800ec88 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800117e:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001182:	4618      	mov	r0, r3
 8001184:	f00d fd02 	bl	800eb8c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001188:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <StartTaskMicroROS+0x124>)
 800118a:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  freeRTOS_allocator.deallocate = microros_deallocate;
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <StartTaskMicroROS+0x128>)
 8001190:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001194:	4b3b      	ldr	r3, [pc, #236]	@ (8001284 <StartTaskMicroROS+0x12c>)
 8001196:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <StartTaskMicroROS+0x130>)
 800119c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80011a0:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00d fcff 	bl	800eba8 <rcutils_set_default_allocator>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 80011aa:	463b      	mov	r3, r7
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00d fd19 	bl	800ebe4 <rcutils_get_default_allocator>
 80011b2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80011b6:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80011ba:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 80011be:	461d      	mov	r5, r3
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80011c8:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 80011cc:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	f00d fc0c 	bl	800e9f0 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80011d8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80011dc:	f507 702d 	add.w	r0, r7, #692	@ 0x2b4
 80011e0:	4a2a      	ldr	r2, [pc, #168]	@ (800128c <StartTaskMicroROS+0x134>)
 80011e2:	492b      	ldr	r1, [pc, #172]	@ (8001290 <StartTaskMicroROS+0x138>)
 80011e4:	f00d fc4e 	bl	800ea84 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 80011e8:	f00e fa04 	bl	800f5f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f507 712d 	add.w	r1, r7, #692	@ 0x2b4
 80011f2:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 80011f6:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <StartTaskMicroROS+0x13c>)
 80011f8:	f00d fc86 	bl	800eb08 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

  msg.data = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304

  struct uxrCustomTransport transport;

  transport.args = &huart2;
 8001202:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8001206:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <StartTaskMicroROS+0x140>)
 800120c:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

  cubemx_transport_open(&transport);
 8001210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd2d 	bl	8000c74 <cubemx_transport_open>

  uint8_t * buf = (uint8_t * )"oi";
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <StartTaskMicroROS+0x144>)
 800121c:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324

  for(;;)
  {

	rmw_uros_sync_session(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001224:	f00d ff04 	bl	800f030 <rmw_uros_sync_session>
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001228:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 800122c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001230:	2200      	movs	r2, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f00d fbb8 	bl	800e9a8 <rcl_publish>
 8001238:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
	if (ret != RCL_RET_OK)
	{
	  //printf_("Error publishing (line %d)\n", __LINE__);
	}

	msg.data++;
 800123c:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001240:	3301      	adds	r3, #1
 8001242:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304

    cubemx_transport_write(&transport, buf, 2, 0);
 8001246:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800124a:	2300      	movs	r3, #0
 800124c:	2202      	movs	r2, #2
 800124e:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8001252:	f7ff fd35 	bl	8000cc0 <cubemx_transport_write>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001256:	2102      	movs	r1, #2
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <StartTaskMicroROS+0x148>)
 800125a:	f004 fe34 	bl	8005ec6 <HAL_GPIO_TogglePin>

	osDelay(500);
 800125e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001262:	f00a fdd7 	bl	800be14 <osDelay>
  {
 8001266:	e7db      	b.n	8001220 <StartTaskMicroROS+0xc8>
 8001268:	08000d25 	.word	0x08000d25
 800126c:	08000cc1 	.word	0x08000cc1
 8001270:	08000ca1 	.word	0x08000ca1
 8001274:	08000c75 	.word	0x08000c75
 8001278:	24031938 	.word	0x24031938
 800127c:	080015c1 	.word	0x080015c1
 8001280:	08001605 	.word	0x08001605
 8001284:	0800163d 	.word	0x0800163d
 8001288:	080016a9 	.word	0x080016a9
 800128c:	08018e28 	.word	0x08018e28
 8001290:	08018e2c 	.word	0x08018e2c
 8001294:	08018e38 	.word	0x08018e38
 8001298:	240318a4 	.word	0x240318a4
 800129c:	08018e4c 	.word	0x08018e4c
 80012a0:	58021000 	.word	0x58021000

080012a4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a60      	ldr	r2, [pc, #384]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a59      	ldr	r2, [pc, #356]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b56      	ldr	r3, [pc, #344]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a51      	ldr	r2, [pc, #324]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a42      	ldr	r2, [pc, #264]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001350:	4b3c      	ldr	r3, [pc, #240]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a3b      	ldr	r2, [pc, #236]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4a33      	ldr	r2, [pc, #204]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <MX_GPIO_Init+0x1a0>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001392:	482d      	ldr	r0, [pc, #180]	@ (8001448 <MX_GPIO_Init+0x1a4>)
 8001394:	f004 fd7e 	bl	8005e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800139e:	482b      	ldr	r0, [pc, #172]	@ (800144c <MX_GPIO_Init+0x1a8>)
 80013a0:	f004 fd78 	bl	8005e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	4829      	ldr	r0, [pc, #164]	@ (8001450 <MX_GPIO_Init+0x1ac>)
 80013aa:	f004 fd73 	bl	8005e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4824      	ldr	r0, [pc, #144]	@ (8001454 <MX_GPIO_Init+0x1b0>)
 80013c4:	f004 fbb6 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80013c8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4819      	ldr	r0, [pc, #100]	@ (8001448 <MX_GPIO_Init+0x1a4>)
 80013e2:	f004 fba7 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80013e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4813      	ldr	r0, [pc, #76]	@ (800144c <MX_GPIO_Init+0x1a8>)
 8001400:	f004 fb98 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001408:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480f      	ldr	r0, [pc, #60]	@ (8001458 <MX_GPIO_Init+0x1b4>)
 800141a:	f004 fb8b 	bl	8005b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_GPIO_Init+0x1ac>)
 8001436:	f004 fb7d 	bl	8005b34 <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3730      	adds	r7, #48	@ 0x30
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	58024400 	.word	0x58024400
 8001448:	58020400 	.word	0x58020400
 800144c:	58020c00 	.word	0x58020c00
 8001450:	58021000 	.word	0x58021000
 8001454:	58020800 	.word	0x58020800
 8001458:	58021800 	.word	0x58021800

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f000 ff6c 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f814 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f7ff ff1c 	bl	80012a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800146c:	f7ff fbba 	bl	8000be4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001470:	f000 fc86 	bl	8001d80 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001474:	f7ff fd44 	bl	8000f00 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001478:	f000 fe88 	bl	800218c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800147c:	f000 fc34 	bl	8001ce8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001480:	f00a fbec 	bl	800bc5c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001484:	f7ff fe56 	bl	8001134 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001488:	f00a fc0c 	bl	800bca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <main+0x30>

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09c      	sub	sp, #112	@ 0x70
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	224c      	movs	r2, #76	@ 0x4c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f016 fca2 	bl	8017de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f016 fc9c 	bl	8017de8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f004 fe53 	bl	800615c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <SystemClock_Config+0xf8>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014be:	4a32      	ldr	r2, [pc, #200]	@ (8001588 <SystemClock_Config+0xf8>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <SystemClock_Config+0xf8>)
 80014c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <SystemClock_Config+0xfc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014d8:	4a2c      	ldr	r2, [pc, #176]	@ (800158c <SystemClock_Config+0xfc>)
 80014da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <SystemClock_Config+0xfc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ec:	bf00      	nop
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <SystemClock_Config+0xfc>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014fa:	d1f8      	bne.n	80014ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014fc:	2303      	movs	r3, #3
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001500:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001506:	2301      	movs	r3, #1
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	2302      	movs	r3, #2
 8001514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800151a:	2318      	movs	r3, #24
 800151c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001522:	2304      	movs	r3, #4
 8001524:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001526:	2302      	movs	r3, #2
 8001528:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800152a:	230c      	movs	r3, #12
 800152c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800152e:	2300      	movs	r3, #0
 8001530:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fe58 	bl	80061f0 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001546:	f000 f835 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	233f      	movs	r3, #63	@ 0x3f
 800154c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2101      	movs	r1, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fa98 	bl	8006aa4 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800157a:	f000 f81b 	bl	80015b4 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3770      	adds	r7, #112	@ 0x70
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	58000400 	.word	0x58000400
 800158c:	58024800 	.word	0x58024800

08001590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a2:	f000 ff07 	bl	80023b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <Error_Handler+0x8>

080015c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <microros_allocate+0x3c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <microros_allocate+0x3c>)
 80015d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <microros_allocate+0x40>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <microros_allocate+0x40>)
 80015e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff f8a8 	bl	8000740 <pvPortMallocMicroROS>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24031848 	.word	0x24031848
 8001600:	2403184c 	.word	0x2403184c

08001604 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00c      	beq.n	800162e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9b7 	bl	8000988 <getBlockSize>
 800161a:	4603      	mov	r3, r0
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <microros_deallocate+0x34>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <microros_deallocate+0x34>)
 8001626:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff f951 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2403184c 	.word	0x2403184c

0800163c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <microros_reallocate+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <microros_reallocate+0x64>)
 8001656:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <microros_reallocate+0x68>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4413      	add	r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <microros_reallocate+0x68>)
 8001666:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f7ff f866 	bl	8000740 <pvPortMallocMicroROS>
 8001674:	4603      	mov	r3, r0
 8001676:	e00e      	b.n	8001696 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff f985 	bl	8000988 <getBlockSize>
 800167e:	4603      	mov	r3, r0
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <microros_reallocate+0x68>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <microros_reallocate+0x68>)
 800168a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff f998 	bl	80009c4 <pvPortReallocMicroROS>
 8001694:	4603      	mov	r3, r0
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24031848 	.word	0x24031848
 80016a4:	2403184c 	.word	0x2403184c

080016a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <microros_zero_allocate+0x48>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <microros_zero_allocate+0x48>)
 80016c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <microros_zero_allocate+0x4c>)
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <microros_zero_allocate+0x4c>)
 80016da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff f99d 	bl	8000a1e <pvPortCallocMicroROS>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24031848 	.word	0x24031848
 80016f4:	2403184c 	.word	0x2403184c

080016f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	a320      	add	r3, pc, #128	@ (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fe4c 	bl	80003b0 <__aeabi_ldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001726:	a31a      	add	r3, pc, #104	@ (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fe40 	bl	80003b0 <__aeabi_ldivmod>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da20      	bge.n	800177e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <UTILS_NanosecondsToTimespec+0x90>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1712      	asrs	r2, r2, #28
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	17c8      	asrs	r0, r1, #31
 800175a:	460c      	mov	r4, r1
 800175c:	4605      	mov	r5, r0
 800175e:	ebb2 0804 	subs.w	r8, r2, r4
 8001762:	eb63 0905 	sbc.w	r9, r3, r5
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	4906      	ldr	r1, [pc, #24]	@ (800178c <UTILS_NanosecondsToTimespec+0x94>)
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]
    }
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001788:	44b82fa1 	.word	0x44b82fa1
 800178c:	3b9aca00 	.word	0x3b9aca00
 8001790:	3b9aca00 	.word	0x3b9aca00
 8001794:	00000000 	.word	0x00000000

08001798 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b08e      	sub	sp, #56	@ 0x38
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80017a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80017a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80017a8:	2300      	movs	r3, #0
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017be:	4618      	mov	r0, r3
 80017c0:	f00b fe1c 	bl	800d3fc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	61fa      	str	r2, [r7, #28]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	69b9      	ldr	r1, [r7, #24]
 80017d6:	000b      	movs	r3, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2200      	movs	r2, #0
 80017e2:	461c      	mov	r4, r3
 80017e4:	4615      	mov	r5, r2
 80017e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017ea:	1911      	adds	r1, r2, r4
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	416b      	adcs	r3, r5
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	f04f 0500 	mov.w	r5, #0
 800180a:	015d      	lsls	r5, r3, #5
 800180c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001810:	0154      	lsls	r4, r2, #5
 8001812:	4622      	mov	r2, r4
 8001814:	462b      	mov	r3, r5
 8001816:	ebb2 0800 	subs.w	r8, r2, r0
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800182a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800182e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	eb18 0a00 	adds.w	sl, r8, r0
 800183a:	eb49 0b01 	adc.w	fp, r9, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800184e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001852:	ebb2 040a 	subs.w	r4, r2, sl
 8001856:	603c      	str	r4, [r7, #0]
 8001858:	eb63 030b 	sbc.w	r3, r3, fp
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4623      	mov	r3, r4
 8001864:	181b      	adds	r3, r3, r0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	462b      	mov	r3, r5
 800186a:	eb41 0303 	adc.w	r3, r1, r3
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	6a3a      	ldr	r2, [r7, #32]
 8001872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001876:	f7ff ff3f 	bl	80016f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	@ 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_MspInit+0x38>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_MspInit+0x38>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_MspInit+0x38>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	210f      	movs	r1, #15
 80018b0:	f06f 0001 	mvn.w	r0, #1
 80018b4:	f000 fe9a 	bl	80025ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400

080018c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	@ 0x40
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d827      	bhi.n	8001922 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80018d2:	2200      	movs	r2, #0
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	2036      	movs	r0, #54	@ 0x36
 80018d8:	f000 fe88 	bl	80025ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018dc:	2036      	movs	r0, #54	@ 0x36
 80018de:	f000 fe9f 	bl	8002620 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018e2:	4a29      	ldr	r2, [pc, #164]	@ (8001988 <HAL_InitTick+0xc4>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_InitTick+0xc8>)
 80018ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ee:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_InitTick+0xc8>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_InitTick+0xc8>)
 80018fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001906:	f107 0210 	add.w	r2, r7, #16
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f005 fc53 	bl	80071bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800191a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_InitTick+0x6a>
 8001920:	e001      	b.n	8001926 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e02b      	b.n	800197e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001926:	f005 fc1d 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 800192a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800192c:	e004      	b.n	8001938 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800192e:	f005 fc19 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8001932:	4603      	mov	r3, r0
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_InitTick+0xcc>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9b      	lsrs	r3, r3, #18
 8001942:	3b01      	subs	r3, #1
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_InitTick+0xd0>)
 8001948:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <HAL_InitTick+0xd4>)
 800194a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_InitTick+0xd0>)
 800194e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001952:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001954:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_InitTick+0xd0>)
 8001956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001958:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_InitTick+0xd0>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_InitTick+0xd0>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001966:	480b      	ldr	r0, [pc, #44]	@ (8001994 <HAL_InitTick+0xd0>)
 8001968:	f007 fa96 	bl	8008e98 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001972:	4808      	ldr	r0, [pc, #32]	@ (8001994 <HAL_InitTick+0xd0>)
 8001974:	f007 faf2 	bl	8008f5c <HAL_TIM_Base_Start_IT>
 8001978:	4603      	mov	r3, r0
 800197a:	e000      	b.n	800197e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2400000c 	.word	0x2400000c
 800198c:	58024400 	.word	0x58024400
 8001990:	431bde83 	.word	0x431bde83
 8001994:	24031850 	.word	0x24031850
 8001998:	40001000 	.word	0x40001000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <DMA1_Stream0_IRQHandler+0x10>)
 80019da:	f002 f959 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24031abc 	.word	0x24031abc

080019e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA1_Stream1_IRQHandler+0x10>)
 80019ee:	f002 f94f 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24031b34 	.word	0x24031b34

080019fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <USART3_IRQHandler+0x10>)
 8001a02:	f007 fec9 	bl	8009798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24031938 	.word	0x24031938

08001a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM6_DAC_IRQHandler+0x10>)
 8001a16:	f007 fb19 	bl	800904c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24031850 	.word	0x24031850

08001a24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA2_Stream0_IRQHandler+0x10>)
 8001a2a:	f002 f931 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24031a44 	.word	0x24031a44

08001a38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <DMA2_Stream1_IRQHandler+0x10>)
 8001a3e:	f002 f927 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	240319cc 	.word	0x240319cc

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a66:	f016 faa9 	bl	8017fbc <__errno>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2216      	movs	r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_exit>:

void _exit (int status)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8e:	bf00      	nop
 8001a90:	e7fd      	b.n	8001a8e <_exit+0x12>

08001a92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00a      	b.n	8001aba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	b2ca      	uxtb	r2, r1
 8001ab2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf0      	blt.n	8001aa4 <_read+0x12>
  }

  return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e009      	b.n	8001af2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbf1      	blt.n	8001ade <_write+0x12>
  }
  return len;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_close>:

int _close(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_isatty>:

int _isatty(int file)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f016 fa0e 	bl	8017fbc <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24080000 	.word	0x24080000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	240318a0 	.word	0x240318a0
 8001bd4:	24068818 	.word	0x24068818

08001bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <SystemInit+0xe4>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be2:	4a36      	ldr	r2, [pc, #216]	@ (8001cbc <SystemInit+0xe4>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <SystemInit+0xe8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d807      	bhi.n	8001c08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <SystemInit+0xe8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 030f 	bic.w	r3, r3, #15
 8001c00:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc0 <SystemInit+0xe8>)
 8001c02:	f043 0307 	orr.w	r3, r3, #7
 8001c06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <SystemInit+0xec>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <SystemInit+0xec>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <SystemInit+0xec>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <SystemInit+0xec>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4929      	ldr	r1, [pc, #164]	@ (8001cc4 <SystemInit+0xec>)
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <SystemInit+0xf0>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <SystemInit+0xe8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <SystemInit+0xe8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <SystemInit+0xe8>)
 8001c3c:	f043 0307 	orr.w	r3, r3, #7
 8001c40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <SystemInit+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <SystemInit+0xec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <SystemInit+0xec>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <SystemInit+0xec>)
 8001c56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <SystemInit+0xf4>)
 8001c58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <SystemInit+0xec>)
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <SystemInit+0xf8>)
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <SystemInit+0xec>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <SystemInit+0xfc>)
 8001c64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <SystemInit+0xec>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <SystemInit+0xec>)
 8001c6e:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <SystemInit+0xfc>)
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <SystemInit+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <SystemInit+0xec>)
 8001c7a:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <SystemInit+0xfc>)
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <SystemInit+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <SystemInit+0xec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <SystemInit+0xec>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <SystemInit+0xec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <SystemInit+0x100>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <SystemInit+0x104>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ca2:	d202      	bcs.n	8001caa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <SystemInit+0x108>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <SystemInit+0x10c>)
 8001cac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001cb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00
 8001cc0:	52002000 	.word	0x52002000
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ccc:	02020200 	.word	0x02020200
 8001cd0:	01ff0000 	.word	0x01ff0000
 8001cd4:	01010280 	.word	0x01010280
 8001cd8:	5c001000 	.word	0x5c001000
 8001cdc:	ffff0000 	.word	0xffff0000
 8001ce0:	51008108 	.word	0x51008108
 8001ce4:	52004000 	.word	0x52004000

08001ce8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <MX_USART2_UART_Init+0x94>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d30:	4811      	ldr	r0, [pc, #68]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d32:	f007 fb7f 	bl	8009434 <HAL_UART_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d3c:	f7ff fc3a 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d40:	2100      	movs	r1, #0
 8001d42:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d44:	f009 fb74 	bl	800b430 <HAL_UARTEx_SetTxFifoThreshold>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d4e:	f7ff fc31 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d52:	2100      	movs	r1, #0
 8001d54:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d56:	f009 fba9 	bl	800b4ac <HAL_UARTEx_SetRxFifoThreshold>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d60:	f7ff fc28 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d64:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <MX_USART2_UART_Init+0x90>)
 8001d66:	f009 fb2a 	bl	800b3be <HAL_UARTEx_DisableFifoMode>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f7ff fc20 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	240318a4 	.word	0x240318a4
 8001d7c:	40004400 	.word	0x40004400

08001d80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <MX_USART3_UART_Init+0x94>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dc8:	4811      	ldr	r0, [pc, #68]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dca:	f007 fb33 	bl	8009434 <HAL_UART_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f7ff fbee 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001ddc:	f009 fb28 	bl	800b430 <HAL_UARTEx_SetTxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001de6:	f7ff fbe5 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dea:	2100      	movs	r1, #0
 8001dec:	4808      	ldr	r0, [pc, #32]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dee:	f009 fb5d 	bl	800b4ac <HAL_UARTEx_SetRxFifoThreshold>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001df8:	f7ff fbdc 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_USART3_UART_Init+0x90>)
 8001dfe:	f009 fade 	bl	800b3be <HAL_UARTEx_DisableFifoMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f7ff fbd4 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	24031938 	.word	0x24031938
 8001e14:	40004800 	.word	0x40004800

08001e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0be      	sub	sp, #248	@ 0xf8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	22c0      	movs	r2, #192	@ 0xc0
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f015 ffd5 	bl	8017de8 <memset>
  if(uartHandle->Instance==USART2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a67      	ldr	r2, [pc, #412]	@ (8001fe0 <HAL_UART_MspInit+0x1c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	f040 80db 	bne.w	8002000 <HAL_UART_MspInit+0x1e8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e4a:	f04f 0202 	mov.w	r2, #2
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5c:	f107 0320 	add.w	r3, r7, #32
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 f9ed 	bl	8007240 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001e6c:	f7ff fba2 	bl	80015b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e70:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e76:	4a5b      	ldr	r2, [pc, #364]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e80:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b55      	ldr	r3, [pc, #340]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e94:	4a53      	ldr	r2, [pc, #332]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e9e:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eac:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebc:	4b49      	ldr	r3, [pc, #292]	@ (8001fe4 <HAL_UART_MspInit+0x1cc>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001eec:	4619      	mov	r1, r3
 8001eee:	483e      	ldr	r0, [pc, #248]	@ (8001fe8 <HAL_UART_MspInit+0x1d0>)
 8001ef0:	f003 fe20 	bl	8005b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4834      	ldr	r0, [pc, #208]	@ (8001fec <HAL_UART_MspInit+0x1d4>)
 8001f1a:	f003 fe0b 	bl	8005b34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001f1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f20:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_UART_MspInit+0x1dc>)
 8001f22:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f26:	222b      	movs	r2, #43	@ 0x2b
 8001f28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f60:	4823      	ldr	r0, [pc, #140]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f62:	f000 fb6b 	bl	800263c <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001f6c:	f7ff fb22 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_UART_MspInit+0x1d8>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream0;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001f80:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <HAL_UART_MspInit+0x1e4>)
 8001f82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001f86:	222c      	movs	r2, #44	@ 0x2c
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001f8c:	2240      	movs	r2, #64	@ 0x40
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001fb8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fc2:	f000 fb3b 	bl	800263c <HAL_DMA_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x1b8>
    {
      Error_Handler();
 8001fcc:	f7ff faf2 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_UART_MspInit+0x1e0>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fdc:	e0c3      	b.n	8002166 <HAL_UART_MspInit+0x34e>
 8001fde:	bf00      	nop
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	58020c00 	.word	0x58020c00
 8001ff0:	240319cc 	.word	0x240319cc
 8001ff4:	40020428 	.word	0x40020428
 8001ff8:	24031a44 	.word	0x24031a44
 8001ffc:	40020410 	.word	0x40020410
  else if(uartHandle->Instance==USART3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5a      	ldr	r2, [pc, #360]	@ (8002170 <HAL_UART_MspInit+0x358>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f040 80ad 	bne.w	8002166 <HAL_UART_MspInit+0x34e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800200c:	f04f 0202 	mov.w	r2, #2
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f90c 	bl	8007240 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 800202e:	f7ff fac1 	bl	80015b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002032:	4b50      	ldr	r3, [pc, #320]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002038:	4a4e      	ldr	r2, [pc, #312]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 800203a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800203e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002042:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 8002044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002050:	4b48      	ldr	r3, [pc, #288]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	4a47      	ldr	r2, [pc, #284]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002060:	4b44      	ldr	r3, [pc, #272]	@ (8002174 <HAL_UART_MspInit+0x35c>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800206e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002088:	2307      	movs	r3, #7
 800208a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002092:	4619      	mov	r1, r3
 8002094:	4838      	ldr	r0, [pc, #224]	@ (8002178 <HAL_UART_MspInit+0x360>)
 8002096:	f003 fd4d 	bl	8005b34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_UART_MspInit+0x364>)
 800209c:	4a38      	ldr	r2, [pc, #224]	@ (8002180 <HAL_UART_MspInit+0x368>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020a2:	222d      	movs	r2, #45	@ 0x2d
 80020a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a6:	4b35      	ldr	r3, [pc, #212]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ac:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020b2:	4b32      	ldr	r3, [pc, #200]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c0:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d6:	4b29      	ldr	r3, [pc, #164]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020dc:	4827      	ldr	r0, [pc, #156]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020de:	f000 faad 	bl	800263c <HAL_DMA_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 80020e8:	f7ff fa64 	bl	80015b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80020f4:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_UART_MspInit+0x364>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80020fa:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 80020fc:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_UART_MspInit+0x370>)
 80020fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002100:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002102:	222e      	movs	r2, #46	@ 0x2e
 8002104:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002106:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002108:	2240      	movs	r2, #64	@ 0x40
 800210a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002112:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002114:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002118:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800212c:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 800212e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002132:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800213a:	4812      	ldr	r0, [pc, #72]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 800213c:	f000 fa7e 	bl	800263c <HAL_DMA_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_UART_MspInit+0x332>
      Error_Handler();
 8002146:	f7ff fa35 	bl	80015b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 800214e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <HAL_UART_MspInit+0x36c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2105      	movs	r1, #5
 800215a:	2027      	movs	r0, #39	@ 0x27
 800215c:	f000 fa46 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002160:	2027      	movs	r0, #39	@ 0x27
 8002162:	f000 fa5d 	bl	8002620 <HAL_NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	37f8      	adds	r7, #248	@ 0xf8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40004800 	.word	0x40004800
 8002174:	58024400 	.word	0x58024400
 8002178:	58020c00 	.word	0x58020c00
 800217c:	24031abc 	.word	0x24031abc
 8002180:	40020010 	.word	0x40020010
 8002184:	24031b34 	.word	0x24031b34
 8002188:	40020028 	.word	0x40020028

0800218c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002192:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002194:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002196:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002198:	2209      	movs	r2, #9
 800219a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800219e:	2202      	movs	r2, #2
 80021a0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021d4:	f003 fe91 	bl	8005efa <HAL_PCD_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80021de:	f7ff f9e9 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24031bac 	.word	0x24031bac
 80021ec:	40080000 	.word	0x40080000

080021f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ba      	sub	sp, #232	@ 0xe8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	22c0      	movs	r2, #192	@ 0xc0
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f015 fde9 	bl	8017de8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a30      	ldr	r2, [pc, #192]	@ (80022dc <HAL_PCD_MspInit+0xec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d159      	bne.n	80022d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002220:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800222c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4618      	mov	r0, r3
 800223a:	f005 f801 	bl	8007240 <HAL_RCCEx_PeriphCLKConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002244:	f7ff f9b6 	bl	80015b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002248:	f003 ffc2 	bl	80061d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800226a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800226e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002284:	230a      	movs	r3, #10
 8002286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800228e:	4619      	mov	r1, r3
 8002290:	4814      	ldr	r0, [pc, #80]	@ (80022e4 <HAL_PCD_MspInit+0xf4>)
 8002292:	f003 fc4f 	bl	8005b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002296:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800229a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022ae:	4619      	mov	r1, r3
 80022b0:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <HAL_PCD_MspInit+0xf4>)
 80022b2:	f003 fc3f 	bl	8005b34 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 80022b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022bc:	4a08      	ldr	r2, [pc, #32]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 80022be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_PCD_MspInit+0xf0>)
 80022c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80022d4:	bf00      	nop
 80022d6:	37e8      	adds	r7, #232	@ 0xe8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40080000 	.word	0x40080000
 80022e0:	58024400 	.word	0x58024400
 80022e4:	58020000 	.word	0x58020000

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002320 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022ec:	f7ff fc74 	bl	8001bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f2:	490d      	ldr	r1, [pc, #52]	@ (8002328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002308:	4c0a      	ldr	r4, [pc, #40]	@ (8002334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f015 fe57 	bl	8017fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff f89f 	bl	800145c <main>
  bx  lr
 800231e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002324:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002328:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 800232c:	08019a00 	.word	0x08019a00
  ldr r2, =_sbss
 8002330:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002334:	24068814 	.word	0x24068814

08002338 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC3_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002342:	2003      	movs	r0, #3
 8002344:	f000 f947 	bl	80025d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002348:	f004 fd62 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_Init+0x68>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	4913      	ldr	r1, [pc, #76]	@ (80023a8 <HAL_Init+0x6c>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_Init+0x68>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <HAL_Init+0x6c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_Init+0x70>)
 800237e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002380:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <HAL_Init+0x74>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002386:	200f      	movs	r0, #15
 8002388:	f7ff fa9c 	bl	80018c4 <HAL_InitTick>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e002      	b.n	800239c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002396:	f7ff fa77 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58024400 	.word	0x58024400
 80023a8:	08018e98 	.word	0x08018e98
 80023ac:	24000008 	.word	0x24000008
 80023b0:	24000004 	.word	0x24000004

080023b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	24000010 	.word	0x24000010
 80023d8:	24032090 	.word	0x24032090

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	24032090 	.word	0x24032090

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffde 	bl	80023dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	24000010 	.word	0x24000010

0800243c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_GetREVID+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0c1b      	lsrs	r3, r3, #16
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	5c001000 	.word	0x5c001000

08002454 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002464:	4904      	ldr	r1, [pc, #16]	@ (8002478 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	58000400 	.word	0x58000400

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <__NVIC_SetPriorityGrouping+0x40>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	@ (80024bc <__NVIC_SetPriorityGrouping+0x40>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00
 80024c0:	05fa0000 	.word	0x05fa0000

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	@ (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	@ (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <__NVIC_SetPriority+0x50>)
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ff4c 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fa:	f7ff ff63 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 80025fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f7ff ffb3 	bl	8002570 <NVIC_EncodePriority>
 800260a:	4602      	mov	r2, r0
 800260c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff82 	bl	800251c <__NVIC_SetPriority>
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff56 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff feca 	bl	80023dc <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e316      	b.n	8002c82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a66      	ldr	r2, [pc, #408]	@ (80027f4 <HAL_DMA_Init+0x1b8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04a      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_DMA_Init+0x1bc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d045      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <HAL_DMA_Init+0x1c0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d040      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a62      	ldr	r2, [pc, #392]	@ (8002800 <HAL_DMA_Init+0x1c4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d03b      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a60      	ldr	r2, [pc, #384]	@ (8002804 <HAL_DMA_Init+0x1c8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d036      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a5f      	ldr	r2, [pc, #380]	@ (8002808 <HAL_DMA_Init+0x1cc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a5d      	ldr	r2, [pc, #372]	@ (800280c <HAL_DMA_Init+0x1d0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02c      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	@ (8002810 <HAL_DMA_Init+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d027      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002814 <HAL_DMA_Init+0x1d8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a59      	ldr	r2, [pc, #356]	@ (8002818 <HAL_DMA_Init+0x1dc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01d      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_DMA_Init+0x1e0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_DMA_Init+0x1e4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a54      	ldr	r2, [pc, #336]	@ (8002824 <HAL_DMA_Init+0x1e8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a53      	ldr	r2, [pc, #332]	@ (8002828 <HAL_DMA_Init+0x1ec>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a51      	ldr	r2, [pc, #324]	@ (800282c <HAL_DMA_Init+0x1f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_Init+0xb8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a50      	ldr	r2, [pc, #320]	@ (8002830 <HAL_DMA_Init+0x1f4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA_Init+0xbc>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_DMA_Init+0xbe>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 813b 	beq.w	8002976 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a37      	ldr	r2, [pc, #220]	@ (80027f4 <HAL_DMA_Init+0x1b8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_DMA_Init+0x1bc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_DMA_Init+0x1c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a33      	ldr	r2, [pc, #204]	@ (8002800 <HAL_DMA_Init+0x1c4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_DMA_Init+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a30      	ldr	r2, [pc, #192]	@ (8002808 <HAL_DMA_Init+0x1cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2e      	ldr	r2, [pc, #184]	@ (800280c <HAL_DMA_Init+0x1d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <HAL_DMA_Init+0x1d4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <HAL_DMA_Init+0x1d8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <HAL_DMA_Init+0x1dc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	@ (800281c <HAL_DMA_Init+0x1e0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a27      	ldr	r2, [pc, #156]	@ (8002820 <HAL_DMA_Init+0x1e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_DMA_Init+0x1e8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <HAL_DMA_Init+0x1ec>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a22      	ldr	r2, [pc, #136]	@ (800282c <HAL_DMA_Init+0x1f0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Init+0x174>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a21      	ldr	r2, [pc, #132]	@ (8002830 <HAL_DMA_Init+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <HAL_DMA_Init+0x186>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e007      	b.n	80027d2 <HAL_DMA_Init+0x196>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027d2:	e02f      	b.n	8002834 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d4:	f7ff fe02 	bl	80023dc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d928      	bls.n	8002834 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e246      	b.n	8002c82 <HAL_DMA_Init+0x646>
 80027f4:	40020010 	.word	0x40020010
 80027f8:	40020028 	.word	0x40020028
 80027fc:	40020040 	.word	0x40020040
 8002800:	40020058 	.word	0x40020058
 8002804:	40020070 	.word	0x40020070
 8002808:	40020088 	.word	0x40020088
 800280c:	400200a0 	.word	0x400200a0
 8002810:	400200b8 	.word	0x400200b8
 8002814:	40020410 	.word	0x40020410
 8002818:	40020428 	.word	0x40020428
 800281c:	40020440 	.word	0x40020440
 8002820:	40020458 	.word	0x40020458
 8002824:	40020470 	.word	0x40020470
 8002828:	40020488 	.word	0x40020488
 800282c:	400204a0 	.word	0x400204a0
 8002830:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1c8      	bne.n	80027d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4b83      	ldr	r3, [pc, #524]	@ (8002a5c <HAL_DMA_Init+0x420>)
 800284e:	4013      	ands	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800285a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4313      	orrs	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002898:	4b71      	ldr	r3, [pc, #452]	@ (8002a60 <HAL_DMA_Init+0x424>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b71      	ldr	r3, [pc, #452]	@ (8002a64 <HAL_DMA_Init+0x428>)
 800289e:	4013      	ands	r3, r2
 80028a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028a4:	d328      	bcc.n	80028f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b28      	cmp	r3, #40	@ 0x28
 80028ac:	d903      	bls.n	80028b6 <HAL_DMA_Init+0x27a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80028b4:	d917      	bls.n	80028e6 <HAL_DMA_Init+0x2aa>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80028bc:	d903      	bls.n	80028c6 <HAL_DMA_Init+0x28a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b42      	cmp	r3, #66	@ 0x42
 80028c4:	d90f      	bls.n	80028e6 <HAL_DMA_Init+0x2aa>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b46      	cmp	r3, #70	@ 0x46
 80028cc:	d903      	bls.n	80028d6 <HAL_DMA_Init+0x29a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b48      	cmp	r3, #72	@ 0x48
 80028d4:	d907      	bls.n	80028e6 <HAL_DMA_Init+0x2aa>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b4e      	cmp	r3, #78	@ 0x4e
 80028dc:	d905      	bls.n	80028ea <HAL_DMA_Init+0x2ae>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b52      	cmp	r3, #82	@ 0x52
 80028e4:	d801      	bhi.n	80028ea <HAL_DMA_Init+0x2ae>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_DMA_Init+0x2b0>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d117      	bne.n	8002952 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f002 fb3f 	bl	8004fb8 <DMA_CheckFifoParam>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	@ 0x40
 8002944:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e197      	b.n	8002c82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f002 fa7a 	bl	8004e54 <DMA_CalcBaseAndBitshift>
 8002960:	4603      	mov	r3, r0
 8002962:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	223f      	movs	r2, #63	@ 0x3f
 800296e:	409a      	lsls	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e0cd      	b.n	8002b12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a68 <HAL_DMA_Init+0x42c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a39      	ldr	r2, [pc, #228]	@ (8002a6c <HAL_DMA_Init+0x430>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a38      	ldr	r2, [pc, #224]	@ (8002a70 <HAL_DMA_Init+0x434>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a36      	ldr	r2, [pc, #216]	@ (8002a74 <HAL_DMA_Init+0x438>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a35      	ldr	r2, [pc, #212]	@ (8002a78 <HAL_DMA_Init+0x43c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a33      	ldr	r2, [pc, #204]	@ (8002a7c <HAL_DMA_Init+0x440>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a32      	ldr	r2, [pc, #200]	@ (8002a80 <HAL_DMA_Init+0x444>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Init+0x38a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a30      	ldr	r2, [pc, #192]	@ (8002a84 <HAL_DMA_Init+0x448>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_DMA_Init+0x38e>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_DMA_Init+0x390>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a24      	ldr	r2, [pc, #144]	@ (8002a68 <HAL_DMA_Init+0x42c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d021      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a22      	ldr	r2, [pc, #136]	@ (8002a6c <HAL_DMA_Init+0x430>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01c      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_DMA_Init+0x434>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d017      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_DMA_Init+0x438>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d012      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <HAL_DMA_Init+0x43c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00d      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_DMA_Init+0x440>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d008      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <HAL_DMA_Init+0x444>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d003      	beq.n	8002a20 <HAL_DMA_Init+0x3e4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <HAL_DMA_Init+0x448>)
 8002a1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <HAL_DMA_Init+0x44c>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d021      	beq.n	8002a8c <HAL_DMA_Init+0x450>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b80      	cmp	r3, #128	@ 0x80
 8002a4e:	d102      	bne.n	8002a56 <HAL_DMA_Init+0x41a>
 8002a50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a54:	e01b      	b.n	8002a8e <HAL_DMA_Init+0x452>
 8002a56:	2300      	movs	r3, #0
 8002a58:	e019      	b.n	8002a8e <HAL_DMA_Init+0x452>
 8002a5a:	bf00      	nop
 8002a5c:	fe10803f 	.word	0xfe10803f
 8002a60:	5c001000 	.word	0x5c001000
 8002a64:	ffff0000 	.word	0xffff0000
 8002a68:	58025408 	.word	0x58025408
 8002a6c:	5802541c 	.word	0x5802541c
 8002a70:	58025430 	.word	0x58025430
 8002a74:	58025444 	.word	0x58025444
 8002a78:	58025458 	.word	0x58025458
 8002a7c:	5802546c 	.word	0x5802546c
 8002a80:	58025480 	.word	0x58025480
 8002a84:	58025494 	.word	0x58025494
 8002a88:	fffe000f 	.word	0xfffe000f
 8002a8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002aa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002abc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c8c <HAL_DMA_Init+0x650>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_DMA_Init+0x654>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f002 f9b5 	bl	8004e54 <DMA_CalcBaseAndBitshift>
 8002aea:	4603      	mov	r3, r0
 8002aec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2201      	movs	r2, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e008      	b.n	8002b12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2240      	movs	r2, #64	@ 0x40
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0b7      	b.n	8002c82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_DMA_Init+0x658>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d072      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5d      	ldr	r2, [pc, #372]	@ (8002c98 <HAL_DMA_Init+0x65c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d06d      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c9c <HAL_DMA_Init+0x660>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d068      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca0 <HAL_DMA_Init+0x664>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d063      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a59      	ldr	r2, [pc, #356]	@ (8002ca4 <HAL_DMA_Init+0x668>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a57      	ldr	r2, [pc, #348]	@ (8002ca8 <HAL_DMA_Init+0x66c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d059      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_DMA_Init+0x670>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d054      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a54      	ldr	r2, [pc, #336]	@ (8002cb0 <HAL_DMA_Init+0x674>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04f      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a53      	ldr	r2, [pc, #332]	@ (8002cb4 <HAL_DMA_Init+0x678>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a51      	ldr	r2, [pc, #324]	@ (8002cb8 <HAL_DMA_Init+0x67c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a50      	ldr	r2, [pc, #320]	@ (8002cbc <HAL_DMA_Init+0x680>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4e      	ldr	r2, [pc, #312]	@ (8002cc0 <HAL_DMA_Init+0x684>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc4 <HAL_DMA_Init+0x688>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc8 <HAL_DMA_Init+0x68c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_DMA_Init+0x690>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a48      	ldr	r2, [pc, #288]	@ (8002cd0 <HAL_DMA_Init+0x694>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	@ (8002cd4 <HAL_DMA_Init+0x698>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a45      	ldr	r2, [pc, #276]	@ (8002cd8 <HAL_DMA_Init+0x69c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a44      	ldr	r2, [pc, #272]	@ (8002cdc <HAL_DMA_Init+0x6a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a42      	ldr	r2, [pc, #264]	@ (8002ce0 <HAL_DMA_Init+0x6a4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a41      	ldr	r2, [pc, #260]	@ (8002ce4 <HAL_DMA_Init+0x6a8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ce8 <HAL_DMA_Init+0x6ac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cec <HAL_DMA_Init+0x6b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_Init+0x5c6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf0 <HAL_DMA_Init+0x6b4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_Init+0x5ca>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_DMA_Init+0x5cc>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d032      	beq.n	8002c72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f002 fa4f 	bl	80050b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b80      	cmp	r3, #128	@ 0x80
 8002c18:	d102      	bne.n	8002c20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <HAL_DMA_Init+0x624>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d80c      	bhi.n	8002c60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f002 facc 	bl	80051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	e008      	b.n	8002c72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	a7fdabf8 	.word	0xa7fdabf8
 8002c90:	cccccccd 	.word	0xcccccccd
 8002c94:	40020010 	.word	0x40020010
 8002c98:	40020028 	.word	0x40020028
 8002c9c:	40020040 	.word	0x40020040
 8002ca0:	40020058 	.word	0x40020058
 8002ca4:	40020070 	.word	0x40020070
 8002ca8:	40020088 	.word	0x40020088
 8002cac:	400200a0 	.word	0x400200a0
 8002cb0:	400200b8 	.word	0x400200b8
 8002cb4:	40020410 	.word	0x40020410
 8002cb8:	40020428 	.word	0x40020428
 8002cbc:	40020440 	.word	0x40020440
 8002cc0:	40020458 	.word	0x40020458
 8002cc4:	40020470 	.word	0x40020470
 8002cc8:	40020488 	.word	0x40020488
 8002ccc:	400204a0 	.word	0x400204a0
 8002cd0:	400204b8 	.word	0x400204b8
 8002cd4:	58025408 	.word	0x58025408
 8002cd8:	5802541c 	.word	0x5802541c
 8002cdc:	58025430 	.word	0x58025430
 8002ce0:	58025444 	.word	0x58025444
 8002ce4:	58025458 	.word	0x58025458
 8002ce8:	5802546c 	.word	0x5802546c
 8002cec:	58025480 	.word	0x58025480
 8002cf0:	58025494 	.word	0x58025494

08002cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e226      	b.n	800315e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_DMA_Start_IT+0x2a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e21f      	b.n	800315e <HAL_DMA_Start_IT+0x46a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	f040 820a 	bne.w	8003148 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a68      	ldr	r2, [pc, #416]	@ (8002ee8 <HAL_DMA_Start_IT+0x1f4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04a      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a66      	ldr	r2, [pc, #408]	@ (8002eec <HAL_DMA_Start_IT+0x1f8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d045      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ef0 <HAL_DMA_Start_IT+0x1fc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d040      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a63      	ldr	r2, [pc, #396]	@ (8002ef4 <HAL_DMA_Start_IT+0x200>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d03b      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a62      	ldr	r2, [pc, #392]	@ (8002ef8 <HAL_DMA_Start_IT+0x204>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d036      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a60      	ldr	r2, [pc, #384]	@ (8002efc <HAL_DMA_Start_IT+0x208>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d031      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5f      	ldr	r2, [pc, #380]	@ (8002f00 <HAL_DMA_Start_IT+0x20c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d02c      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f04 <HAL_DMA_Start_IT+0x210>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d027      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_DMA_Start_IT+0x214>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_DMA_Start_IT+0x218>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_DMA_Start_IT+0x21c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_DMA_Start_IT+0x220>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_DMA_Start_IT+0x224>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a54      	ldr	r2, [pc, #336]	@ (8002f1c <HAL_DMA_Start_IT+0x228>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a53      	ldr	r2, [pc, #332]	@ (8002f20 <HAL_DMA_Start_IT+0x22c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Start_IT+0xee>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a51      	ldr	r2, [pc, #324]	@ (8002f24 <HAL_DMA_Start_IT+0x230>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <HAL_DMA_Start_IT+0x100>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <HAL_DMA_Start_IT+0x110>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f001 fe76 	bl	8004afc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a34      	ldr	r2, [pc, #208]	@ (8002ee8 <HAL_DMA_Start_IT+0x1f4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04a      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a33      	ldr	r2, [pc, #204]	@ (8002eec <HAL_DMA_Start_IT+0x1f8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d045      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <HAL_DMA_Start_IT+0x1fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a30      	ldr	r2, [pc, #192]	@ (8002ef4 <HAL_DMA_Start_IT+0x200>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d03b      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef8 <HAL_DMA_Start_IT+0x204>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <HAL_DMA_Start_IT+0x208>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2b      	ldr	r2, [pc, #172]	@ (8002f00 <HAL_DMA_Start_IT+0x20c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02c      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f04 <HAL_DMA_Start_IT+0x210>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d027      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a28      	ldr	r2, [pc, #160]	@ (8002f08 <HAL_DMA_Start_IT+0x214>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a27      	ldr	r2, [pc, #156]	@ (8002f0c <HAL_DMA_Start_IT+0x218>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01d      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a25      	ldr	r2, [pc, #148]	@ (8002f10 <HAL_DMA_Start_IT+0x21c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <HAL_DMA_Start_IT+0x220>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	@ (8002f18 <HAL_DMA_Start_IT+0x224>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <HAL_DMA_Start_IT+0x228>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f20 <HAL_DMA_Start_IT+0x22c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x1bc>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f24 <HAL_DMA_Start_IT+0x230>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA_Start_IT+0x1c0>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_Start_IT+0x1c2>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 021e 	bic.w	r2, r3, #30
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0216 	orr.w	r2, r2, #22
 8002ecc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03e      	beq.n	8002f54 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0208 	orr.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e035      	b.n	8002f54 <HAL_DMA_Start_IT+0x260>
 8002ee8:	40020010 	.word	0x40020010
 8002eec:	40020028 	.word	0x40020028
 8002ef0:	40020040 	.word	0x40020040
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	40020070 	.word	0x40020070
 8002efc:	40020088 	.word	0x40020088
 8002f00:	400200a0 	.word	0x400200a0
 8002f04:	400200b8 	.word	0x400200b8
 8002f08:	40020410 	.word	0x40020410
 8002f0c:	40020428 	.word	0x40020428
 8002f10:	40020440 	.word	0x40020440
 8002f14:	40020458 	.word	0x40020458
 8002f18:	40020470 	.word	0x40020470
 8002f1c:	40020488 	.word	0x40020488
 8002f20:	400204a0 	.word	0x400204a0
 8002f24:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 020e 	bic.w	r2, r3, #14
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 020a 	orr.w	r2, r2, #10
 8002f3a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0204 	orr.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a83      	ldr	r2, [pc, #524]	@ (8003168 <HAL_DMA_Start_IT+0x474>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d072      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a82      	ldr	r2, [pc, #520]	@ (800316c <HAL_DMA_Start_IT+0x478>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d06d      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a80      	ldr	r2, [pc, #512]	@ (8003170 <HAL_DMA_Start_IT+0x47c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d068      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7f      	ldr	r2, [pc, #508]	@ (8003174 <HAL_DMA_Start_IT+0x480>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d063      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7d      	ldr	r2, [pc, #500]	@ (8003178 <HAL_DMA_Start_IT+0x484>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d05e      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7c      	ldr	r2, [pc, #496]	@ (800317c <HAL_DMA_Start_IT+0x488>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d059      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a7a      	ldr	r2, [pc, #488]	@ (8003180 <HAL_DMA_Start_IT+0x48c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d054      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a79      	ldr	r2, [pc, #484]	@ (8003184 <HAL_DMA_Start_IT+0x490>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04f      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a77      	ldr	r2, [pc, #476]	@ (8003188 <HAL_DMA_Start_IT+0x494>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d04a      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a76      	ldr	r2, [pc, #472]	@ (800318c <HAL_DMA_Start_IT+0x498>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d045      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a74      	ldr	r2, [pc, #464]	@ (8003190 <HAL_DMA_Start_IT+0x49c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d040      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	@ (8003194 <HAL_DMA_Start_IT+0x4a0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d03b      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a71      	ldr	r2, [pc, #452]	@ (8003198 <HAL_DMA_Start_IT+0x4a4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d036      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a70      	ldr	r2, [pc, #448]	@ (800319c <HAL_DMA_Start_IT+0x4a8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d031      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80031a0 <HAL_DMA_Start_IT+0x4ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d02c      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6d      	ldr	r2, [pc, #436]	@ (80031a4 <HAL_DMA_Start_IT+0x4b0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d027      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	@ (80031a8 <HAL_DMA_Start_IT+0x4b4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d022      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6a      	ldr	r2, [pc, #424]	@ (80031ac <HAL_DMA_Start_IT+0x4b8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d01d      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a68      	ldr	r2, [pc, #416]	@ (80031b0 <HAL_DMA_Start_IT+0x4bc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d018      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a67      	ldr	r2, [pc, #412]	@ (80031b4 <HAL_DMA_Start_IT+0x4c0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a65      	ldr	r2, [pc, #404]	@ (80031b8 <HAL_DMA_Start_IT+0x4c4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00e      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a64      	ldr	r2, [pc, #400]	@ (80031bc <HAL_DMA_Start_IT+0x4c8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a62      	ldr	r2, [pc, #392]	@ (80031c0 <HAL_DMA_Start_IT+0x4cc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_DMA_Start_IT+0x350>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a61      	ldr	r2, [pc, #388]	@ (80031c4 <HAL_DMA_Start_IT+0x4d0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Start_IT+0x354>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_DMA_Start_IT+0x356>
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01a      	beq.n	8003084 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003082:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a37      	ldr	r2, [pc, #220]	@ (8003168 <HAL_DMA_Start_IT+0x474>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d04a      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a36      	ldr	r2, [pc, #216]	@ (800316c <HAL_DMA_Start_IT+0x478>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d045      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a34      	ldr	r2, [pc, #208]	@ (8003170 <HAL_DMA_Start_IT+0x47c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d040      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a33      	ldr	r2, [pc, #204]	@ (8003174 <HAL_DMA_Start_IT+0x480>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d03b      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a31      	ldr	r2, [pc, #196]	@ (8003178 <HAL_DMA_Start_IT+0x484>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d036      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a30      	ldr	r2, [pc, #192]	@ (800317c <HAL_DMA_Start_IT+0x488>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d031      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003180 <HAL_DMA_Start_IT+0x48c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02c      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003184 <HAL_DMA_Start_IT+0x490>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d027      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <HAL_DMA_Start_IT+0x494>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2a      	ldr	r2, [pc, #168]	@ (800318c <HAL_DMA_Start_IT+0x498>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d01d      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <HAL_DMA_Start_IT+0x49c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <HAL_DMA_Start_IT+0x4a0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a25      	ldr	r2, [pc, #148]	@ (8003198 <HAL_DMA_Start_IT+0x4a4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a24      	ldr	r2, [pc, #144]	@ (800319c <HAL_DMA_Start_IT+0x4a8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <HAL_DMA_Start_IT+0x4ac>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_DMA_Start_IT+0x430>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_DMA_Start_IT+0x4b0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <HAL_DMA_Start_IT+0x442>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e012      	b.n	800315c <HAL_DMA_Start_IT+0x468>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e009      	b.n	800315c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40020010 	.word	0x40020010
 800316c:	40020028 	.word	0x40020028
 8003170:	40020040 	.word	0x40020040
 8003174:	40020058 	.word	0x40020058
 8003178:	40020070 	.word	0x40020070
 800317c:	40020088 	.word	0x40020088
 8003180:	400200a0 	.word	0x400200a0
 8003184:	400200b8 	.word	0x400200b8
 8003188:	40020410 	.word	0x40020410
 800318c:	40020428 	.word	0x40020428
 8003190:	40020440 	.word	0x40020440
 8003194:	40020458 	.word	0x40020458
 8003198:	40020470 	.word	0x40020470
 800319c:	40020488 	.word	0x40020488
 80031a0:	400204a0 	.word	0x400204a0
 80031a4:	400204b8 	.word	0x400204b8
 80031a8:	58025408 	.word	0x58025408
 80031ac:	5802541c 	.word	0x5802541c
 80031b0:	58025430 	.word	0x58025430
 80031b4:	58025444 	.word	0x58025444
 80031b8:	58025458 	.word	0x58025458
 80031bc:	5802546c 	.word	0x5802546c
 80031c0:	58025480 	.word	0x58025480
 80031c4:	58025494 	.word	0x58025494

080031c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff f904 	bl	80023dc <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e2dc      	b.n	800379a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d008      	beq.n	80031fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	@ 0x80
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e2cd      	b.n	800379a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a76      	ldr	r2, [pc, #472]	@ (80033dc <HAL_DMA_Abort+0x214>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a74      	ldr	r2, [pc, #464]	@ (80033e0 <HAL_DMA_Abort+0x218>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a73      	ldr	r2, [pc, #460]	@ (80033e4 <HAL_DMA_Abort+0x21c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a71      	ldr	r2, [pc, #452]	@ (80033e8 <HAL_DMA_Abort+0x220>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a70      	ldr	r2, [pc, #448]	@ (80033ec <HAL_DMA_Abort+0x224>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_DMA_Abort+0x228>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6d      	ldr	r2, [pc, #436]	@ (80033f4 <HAL_DMA_Abort+0x22c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6b      	ldr	r2, [pc, #428]	@ (80033f8 <HAL_DMA_Abort+0x230>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6a      	ldr	r2, [pc, #424]	@ (80033fc <HAL_DMA_Abort+0x234>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a68      	ldr	r2, [pc, #416]	@ (8003400 <HAL_DMA_Abort+0x238>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a67      	ldr	r2, [pc, #412]	@ (8003404 <HAL_DMA_Abort+0x23c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a65      	ldr	r2, [pc, #404]	@ (8003408 <HAL_DMA_Abort+0x240>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a64      	ldr	r2, [pc, #400]	@ (800340c <HAL_DMA_Abort+0x244>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a62      	ldr	r2, [pc, #392]	@ (8003410 <HAL_DMA_Abort+0x248>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a61      	ldr	r2, [pc, #388]	@ (8003414 <HAL_DMA_Abort+0x24c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort+0xd6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5f      	ldr	r2, [pc, #380]	@ (8003418 <HAL_DMA_Abort+0x250>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_Abort+0xda>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_Abort+0xdc>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 021e 	bic.w	r2, r2, #30
 80032b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e00a      	b.n	80032e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 020e 	bic.w	r2, r2, #14
 80032de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3c      	ldr	r2, [pc, #240]	@ (80033dc <HAL_DMA_Abort+0x214>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d072      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_DMA_Abort+0x218>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d06d      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a39      	ldr	r2, [pc, #228]	@ (80033e4 <HAL_DMA_Abort+0x21c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d068      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a37      	ldr	r2, [pc, #220]	@ (80033e8 <HAL_DMA_Abort+0x220>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d063      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a36      	ldr	r2, [pc, #216]	@ (80033ec <HAL_DMA_Abort+0x224>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d05e      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_DMA_Abort+0x228>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d059      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a33      	ldr	r2, [pc, #204]	@ (80033f4 <HAL_DMA_Abort+0x22c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d054      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_DMA_Abort+0x230>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d04f      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a30      	ldr	r2, [pc, #192]	@ (80033fc <HAL_DMA_Abort+0x234>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d04a      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <HAL_DMA_Abort+0x238>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d045      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2d      	ldr	r2, [pc, #180]	@ (8003404 <HAL_DMA_Abort+0x23c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d040      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_DMA_Abort+0x240>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03b      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2a      	ldr	r2, [pc, #168]	@ (800340c <HAL_DMA_Abort+0x244>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d036      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <HAL_DMA_Abort+0x248>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <HAL_DMA_Abort+0x24c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d02c      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a25      	ldr	r2, [pc, #148]	@ (8003418 <HAL_DMA_Abort+0x250>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d027      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a24      	ldr	r2, [pc, #144]	@ (800341c <HAL_DMA_Abort+0x254>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <HAL_DMA_Abort+0x258>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <HAL_DMA_Abort+0x25c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003428 <HAL_DMA_Abort+0x260>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_DMA_Abort+0x264>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003430 <HAL_DMA_Abort+0x268>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_DMA_Abort+0x26c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_Abort+0x20e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <HAL_DMA_Abort+0x270>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d132      	bne.n	800343c <HAL_DMA_Abort+0x274>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e031      	b.n	800343e <HAL_DMA_Abort+0x276>
 80033da:	bf00      	nop
 80033dc:	40020010 	.word	0x40020010
 80033e0:	40020028 	.word	0x40020028
 80033e4:	40020040 	.word	0x40020040
 80033e8:	40020058 	.word	0x40020058
 80033ec:	40020070 	.word	0x40020070
 80033f0:	40020088 	.word	0x40020088
 80033f4:	400200a0 	.word	0x400200a0
 80033f8:	400200b8 	.word	0x400200b8
 80033fc:	40020410 	.word	0x40020410
 8003400:	40020428 	.word	0x40020428
 8003404:	40020440 	.word	0x40020440
 8003408:	40020458 	.word	0x40020458
 800340c:	40020470 	.word	0x40020470
 8003410:	40020488 	.word	0x40020488
 8003414:	400204a0 	.word	0x400204a0
 8003418:	400204b8 	.word	0x400204b8
 800341c:	58025408 	.word	0x58025408
 8003420:	5802541c 	.word	0x5802541c
 8003424:	58025430 	.word	0x58025430
 8003428:	58025444 	.word	0x58025444
 800342c:	58025458 	.word	0x58025458
 8003430:	5802546c 	.word	0x5802546c
 8003434:	58025480 	.word	0x58025480
 8003438:	58025494 	.word	0x58025494
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003450:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6d      	ldr	r2, [pc, #436]	@ (800360c <HAL_DMA_Abort+0x444>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d04a      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6b      	ldr	r2, [pc, #428]	@ (8003610 <HAL_DMA_Abort+0x448>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d045      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6a      	ldr	r2, [pc, #424]	@ (8003614 <HAL_DMA_Abort+0x44c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d040      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	@ (8003618 <HAL_DMA_Abort+0x450>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d03b      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a67      	ldr	r2, [pc, #412]	@ (800361c <HAL_DMA_Abort+0x454>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d036      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	@ (8003620 <HAL_DMA_Abort+0x458>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d031      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a64      	ldr	r2, [pc, #400]	@ (8003624 <HAL_DMA_Abort+0x45c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d02c      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a62      	ldr	r2, [pc, #392]	@ (8003628 <HAL_DMA_Abort+0x460>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d027      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a61      	ldr	r2, [pc, #388]	@ (800362c <HAL_DMA_Abort+0x464>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <HAL_DMA_Abort+0x468>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003634 <HAL_DMA_Abort+0x46c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003638 <HAL_DMA_Abort+0x470>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5b      	ldr	r2, [pc, #364]	@ (800363c <HAL_DMA_Abort+0x474>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a59      	ldr	r2, [pc, #356]	@ (8003640 <HAL_DMA_Abort+0x478>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a58      	ldr	r2, [pc, #352]	@ (8003644 <HAL_DMA_Abort+0x47c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_Abort+0x32a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a56      	ldr	r2, [pc, #344]	@ (8003648 <HAL_DMA_Abort+0x480>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <HAL_DMA_Abort+0x33c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e007      	b.n	8003514 <HAL_DMA_Abort+0x34c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003514:	e013      	b.n	800353e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003516:	f7fe ff61 	bl	80023dc <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b05      	cmp	r3, #5
 8003522:	d90c      	bls.n	800353e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e12d      	b.n	800379a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <HAL_DMA_Abort+0x444>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04a      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2d      	ldr	r2, [pc, #180]	@ (8003610 <HAL_DMA_Abort+0x448>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d045      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2c      	ldr	r2, [pc, #176]	@ (8003614 <HAL_DMA_Abort+0x44c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2a      	ldr	r2, [pc, #168]	@ (8003618 <HAL_DMA_Abort+0x450>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a29      	ldr	r2, [pc, #164]	@ (800361c <HAL_DMA_Abort+0x454>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a27      	ldr	r2, [pc, #156]	@ (8003620 <HAL_DMA_Abort+0x458>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a26      	ldr	r2, [pc, #152]	@ (8003624 <HAL_DMA_Abort+0x45c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a24      	ldr	r2, [pc, #144]	@ (8003628 <HAL_DMA_Abort+0x460>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a23      	ldr	r2, [pc, #140]	@ (800362c <HAL_DMA_Abort+0x464>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a21      	ldr	r2, [pc, #132]	@ (8003630 <HAL_DMA_Abort+0x468>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a20      	ldr	r2, [pc, #128]	@ (8003634 <HAL_DMA_Abort+0x46c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <HAL_DMA_Abort+0x470>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1d      	ldr	r2, [pc, #116]	@ (800363c <HAL_DMA_Abort+0x474>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <HAL_DMA_Abort+0x478>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1a      	ldr	r2, [pc, #104]	@ (8003644 <HAL_DMA_Abort+0x47c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort+0x422>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a18      	ldr	r2, [pc, #96]	@ (8003648 <HAL_DMA_Abort+0x480>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_Abort+0x426>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_DMA_Abort+0x428>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02b      	beq.n	800364c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	223f      	movs	r2, #63	@ 0x3f
 8003604:	409a      	lsls	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e02a      	b.n	8003662 <HAL_DMA_Abort+0x49a>
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2201      	movs	r2, #1
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4f      	ldr	r2, [pc, #316]	@ (80037a4 <HAL_DMA_Abort+0x5dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d072      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <HAL_DMA_Abort+0x5e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d06d      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_DMA_Abort+0x5e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d068      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4a      	ldr	r2, [pc, #296]	@ (80037b0 <HAL_DMA_Abort+0x5e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d063      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a49      	ldr	r2, [pc, #292]	@ (80037b4 <HAL_DMA_Abort+0x5ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d05e      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a47      	ldr	r2, [pc, #284]	@ (80037b8 <HAL_DMA_Abort+0x5f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d059      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a46      	ldr	r2, [pc, #280]	@ (80037bc <HAL_DMA_Abort+0x5f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d054      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a44      	ldr	r2, [pc, #272]	@ (80037c0 <HAL_DMA_Abort+0x5f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d04f      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a43      	ldr	r2, [pc, #268]	@ (80037c4 <HAL_DMA_Abort+0x5fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a41      	ldr	r2, [pc, #260]	@ (80037c8 <HAL_DMA_Abort+0x600>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a40      	ldr	r2, [pc, #256]	@ (80037cc <HAL_DMA_Abort+0x604>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3e      	ldr	r2, [pc, #248]	@ (80037d0 <HAL_DMA_Abort+0x608>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3d      	ldr	r2, [pc, #244]	@ (80037d4 <HAL_DMA_Abort+0x60c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a3b      	ldr	r2, [pc, #236]	@ (80037d8 <HAL_DMA_Abort+0x610>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a3a      	ldr	r2, [pc, #232]	@ (80037dc <HAL_DMA_Abort+0x614>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a38      	ldr	r2, [pc, #224]	@ (80037e0 <HAL_DMA_Abort+0x618>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a37      	ldr	r2, [pc, #220]	@ (80037e4 <HAL_DMA_Abort+0x61c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a35      	ldr	r2, [pc, #212]	@ (80037e8 <HAL_DMA_Abort+0x620>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a34      	ldr	r2, [pc, #208]	@ (80037ec <HAL_DMA_Abort+0x624>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a32      	ldr	r2, [pc, #200]	@ (80037f0 <HAL_DMA_Abort+0x628>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a31      	ldr	r2, [pc, #196]	@ (80037f4 <HAL_DMA_Abort+0x62c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <HAL_DMA_Abort+0x630>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <HAL_DMA_Abort+0x634>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_Abort+0x58a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2c      	ldr	r2, [pc, #176]	@ (8003800 <HAL_DMA_Abort+0x638>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_DMA_Abort+0x58e>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_DMA_Abort+0x590>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003764:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800377c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003786:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40020010 	.word	0x40020010
 80037a8:	40020028 	.word	0x40020028
 80037ac:	40020040 	.word	0x40020040
 80037b0:	40020058 	.word	0x40020058
 80037b4:	40020070 	.word	0x40020070
 80037b8:	40020088 	.word	0x40020088
 80037bc:	400200a0 	.word	0x400200a0
 80037c0:	400200b8 	.word	0x400200b8
 80037c4:	40020410 	.word	0x40020410
 80037c8:	40020428 	.word	0x40020428
 80037cc:	40020440 	.word	0x40020440
 80037d0:	40020458 	.word	0x40020458
 80037d4:	40020470 	.word	0x40020470
 80037d8:	40020488 	.word	0x40020488
 80037dc:	400204a0 	.word	0x400204a0
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494

08003804 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e237      	b.n	8003c86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d004      	beq.n	800382c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e22c      	b.n	8003c86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a5c      	ldr	r2, [pc, #368]	@ (80039a4 <HAL_DMA_Abort_IT+0x1a0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04a      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5b      	ldr	r2, [pc, #364]	@ (80039a8 <HAL_DMA_Abort_IT+0x1a4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d045      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a59      	ldr	r2, [pc, #356]	@ (80039ac <HAL_DMA_Abort_IT+0x1a8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a58      	ldr	r2, [pc, #352]	@ (80039b0 <HAL_DMA_Abort_IT+0x1ac>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a56      	ldr	r2, [pc, #344]	@ (80039b4 <HAL_DMA_Abort_IT+0x1b0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d036      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a55      	ldr	r2, [pc, #340]	@ (80039b8 <HAL_DMA_Abort_IT+0x1b4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d031      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a53      	ldr	r2, [pc, #332]	@ (80039bc <HAL_DMA_Abort_IT+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_DMA_Abort_IT+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d027      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a50      	ldr	r2, [pc, #320]	@ (80039c4 <HAL_DMA_Abort_IT+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a4f      	ldr	r2, [pc, #316]	@ (80039c8 <HAL_DMA_Abort_IT+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a4d      	ldr	r2, [pc, #308]	@ (80039cc <HAL_DMA_Abort_IT+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4c      	ldr	r2, [pc, #304]	@ (80039d0 <HAL_DMA_Abort_IT+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a4a      	ldr	r2, [pc, #296]	@ (80039d4 <HAL_DMA_Abort_IT+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a49      	ldr	r2, [pc, #292]	@ (80039d8 <HAL_DMA_Abort_IT+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a47      	ldr	r2, [pc, #284]	@ (80039dc <HAL_DMA_Abort_IT+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_Abort_IT+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <HAL_DMA_Abort_IT+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA_Abort_IT+0xcc>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_DMA_Abort_IT+0xce>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8086 	beq.w	80039e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2204      	movs	r2, #4
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <HAL_DMA_Abort_IT+0x1a0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2e      	ldr	r2, [pc, #184]	@ (80039a8 <HAL_DMA_Abort_IT+0x1a4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <HAL_DMA_Abort_IT+0x1a8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2b      	ldr	r2, [pc, #172]	@ (80039b0 <HAL_DMA_Abort_IT+0x1ac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a29      	ldr	r2, [pc, #164]	@ (80039b4 <HAL_DMA_Abort_IT+0x1b0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a28      	ldr	r2, [pc, #160]	@ (80039b8 <HAL_DMA_Abort_IT+0x1b4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a26      	ldr	r2, [pc, #152]	@ (80039bc <HAL_DMA_Abort_IT+0x1b8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <HAL_DMA_Abort_IT+0x1bc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a23      	ldr	r2, [pc, #140]	@ (80039c4 <HAL_DMA_Abort_IT+0x1c0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <HAL_DMA_Abort_IT+0x1c4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a20      	ldr	r2, [pc, #128]	@ (80039cc <HAL_DMA_Abort_IT+0x1c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <HAL_DMA_Abort_IT+0x1cc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	@ (80039d4 <HAL_DMA_Abort_IT+0x1d0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1c      	ldr	r2, [pc, #112]	@ (80039d8 <HAL_DMA_Abort_IT+0x1d4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <HAL_DMA_Abort_IT+0x1d8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Abort_IT+0x17c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <HAL_DMA_Abort_IT+0x1dc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <HAL_DMA_Abort_IT+0x18e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e178      	b.n	8003c84 <HAL_DMA_Abort_IT+0x480>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e16f      	b.n	8003c84 <HAL_DMA_Abort_IT+0x480>
 80039a4:	40020010 	.word	0x40020010
 80039a8:	40020028 	.word	0x40020028
 80039ac:	40020040 	.word	0x40020040
 80039b0:	40020058 	.word	0x40020058
 80039b4:	40020070 	.word	0x40020070
 80039b8:	40020088 	.word	0x40020088
 80039bc:	400200a0 	.word	0x400200a0
 80039c0:	400200b8 	.word	0x400200b8
 80039c4:	40020410 	.word	0x40020410
 80039c8:	40020428 	.word	0x40020428
 80039cc:	40020440 	.word	0x40020440
 80039d0:	40020458 	.word	0x40020458
 80039d4:	40020470 	.word	0x40020470
 80039d8:	40020488 	.word	0x40020488
 80039dc:	400204a0 	.word	0x400204a0
 80039e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 020e 	bic.w	r2, r2, #14
 80039f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6c      	ldr	r2, [pc, #432]	@ (8003bac <HAL_DMA_Abort_IT+0x3a8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04a      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3ac>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d045      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a69      	ldr	r2, [pc, #420]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3b0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d040      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a68      	ldr	r2, [pc, #416]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3b4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03b      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a66      	ldr	r2, [pc, #408]	@ (8003bbc <HAL_DMA_Abort_IT+0x3b8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d036      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a65      	ldr	r2, [pc, #404]	@ (8003bc0 <HAL_DMA_Abort_IT+0x3bc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d031      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a63      	ldr	r2, [pc, #396]	@ (8003bc4 <HAL_DMA_Abort_IT+0x3c0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02c      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a62      	ldr	r2, [pc, #392]	@ (8003bc8 <HAL_DMA_Abort_IT+0x3c4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d027      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a60      	ldr	r2, [pc, #384]	@ (8003bcc <HAL_DMA_Abort_IT+0x3c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd0 <HAL_DMA_Abort_IT+0x3cc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d01d      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd4 <HAL_DMA_Abort_IT+0x3d0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd8 <HAL_DMA_Abort_IT+0x3d4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5a      	ldr	r2, [pc, #360]	@ (8003bdc <HAL_DMA_Abort_IT+0x3d8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a59      	ldr	r2, [pc, #356]	@ (8003be0 <HAL_DMA_Abort_IT+0x3dc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a57      	ldr	r2, [pc, #348]	@ (8003be4 <HAL_DMA_Abort_IT+0x3e0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x290>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a56      	ldr	r2, [pc, #344]	@ (8003be8 <HAL_DMA_Abort_IT+0x3e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <HAL_DMA_Abort_IT+0x2a2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e007      	b.n	8003ab6 <HAL_DMA_Abort_IT+0x2b2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3c      	ldr	r2, [pc, #240]	@ (8003bac <HAL_DMA_Abort_IT+0x3a8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d072      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3ac>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d06d      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a39      	ldr	r2, [pc, #228]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3b0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d068      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a37      	ldr	r2, [pc, #220]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3b4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d063      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a36      	ldr	r2, [pc, #216]	@ (8003bbc <HAL_DMA_Abort_IT+0x3b8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d05e      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a34      	ldr	r2, [pc, #208]	@ (8003bc0 <HAL_DMA_Abort_IT+0x3bc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d059      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <HAL_DMA_Abort_IT+0x3c0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d054      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a31      	ldr	r2, [pc, #196]	@ (8003bc8 <HAL_DMA_Abort_IT+0x3c4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04f      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <HAL_DMA_Abort_IT+0x3c8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd0 <HAL_DMA_Abort_IT+0x3cc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <HAL_DMA_Abort_IT+0x3d0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd8 <HAL_DMA_Abort_IT+0x3d4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2a      	ldr	r2, [pc, #168]	@ (8003bdc <HAL_DMA_Abort_IT+0x3d8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	@ (8003be0 <HAL_DMA_Abort_IT+0x3dc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <HAL_DMA_Abort_IT+0x3e0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_DMA_Abort_IT+0x3e4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_DMA_Abort_IT+0x3e8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_DMA_Abort_IT+0x3ec>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_DMA_Abort_IT+0x3f0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_DMA_Abort_IT+0x3f4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_DMA_Abort_IT+0x3f8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_DMA_Abort_IT+0x3fc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_DMA_Abort_IT+0x400>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x3a2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_DMA_Abort_IT+0x404>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d132      	bne.n	8003c0c <HAL_DMA_Abort_IT+0x408>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e031      	b.n	8003c0e <HAL_DMA_Abort_IT+0x40a>
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d028      	beq.n	8003c64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop

08003c90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c9c:	4b67      	ldr	r3, [pc, #412]	@ (8003e3c <HAL_DMA_IRQHandler+0x1ac>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a67      	ldr	r2, [pc, #412]	@ (8003e40 <HAL_DMA_IRQHandler+0x1b0>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e44 <HAL_DMA_IRQHandler+0x1b4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04a      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e48 <HAL_DMA_IRQHandler+0x1b8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d045      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a5c      	ldr	r2, [pc, #368]	@ (8003e4c <HAL_DMA_IRQHandler+0x1bc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e50 <HAL_DMA_IRQHandler+0x1c0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a59      	ldr	r2, [pc, #356]	@ (8003e54 <HAL_DMA_IRQHandler+0x1c4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a57      	ldr	r2, [pc, #348]	@ (8003e58 <HAL_DMA_IRQHandler+0x1c8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a56      	ldr	r2, [pc, #344]	@ (8003e5c <HAL_DMA_IRQHandler+0x1cc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02c      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a54      	ldr	r2, [pc, #336]	@ (8003e60 <HAL_DMA_IRQHandler+0x1d0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a53      	ldr	r2, [pc, #332]	@ (8003e64 <HAL_DMA_IRQHandler+0x1d4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a51      	ldr	r2, [pc, #324]	@ (8003e68 <HAL_DMA_IRQHandler+0x1d8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a50      	ldr	r2, [pc, #320]	@ (8003e6c <HAL_DMA_IRQHandler+0x1dc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a4e      	ldr	r2, [pc, #312]	@ (8003e70 <HAL_DMA_IRQHandler+0x1e0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e74 <HAL_DMA_IRQHandler+0x1e4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <HAL_DMA_IRQHandler+0x1e8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_DMA_IRQHandler+0x1ec>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xd2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a48      	ldr	r2, [pc, #288]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_IRQHandler+0xd6>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_IRQHandler+0xd8>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 842b 	beq.w	80045c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a2 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2e      	ldr	r2, [pc, #184]	@ (8003e44 <HAL_DMA_IRQHandler+0x1b4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d04a      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2d      	ldr	r2, [pc, #180]	@ (8003e48 <HAL_DMA_IRQHandler+0x1b8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d045      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e4c <HAL_DMA_IRQHandler+0x1bc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d040      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <HAL_DMA_IRQHandler+0x1c0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d03b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a28      	ldr	r2, [pc, #160]	@ (8003e54 <HAL_DMA_IRQHandler+0x1c4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d036      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a27      	ldr	r2, [pc, #156]	@ (8003e58 <HAL_DMA_IRQHandler+0x1c8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a25      	ldr	r2, [pc, #148]	@ (8003e5c <HAL_DMA_IRQHandler+0x1cc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d02c      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <HAL_DMA_IRQHandler+0x1d0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d027      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	@ (8003e64 <HAL_DMA_IRQHandler+0x1d4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d022      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <HAL_DMA_IRQHandler+0x1d8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d01d      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1f      	ldr	r2, [pc, #124]	@ (8003e6c <HAL_DMA_IRQHandler+0x1dc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e70 <HAL_DMA_IRQHandler+0x1e0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <HAL_DMA_IRQHandler+0x1e4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e78 <HAL_DMA_IRQHandler+0x1e8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <HAL_DMA_IRQHandler+0x1ec>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x194>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d12f      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x1f4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e02e      	b.n	8003e98 <HAL_DMA_IRQHandler+0x208>
 8003e3a:	bf00      	nop
 8003e3c:	24000004 	.word	0x24000004
 8003e40:	1b4e81b5 	.word	0x1b4e81b5
 8003e44:	40020010 	.word	0x40020010
 8003e48:	40020028 	.word	0x40020028
 8003e4c:	40020040 	.word	0x40020040
 8003e50:	40020058 	.word	0x40020058
 8003e54:	40020070 	.word	0x40020070
 8003e58:	40020088 	.word	0x40020088
 8003e5c:	400200a0 	.word	0x400200a0
 8003e60:	400200b8 	.word	0x400200b8
 8003e64:	40020410 	.word	0x40020410
 8003e68:	40020428 	.word	0x40020428
 8003e6c:	40020440 	.word	0x40020440
 8003e70:	40020458 	.word	0x40020458
 8003e74:	40020470 	.word	0x40020470
 8003e78:	40020488 	.word	0x40020488
 8003e7c:	400204a0 	.word	0x400204a0
 8003e80:	400204b8 	.word	0x400204b8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d06e      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a69      	ldr	r2, [pc, #420]	@ (8004088 <HAL_DMA_IRQHandler+0x3f8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a67      	ldr	r2, [pc, #412]	@ (800408c <HAL_DMA_IRQHandler+0x3fc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a66      	ldr	r2, [pc, #408]	@ (8004090 <HAL_DMA_IRQHandler+0x400>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a64      	ldr	r2, [pc, #400]	@ (8004094 <HAL_DMA_IRQHandler+0x404>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a63      	ldr	r2, [pc, #396]	@ (8004098 <HAL_DMA_IRQHandler+0x408>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a61      	ldr	r2, [pc, #388]	@ (800409c <HAL_DMA_IRQHandler+0x40c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a60      	ldr	r2, [pc, #384]	@ (80040a0 <HAL_DMA_IRQHandler+0x410>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5e      	ldr	r2, [pc, #376]	@ (80040a4 <HAL_DMA_IRQHandler+0x414>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5d      	ldr	r2, [pc, #372]	@ (80040a8 <HAL_DMA_IRQHandler+0x418>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80040ac <HAL_DMA_IRQHandler+0x41c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_DMA_IRQHandler+0x420>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a58      	ldr	r2, [pc, #352]	@ (80040b4 <HAL_DMA_IRQHandler+0x424>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_DMA_IRQHandler+0x428>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a55      	ldr	r2, [pc, #340]	@ (80040bc <HAL_DMA_IRQHandler+0x42c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a54      	ldr	r2, [pc, #336]	@ (80040c0 <HAL_DMA_IRQHandler+0x430>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x2ee>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a52      	ldr	r2, [pc, #328]	@ (80040c4 <HAL_DMA_IRQHandler+0x434>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10a      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x304>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	e003      	b.n	8003f9c <HAL_DMA_IRQHandler+0x30c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	f043 0202 	orr.w	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 808f 	beq.w	80040f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004088 <HAL_DMA_IRQHandler+0x3f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800408c <HAL_DMA_IRQHandler+0x3fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a29      	ldr	r2, [pc, #164]	@ (8004090 <HAL_DMA_IRQHandler+0x400>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a27      	ldr	r2, [pc, #156]	@ (8004094 <HAL_DMA_IRQHandler+0x404>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a26      	ldr	r2, [pc, #152]	@ (8004098 <HAL_DMA_IRQHandler+0x408>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_DMA_IRQHandler+0x40c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <HAL_DMA_IRQHandler+0x410>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <HAL_DMA_IRQHandler+0x414>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a20      	ldr	r2, [pc, #128]	@ (80040a8 <HAL_DMA_IRQHandler+0x418>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_DMA_IRQHandler+0x41c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <HAL_DMA_IRQHandler+0x420>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_DMA_IRQHandler+0x424>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1a      	ldr	r2, [pc, #104]	@ (80040b8 <HAL_DMA_IRQHandler+0x428>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <HAL_DMA_IRQHandler+0x42c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_DMA_IRQHandler+0x430>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_IRQHandler+0x3e2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_DMA_IRQHandler+0x434>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d12a      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x438>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e023      	b.n	80040d0 <HAL_DMA_IRQHandler+0x440>
 8004088:	40020010 	.word	0x40020010
 800408c:	40020028 	.word	0x40020028
 8004090:	40020040 	.word	0x40020040
 8004094:	40020058 	.word	0x40020058
 8004098:	40020070 	.word	0x40020070
 800409c:	40020088 	.word	0x40020088
 80040a0:	400200a0 	.word	0x400200a0
 80040a4:	400200b8 	.word	0x400200b8
 80040a8:	40020410 	.word	0x40020410
 80040ac:	40020428 	.word	0x40020428
 80040b0:	40020440 	.word	0x40020440
 80040b4:	40020458 	.word	0x40020458
 80040b8:	40020470 	.word	0x40020470
 80040bc:	40020488 	.word	0x40020488
 80040c0:	400204a0 	.word	0x400204a0
 80040c4:	400204b8 	.word	0x400204b8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2204      	movs	r2, #4
 80040de:	409a      	lsls	r2, r3
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f043 0204 	orr.w	r2, r3, #4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a6 	beq.w	8004252 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a85      	ldr	r2, [pc, #532]	@ (8004320 <HAL_DMA_IRQHandler+0x690>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d04a      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a83      	ldr	r2, [pc, #524]	@ (8004324 <HAL_DMA_IRQHandler+0x694>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d045      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a82      	ldr	r2, [pc, #520]	@ (8004328 <HAL_DMA_IRQHandler+0x698>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d040      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a80      	ldr	r2, [pc, #512]	@ (800432c <HAL_DMA_IRQHandler+0x69c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d03b      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7f      	ldr	r2, [pc, #508]	@ (8004330 <HAL_DMA_IRQHandler+0x6a0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d036      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7d      	ldr	r2, [pc, #500]	@ (8004334 <HAL_DMA_IRQHandler+0x6a4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d031      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7c      	ldr	r2, [pc, #496]	@ (8004338 <HAL_DMA_IRQHandler+0x6a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d02c      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7a      	ldr	r2, [pc, #488]	@ (800433c <HAL_DMA_IRQHandler+0x6ac>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d027      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a79      	ldr	r2, [pc, #484]	@ (8004340 <HAL_DMA_IRQHandler+0x6b0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a77      	ldr	r2, [pc, #476]	@ (8004344 <HAL_DMA_IRQHandler+0x6b4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a76      	ldr	r2, [pc, #472]	@ (8004348 <HAL_DMA_IRQHandler+0x6b8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a74      	ldr	r2, [pc, #464]	@ (800434c <HAL_DMA_IRQHandler+0x6bc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a73      	ldr	r2, [pc, #460]	@ (8004350 <HAL_DMA_IRQHandler+0x6c0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a71      	ldr	r2, [pc, #452]	@ (8004354 <HAL_DMA_IRQHandler+0x6c4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a70      	ldr	r2, [pc, #448]	@ (8004358 <HAL_DMA_IRQHandler+0x6c8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x516>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	@ (800435c <HAL_DMA_IRQHandler+0x6cc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10a      	bne.n	80041bc <HAL_DMA_IRQHandler+0x52c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e009      	b.n	80041d0 <HAL_DMA_IRQHandler+0x540>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03e      	beq.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2210      	movs	r2, #16
 80041de:	409a      	lsls	r2, r3
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d024      	beq.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
 8004210:	e01f      	b.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01b      	beq.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	e016      	b.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2220      	movs	r2, #32
 800425c:	409a      	lsls	r2, r3
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8110 	beq.w	8004488 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2c      	ldr	r2, [pc, #176]	@ (8004320 <HAL_DMA_IRQHandler+0x690>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d04a      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <HAL_DMA_IRQHandler+0x694>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d045      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a29      	ldr	r2, [pc, #164]	@ (8004328 <HAL_DMA_IRQHandler+0x698>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d040      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a28      	ldr	r2, [pc, #160]	@ (800432c <HAL_DMA_IRQHandler+0x69c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d03b      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <HAL_DMA_IRQHandler+0x6a0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d036      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a25      	ldr	r2, [pc, #148]	@ (8004334 <HAL_DMA_IRQHandler+0x6a4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d031      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a23      	ldr	r2, [pc, #140]	@ (8004338 <HAL_DMA_IRQHandler+0x6a8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02c      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_DMA_IRQHandler+0x6ac>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d027      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a20      	ldr	r2, [pc, #128]	@ (8004340 <HAL_DMA_IRQHandler+0x6b0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_DMA_IRQHandler+0x6b4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004348 <HAL_DMA_IRQHandler+0x6b8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_DMA_IRQHandler+0x6bc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004350 <HAL_DMA_IRQHandler+0x6c0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <HAL_DMA_IRQHandler+0x6c4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a17      	ldr	r2, [pc, #92]	@ (8004358 <HAL_DMA_IRQHandler+0x6c8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_DMA_IRQHandler+0x678>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a16      	ldr	r2, [pc, #88]	@ (800435c <HAL_DMA_IRQHandler+0x6cc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d12b      	bne.n	8004360 <HAL_DMA_IRQHandler+0x6d0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e02a      	b.n	8004374 <HAL_DMA_IRQHandler+0x6e4>
 800431e:	bf00      	nop
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8087 	beq.w	8004488 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2220      	movs	r2, #32
 8004384:	409a      	lsls	r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b04      	cmp	r3, #4
 8004394:	d139      	bne.n	800440a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0216 	bic.w	r2, r2, #22
 80043a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <HAL_DMA_IRQHandler+0x736>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0208 	bic.w	r2, r2, #8
 80043d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	223f      	movs	r2, #63	@ 0x3f
 80043e0:	409a      	lsls	r2, r3
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 834a 	beq.w	8004a94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
          }
          return;
 8004408:	e344      	b.n	8004a94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02c      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e027      	b.n	8004488 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e01e      	b.n	8004488 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10f      	bne.n	8004478 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0210 	bic.w	r2, r2, #16
 8004466:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8306 	beq.w	8004a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8088 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2204      	movs	r2, #4
 80044a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7a      	ldr	r2, [pc, #488]	@ (8004698 <HAL_DMA_IRQHandler+0xa08>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d04a      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a79      	ldr	r2, [pc, #484]	@ (800469c <HAL_DMA_IRQHandler+0xa0c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d045      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <HAL_DMA_IRQHandler+0xa10>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d040      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a76      	ldr	r2, [pc, #472]	@ (80046a4 <HAL_DMA_IRQHandler+0xa14>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d03b      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	@ (80046a8 <HAL_DMA_IRQHandler+0xa18>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d036      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	@ (80046ac <HAL_DMA_IRQHandler+0xa1c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d031      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a71      	ldr	r2, [pc, #452]	@ (80046b0 <HAL_DMA_IRQHandler+0xa20>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02c      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a70      	ldr	r2, [pc, #448]	@ (80046b4 <HAL_DMA_IRQHandler+0xa24>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d027      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <HAL_DMA_IRQHandler+0xa28>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d022      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	@ (80046bc <HAL_DMA_IRQHandler+0xa2c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d01d      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_DMA_IRQHandler+0xa30>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d018      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6a      	ldr	r2, [pc, #424]	@ (80046c4 <HAL_DMA_IRQHandler+0xa34>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	@ (80046c8 <HAL_DMA_IRQHandler+0xa38>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a67      	ldr	r2, [pc, #412]	@ (80046cc <HAL_DMA_IRQHandler+0xa3c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <HAL_DMA_IRQHandler+0xa40>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_DMA_IRQHandler+0x8b8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a64      	ldr	r2, [pc, #400]	@ (80046d4 <HAL_DMA_IRQHandler+0xa44>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d108      	bne.n	800455a <HAL_DMA_IRQHandler+0x8ca>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e007      	b.n	800456a <HAL_DMA_IRQHandler+0x8da>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004572:	429a      	cmp	r2, r3
 8004574:	d307      	bcc.n	8004586 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f2      	bne.n	800456a <HAL_DMA_IRQHandler+0x8da>
 8004584:	e000      	b.n	8004588 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004586:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800459e:	e003      	b.n	80045a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8272 	beq.w	8004a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
 80045c2:	e26c      	b.n	8004a9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a43      	ldr	r2, [pc, #268]	@ (80046d8 <HAL_DMA_IRQHandler+0xa48>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d022      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a42      	ldr	r2, [pc, #264]	@ (80046dc <HAL_DMA_IRQHandler+0xa4c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d01d      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a40      	ldr	r2, [pc, #256]	@ (80046e0 <HAL_DMA_IRQHandler+0xa50>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d018      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3f      	ldr	r2, [pc, #252]	@ (80046e4 <HAL_DMA_IRQHandler+0xa54>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3d      	ldr	r2, [pc, #244]	@ (80046e8 <HAL_DMA_IRQHandler+0xa58>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00e      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3c      	ldr	r2, [pc, #240]	@ (80046ec <HAL_DMA_IRQHandler+0xa5c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3a      	ldr	r2, [pc, #232]	@ (80046f0 <HAL_DMA_IRQHandler+0xa60>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_DMA_IRQHandler+0x984>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a39      	ldr	r2, [pc, #228]	@ (80046f4 <HAL_DMA_IRQHandler+0xa64>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <HAL_DMA_IRQHandler+0x988>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <HAL_DMA_IRQHandler+0x98a>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 823f 	beq.w	8004a9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2204      	movs	r2, #4
 8004632:	409a      	lsls	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80cd 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xb48>
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80c7 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2204      	movs	r2, #4
 8004654:	409a      	lsls	r2, r3
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d049      	beq.n	80046f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8210 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004680:	e20a      	b.n	8004a98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8206 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004694:	e200      	b.n	8004a98 <HAL_DMA_IRQHandler+0xe08>
 8004696:	bf00      	nop
 8004698:	40020010 	.word	0x40020010
 800469c:	40020028 	.word	0x40020028
 80046a0:	40020040 	.word	0x40020040
 80046a4:	40020058 	.word	0x40020058
 80046a8:	40020070 	.word	0x40020070
 80046ac:	40020088 	.word	0x40020088
 80046b0:	400200a0 	.word	0x400200a0
 80046b4:	400200b8 	.word	0x400200b8
 80046b8:	40020410 	.word	0x40020410
 80046bc:	40020428 	.word	0x40020428
 80046c0:	40020440 	.word	0x40020440
 80046c4:	40020458 	.word	0x40020458
 80046c8:	40020470 	.word	0x40020470
 80046cc:	40020488 	.word	0x40020488
 80046d0:	400204a0 	.word	0x400204a0
 80046d4:	400204b8 	.word	0x400204b8
 80046d8:	58025408 	.word	0x58025408
 80046dc:	5802541c 	.word	0x5802541c
 80046e0:	58025430 	.word	0x58025430
 80046e4:	58025444 	.word	0x58025444
 80046e8:	58025458 	.word	0x58025458
 80046ec:	5802546c 	.word	0x5802546c
 80046f0:	58025480 	.word	0x58025480
 80046f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d160      	bne.n	80047c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7f      	ldr	r2, [pc, #508]	@ (8004904 <HAL_DMA_IRQHandler+0xc74>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04a      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a7d      	ldr	r2, [pc, #500]	@ (8004908 <HAL_DMA_IRQHandler+0xc78>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d045      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_DMA_IRQHandler+0xc7c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d040      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7a      	ldr	r2, [pc, #488]	@ (8004910 <HAL_DMA_IRQHandler+0xc80>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d03b      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a79      	ldr	r2, [pc, #484]	@ (8004914 <HAL_DMA_IRQHandler+0xc84>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d036      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a77      	ldr	r2, [pc, #476]	@ (8004918 <HAL_DMA_IRQHandler+0xc88>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d031      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a76      	ldr	r2, [pc, #472]	@ (800491c <HAL_DMA_IRQHandler+0xc8c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d02c      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a74      	ldr	r2, [pc, #464]	@ (8004920 <HAL_DMA_IRQHandler+0xc90>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d027      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a73      	ldr	r2, [pc, #460]	@ (8004924 <HAL_DMA_IRQHandler+0xc94>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a71      	ldr	r2, [pc, #452]	@ (8004928 <HAL_DMA_IRQHandler+0xc98>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a70      	ldr	r2, [pc, #448]	@ (800492c <HAL_DMA_IRQHandler+0xc9c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_DMA_IRQHandler+0xca0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6d      	ldr	r2, [pc, #436]	@ (8004934 <HAL_DMA_IRQHandler+0xca4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6b      	ldr	r2, [pc, #428]	@ (8004938 <HAL_DMA_IRQHandler+0xca8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <HAL_DMA_IRQHandler+0xcac>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xb12>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a68      	ldr	r2, [pc, #416]	@ (8004940 <HAL_DMA_IRQHandler+0xcb0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <HAL_DMA_IRQHandler+0xb24>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0208 	bic.w	r2, r2, #8
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e007      	b.n	80047c4 <HAL_DMA_IRQHandler+0xb34>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8165 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d6:	e15f      	b.n	8004a98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2202      	movs	r2, #2
 80047e2:	409a      	lsls	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80c5 	beq.w	8004978 <HAL_DMA_IRQHandler+0xce8>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80bf 	beq.w	8004978 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2202      	movs	r2, #2
 8004804:	409a      	lsls	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 813a 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004830:	e134      	b.n	8004a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 8130 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004844:	e12a      	b.n	8004a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8089 	bne.w	8004964 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_DMA_IRQHandler+0xc74>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04a      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <HAL_DMA_IRQHandler+0xc78>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d045      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a28      	ldr	r2, [pc, #160]	@ (800490c <HAL_DMA_IRQHandler+0xc7c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <HAL_DMA_IRQHandler+0xc80>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <HAL_DMA_IRQHandler+0xc84>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d036      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a23      	ldr	r2, [pc, #140]	@ (8004918 <HAL_DMA_IRQHandler+0xc88>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_DMA_IRQHandler+0xc8c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d02c      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a20      	ldr	r2, [pc, #128]	@ (8004920 <HAL_DMA_IRQHandler+0xc90>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d027      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004924 <HAL_DMA_IRQHandler+0xc94>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <HAL_DMA_IRQHandler+0xc98>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <HAL_DMA_IRQHandler+0xc9c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004930 <HAL_DMA_IRQHandler+0xca0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_DMA_IRQHandler+0xca4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a17      	ldr	r2, [pc, #92]	@ (8004938 <HAL_DMA_IRQHandler+0xca8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a16      	ldr	r2, [pc, #88]	@ (800493c <HAL_DMA_IRQHandler+0xcac>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xc62>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <HAL_DMA_IRQHandler+0xcb0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d128      	bne.n	8004944 <HAL_DMA_IRQHandler+0xcb4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0214 	bic.w	r2, r2, #20
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e027      	b.n	8004954 <HAL_DMA_IRQHandler+0xcc4>
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 020a 	bic.w	r2, r2, #10
 8004952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8097 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004976:	e091      	b.n	8004a9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2208      	movs	r2, #8
 8004982:	409a      	lsls	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8088 	beq.w	8004a9e <HAL_DMA_IRQHandler+0xe0e>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8082 	beq.w	8004a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a41      	ldr	r2, [pc, #260]	@ (8004aa4 <HAL_DMA_IRQHandler+0xe14>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d04a      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3f      	ldr	r2, [pc, #252]	@ (8004aa8 <HAL_DMA_IRQHandler+0xe18>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d045      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a3e      	ldr	r2, [pc, #248]	@ (8004aac <HAL_DMA_IRQHandler+0xe1c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d040      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ab0 <HAL_DMA_IRQHandler+0xe20>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d03b      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab4 <HAL_DMA_IRQHandler+0xe24>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d036      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a39      	ldr	r2, [pc, #228]	@ (8004ab8 <HAL_DMA_IRQHandler+0xe28>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d031      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a38      	ldr	r2, [pc, #224]	@ (8004abc <HAL_DMA_IRQHandler+0xe2c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d02c      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <HAL_DMA_IRQHandler+0xe30>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d027      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a35      	ldr	r2, [pc, #212]	@ (8004ac4 <HAL_DMA_IRQHandler+0xe34>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <HAL_DMA_IRQHandler+0xe38>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01d      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a32      	ldr	r2, [pc, #200]	@ (8004acc <HAL_DMA_IRQHandler+0xe3c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <HAL_DMA_IRQHandler+0xe40>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <HAL_DMA_IRQHandler+0xe44>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad8 <HAL_DMA_IRQHandler+0xe48>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <HAL_DMA_IRQHandler+0xe4c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xdaa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <HAL_DMA_IRQHandler+0xe50>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <HAL_DMA_IRQHandler+0xdbc>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 021c 	bic.w	r2, r2, #28
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e007      	b.n	8004a5c <HAL_DMA_IRQHandler+0xdcc>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 020e 	bic.w	r2, r2, #14
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
 8004a92:	e004      	b.n	8004a9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a94:	bf00      	nop
 8004a96:	e002      	b.n	8004a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a98:	bf00      	nop
 8004a9a:	e000      	b.n	8004a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a9e:	3728      	adds	r7, #40	@ 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40020010 	.word	0x40020010
 8004aa8:	40020028 	.word	0x40020028
 8004aac:	40020040 	.word	0x40020040
 8004ab0:	40020058 	.word	0x40020058
 8004ab4:	40020070 	.word	0x40020070
 8004ab8:	40020088 	.word	0x40020088
 8004abc:	400200a0 	.word	0x400200a0
 8004ac0:	400200b8 	.word	0x400200b8
 8004ac4:	40020410 	.word	0x40020410
 8004ac8:	40020428 	.word	0x40020428
 8004acc:	40020440 	.word	0x40020440
 8004ad0:	40020458 	.word	0x40020458
 8004ad4:	40020470 	.word	0x40020470
 8004ad8:	40020488 	.word	0x40020488
 8004adc:	400204a0 	.word	0x400204a0
 8004ae0:	400204b8 	.word	0x400204b8

08004ae4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d18 <DMA_SetConfig+0x21c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d072      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7d      	ldr	r2, [pc, #500]	@ (8004d1c <DMA_SetConfig+0x220>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d06d      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d20 <DMA_SetConfig+0x224>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d068      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7a      	ldr	r2, [pc, #488]	@ (8004d24 <DMA_SetConfig+0x228>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d063      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a79      	ldr	r2, [pc, #484]	@ (8004d28 <DMA_SetConfig+0x22c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d05e      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a77      	ldr	r2, [pc, #476]	@ (8004d2c <DMA_SetConfig+0x230>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d059      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a76      	ldr	r2, [pc, #472]	@ (8004d30 <DMA_SetConfig+0x234>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d054      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a74      	ldr	r2, [pc, #464]	@ (8004d34 <DMA_SetConfig+0x238>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04f      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a73      	ldr	r2, [pc, #460]	@ (8004d38 <DMA_SetConfig+0x23c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a71      	ldr	r2, [pc, #452]	@ (8004d3c <DMA_SetConfig+0x240>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a70      	ldr	r2, [pc, #448]	@ (8004d40 <DMA_SetConfig+0x244>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6e      	ldr	r2, [pc, #440]	@ (8004d44 <DMA_SetConfig+0x248>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6d      	ldr	r2, [pc, #436]	@ (8004d48 <DMA_SetConfig+0x24c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d4c <DMA_SetConfig+0x250>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	@ (8004d50 <DMA_SetConfig+0x254>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a68      	ldr	r2, [pc, #416]	@ (8004d54 <DMA_SetConfig+0x258>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a67      	ldr	r2, [pc, #412]	@ (8004d58 <DMA_SetConfig+0x25c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <DMA_SetConfig+0x260>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a64      	ldr	r2, [pc, #400]	@ (8004d60 <DMA_SetConfig+0x264>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a62      	ldr	r2, [pc, #392]	@ (8004d64 <DMA_SetConfig+0x268>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a61      	ldr	r2, [pc, #388]	@ (8004d68 <DMA_SetConfig+0x26c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5f      	ldr	r2, [pc, #380]	@ (8004d6c <DMA_SetConfig+0x270>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d70 <DMA_SetConfig+0x274>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a5c      	ldr	r2, [pc, #368]	@ (8004d74 <DMA_SetConfig+0x278>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <DMA_SetConfig+0x10e>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <DMA_SetConfig+0x110>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a39      	ldr	r2, [pc, #228]	@ (8004d18 <DMA_SetConfig+0x21c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d04a      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	@ (8004d1c <DMA_SetConfig+0x220>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d045      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a36      	ldr	r2, [pc, #216]	@ (8004d20 <DMA_SetConfig+0x224>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d040      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a35      	ldr	r2, [pc, #212]	@ (8004d24 <DMA_SetConfig+0x228>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d03b      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <DMA_SetConfig+0x22c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d036      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a32      	ldr	r2, [pc, #200]	@ (8004d2c <DMA_SetConfig+0x230>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d031      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	@ (8004d30 <DMA_SetConfig+0x234>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02c      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	@ (8004d34 <DMA_SetConfig+0x238>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d027      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2d      	ldr	r2, [pc, #180]	@ (8004d38 <DMA_SetConfig+0x23c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <DMA_SetConfig+0x240>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d01d      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	@ (8004d40 <DMA_SetConfig+0x244>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a29      	ldr	r2, [pc, #164]	@ (8004d44 <DMA_SetConfig+0x248>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <DMA_SetConfig+0x24c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a26      	ldr	r2, [pc, #152]	@ (8004d4c <DMA_SetConfig+0x250>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <DMA_SetConfig+0x254>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a23      	ldr	r2, [pc, #140]	@ (8004d54 <DMA_SetConfig+0x258>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <DMA_SetConfig+0x1d4>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <DMA_SetConfig+0x1d6>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d059      	beq.n	8004d8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	223f      	movs	r2, #63	@ 0x3f
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d138      	bne.n	8004d78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d16:	e086      	b.n	8004e26 <DMA_SetConfig+0x32a>
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
}
 8004d88:	e04d      	b.n	8004e26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a29      	ldr	r2, [pc, #164]	@ (8004e34 <DMA_SetConfig+0x338>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <DMA_SetConfig+0x33c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01d      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a26      	ldr	r2, [pc, #152]	@ (8004e3c <DMA_SetConfig+0x340>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a24      	ldr	r2, [pc, #144]	@ (8004e40 <DMA_SetConfig+0x344>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <DMA_SetConfig+0x348>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a21      	ldr	r2, [pc, #132]	@ (8004e48 <DMA_SetConfig+0x34c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a20      	ldr	r2, [pc, #128]	@ (8004e4c <DMA_SetConfig+0x350>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <DMA_SetConfig+0x2de>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e50 <DMA_SetConfig+0x354>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <DMA_SetConfig+0x2e2>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <DMA_SetConfig+0x2e4>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2201      	movs	r2, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	d108      	bne.n	8004e16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	e007      	b.n	8004e26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	58025408 	.word	0x58025408
 8004e38:	5802541c 	.word	0x5802541c
 8004e3c:	58025430 	.word	0x58025430
 8004e40:	58025444 	.word	0x58025444
 8004e44:	58025458 	.word	0x58025458
 8004e48:	5802546c 	.word	0x5802546c
 8004e4c:	58025480 	.word	0x58025480
 8004e50:	58025494 	.word	0x58025494

08004e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a42      	ldr	r2, [pc, #264]	@ (8004f6c <DMA_CalcBaseAndBitshift+0x118>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a41      	ldr	r2, [pc, #260]	@ (8004f70 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a3f      	ldr	r2, [pc, #252]	@ (8004f74 <DMA_CalcBaseAndBitshift+0x120>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f78 <DMA_CalcBaseAndBitshift+0x124>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3c      	ldr	r2, [pc, #240]	@ (8004f7c <DMA_CalcBaseAndBitshift+0x128>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3b      	ldr	r2, [pc, #236]	@ (8004f80 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	@ (8004f84 <DMA_CalcBaseAndBitshift+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	@ (8004f88 <DMA_CalcBaseAndBitshift+0x134>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <DMA_CalcBaseAndBitshift+0x138>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	@ (8004f94 <DMA_CalcBaseAndBitshift+0x140>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <DMA_CalcBaseAndBitshift+0x144>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	@ (8004f9c <DMA_CalcBaseAndBitshift+0x148>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <DMA_CalcBaseAndBitshift+0x150>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <DMA_CalcBaseAndBitshift+0xa8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <DMA_CalcBaseAndBitshift+0x154>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <DMA_CalcBaseAndBitshift+0xac>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <DMA_CalcBaseAndBitshift+0xae>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d024      	beq.n	8004f50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3b10      	subs	r3, #16
 8004f0e:	4a27      	ldr	r2, [pc, #156]	@ (8004fac <DMA_CalcBaseAndBitshift+0x158>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	4a24      	ldr	r2, [pc, #144]	@ (8004fb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	461a      	mov	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d908      	bls.n	8004f40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f3e:	e00d      	b.n	8004f5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f4e:	e005      	b.n	8004f5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40020010 	.word	0x40020010
 8004f70:	40020028 	.word	0x40020028
 8004f74:	40020040 	.word	0x40020040
 8004f78:	40020058 	.word	0x40020058
 8004f7c:	40020070 	.word	0x40020070
 8004f80:	40020088 	.word	0x40020088
 8004f84:	400200a0 	.word	0x400200a0
 8004f88:	400200b8 	.word	0x400200b8
 8004f8c:	40020410 	.word	0x40020410
 8004f90:	40020428 	.word	0x40020428
 8004f94:	40020440 	.word	0x40020440
 8004f98:	40020458 	.word	0x40020458
 8004f9c:	40020470 	.word	0x40020470
 8004fa0:	40020488 	.word	0x40020488
 8004fa4:	400204a0 	.word	0x400204a0
 8004fa8:	400204b8 	.word	0x400204b8
 8004fac:	aaaaaaab 	.word	0xaaaaaaab
 8004fb0:	08018ea8 	.word	0x08018ea8
 8004fb4:	fffffc00 	.word	0xfffffc00

08004fb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d120      	bne.n	800500e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d858      	bhi.n	8005086 <DMA_CheckFifoParam+0xce>
 8004fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <DMA_CheckFifoParam+0x24>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004fff 	.word	0x08004fff
 8004fe4:	08004fed 	.word	0x08004fed
 8004fe8:	08005087 	.word	0x08005087
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d048      	beq.n	800508a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ffc:	e045      	b.n	800508a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005006:	d142      	bne.n	800508e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800500c:	e03f      	b.n	800508e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005016:	d123      	bne.n	8005060 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	2b03      	cmp	r3, #3
 800501e:	d838      	bhi.n	8005092 <DMA_CheckFifoParam+0xda>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <DMA_CheckFifoParam+0x70>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005039 	.word	0x08005039
 800502c:	0800503f 	.word	0x0800503f
 8005030:	08005039 	.word	0x08005039
 8005034:	08005051 	.word	0x08005051
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
        break;
 800503c:	e030      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d025      	beq.n	8005096 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800504e:	e022      	b.n	8005096 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005058:	d11f      	bne.n	800509a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800505e:	e01c      	b.n	800509a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	2b02      	cmp	r3, #2
 8005066:	d902      	bls.n	800506e <DMA_CheckFifoParam+0xb6>
 8005068:	2b03      	cmp	r3, #3
 800506a:	d003      	beq.n	8005074 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800506c:	e018      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
        break;
 8005072:	e015      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00e      	beq.n	800509e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
    break;
 8005084:	e00b      	b.n	800509e <DMA_CheckFifoParam+0xe6>
        break;
 8005086:	bf00      	nop
 8005088:	e00a      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        break;
 800508a:	bf00      	nop
 800508c:	e008      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        break;
 800508e:	bf00      	nop
 8005090:	e006      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
        break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <DMA_CheckFifoParam+0xe8>
    break;
 800509e:	bf00      	nop
    }
  }

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a38      	ldr	r2, [pc, #224]	@ (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a36      	ldr	r2, [pc, #216]	@ (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01d      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a35      	ldr	r2, [pc, #212]	@ (80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a33      	ldr	r2, [pc, #204]	@ (80051b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a32      	ldr	r2, [pc, #200]	@ (80051b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	@ (80051bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d101      	bne.n	8005112 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	3b08      	subs	r3, #8
 8005120:	4a28      	ldr	r2, [pc, #160]	@ (80051c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a24      	ldr	r2, [pc, #144]	@ (80051cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800513c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800514c:	e024      	b.n	8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	3b10      	subs	r3, #16
 8005156:	4a1e      	ldr	r2, [pc, #120]	@ (80051d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d806      	bhi.n	8005176 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d902      	bls.n	8005176 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3308      	adds	r3, #8
 8005174:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4b18      	ldr	r3, [pc, #96]	@ (80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	461a      	mov	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005188:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	2201      	movs	r2, #1
 8005192:	409a      	lsls	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	58025408 	.word	0x58025408
 80051a8:	5802541c 	.word	0x5802541c
 80051ac:	58025430 	.word	0x58025430
 80051b0:	58025444 	.word	0x58025444
 80051b4:	58025458 	.word	0x58025458
 80051b8:	5802546c 	.word	0x5802546c
 80051bc:	58025480 	.word	0x58025480
 80051c0:	58025494 	.word	0x58025494
 80051c4:	cccccccd 	.word	0xcccccccd
 80051c8:	16009600 	.word	0x16009600
 80051cc:	58025880 	.word	0x58025880
 80051d0:	aaaaaaab 	.word	0xaaaaaaab
 80051d4:	400204b8 	.word	0x400204b8
 80051d8:	4002040f 	.word	0x4002040f
 80051dc:	10008200 	.word	0x10008200
 80051e0:	40020880 	.word	0x40020880

080051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04a      	beq.n	8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d847      	bhi.n	8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a25      	ldr	r2, [pc, #148]	@ (800529c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	@ (80052a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	@ (80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800526c:	671a      	str	r2, [r3, #112]	@ 0x70
 800526e:	e009      	b.n	8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	461a      	mov	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005282:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	2201      	movs	r2, #1
 800528a:	409a      	lsls	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	58025408 	.word	0x58025408
 80052a0:	5802541c 	.word	0x5802541c
 80052a4:	58025430 	.word	0x58025430
 80052a8:	58025444 	.word	0x58025444
 80052ac:	58025458 	.word	0x58025458
 80052b0:	5802546c 	.word	0x5802546c
 80052b4:	58025480 	.word	0x58025480
 80052b8:	58025494 	.word	0x58025494
 80052bc:	1600963f 	.word	0x1600963f
 80052c0:	58025940 	.word	0x58025940
 80052c4:	1000823f 	.word	0x1000823f
 80052c8:	40020940 	.word	0x40020940

080052cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0e3      	b.n	80054a6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2223      	movs	r2, #35	@ 0x23
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb fe51 	bl	8000f98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f6:	4b6e      	ldr	r3, [pc, #440]	@ (80054b0 <HAL_ETH_Init+0x1e4>)
 80052f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052fc:	4a6c      	ldr	r2, [pc, #432]	@ (80054b0 <HAL_ETH_Init+0x1e4>)
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005306:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <HAL_ETH_Init+0x1e4>)
 8005308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7a1b      	ldrb	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800531c:	2000      	movs	r0, #0
 800531e:	f7fd f899 	bl	8002454 <HAL_SYSCFG_ETHInterfaceSelect>
 8005322:	e003      	b.n	800532c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005324:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005328:	f7fd f894 	bl	8002454 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800532c:	4b61      	ldr	r3, [pc, #388]	@ (80054b4 <HAL_ETH_Init+0x1e8>)
 800532e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005346:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005348:	f7fd f848 	bl	80023dc <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800534e:	e011      	b.n	8005374 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005350:	f7fd f844 	bl	80023dc <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800535e:	d909      	bls.n	8005374 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2204      	movs	r2, #4
 8005364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	22e0      	movs	r2, #224	@ 0xe0
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e098      	b.n	80054a6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e4      	bne.n	8005350 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f89e 	bl	80054c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800538c:	f001 feba 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8005390:	4603      	mov	r3, r0
 8005392:	4a49      	ldr	r2, [pc, #292]	@ (80054b8 <HAL_ETH_Init+0x1ec>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	0c9a      	lsrs	r2, r3, #18
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3a01      	subs	r2, #1
 80053a0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fa81 	bl	80058ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80053b6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053c6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	22e0      	movs	r2, #224	@ 0xe0
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e05d      	b.n	80054a6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80053f6:	4b31      	ldr	r3, [pc, #196]	@ (80054bc <HAL_ETH_Init+0x1f0>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6952      	ldr	r2, [r2, #20]
 80053fe:	0051      	lsls	r1, r2, #1
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800540a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fae9 	bl	80059e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fb2f 	bl	8005a78 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	3305      	adds	r3, #5
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	4619      	mov	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	3303      	adds	r3, #3
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	061a      	lsls	r2, r3, #24
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	3302      	adds	r3, #2
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	3301      	adds	r3, #1
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005458:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005466:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005468:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <HAL_ETH_Init+0x1f4>)
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <HAL_ETH_Init+0x1f8>)
 800548e:	430b      	orrs	r3, r1
 8005490:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2210      	movs	r2, #16
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
 80054b4:	58000400 	.word	0x58000400
 80054b8:	431bde83 	.word	0x431bde83
 80054bc:	ffff8001 	.word	0xffff8001
 80054c0:	0c020060 	.word	0x0c020060
 80054c4:	0c20c000 	.word	0x0c20c000

080054c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80054e2:	f001 fe0f 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 80054e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d804      	bhi.n	80054fa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e022      	b.n	8005540 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4a16      	ldr	r2, [pc, #88]	@ (8005558 <HAL_ETH_SetMDIOClockRange+0x90>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d204      	bcs.n	800550c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e019      	b.n	8005540 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a13      	ldr	r2, [pc, #76]	@ (800555c <HAL_ETH_SetMDIOClockRange+0x94>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d915      	bls.n	8005540 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a12      	ldr	r2, [pc, #72]	@ (8005560 <HAL_ETH_SetMDIOClockRange+0x98>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d804      	bhi.n	8005526 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e00c      	b.n	8005540 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d804      	bhi.n	8005538 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e003      	b.n	8005540 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	02160ebf 	.word	0x02160ebf
 8005558:	03938700 	.word	0x03938700
 800555c:	05f5e0ff 	.word	0x05f5e0ff
 8005560:	08f0d17f 	.word	0x08f0d17f
 8005564:	0ee6b27f 	.word	0x0ee6b27f

08005568 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800557a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	7b1b      	ldrb	r3, [r3, #12]
 8005588:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800558a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	7b5b      	ldrb	r3, [r3, #13]
 8005590:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	7b9b      	ldrb	r3, [r3, #14]
 8005598:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800559a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	7bdb      	ldrb	r3, [r3, #15]
 80055a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80055a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	7c12      	ldrb	r2, [r2, #16]
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d102      	bne.n	80055b2 <ETH_SetMACConfig+0x4a>
 80055ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80055b0:	e000      	b.n	80055b4 <ETH_SetMACConfig+0x4c>
 80055b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80055b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	7c52      	ldrb	r2, [r2, #17]
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	d102      	bne.n	80055c4 <ETH_SetMACConfig+0x5c>
 80055be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055c2:	e000      	b.n	80055c6 <ETH_SetMACConfig+0x5e>
 80055c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80055c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	7c9b      	ldrb	r3, [r3, #18]
 80055cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80055ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80055d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80055da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	7f1b      	ldrb	r3, [r3, #28]
 80055e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80055e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	7f5b      	ldrb	r3, [r3, #29]
 80055e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80055ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	7f92      	ldrb	r2, [r2, #30]
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d102      	bne.n	80055fa <ETH_SetMACConfig+0x92>
 80055f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055f8:	e000      	b.n	80055fc <ETH_SetMACConfig+0x94>
 80055fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80055fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	7fdb      	ldrb	r3, [r3, #31]
 8005602:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005604:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	f892 2020 	ldrb.w	r2, [r2, #32]
 800560c:	2a00      	cmp	r2, #0
 800560e:	d102      	bne.n	8005616 <ETH_SetMACConfig+0xae>
 8005610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005614:	e000      	b.n	8005618 <ETH_SetMACConfig+0xb0>
 8005616:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005618:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800561e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005626:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005628:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b56      	ldr	r3, [pc, #344]	@ (8005794 <ETH_SetMACConfig+0x22c>)
 800563a:	4013      	ands	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	430b      	orrs	r3, r1
 8005644:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005652:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005654:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800565c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800565e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005666:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005668:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005670:	2a00      	cmp	r2, #0
 8005672:	d102      	bne.n	800567a <ETH_SetMACConfig+0x112>
 8005674:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005678:	e000      	b.n	800567c <ETH_SetMACConfig+0x114>
 800567a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800567c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	4b42      	ldr	r3, [pc, #264]	@ (8005798 <ETH_SetMACConfig+0x230>)
 800568e:	4013      	ands	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	430b      	orrs	r3, r1
 8005698:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	4b3a      	ldr	r3, [pc, #232]	@ (800579c <ETH_SetMACConfig+0x234>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	430b      	orrs	r3, r1
 80056bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80056ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d101      	bne.n	80056da <ETH_SetMACConfig+0x172>
 80056d6:	2280      	movs	r2, #128	@ 0x80
 80056d8:	e000      	b.n	80056dc <ETH_SetMACConfig+0x174>
 80056da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80056dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056ee:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80056f2:	4013      	ands	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	68f9      	ldr	r1, [r7, #12]
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005704:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800570c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571a:	f023 0103 	bic.w	r1, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	430a      	orrs	r2, r1
 8005726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005732:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800574e:	2a00      	cmp	r2, #0
 8005750:	d101      	bne.n	8005756 <ETH_SetMACConfig+0x1ee>
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	e000      	b.n	8005758 <ETH_SetMACConfig+0x1f0>
 8005756:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005758:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005760:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800576a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005778:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	430a      	orrs	r2, r1
 8005784:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	00048083 	.word	0x00048083
 8005798:	c0f88000 	.word	0xc0f88000
 800579c:	fffffef0 	.word	0xfffffef0

080057a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b38      	ldr	r3, [pc, #224]	@ (8005898 <ETH_SetDMAConfig+0xf8>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	6811      	ldr	r1, [r2, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	430b      	orrs	r3, r1
 80057c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80057d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	7b1b      	ldrb	r3, [r3, #12]
 80057d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b2c      	ldr	r3, [pc, #176]	@ (800589c <ETH_SetDMAConfig+0xfc>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	430b      	orrs	r3, r1
 80057f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	7b5b      	ldrb	r3, [r3, #13]
 80057fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005810:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005814:	4b22      	ldr	r3, [pc, #136]	@ (80058a0 <ETH_SetDMAConfig+0x100>)
 8005816:	4013      	ands	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	430b      	orrs	r3, r1
 8005820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005824:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	7d1b      	ldrb	r3, [r3, #20]
 8005830:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005832:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	7f5b      	ldrb	r3, [r3, #29]
 8005838:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005846:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <ETH_SetDMAConfig+0x104>)
 800584c:	4013      	ands	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	430b      	orrs	r3, r1
 8005856:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800585a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	7f1b      	ldrb	r3, [r3, #28]
 8005862:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005874:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <ETH_SetDMAConfig+0x108>)
 800587a:	4013      	ands	r3, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	430b      	orrs	r3, r1
 8005884:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005888:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	ffff87fd 	.word	0xffff87fd
 800589c:	ffff2ffe 	.word	0xffff2ffe
 80058a0:	fffec000 	.word	0xfffec000
 80058a4:	ffc0efef 	.word	0xffc0efef
 80058a8:	7fc0ffff 	.word	0x7fc0ffff

080058ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b0a4      	sub	sp, #144	@ 0x90
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80058ba:	2300      	movs	r3, #0
 80058bc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80058e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058ec:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005904:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005908:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800590a:	2300      	movs	r3, #0
 800590c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005910:	2300      	movs	r3, #0
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005920:	2300      	movs	r3, #0
 8005922:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005926:	2300      	movs	r3, #0
 8005928:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800592a:	2300      	movs	r3, #0
 800592c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800592e:	2300      	movs	r3, #0
 8005930:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005932:	2300      	movs	r3, #0
 8005934:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005944:	2320      	movs	r3, #32
 8005946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005956:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800595c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005960:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005962:	2300      	movs	r3, #0
 8005964:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005968:	2302      	movs	r3, #2
 800596a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800597a:	2300      	movs	r3, #0
 800597c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005986:	2300      	movs	r3, #0
 8005988:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fde6 	bl	8005568 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800599c:	2301      	movs	r3, #1
 800599e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80059a0:	2301      	movs	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80059b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80059bc:	2300      	movs	r3, #0
 80059be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80059c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80059cc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fee1 	bl	80057a0 <ETH_SetDMAConfig>
}
 80059de:	bf00      	nop
 80059e0:	3790      	adds	r7, #144	@ 0x90
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e01d      	b.n	8005a30 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68d9      	ldr	r1, [r3, #12]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4613      	mov	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	3206      	adds	r2, #6
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d9de      	bls.n	80059f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a44:	461a      	mov	r2, r3
 8005a46:	2303      	movs	r3, #3
 8005a48:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a58:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a68:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e023      	b.n	8005ace <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	440b      	add	r3, r1
 8005a96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	3212      	adds	r2, #18
 8005ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d9d8      	bls.n	8005a86 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005afa:	461a      	mov	r2, r3
 8005afc:	2303      	movs	r3, #3
 8005afe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b22:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	@ 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b42:	4b89      	ldr	r3, [pc, #548]	@ (8005d68 <HAL_GPIO_Init+0x234>)
 8005b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b46:	e194      	b.n	8005e72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8186 	beq.w	8005e6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d005      	beq.n	8005b78 <HAL_GPIO_Init+0x44>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d130      	bne.n	8005bda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	2203      	movs	r2, #3
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bae:	2201      	movs	r2, #1
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	f003 0201 	and.w	r2, r3, #1
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d017      	beq.n	8005c16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d123      	bne.n	8005c6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	08da      	lsrs	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3208      	adds	r2, #8
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	220f      	movs	r2, #15
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	08da      	lsrs	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3208      	adds	r2, #8
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	2203      	movs	r2, #3
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f003 0203 	and.w	r2, r3, #3
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80e0 	beq.w	8005e6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cac:	4b2f      	ldr	r3, [pc, #188]	@ (8005d6c <HAL_GPIO_Init+0x238>)
 8005cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d6c <HAL_GPIO_Init+0x238>)
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d6c <HAL_GPIO_Init+0x238>)
 8005cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cca:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <HAL_GPIO_Init+0x23c>)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	220f      	movs	r2, #15
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4013      	ands	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	@ (8005d74 <HAL_GPIO_Init+0x240>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d052      	beq.n	8005d9c <HAL_GPIO_Init+0x268>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <HAL_GPIO_Init+0x244>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d031      	beq.n	8005d62 <HAL_GPIO_Init+0x22e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_GPIO_Init+0x248>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02b      	beq.n	8005d5e <HAL_GPIO_Init+0x22a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <HAL_GPIO_Init+0x24c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d025      	beq.n	8005d5a <HAL_GPIO_Init+0x226>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <HAL_GPIO_Init+0x250>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01f      	beq.n	8005d56 <HAL_GPIO_Init+0x222>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	@ (8005d88 <HAL_GPIO_Init+0x254>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d019      	beq.n	8005d52 <HAL_GPIO_Init+0x21e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1a      	ldr	r2, [pc, #104]	@ (8005d8c <HAL_GPIO_Init+0x258>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_GPIO_Init+0x21a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <HAL_GPIO_Init+0x25c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00d      	beq.n	8005d4a <HAL_GPIO_Init+0x216>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <HAL_GPIO_Init+0x260>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <HAL_GPIO_Init+0x212>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <HAL_GPIO_Init+0x264>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <HAL_GPIO_Init+0x20e>
 8005d3e:	2309      	movs	r3, #9
 8005d40:	e02d      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d42:	230a      	movs	r3, #10
 8005d44:	e02b      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d46:	2308      	movs	r3, #8
 8005d48:	e029      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d4a:	2307      	movs	r3, #7
 8005d4c:	e027      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d4e:	2306      	movs	r3, #6
 8005d50:	e025      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d52:	2305      	movs	r3, #5
 8005d54:	e023      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d56:	2304      	movs	r3, #4
 8005d58:	e021      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e01f      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e01d      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e01b      	b.n	8005d9e <HAL_GPIO_Init+0x26a>
 8005d66:	bf00      	nop
 8005d68:	58000080 	.word	0x58000080
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	58000400 	.word	0x58000400
 8005d74:	58020000 	.word	0x58020000
 8005d78:	58020400 	.word	0x58020400
 8005d7c:	58020800 	.word	0x58020800
 8005d80:	58020c00 	.word	0x58020c00
 8005d84:	58021000 	.word	0x58021000
 8005d88:	58021400 	.word	0x58021400
 8005d8c:	58021800 	.word	0x58021800
 8005d90:	58021c00 	.word	0x58021c00
 8005d94:	58022000 	.word	0x58022000
 8005d98:	58022400 	.word	0x58022400
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	f002 0203 	and.w	r2, r2, #3
 8005da4:	0092      	lsls	r2, r2, #2
 8005da6:	4093      	lsls	r3, r2
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dae:	4938      	ldr	r1, [pc, #224]	@ (8005e90 <HAL_GPIO_Init+0x35c>)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	3302      	adds	r3, #2
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f47f ae63 	bne.w	8005b48 <HAL_GPIO_Init+0x14>
  }
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	3724      	adds	r7, #36	@ 0x24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	58000400 	.word	0x58000400

08005e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ea4:	787b      	ldrb	r3, [r7, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eaa:	887a      	ldrh	r2, [r7, #2]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005eb0:	e003      	b.n	8005eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005eb2:	887b      	ldrh	r3, [r7, #2]
 8005eb4:	041a      	lsls	r2, r3, #16
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	619a      	str	r2, [r3, #24]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4013      	ands	r3, r2
 8005ede:	041a      	lsls	r2, r3, #16
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	43d9      	mvns	r1, r3
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	619a      	str	r2, [r3, #24]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af02      	add	r7, sp, #8
 8005f00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0fe      	b.n	800610a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fc f965 	bl	80021f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2203      	movs	r2, #3
 8005f2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f005 fbb8 	bl	800b6a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	7c1a      	ldrb	r2, [r3, #16]
 8005f40:	f88d 2000 	strb.w	r2, [sp]
 8005f44:	3304      	adds	r3, #4
 8005f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f48:	f005 fb3c 	bl	800b5c4 <USB_CoreInit>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0d5      	b.n	800610a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 fbb0 	bl	800b6ca <USB_SetCurrentMode>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0c6      	b.n	800610a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	e04a      	b.n	8006018 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	3315      	adds	r3, #21
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	b298      	uxth	r0, r3
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	332e      	adds	r3, #46	@ 0x2e
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fc2:	7bfa      	ldrb	r2, [r7, #15]
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	331c      	adds	r3, #28
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fea:	7bfa      	ldrb	r2, [r7, #15]
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3320      	adds	r3, #32
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	3324      	adds	r3, #36	@ 0x24
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	3301      	adds	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	791b      	ldrb	r3, [r3, #4]
 800601c:	7bfa      	ldrb	r2, [r7, #15]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3af      	bcc.n	8005f82 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e044      	b.n	80060b2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800603e:	7bfa      	ldrb	r2, [r7, #15]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006054:	7bfa      	ldrb	r2, [r7, #15]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800606a:	7bfa      	ldrb	r2, [r7, #15]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006080:	7bfa      	ldrb	r2, [r7, #15]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	3301      	adds	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	791b      	ldrb	r3, [r3, #4]
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3b5      	bcc.n	8006028 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	7c1a      	ldrb	r2, [r3, #16]
 80060c4:	f88d 2000 	strb.w	r2, [sp]
 80060c8:	3304      	adds	r3, #4
 80060ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060cc:	f005 fb4a 	bl	800b764 <USB_DevInit>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e013      	b.n	800610a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7b1b      	ldrb	r3, [r3, #12]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d102      	bne.n	80060fe <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f80b 	bl	8006114 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f005 fd05 	bl	800bb12 <USB_DevDisconnect>

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006142:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <HAL_PCDEx_ActivateLPM+0x44>)
 8006144:	4313      	orrs	r3, r2
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	10000003 	.word	0x10000003

0800615c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006164:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d00a      	beq.n	8006186 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006170:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e01f      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e01d      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006186:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	490f      	ldr	r1, [pc, #60]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4313      	orrs	r3, r2
 8006194:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006196:	f7fc f921 	bl	80023dc <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800619c:	e009      	b.n	80061b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800619e:	f7fc f91d 	bl	80023dc <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061ac:	d901      	bls.n	80061b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e007      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061be:	d1ee      	bne.n	800619e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	58024800 	.word	0x58024800

080061d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80061d4:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061de:	60d3      	str	r3, [r2, #12]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	58024800 	.word	0x58024800

080061f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f000 bc48 	b.w	8006a94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8088 	beq.w	8006322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006212:	4b99      	ldr	r3, [pc, #612]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800621c:	4b96      	ldr	r3, [pc, #600]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	2b10      	cmp	r3, #16
 8006226:	d007      	beq.n	8006238 <HAL_RCC_OscConfig+0x48>
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	2b18      	cmp	r3, #24
 800622c:	d111      	bne.n	8006252 <HAL_RCC_OscConfig+0x62>
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d10c      	bne.n	8006252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b8f      	ldr	r3, [pc, #572]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d06d      	beq.n	8006320 <HAL_RCC_OscConfig+0x130>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d169      	bne.n	8006320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f000 bc21 	b.w	8006a94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800625a:	d106      	bne.n	800626a <HAL_RCC_OscConfig+0x7a>
 800625c:	4b86      	ldr	r3, [pc, #536]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a85      	ldr	r2, [pc, #532]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e02e      	b.n	80062c8 <HAL_RCC_OscConfig+0xd8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x9c>
 8006272:	4b81      	ldr	r3, [pc, #516]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a80      	ldr	r2, [pc, #512]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b7e      	ldr	r3, [pc, #504]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a7d      	ldr	r2, [pc, #500]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e01d      	b.n	80062c8 <HAL_RCC_OscConfig+0xd8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0xc0>
 8006296:	4b78      	ldr	r3, [pc, #480]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a77      	ldr	r2, [pc, #476]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800629c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4b75      	ldr	r3, [pc, #468]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a74      	ldr	r2, [pc, #464]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e00b      	b.n	80062c8 <HAL_RCC_OscConfig+0xd8>
 80062b0:	4b71      	ldr	r3, [pc, #452]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a70      	ldr	r2, [pc, #448]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a6d      	ldr	r2, [pc, #436]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d013      	beq.n	80062f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d0:	f7fc f884 	bl	80023dc <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d8:	f7fc f880 	bl	80023dc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e3d4      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ea:	4b63      	ldr	r3, [pc, #396]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0xe8>
 80062f6:	e014      	b.n	8006322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fc f870 	bl	80023dc <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006300:	f7fc f86c 	bl	80023dc <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	@ 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e3c0      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006312:	4b59      	ldr	r3, [pc, #356]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x110>
 800631e:	e000      	b.n	8006322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80ca 	beq.w	80064c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006330:	4b51      	ldr	r3, [pc, #324]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006338:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800633a:	4b4f      	ldr	r3, [pc, #316]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_RCC_OscConfig+0x166>
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b18      	cmp	r3, #24
 800634a:	d156      	bne.n	80063fa <HAL_RCC_OscConfig+0x20a>
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d151      	bne.n	80063fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006356:	4b48      	ldr	r3, [pc, #288]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCC_OscConfig+0x17e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e392      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800636e:	4b42      	ldr	r3, [pc, #264]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 0219 	bic.w	r2, r3, #25
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	493f      	ldr	r1, [pc, #252]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fc f82c 	bl	80023dc <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006388:	f7fc f828 	bl	80023dc <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e37c      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800639a:	4b37      	ldr	r3, [pc, #220]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	f7fc f849 	bl	800243c <HAL_GetREVID>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d817      	bhi.n	80063e4 <HAL_RCC_OscConfig+0x1f4>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d108      	bne.n	80063ce <HAL_RCC_OscConfig+0x1de>
 80063bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063cc:	e07a      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	031b      	lsls	r3, r3, #12
 80063dc:	4926      	ldr	r1, [pc, #152]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e2:	e06f      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e4:	4b24      	ldr	r3, [pc, #144]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	061b      	lsls	r3, r3, #24
 80063f2:	4921      	ldr	r1, [pc, #132]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f8:	e064      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d047      	beq.n	8006492 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006402:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 0219 	bic.w	r2, r3, #25
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	491a      	ldr	r1, [pc, #104]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb ffe2 	bl	80023dc <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641c:	f7fb ffde 	bl	80023dc <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e332      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800642e:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	f7fb ffff 	bl	800243c <HAL_GetREVID>
 800643e:	4603      	mov	r3, r0
 8006440:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006444:	4293      	cmp	r3, r2
 8006446:	d819      	bhi.n	800647c <HAL_RCC_OscConfig+0x28c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b40      	cmp	r3, #64	@ 0x40
 800644e:	d108      	bne.n	8006462 <HAL_RCC_OscConfig+0x272>
 8006450:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006458:	4a07      	ldr	r2, [pc, #28]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800645e:	6053      	str	r3, [r2, #4]
 8006460:	e030      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
 8006462:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	031b      	lsls	r3, r3, #12
 8006470:	4901      	ldr	r1, [pc, #4]	@ (8006478 <HAL_RCC_OscConfig+0x288>)
 8006472:	4313      	orrs	r3, r2
 8006474:	604b      	str	r3, [r1, #4]
 8006476:	e025      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
 8006478:	58024400 	.word	0x58024400
 800647c:	4b9a      	ldr	r3, [pc, #616]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	061b      	lsls	r3, r3, #24
 800648a:	4997      	ldr	r1, [pc, #604]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800648c:	4313      	orrs	r3, r2
 800648e:	604b      	str	r3, [r1, #4]
 8006490:	e018      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006492:	4b95      	ldr	r3, [pc, #596]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a94      	ldr	r2, [pc, #592]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649e:	f7fb ff9d 	bl	80023dc <HAL_GetTick>
 80064a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a6:	f7fb ff99 	bl	80023dc <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e2ed      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064b8:	4b8b      	ldr	r3, [pc, #556]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f0      	bne.n	80064a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80a9 	beq.w	8006624 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d2:	4b85      	ldr	r3, [pc, #532]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064dc:	4b82      	ldr	r3, [pc, #520]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d007      	beq.n	80064f8 <HAL_RCC_OscConfig+0x308>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b18      	cmp	r3, #24
 80064ec:	d13a      	bne.n	8006564 <HAL_RCC_OscConfig+0x374>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d135      	bne.n	8006564 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064f8:	4b7b      	ldr	r3, [pc, #492]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_OscConfig+0x320>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b80      	cmp	r3, #128	@ 0x80
 800650a:	d001      	beq.n	8006510 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e2c1      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006510:	f7fb ff94 	bl	800243c <HAL_GetREVID>
 8006514:	4603      	mov	r3, r0
 8006516:	f241 0203 	movw	r2, #4099	@ 0x1003
 800651a:	4293      	cmp	r3, r2
 800651c:	d817      	bhi.n	800654e <HAL_RCC_OscConfig+0x35e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	2b20      	cmp	r3, #32
 8006524:	d108      	bne.n	8006538 <HAL_RCC_OscConfig+0x348>
 8006526:	4b70      	ldr	r3, [pc, #448]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800652e:	4a6e      	ldr	r2, [pc, #440]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006534:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006536:	e075      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006538:	4b6b      	ldr	r3, [pc, #428]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	069b      	lsls	r3, r3, #26
 8006546:	4968      	ldr	r1, [pc, #416]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800654c:	e06a      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800654e:	4b66      	ldr	r3, [pc, #408]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	061b      	lsls	r3, r3, #24
 800655c:	4962      	ldr	r1, [pc, #392]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800655e:	4313      	orrs	r3, r2
 8006560:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006562:	e05f      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d042      	beq.n	80065f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800656c:	4b5e      	ldr	r3, [pc, #376]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5d      	ldr	r2, [pc, #372]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb ff30 	bl	80023dc <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006580:	f7fb ff2c 	bl	80023dc <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e280      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006592:	4b55      	ldr	r3, [pc, #340]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800659e:	f7fb ff4d 	bl	800243c <HAL_GetREVID>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d817      	bhi.n	80065dc <HAL_RCC_OscConfig+0x3ec>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d108      	bne.n	80065c6 <HAL_RCC_OscConfig+0x3d6>
 80065b4:	4b4c      	ldr	r3, [pc, #304]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065bc:	4a4a      	ldr	r2, [pc, #296]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065c2:	6053      	str	r3, [r2, #4]
 80065c4:	e02e      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
 80065c6:	4b48      	ldr	r3, [pc, #288]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	069b      	lsls	r3, r3, #26
 80065d4:	4944      	ldr	r1, [pc, #272]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	604b      	str	r3, [r1, #4]
 80065da:	e023      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
 80065dc:	4b42      	ldr	r3, [pc, #264]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	493f      	ldr	r1, [pc, #252]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60cb      	str	r3, [r1, #12]
 80065f0:	e018      	b.n	8006624 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065f2:	4b3d      	ldr	r3, [pc, #244]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a3c      	ldr	r2, [pc, #240]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fb feed 	bl	80023dc <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006606:	f7fb fee9 	bl	80023dc <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e23d      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006618:	4b33      	ldr	r3, [pc, #204]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d036      	beq.n	800669e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d019      	beq.n	800666c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006638:	4b2b      	ldr	r3, [pc, #172]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	4a2a      	ldr	r2, [pc, #168]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fb feca 	bl	80023dc <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fb fec6 	bl	80023dc <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e21a      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800665e:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x45c>
 800666a:	e018      	b.n	800669e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800666c:	4b1e      	ldr	r3, [pc, #120]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 800666e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006670:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006678:	f7fb feb0 	bl	80023dc <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006680:	f7fb feac 	bl	80023dc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e200      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d039      	beq.n	800671e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01c      	beq.n	80066ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066b2:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80066b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066be:	f7fb fe8d 	bl	80023dc <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c6:	f7fb fe89 	bl	80023dc <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1dd      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066d8:	4b03      	ldr	r3, [pc, #12]	@ (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4d6>
 80066e4:	e01b      	b.n	800671e <HAL_RCC_OscConfig+0x52e>
 80066e6:	bf00      	nop
 80066e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ec:	4b9b      	ldr	r3, [pc, #620]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a9a      	ldr	r2, [pc, #616]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80066f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066f8:	f7fb fe70 	bl	80023dc <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006700:	f7fb fe6c 	bl	80023dc <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e1c0      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006712:	4b92      	ldr	r3, [pc, #584]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8081 	beq.w	800682e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800672c:	4b8c      	ldr	r3, [pc, #560]	@ (8006960 <HAL_RCC_OscConfig+0x770>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a8b      	ldr	r2, [pc, #556]	@ (8006960 <HAL_RCC_OscConfig+0x770>)
 8006732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006738:	f7fb fe50 	bl	80023dc <HAL_GetTick>
 800673c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006740:	f7fb fe4c 	bl	80023dc <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	@ 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e1a0      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006752:	4b83      	ldr	r3, [pc, #524]	@ (8006960 <HAL_RCC_OscConfig+0x770>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d106      	bne.n	8006774 <HAL_RCC_OscConfig+0x584>
 8006766:	4b7d      	ldr	r3, [pc, #500]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	4a7c      	ldr	r2, [pc, #496]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6713      	str	r3, [r2, #112]	@ 0x70
 8006772:	e02d      	b.n	80067d0 <HAL_RCC_OscConfig+0x5e0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10c      	bne.n	8006796 <HAL_RCC_OscConfig+0x5a6>
 800677c:	4b77      	ldr	r3, [pc, #476]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006780:	4a76      	ldr	r2, [pc, #472]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	6713      	str	r3, [r2, #112]	@ 0x70
 8006788:	4b74      	ldr	r3, [pc, #464]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678c:	4a73      	ldr	r2, [pc, #460]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800678e:	f023 0304 	bic.w	r3, r3, #4
 8006792:	6713      	str	r3, [r2, #112]	@ 0x70
 8006794:	e01c      	b.n	80067d0 <HAL_RCC_OscConfig+0x5e0>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b05      	cmp	r3, #5
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5c8>
 800679e:	4b6f      	ldr	r3, [pc, #444]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	4a6e      	ldr	r2, [pc, #440]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067aa:	4b6c      	ldr	r3, [pc, #432]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ae:	4a6b      	ldr	r2, [pc, #428]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0x5e0>
 80067b8:	4b68      	ldr	r3, [pc, #416]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067bc:	4a67      	ldr	r2, [pc, #412]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c4:	4b65      	ldr	r3, [pc, #404]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c8:	4a64      	ldr	r2, [pc, #400]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067ca:	f023 0304 	bic.w	r3, r3, #4
 80067ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d015      	beq.n	8006804 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fb fe00 	bl	80023dc <HAL_GetTick>
 80067dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fb fdfc 	bl	80023dc <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e14e      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067f6:	4b59      	ldr	r3, [pc, #356]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0ee      	beq.n	80067e0 <HAL_RCC_OscConfig+0x5f0>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006804:	f7fb fdea 	bl	80023dc <HAL_GetTick>
 8006808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800680a:	e00a      	b.n	8006822 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680c:	f7fb fde6 	bl	80023dc <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e138      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006822:	4b4e      	ldr	r3, [pc, #312]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1ee      	bne.n	800680c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 812d 	beq.w	8006a92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006838:	4b48      	ldr	r3, [pc, #288]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006840:	2b18      	cmp	r3, #24
 8006842:	f000 80bd 	beq.w	80069c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	2b02      	cmp	r3, #2
 800684c:	f040 809e 	bne.w	800698c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006850:	4b42      	ldr	r3, [pc, #264]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a41      	ldr	r2, [pc, #260]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800685a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fb fdbe 	bl	80023dc <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006864:	f7fb fdba 	bl	80023dc <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e10e      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006876:	4b39      	ldr	r3, [pc, #228]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006882:	4b36      	ldr	r3, [pc, #216]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006886:	4b37      	ldr	r3, [pc, #220]	@ (8006964 <HAL_RCC_OscConfig+0x774>)
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006892:	0112      	lsls	r2, r2, #4
 8006894:	430a      	orrs	r2, r1
 8006896:	4931      	ldr	r1, [pc, #196]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	628b      	str	r3, [r1, #40]	@ 0x28
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a0:	3b01      	subs	r3, #1
 80068a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068aa:	3b01      	subs	r3, #1
 80068ac:	025b      	lsls	r3, r3, #9
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b6:	3b01      	subs	r3, #1
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	3b01      	subs	r3, #1
 80068c6:	061b      	lsls	r3, r3, #24
 80068c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068cc:	4923      	ldr	r1, [pc, #140]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068d2:	4b22      	ldr	r3, [pc, #136]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	4a21      	ldr	r2, [pc, #132]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068de:	4b1f      	ldr	r3, [pc, #124]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e2:	4b21      	ldr	r3, [pc, #132]	@ (8006968 <HAL_RCC_OscConfig+0x778>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80068ea:	00d2      	lsls	r2, r2, #3
 80068ec:	491b      	ldr	r1, [pc, #108]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068f2:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f6:	f023 020c 	bic.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	4917      	ldr	r1, [pc, #92]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006900:	4313      	orrs	r3, r2
 8006902:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006904:	4b15      	ldr	r3, [pc, #84]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	f023 0202 	bic.w	r2, r3, #2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006910:	4912      	ldr	r1, [pc, #72]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006916:	4b11      	ldr	r3, [pc, #68]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691a:	4a10      	ldr	r2, [pc, #64]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006922:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	4a0d      	ldr	r2, [pc, #52]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800692c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	4a07      	ldr	r2, [pc, #28]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006946:	4b05      	ldr	r3, [pc, #20]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a04      	ldr	r2, [pc, #16]	@ (800695c <HAL_RCC_OscConfig+0x76c>)
 800694c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fb fd43 	bl	80023dc <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006958:	e011      	b.n	800697e <HAL_RCC_OscConfig+0x78e>
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	58024800 	.word	0x58024800
 8006964:	fffffc0c 	.word	0xfffffc0c
 8006968:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fb fd36 	bl	80023dc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e08a      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800697e:	4b47      	ldr	r3, [pc, #284]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0x77c>
 800698a:	e082      	b.n	8006a92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698c:	4b43      	ldr	r3, [pc, #268]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a42      	ldr	r2, [pc, #264]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fb fd20 	bl	80023dc <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fb fd1c 	bl	80023dc <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e070      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069b2:	4b3a      	ldr	r3, [pc, #232]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x7b0>
 80069be:	e068      	b.n	8006a92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069c0:	4b36      	ldr	r3, [pc, #216]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069c6:	4b35      	ldr	r3, [pc, #212]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d031      	beq.n	8006a38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f003 0203 	and.w	r2, r3, #3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d12a      	bne.n	8006a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	091b      	lsrs	r3, r3, #4
 80069e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d122      	bne.n	8006a38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d11a      	bne.n	8006a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	0a5b      	lsrs	r3, r3, #9
 8006a06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d111      	bne.n	8006a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d108      	bne.n	8006a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	0e1b      	lsrs	r3, r3, #24
 8006a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d001      	beq.n	8006a3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e02b      	b.n	8006a94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a3c:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d01f      	beq.n	8006a92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a52:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	4a11      	ldr	r2, [pc, #68]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a5e:	f7fb fcbd 	bl	80023dc <HAL_GetTick>
 8006a62:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a64:	bf00      	nop
 8006a66:	f7fb fcb9 	bl	80023dc <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d0f9      	beq.n	8006a66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a76:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <HAL_RCC_OscConfig+0x8b0>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a7e:	00d2      	lsls	r2, r2, #3
 8006a80:	4906      	ldr	r1, [pc, #24]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a86:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8a:	4a04      	ldr	r2, [pc, #16]	@ (8006a9c <HAL_RCC_OscConfig+0x8ac>)
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3730      	adds	r7, #48	@ 0x30
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	ffff0007 	.word	0xffff0007

08006aa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e19c      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d910      	bls.n	8006ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b87      	ldr	r3, [pc, #540]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 020f 	bic.w	r2, r3, #15
 8006ace:	4985      	ldr	r1, [pc, #532]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad6:	4b83      	ldr	r3, [pc, #524]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e184      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d010      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d908      	bls.n	8006b16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b04:	4b78      	ldr	r3, [pc, #480]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	4975      	ldr	r1, [pc, #468]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	4b70      	ldr	r3, [pc, #448]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d908      	bls.n	8006b44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b32:	4b6d      	ldr	r3, [pc, #436]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	496a      	ldr	r1, [pc, #424]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d010      	beq.n	8006b72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	4b64      	ldr	r3, [pc, #400]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d908      	bls.n	8006b72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b60:	4b61      	ldr	r3, [pc, #388]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	495e      	ldr	r1, [pc, #376]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d010      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	4b59      	ldr	r3, [pc, #356]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d908      	bls.n	8006ba0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b8e:	4b56      	ldr	r3, [pc, #344]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4953      	ldr	r1, [pc, #332]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d908      	bls.n	8006bce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f023 020f 	bic.w	r2, r3, #15
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4947      	ldr	r1, [pc, #284]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d055      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bda:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	4940      	ldr	r1, [pc, #256]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d121      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0f6      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d107      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c0c:	4b36      	ldr	r3, [pc, #216]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d115      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0ea      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d107      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c24:	4b30      	ldr	r3, [pc, #192]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0de      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c34:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0d6      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c44:	4b28      	ldr	r3, [pc, #160]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f023 0207 	bic.w	r2, r3, #7
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4925      	ldr	r1, [pc, #148]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c56:	f7fb fbc1 	bl	80023dc <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5c:	e00a      	b.n	8006c74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c5e:	f7fb fbbd 	bl	80023dc <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e0be      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d1eb      	bne.n	8006c5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d010      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d208      	bcs.n	8006cb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f023 020f 	bic.w	r2, r3, #15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	490e      	ldr	r1, [pc, #56]	@ (8006ce8 <HAL_RCC_ClockConfig+0x244>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d214      	bcs.n	8006cec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b08      	ldr	r3, [pc, #32]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f023 020f 	bic.w	r2, r3, #15
 8006cca:	4906      	ldr	r1, [pc, #24]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <HAL_RCC_ClockConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e086      	b.n	8006df2 <HAL_RCC_ClockConfig+0x34e>
 8006ce4:	52002000 	.word	0x52002000
 8006ce8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d208      	bcs.n	8006d1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d08:	4b3c      	ldr	r3, [pc, #240]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	4939      	ldr	r1, [pc, #228]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	4b34      	ldr	r3, [pc, #208]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d208      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d36:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	492e      	ldr	r1, [pc, #184]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	4b28      	ldr	r3, [pc, #160]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d64:	4b25      	ldr	r3, [pc, #148]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	4922      	ldr	r1, [pc, #136]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d208      	bcs.n	8006da4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d92:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4917      	ldr	r1, [pc, #92]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006da4:	f000 f834 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b14      	ldr	r3, [pc, #80]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	4912      	ldr	r1, [pc, #72]	@ (8006e00 <HAL_RCC_ClockConfig+0x35c>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <HAL_RCC_ClockConfig+0x358>)
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	4a0d      	ldr	r2, [pc, #52]	@ (8006e00 <HAL_RCC_ClockConfig+0x35c>)
 8006dcc:	5cd3      	ldrb	r3, [r2, r3]
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8006e04 <HAL_RCC_ClockConfig+0x360>)
 8006dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8006e08 <HAL_RCC_ClockConfig+0x364>)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006de2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <HAL_RCC_ClockConfig+0x368>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fa fd6c 	bl	80018c4 <HAL_InitTick>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	08018e98 	.word	0x08018e98
 8006e04:	24000008 	.word	0x24000008
 8006e08:	24000004 	.word	0x24000004
 8006e0c:	2400000c 	.word	0x2400000c

08006e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	@ 0x24
 8006e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e16:	4bb3      	ldr	r3, [pc, #716]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e1e:	2b18      	cmp	r3, #24
 8006e20:	f200 8155 	bhi.w	80070ce <HAL_RCC_GetSysClockFreq+0x2be>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e91 	.word	0x08006e91
 8006e30:	080070cf 	.word	0x080070cf
 8006e34:	080070cf 	.word	0x080070cf
 8006e38:	080070cf 	.word	0x080070cf
 8006e3c:	080070cf 	.word	0x080070cf
 8006e40:	080070cf 	.word	0x080070cf
 8006e44:	080070cf 	.word	0x080070cf
 8006e48:	080070cf 	.word	0x080070cf
 8006e4c:	08006eb7 	.word	0x08006eb7
 8006e50:	080070cf 	.word	0x080070cf
 8006e54:	080070cf 	.word	0x080070cf
 8006e58:	080070cf 	.word	0x080070cf
 8006e5c:	080070cf 	.word	0x080070cf
 8006e60:	080070cf 	.word	0x080070cf
 8006e64:	080070cf 	.word	0x080070cf
 8006e68:	080070cf 	.word	0x080070cf
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	080070cf 	.word	0x080070cf
 8006e74:	080070cf 	.word	0x080070cf
 8006e78:	080070cf 	.word	0x080070cf
 8006e7c:	080070cf 	.word	0x080070cf
 8006e80:	080070cf 	.word	0x080070cf
 8006e84:	080070cf 	.word	0x080070cf
 8006e88:	080070cf 	.word	0x080070cf
 8006e8c:	08006ec3 	.word	0x08006ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e90:	4b94      	ldr	r3, [pc, #592]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e9c:	4b91      	ldr	r3, [pc, #580]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a90      	ldr	r2, [pc, #576]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006eae:	e111      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006eb2:	61bb      	str	r3, [r7, #24]
      break;
 8006eb4:	e10e      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006eb8:	61bb      	str	r3, [r7, #24]
      break;
 8006eba:	e10b      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ebe:	61bb      	str	r3, [r7, #24]
      break;
 8006ec0:	e108      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ec2:	4b88      	ldr	r3, [pc, #544]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ecc:	4b85      	ldr	r3, [pc, #532]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ed6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ed8:	4b82      	ldr	r3, [pc, #520]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ee2:	4b80      	ldr	r3, [pc, #512]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee6:	08db      	lsrs	r3, r3, #3
 8006ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80e1 	beq.w	80070c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	f000 8083 	beq.w	8007014 <HAL_RCC_GetSysClockFreq+0x204>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	f200 80a1 	bhi.w	8007058 <HAL_RCC_GetSysClockFreq+0x248>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x114>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d056      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f22:	e099      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f24:	4b6f      	ldr	r3, [pc, #444]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d02d      	beq.n	8006f8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f30:	4b6c      	ldr	r3, [pc, #432]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b62      	ldr	r3, [pc, #392]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80070f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f8a:	e087      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80070f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b51      	ldr	r3, [pc, #324]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80070f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fce:	e065      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80070fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b40      	ldr	r3, [pc, #256]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80070f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007012:	e043      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007100 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007026:	4b2f      	ldr	r3, [pc, #188]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	ed97 6a02 	vldr	s12, [r7, #8]
 800703a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80070f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800703e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007056:	e021      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007062:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80070fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706a:	4b1e      	ldr	r3, [pc, #120]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707a:	ed97 6a02 	vldr	s12, [r7, #8]
 800707e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80070f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800708e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800709a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800709c:	4b11      	ldr	r3, [pc, #68]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	0a5b      	lsrs	r3, r3, #9
 80070a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a6:	3301      	adds	r3, #1
 80070a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c0:	ee17 3a90 	vmov	r3, s15
 80070c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80070c6:	e005      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
      break;
 80070cc:	e002      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80070ce:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070d0:	61bb      	str	r3, [r7, #24]
      break;
 80070d2:	bf00      	nop
  }

  return sysclockfreq;
 80070d4:	69bb      	ldr	r3, [r7, #24]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3724      	adds	r7, #36	@ 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	46000000 	.word	0x46000000
 80070f8:	4c742400 	.word	0x4c742400
 80070fc:	4a742400 	.word	0x4a742400
 8007100:	4af42400 	.word	0x4af42400

08007104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800710a:	f7ff fe81 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 800710e:	4602      	mov	r2, r0
 8007110:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <HAL_RCC_GetHCLKFreq+0x50>)
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	490f      	ldr	r1, [pc, #60]	@ (8007158 <HAL_RCC_GetHCLKFreq+0x54>)
 800711c:	5ccb      	ldrb	r3, [r1, r3]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <HAL_RCC_GetHCLKFreq+0x50>)
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	4a09      	ldr	r2, [pc, #36]	@ (8007158 <HAL_RCC_GetHCLKFreq+0x54>)
 8007132:	5cd3      	ldrb	r3, [r2, r3]
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	fa22 f303 	lsr.w	r3, r2, r3
 800713e:	4a07      	ldr	r2, [pc, #28]	@ (800715c <HAL_RCC_GetHCLKFreq+0x58>)
 8007140:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007142:	4a07      	ldr	r2, [pc, #28]	@ (8007160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007148:	4b04      	ldr	r3, [pc, #16]	@ (800715c <HAL_RCC_GetHCLKFreq+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	58024400 	.word	0x58024400
 8007158:	08018e98 	.word	0x08018e98
 800715c:	24000008 	.word	0x24000008
 8007160:	24000004 	.word	0x24000004

08007164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007168:	f7ff ffcc 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4904      	ldr	r1, [pc, #16]	@ (800718c <HAL_RCC_GetPCLK1Freq+0x28>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	58024400 	.word	0x58024400
 800718c:	08018e98 	.word	0x08018e98

08007190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007194:	f7ff ffb6 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4904      	ldr	r1, [pc, #16]	@ (80071b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	58024400 	.word	0x58024400
 80071b8:	08018e98 	.word	0x08018e98

080071bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	223f      	movs	r2, #63	@ 0x3f
 80071ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0207 	and.w	r2, r3, #7
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80071d8:	4b17      	ldr	r3, [pc, #92]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80071e4:	4b14      	ldr	r3, [pc, #80]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 020f 	and.w	r2, r3, #15
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80071f0:	4b11      	ldr	r3, [pc, #68]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80071fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007214:	4b08      	ldr	r3, [pc, #32]	@ (8007238 <HAL_RCC_GetClockConfig+0x7c>)
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007220:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_RCC_GetClockConfig+0x80>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	58024400 	.word	0x58024400
 800723c:	52002000 	.word	0x52002000

08007240 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007244:	b0ca      	sub	sp, #296	@ 0x128
 8007246:	af00      	add	r7, sp, #0
 8007248:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007264:	2500      	movs	r5, #0
 8007266:	ea54 0305 	orrs.w	r3, r4, r5
 800726a:	d049      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007276:	d02f      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007278:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800727c:	d828      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800727e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007282:	d01a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007284:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007288:	d822      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800728e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007292:	d007      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007294:	e01c      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007296:	4bb8      	ldr	r3, [pc, #736]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	4ab7      	ldr	r2, [pc, #732]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800729c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072a2:	e01a      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	3308      	adds	r3, #8
 80072aa:	2102      	movs	r1, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fc8f 	bl	8008bd0 <RCCEx_PLL2_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072b8:	e00f      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3328      	adds	r3, #40	@ 0x28
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fd36 	bl	8008d34 <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072ce:	e004      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80072d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072e2:	4ba5      	ldr	r3, [pc, #660]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072f0:	4aa1      	ldr	r2, [pc, #644]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	ea58 0309 	orrs.w	r3, r8, r9
 8007314:	d047      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	2b04      	cmp	r3, #4
 800731e:	d82a      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007320:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	0800733d 	.word	0x0800733d
 800732c:	0800734b 	.word	0x0800734b
 8007330:	08007361 	.word	0x08007361
 8007334:	0800737f 	.word	0x0800737f
 8007338:	0800737f 	.word	0x0800737f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733c:	4b8e      	ldr	r3, [pc, #568]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	4a8d      	ldr	r2, [pc, #564]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007348:	e01a      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	3308      	adds	r3, #8
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fc3c 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800735e:	e00f      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	3328      	adds	r3, #40	@ 0x28
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fce3 	bl	8008d34 <RCCEx_PLL3_Config>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007374:	e004      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800737c:	e000      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800737e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007388:	4b7b      	ldr	r3, [pc, #492]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800738a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738c:	f023 0107 	bic.w	r1, r3, #7
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007396:	4a78      	ldr	r2, [pc, #480]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	430b      	orrs	r3, r1
 800739a:	6513      	str	r3, [r2, #80]	@ 0x50
 800739c:	e003      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80073b2:	f04f 0b00 	mov.w	fp, #0
 80073b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80073ba:	d04c      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c6:	d030      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073cc:	d829      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80073d0:	d02d      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80073d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073d4:	d825      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073d6:	2b80      	cmp	r3, #128	@ 0x80
 80073d8:	d018      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80073da:	2b80      	cmp	r3, #128	@ 0x80
 80073dc:	d821      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80073e2:	2b40      	cmp	r3, #64	@ 0x40
 80073e4:	d007      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80073e6:	e01c      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b63      	ldr	r3, [pc, #396]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ec:	4a62      	ldr	r2, [pc, #392]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80073f4:	e01c      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fa:	3308      	adds	r3, #8
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fbe6 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800740a:	e011      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	3328      	adds	r3, #40	@ 0x28
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fc8d 	bl	8008d34 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007420:	e006      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007428:	e002      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800742e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007438:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007446:	4a4c      	ldr	r2, [pc, #304]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007448:	430b      	orrs	r3, r1
 800744a:	6513      	str	r3, [r2, #80]	@ 0x50
 800744c:	e003      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007466:	2300      	movs	r3, #0
 8007468:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800746c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007470:	460b      	mov	r3, r1
 8007472:	4313      	orrs	r3, r2
 8007474:	d053      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800747e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007482:	d035      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007488:	d82e      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800748a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800748e:	d031      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007490:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007494:	d828      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800749a:	d01a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800749c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074a0:	d822      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80074a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074aa:	d007      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80074ac:	e01c      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ae:	4b32      	ldr	r3, [pc, #200]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	4a31      	ldr	r2, [pc, #196]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ba:	e01c      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	3308      	adds	r3, #8
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fb83 	bl	8008bd0 <RCCEx_PLL2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074d0:	e011      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d6:	3328      	adds	r3, #40	@ 0x28
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fc2a 	bl	8008d34 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074e6:	e006      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ee:	e002      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80074f0:	bf00      	nop
 80074f2:	e000      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80074f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007502:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800750e:	4a1a      	ldr	r2, [pc, #104]	@ (8007578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6593      	str	r3, [r2, #88]	@ 0x58
 8007514:	e003      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800752a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800752e:	2300      	movs	r3, #0
 8007530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007534:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007538:	460b      	mov	r3, r1
 800753a:	4313      	orrs	r3, r2
 800753c:	d056      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800754a:	d038      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007550:	d831      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007556:	d034      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800755c:	d82b      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800755e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007562:	d01d      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007568:	d825      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800756e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007574:	e01f      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757c:	4ba2      	ldr	r3, [pc, #648]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4aa1      	ldr	r2, [pc, #644]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007588:	e01c      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	3308      	adds	r3, #8
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f001 fb1c 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800759e:	e011      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	3328      	adds	r3, #40	@ 0x28
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fbc3 	bl	8008d34 <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b4:	e006      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075bc:	e002      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075be:	bf00      	nop
 80075c0:	e000      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80075c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075cc:	4b8e      	ldr	r3, [pc, #568]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075dc:	4a8a      	ldr	r2, [pc, #552]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075de:	430b      	orrs	r3, r1
 80075e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80075f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d03a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007612:	2b30      	cmp	r3, #48	@ 0x30
 8007614:	d01f      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007616:	2b30      	cmp	r3, #48	@ 0x30
 8007618:	d819      	bhi.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800761a:	2b20      	cmp	r3, #32
 800761c:	d00c      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800761e:	2b20      	cmp	r3, #32
 8007620:	d815      	bhi.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d019      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007626:	2b10      	cmp	r3, #16
 8007628:	d111      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762a:	4b77      	ldr	r3, [pc, #476]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	4a76      	ldr	r2, [pc, #472]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007634:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007636:	e011      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	3308      	adds	r3, #8
 800763e:	2102      	movs	r1, #2
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fac5 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800764c:	e006      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007654:	e002      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800765a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007664:	4b68      	ldr	r3, [pc, #416]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007668:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007672:	4a65      	ldr	r2, [pc, #404]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007674:	430b      	orrs	r3, r1
 8007676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007678:	e003      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800768e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007692:	2300      	movs	r3, #0
 8007694:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007698:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800769c:	460b      	mov	r3, r1
 800769e:	4313      	orrs	r3, r2
 80076a0:	d051      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ac:	d035      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80076ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076b2:	d82e      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076b8:	d031      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80076ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076be:	d828      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c4:	d01a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ca:	d822      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d007      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80076d6:	e01c      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076e4:	e01c      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ea:	3308      	adds	r3, #8
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fa6e 	bl	8008bd0 <RCCEx_PLL2_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076fa:	e011      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	3328      	adds	r3, #40	@ 0x28
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fb15 	bl	8008d34 <RCCEx_PLL3_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007710:	e006      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007718:	e002      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800771e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007728:	4b37      	ldr	r3, [pc, #220]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007736:	4a34      	ldr	r2, [pc, #208]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007738:	430b      	orrs	r3, r1
 800773a:	6513      	str	r3, [r2, #80]	@ 0x50
 800773c:	e003      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007752:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007756:	2300      	movs	r3, #0
 8007758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800775c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007760:	460b      	mov	r3, r1
 8007762:	4313      	orrs	r3, r2
 8007764:	d056      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007770:	d033      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007776:	d82c      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800777c:	d02f      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800777e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007782:	d826      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007788:	d02b      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800778a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800778e:	d820      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007794:	d012      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779a:	d81a      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d022      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a4:	d115      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	3308      	adds	r3, #8
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 fa0e 	bl	8008bd0 <RCCEx_PLL2_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077ba:	e015      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	3328      	adds	r3, #40	@ 0x28
 80077c2:	2101      	movs	r1, #1
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fab5 	bl	8008d34 <RCCEx_PLL3_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077d0:	e00a      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d8:	e006      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077da:	bf00      	nop
 80077dc:	e004      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077f0:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fe:	4a02      	ldr	r2, [pc, #8]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007800:	430b      	orrs	r3, r1
 8007802:	6513      	str	r3, [r2, #80]	@ 0x50
 8007804:	e006      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007806:	bf00      	nop
 8007808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800782a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d055      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800783c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007840:	d033      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007846:	d82c      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784c:	d02f      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	d826      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007858:	d02b      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800785a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800785e:	d820      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007864:	d012      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786a:	d81a      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d022      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007874:	d115      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	3308      	adds	r3, #8
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f001 f9a6 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800788a:	e015      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	3328      	adds	r3, #40	@ 0x28
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fa4d 	bl	8008d34 <RCCEx_PLL3_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078a0:	e00a      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078a8:	e006      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80078b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10b      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078d0:	4a9f      	ldr	r2, [pc, #636]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d2:	430b      	orrs	r3, r1
 80078d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d037      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800790a:	d00e      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800790c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007910:	d816      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791a:	d111      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4b8c      	ldr	r3, [pc, #560]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	4a8b      	ldr	r2, [pc, #556]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007928:	e00f      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	3308      	adds	r3, #8
 8007930:	2101      	movs	r1, #1
 8007932:	4618      	mov	r0, r3
 8007934:	f001 f94c 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007952:	4b7f      	ldr	r3, [pc, #508]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007956:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007960:	4a7b      	ldr	r2, [pc, #492]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007962:	430b      	orrs	r3, r1
 8007964:	6513      	str	r3, [r2, #80]	@ 0x50
 8007966:	e003      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800797c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007980:	2300      	movs	r3, #0
 8007982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800798a:	460b      	mov	r3, r1
 800798c:	4313      	orrs	r3, r2
 800798e:	d039      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007996:	2b03      	cmp	r3, #3
 8007998:	d81c      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079dd 	.word	0x080079dd
 80079a4:	080079b1 	.word	0x080079b1
 80079a8:	080079bf 	.word	0x080079bf
 80079ac:	080079dd 	.word	0x080079dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4b67      	ldr	r3, [pc, #412]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	4a66      	ldr	r2, [pc, #408]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079bc:	e00f      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2102      	movs	r1, #2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f902 	bl	8008bd0 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079d2:	e004      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80079dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ea:	f023 0103 	bic.w	r1, r3, #3
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f4:	4a56      	ldr	r2, [pc, #344]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f6:	430b      	orrs	r3, r1
 80079f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079fa:	e003      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f000 809f 	beq.w	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a26:	4b4b      	ldr	r3, [pc, #300]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a32:	f7fa fcd3 	bl	80023dc <HAL_GetTick>
 8007a36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a3c:	f7fa fcce 	bl	80023dc <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b64      	cmp	r3, #100	@ 0x64
 8007a4a:	d903      	bls.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a52:	e005      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a54:	4b3f      	ldr	r3, [pc, #252]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0ed      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d179      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a68:	4b39      	ldr	r3, [pc, #228]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a74:	4053      	eors	r3, r2
 8007a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d015      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a7e:	4b34      	ldr	r3, [pc, #208]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a8a:	4b31      	ldr	r3, [pc, #196]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8e:	4a30      	ldr	r2, [pc, #192]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a96:	4b2e      	ldr	r3, [pc, #184]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007aa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab6:	d118      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fa fc90 	bl	80023dc <HAL_GetTick>
 8007abc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ac0:	e00d      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac2:	f7fa fc8b 	bl	80023dc <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007acc:	1ad2      	subs	r2, r2, r3
 8007ace:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d903      	bls.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007adc:	e005      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ade:	4b1c      	ldr	r3, [pc, #112]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0eb      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d129      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b02:	d10e      	bne.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007b04:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b14:	091a      	lsrs	r2, r3, #4
 8007b16:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6113      	str	r3, [r2, #16]
 8007b20:	e005      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007b22:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b3e:	4a04      	ldr	r2, [pc, #16]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b44:	e00e      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007b4e:	e009      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007b50:	58024400 	.word	0x58024400
 8007b54:	58024800 	.word	0x58024800
 8007b58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f002 0301 	and.w	r3, r2, #1
 8007b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b74:	2300      	movs	r3, #0
 8007b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f000 8089 	beq.w	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b8c:	2b28      	cmp	r3, #40	@ 0x28
 8007b8e:	d86b      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007c69 	.word	0x08007c69
 8007ba0:	08007c69 	.word	0x08007c69
 8007ba4:	08007c69 	.word	0x08007c69
 8007ba8:	08007c69 	.word	0x08007c69
 8007bac:	08007c69 	.word	0x08007c69
 8007bb0:	08007c69 	.word	0x08007c69
 8007bb4:	08007c69 	.word	0x08007c69
 8007bb8:	08007c3d 	.word	0x08007c3d
 8007bbc:	08007c69 	.word	0x08007c69
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007c69 	.word	0x08007c69
 8007bc8:	08007c69 	.word	0x08007c69
 8007bcc:	08007c69 	.word	0x08007c69
 8007bd0:	08007c69 	.word	0x08007c69
 8007bd4:	08007c69 	.word	0x08007c69
 8007bd8:	08007c53 	.word	0x08007c53
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c69 	.word	0x08007c69
 8007be4:	08007c69 	.word	0x08007c69
 8007be8:	08007c69 	.word	0x08007c69
 8007bec:	08007c69 	.word	0x08007c69
 8007bf0:	08007c69 	.word	0x08007c69
 8007bf4:	08007c69 	.word	0x08007c69
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007c69 	.word	0x08007c69
 8007c0c:	08007c69 	.word	0x08007c69
 8007c10:	08007c69 	.word	0x08007c69
 8007c14:	08007c69 	.word	0x08007c69
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c69 	.word	0x08007c69
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007c71 	.word	0x08007c71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c40:	3308      	adds	r3, #8
 8007c42:	2101      	movs	r1, #1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 ffc3 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c50:	e00f      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	3328      	adds	r3, #40	@ 0x28
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f86a 	bl	8008d34 <RCCEx_PLL3_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c66:	e004      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c6e:	e000      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c7a:	4bbf      	ldr	r3, [pc, #764]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c88:	4abb      	ldr	r2, [pc, #748]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c8e:	e003      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f002 0302 	and.w	r3, r2, #2
 8007ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	d041      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	d824      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007d15 	.word	0x08007d15
 8007ccc:	08007ce1 	.word	0x08007ce1
 8007cd0:	08007cf7 	.word	0x08007cf7
 8007cd4:	08007d15 	.word	0x08007d15
 8007cd8:	08007d15 	.word	0x08007d15
 8007cdc:	08007d15 	.word	0x08007d15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ff71 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	3328      	adds	r3, #40	@ 0x28
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 f818 	bl	8008d34 <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d1e:	4b96      	ldr	r3, [pc, #600]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	f023 0107 	bic.w	r1, r3, #7
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d2c:	4a92      	ldr	r2, [pc, #584]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d32:	e003      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f002 0304 	and.w	r3, r2, #4
 8007d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d044      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d825      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007dbd 	.word	0x08007dbd
 8007d74:	08007d89 	.word	0x08007d89
 8007d78:	08007d9f 	.word	0x08007d9f
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
 8007d84:	08007dbd 	.word	0x08007dbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 ff1d 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d9c:	e00f      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	3328      	adds	r3, #40	@ 0x28
 8007da4:	2101      	movs	r1, #1
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 ffc4 	bl	8008d34 <RCCEx_PLL3_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007db2:	e004      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dca:	f023 0107 	bic.w	r1, r3, #7
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dd6:	4a68      	ldr	r2, [pc, #416]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f002 0320 	and.w	r3, r2, #32
 8007df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007df6:	2300      	movs	r3, #0
 8007df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e00:	460b      	mov	r3, r1
 8007e02:	4313      	orrs	r3, r2
 8007e04:	d055      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e12:	d033      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e18:	d82c      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1e:	d02f      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e24:	d826      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e2a:	d02b      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e30:	d820      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e36:	d012      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3c:	d81a      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d022      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e46:	d115      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 febd 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e5c:	e015      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e62:	3328      	adds	r3, #40	@ 0x28
 8007e64:	2102      	movs	r1, #2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 ff64 	bl	8008d34 <RCCEx_PLL3_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e72:	e00a      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e7a:	e006      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e7c:	bf00      	nop
 8007e7e:	e004      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e80:	bf00      	nop
 8007e82:	e002      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e84:	bf00      	nop
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e92:	4b39      	ldr	r3, [pc, #228]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea2:	4a35      	ldr	r2, [pc, #212]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	d058      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ede:	d033      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007ee0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ee4:	d82c      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eea:	d02f      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef0:	d826      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ef6:	d02b      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007efc:	d820      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f02:	d012      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f08:	d81a      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d022      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f12:	d115      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	3308      	adds	r3, #8
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fe57 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f28:	e015      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	3328      	adds	r3, #40	@ 0x28
 8007f30:	2102      	movs	r1, #2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fefe 	bl	8008d34 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f3e:	e00a      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f46:	e006      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f48:	bf00      	nop
 8007f4a:	e004      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f4c:	bf00      	nop
 8007f4e:	e002      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f50:	bf00      	nop
 8007f52:	e000      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10e      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f5e:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6e:	4a02      	ldr	r2, [pc, #8]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f70:	430b      	orrs	r3, r1
 8007f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f74:	e006      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007f76:	bf00      	nop
 8007f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	d055      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fb0:	d033      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007fb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007fb6:	d82c      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fbc:	d02f      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fc2:	d826      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fc8:	d02b      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007fca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007fce:	d820      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fd4:	d012      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fda:	d81a      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d022      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe4:	d115      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3308      	adds	r3, #8
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fdee 	bl	8008bd0 <RCCEx_PLL2_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e015      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	3328      	adds	r3, #40	@ 0x28
 8008002:	2102      	movs	r1, #2
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fe95 	bl	8008d34 <RCCEx_PLL3_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008010:	e00a      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008018:	e006      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800801a:	bf00      	nop
 800801c:	e004      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800801e:	bf00      	nop
 8008020:	e002      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008030:	4ba1      	ldr	r3, [pc, #644]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008034:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008040:	4a9d      	ldr	r2, [pc, #628]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008042:	430b      	orrs	r3, r1
 8008044:	6593      	str	r3, [r2, #88]	@ 0x58
 8008046:	e003      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f002 0308 	and.w	r3, r2, #8
 800805c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008060:	2300      	movs	r3, #0
 8008062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800806a:	460b      	mov	r3, r1
 800806c:	4313      	orrs	r3, r2
 800806e:	d01e      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807c:	d10c      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fe54 	bl	8008d34 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008098:	4b87      	ldr	r3, [pc, #540]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800809a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a8:	4a83      	ldr	r2, [pc, #524]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080aa:	430b      	orrs	r3, r1
 80080ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f002 0310 	and.w	r3, r2, #16
 80080ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080be:	2300      	movs	r3, #0
 80080c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80080c8:	460b      	mov	r3, r1
 80080ca:	4313      	orrs	r3, r2
 80080cc:	d01e      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080da:	d10c      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	3328      	adds	r3, #40	@ 0x28
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fe25 	bl	8008d34 <RCCEx_PLL3_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080f6:	4b70      	ldr	r3, [pc, #448]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008106:	4a6c      	ldr	r2, [pc, #432]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008108:	430b      	orrs	r3, r1
 800810a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008126:	460b      	mov	r3, r1
 8008128:	4313      	orrs	r3, r2
 800812a:	d03e      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008138:	d022      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800813a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813e:	d81b      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008148:	d00b      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800814a:	e015      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	3308      	adds	r3, #8
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd3b 	bl	8008bd0 <RCCEx_PLL2_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008160:	e00f      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	3328      	adds	r3, #40	@ 0x28
 8008168:	2102      	movs	r1, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fde2 	bl	8008d34 <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008176:	e004      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800817e:	e000      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800818a:	4b4b      	ldr	r3, [pc, #300]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800819a:	4a47      	ldr	r2, [pc, #284]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819c:	430b      	orrs	r3, r1
 800819e:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a0:	e003      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081b8:	2300      	movs	r3, #0
 80081ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80081c0:	460b      	mov	r3, r1
 80081c2:	4313      	orrs	r3, r2
 80081c4:	d03b      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081d2:	d01f      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80081d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081d8:	d818      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80081da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081de:	d003      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80081e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081e4:	d007      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80081e6:	e011      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e8:	4b33      	ldr	r3, [pc, #204]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	4a32      	ldr	r2, [pc, #200]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081f4:	e00f      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	3328      	adds	r3, #40	@ 0x28
 80081fc:	2101      	movs	r1, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fd98 	bl	8008d34 <RCCEx_PLL3_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800820a:	e004      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10b      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800821e:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008222:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800822e:	4a22      	ldr	r2, [pc, #136]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008230:	430b      	orrs	r3, r1
 8008232:	6553      	str	r3, [r2, #84]	@ 0x54
 8008234:	e003      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800824a:	673b      	str	r3, [r7, #112]	@ 0x70
 800824c:	2300      	movs	r3, #0
 800824e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008254:	460b      	mov	r3, r1
 8008256:	4313      	orrs	r3, r2
 8008258:	d034      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008268:	d007      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800826a:	e011      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826c:	4b12      	ldr	r3, [pc, #72]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	4a11      	ldr	r2, [pc, #68]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008278:	e00e      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	3308      	adds	r3, #8
 8008280:	2102      	movs	r1, #2
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fca4 	bl	8008bd0 <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800828e:	e003      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ae:	4a02      	ldr	r2, [pc, #8]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082b0:	430b      	orrs	r3, r1
 80082b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082b4:	e006      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80082b6:	bf00      	nop
 80082b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082d2:	2300      	movs	r3, #0
 80082d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80082da:	460b      	mov	r3, r1
 80082dc:	4313      	orrs	r3, r2
 80082de:	d00c      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	3328      	adds	r3, #40	@ 0x28
 80082e6:	2102      	movs	r1, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fd23 	bl	8008d34 <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008306:	663b      	str	r3, [r7, #96]	@ 0x60
 8008308:	2300      	movs	r3, #0
 800830a:	667b      	str	r3, [r7, #100]	@ 0x64
 800830c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d038      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008322:	d018      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008328:	d811      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800832a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800832e:	d014      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008334:	d80b      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d011      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800833a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800833e:	d106      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008340:	4bc3      	ldr	r3, [pc, #780]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4ac2      	ldr	r2, [pc, #776]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800834a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800834c:	e008      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008354:	e004      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008356:	bf00      	nop
 8008358:	e002      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800835a:	bf00      	nop
 800835c:	e000      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800835e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008368:	4bb9      	ldr	r3, [pc, #740]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800836a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008378:	4ab5      	ldr	r2, [pc, #724]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800837a:	430b      	orrs	r3, r1
 800837c:	6553      	str	r3, [r2, #84]	@ 0x54
 800837e:	e003      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008396:	2300      	movs	r3, #0
 8008398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800839a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083a4:	4baa      	ldr	r3, [pc, #680]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083b2:	4aa7      	ldr	r2, [pc, #668]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80083c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80083c6:	2300      	movs	r3, #0
 80083c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80083ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d00a      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083d4:	4b9e      	ldr	r3, [pc, #632]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083e4:	4a9a      	ldr	r2, [pc, #616]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f8:	2300      	movs	r3, #0
 80083fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008406:	4b92      	ldr	r3, [pc, #584]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800840a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008414:	4a8e      	ldr	r2, [pc, #568]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008416:	430b      	orrs	r3, r1
 8008418:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008426:	643b      	str	r3, [r7, #64]	@ 0x40
 8008428:	2300      	movs	r3, #0
 800842a:	647b      	str	r3, [r7, #68]	@ 0x44
 800842c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008430:	460b      	mov	r3, r1
 8008432:	4313      	orrs	r3, r2
 8008434:	d00e      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008436:	4b86      	ldr	r3, [pc, #536]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4a85      	ldr	r2, [pc, #532]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008440:	6113      	str	r3, [r2, #16]
 8008442:	4b83      	ldr	r3, [pc, #524]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008444:	6919      	ldr	r1, [r3, #16]
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800844e:	4a80      	ldr	r2, [pc, #512]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008450:	430b      	orrs	r3, r1
 8008452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800846a:	460b      	mov	r3, r1
 800846c:	4313      	orrs	r3, r2
 800846e:	d009      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008470:	4b77      	ldr	r3, [pc, #476]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008474:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800847e:	4a74      	ldr	r2, [pc, #464]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008480:	430b      	orrs	r3, r1
 8008482:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008490:	633b      	str	r3, [r7, #48]	@ 0x30
 8008492:	2300      	movs	r3, #0
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
 8008496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800849a:	460b      	mov	r3, r1
 800849c:	4313      	orrs	r3, r2
 800849e:	d00a      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b0:	4a67      	ldr	r2, [pc, #412]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b2:	430b      	orrs	r3, r1
 80084b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	2100      	movs	r1, #0
 80084c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80084cc:	460b      	mov	r3, r1
 80084ce:	4313      	orrs	r3, r2
 80084d0:	d011      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	3308      	adds	r3, #8
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fb78 	bl	8008bd0 <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	2100      	movs	r1, #0
 8008500:	6239      	str	r1, [r7, #32]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
 8008508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800850c:	460b      	mov	r3, r1
 800850e:	4313      	orrs	r3, r2
 8008510:	d011      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008516:	3308      	adds	r3, #8
 8008518:	2101      	movs	r1, #1
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fb58 	bl	8008bd0 <RCCEx_PLL2_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	2100      	movs	r1, #0
 8008540:	61b9      	str	r1, [r7, #24]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800854c:	460b      	mov	r3, r1
 800854e:	4313      	orrs	r3, r2
 8008550:	d011      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008556:	3308      	adds	r3, #8
 8008558:	2102      	movs	r1, #2
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fb38 	bl	8008bd0 <RCCEx_PLL2_Config>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	2100      	movs	r1, #0
 8008580:	6139      	str	r1, [r7, #16]
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800858c:	460b      	mov	r3, r1
 800858e:	4313      	orrs	r3, r2
 8008590:	d011      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	3328      	adds	r3, #40	@ 0x28
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fbca 	bl	8008d34 <RCCEx_PLL3_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80085a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	2100      	movs	r1, #0
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	f003 0310 	and.w	r3, r3, #16
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d011      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d6:	3328      	adds	r3, #40	@ 0x28
 80085d8:	2101      	movs	r1, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fbaa 	bl	8008d34 <RCCEx_PLL3_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	2100      	movs	r1, #0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800860c:	460b      	mov	r3, r1
 800860e:	4313      	orrs	r3, r2
 8008610:	d011      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	3328      	adds	r3, #40	@ 0x28
 8008618:	2102      	movs	r1, #2
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fb8a 	bl	8008d34 <RCCEx_PLL3_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008636:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800864a:	46bd      	mov	sp, r7
 800864c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008650:	58024400 	.word	0x58024400

08008654 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008658:	f7fe fd54 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 800865c:	4602      	mov	r2, r0
 800865e:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	091b      	lsrs	r3, r3, #4
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	4904      	ldr	r1, [pc, #16]	@ (800867c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800866a:	5ccb      	ldrb	r3, [r1, r3]
 800866c:	f003 031f 	and.w	r3, r3, #31
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008674:	4618      	mov	r0, r3
 8008676:	bd80      	pop	{r7, pc}
 8008678:	58024400 	.word	0x58024400
 800867c:	08018e98 	.word	0x08018e98

08008680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008680:	b480      	push	{r7}
 8008682:	b089      	sub	sp, #36	@ 0x24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008688:	4ba1      	ldr	r3, [pc, #644]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008692:	4b9f      	ldr	r3, [pc, #636]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008696:	0b1b      	lsrs	r3, r3, #12
 8008698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800869c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800869e:	4b9c      	ldr	r3, [pc, #624]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	091b      	lsrs	r3, r3, #4
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80086aa:	4b99      	ldr	r3, [pc, #612]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ae:	08db      	lsrs	r3, r3, #3
 80086b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 8111 	beq.w	80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	f000 8083 	beq.w	80087dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	f200 80a1 	bhi.w	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d056      	beq.n	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086ea:	e099      	b.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ec:	4b88      	ldr	r3, [pc, #544]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d02d      	beq.n	8008754 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086f8:	4b85      	ldr	r3, [pc, #532]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	08db      	lsrs	r3, r3, #3
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	4a84      	ldr	r2, [pc, #528]	@ (8008914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
 8008708:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008722:	4b7b      	ldr	r3, [pc, #492]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008732:	ed97 6a03 	vldr	s12, [r7, #12]
 8008736:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008752:	e087      	b.n	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800891c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008766:	4b6a      	ldr	r3, [pc, #424]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008776:	ed97 6a03 	vldr	s12, [r7, #12]
 800877a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800877e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800878a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008796:	e065      	b.n	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087aa:	4b59      	ldr	r3, [pc, #356]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80087be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087da:	e043      	b.n	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ee:	4b48      	ldr	r3, [pc, #288]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008802:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881e:	e021      	b.n	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800882e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008832:	4b37      	ldr	r3, [pc, #220]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008842:	ed97 6a03 	vldr	s12, [r7, #12]
 8008846:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800884a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008862:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008864:	4b2a      	ldr	r3, [pc, #168]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	0a5b      	lsrs	r3, r3, #9
 800886a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800887a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800887e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888a:	ee17 2a90 	vmov	r2, s15
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008892:	4b1f      	ldr	r3, [pc, #124]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008896:	0c1b      	lsrs	r3, r3, #16
 8008898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b8:	ee17 2a90 	vmov	r2, s15
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088c0:	4b13      	ldr	r3, [pc, #76]	@ (8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	0e1b      	lsrs	r3, r3, #24
 80088c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088da:	edd7 6a07 	vldr	s13, [r7, #28]
 80088de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e6:	ee17 2a90 	vmov	r2, s15
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088ee:	e008      	b.n	8008902 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	609a      	str	r2, [r3, #8]
}
 8008902:	bf00      	nop
 8008904:	3724      	adds	r7, #36	@ 0x24
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	58024400 	.word	0x58024400
 8008914:	03d09000 	.word	0x03d09000
 8008918:	46000000 	.word	0x46000000
 800891c:	4c742400 	.word	0x4c742400
 8008920:	4a742400 	.word	0x4a742400
 8008924:	4af42400 	.word	0x4af42400

08008928 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	@ 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008930:	4ba1      	ldr	r3, [pc, #644]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800893a:	4b9f      	ldr	r3, [pc, #636]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	0d1b      	lsrs	r3, r3, #20
 8008940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008944:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008946:	4b9c      	ldr	r3, [pc, #624]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008952:	4b99      	ldr	r3, [pc, #612]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8111 	beq.w	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b02      	cmp	r3, #2
 800897a:	f000 8083 	beq.w	8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b02      	cmp	r3, #2
 8008982:	f200 80a1 	bhi.w	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d056      	beq.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008992:	e099      	b.n	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008994:	4b88      	ldr	r3, [pc, #544]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d02d      	beq.n	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a0:	4b85      	ldr	r3, [pc, #532]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	4a84      	ldr	r2, [pc, #528]	@ (8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
 80089b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b7b      	ldr	r3, [pc, #492]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089fa:	e087      	b.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	e065      	b.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b59      	ldr	r3, [pc, #356]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a82:	e043      	b.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b48      	ldr	r3, [pc, #288]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac6:	e021      	b.n	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	4b37      	ldr	r3, [pc, #220]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b10:	0a5b      	lsrs	r3, r3, #9
 8008b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b32:	ee17 2a90 	vmov	r2, s15
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b44:	ee07 3a90 	vmov	s15, r3
 8008b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b60:	ee17 2a90 	vmov	r2, s15
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b68:	4b13      	ldr	r3, [pc, #76]	@ (8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	0e1b      	lsrs	r3, r3, #24
 8008b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8e:	ee17 2a90 	vmov	r2, s15
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b96:	e008      	b.n	8008baa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
}
 8008baa:	bf00      	nop
 8008bac:	3724      	adds	r7, #36	@ 0x24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	03d09000 	.word	0x03d09000
 8008bc0:	46000000 	.word	0x46000000
 8008bc4:	4c742400 	.word	0x4c742400
 8008bc8:	4a742400 	.word	0x4a742400
 8008bcc:	4af42400 	.word	0x4af42400

08008bd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bde:	4b53      	ldr	r3, [pc, #332]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d101      	bne.n	8008bee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e099      	b.n	8008d22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bee:	4b4f      	ldr	r3, [pc, #316]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfa:	f7f9 fbef 	bl	80023dc <HAL_GetTick>
 8008bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c00:	e008      	b.n	8008c14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c02:	f7f9 fbeb 	bl	80023dc <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e086      	b.n	8008d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c14:	4b45      	ldr	r3, [pc, #276]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f0      	bne.n	8008c02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c20:	4b42      	ldr	r3, [pc, #264]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	031b      	lsls	r3, r3, #12
 8008c2e:	493f      	ldr	r1, [pc, #252]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	061b      	lsls	r3, r3, #24
 8008c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c64:	4931      	ldr	r1, [pc, #196]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c6a:	4b30      	ldr	r3, [pc, #192]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	492d      	ldr	r1, [pc, #180]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	f023 0220 	bic.w	r2, r3, #32
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	4928      	ldr	r1, [pc, #160]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c8e:	4b27      	ldr	r3, [pc, #156]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	4a26      	ldr	r2, [pc, #152]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c94:	f023 0310 	bic.w	r3, r3, #16
 8008c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c9a:	4b24      	ldr	r3, [pc, #144]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008c9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c9e:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <RCCEx_PLL2_Config+0x160>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	69d2      	ldr	r2, [r2, #28]
 8008ca6:	00d2      	lsls	r2, r2, #3
 8008ca8:	4920      	ldr	r1, [pc, #128]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cae:	4b1f      	ldr	r3, [pc, #124]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cb4:	f043 0310 	orr.w	r3, r3, #16
 8008cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d106      	bne.n	8008cce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc4:	4a19      	ldr	r2, [pc, #100]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ccc:	e00f      	b.n	8008cee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d106      	bne.n	8008ce2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cd4:	4b15      	ldr	r3, [pc, #84]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	4a14      	ldr	r2, [pc, #80]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ce0:	e005      	b.n	8008cee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ce2:	4b12      	ldr	r3, [pc, #72]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce6:	4a11      	ldr	r2, [pc, #68]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008ce8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008cec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008cee:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfa:	f7f9 fb6f 	bl	80023dc <HAL_GetTick>
 8008cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d00:	e008      	b.n	8008d14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d02:	f7f9 fb6b 	bl	80023dc <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d901      	bls.n	8008d14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e006      	b.n	8008d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <RCCEx_PLL2_Config+0x15c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0f0      	beq.n	8008d02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	58024400 	.word	0x58024400
 8008d30:	ffff0007 	.word	0xffff0007

08008d34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d42:	4b53      	ldr	r3, [pc, #332]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d101      	bne.n	8008d52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e099      	b.n	8008e86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d52:	4b4f      	ldr	r3, [pc, #316]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a4e      	ldr	r2, [pc, #312]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5e:	f7f9 fb3d 	bl	80023dc <HAL_GetTick>
 8008d62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d64:	e008      	b.n	8008d78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d66:	f7f9 fb39 	bl	80023dc <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e086      	b.n	8008e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d78:	4b45      	ldr	r3, [pc, #276]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1f0      	bne.n	8008d66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d84:	4b42      	ldr	r3, [pc, #264]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	051b      	lsls	r3, r3, #20
 8008d92:	493f      	ldr	r1, [pc, #252]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	025b      	lsls	r3, r3, #9
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	041b      	lsls	r3, r3, #16
 8008db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	061b      	lsls	r3, r3, #24
 8008dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008dc8:	4931      	ldr	r1, [pc, #196]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008dce:	4b30      	ldr	r3, [pc, #192]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	492d      	ldr	r1, [pc, #180]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008de0:	4b2b      	ldr	r3, [pc, #172]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	4928      	ldr	r1, [pc, #160]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008df2:	4b27      	ldr	r3, [pc, #156]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	4a26      	ldr	r2, [pc, #152]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dfe:	4b24      	ldr	r3, [pc, #144]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e02:	4b24      	ldr	r3, [pc, #144]	@ (8008e94 <RCCEx_PLL3_Config+0x160>)
 8008e04:	4013      	ands	r3, r2
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	69d2      	ldr	r2, [r2, #28]
 8008e0a:	00d2      	lsls	r2, r2, #3
 8008e0c:	4920      	ldr	r1, [pc, #128]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e12:	4b1f      	ldr	r3, [pc, #124]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e16:	4a1e      	ldr	r2, [pc, #120]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e24:	4b1a      	ldr	r3, [pc, #104]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	4a19      	ldr	r2, [pc, #100]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e30:	e00f      	b.n	8008e52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d106      	bne.n	8008e46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e38:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	4a14      	ldr	r2, [pc, #80]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e44:	e005      	b.n	8008e52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e46:	4b12      	ldr	r3, [pc, #72]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	4a11      	ldr	r2, [pc, #68]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e52:	4b0f      	ldr	r3, [pc, #60]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a0e      	ldr	r2, [pc, #56]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e5e:	f7f9 fabd 	bl	80023dc <HAL_GetTick>
 8008e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e64:	e008      	b.n	8008e78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e66:	f7f9 fab9 	bl	80023dc <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e006      	b.n	8008e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <RCCEx_PLL3_Config+0x15c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0f0      	beq.n	8008e66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	58024400 	.word	0x58024400
 8008e94:	ffff0007 	.word	0xffff0007

08008e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e049      	b.n	8008f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d106      	bne.n	8008ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f841 	bl	8008f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	f000 f9e8 	bl	80092ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d001      	beq.n	8008f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e054      	b.n	800901e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a26      	ldr	r2, [pc, #152]	@ (800902c <HAL_TIM_Base_Start_IT+0xd0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d022      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9e:	d01d      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a22      	ldr	r2, [pc, #136]	@ (8009030 <HAL_TIM_Base_Start_IT+0xd4>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d018      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a21      	ldr	r2, [pc, #132]	@ (8009034 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d013      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8009038 <HAL_TIM_Base_Start_IT+0xdc>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00e      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800903c <HAL_TIM_Base_Start_IT+0xe0>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d009      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8009040 <HAL_TIM_Base_Start_IT+0xe4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d004      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x80>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009044 <HAL_TIM_Base_Start_IT+0xe8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d115      	bne.n	8009008 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	4b19      	ldr	r3, [pc, #100]	@ (8009048 <HAL_TIM_Base_Start_IT+0xec>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b06      	cmp	r3, #6
 8008fec:	d015      	beq.n	800901a <HAL_TIM_Base_Start_IT+0xbe>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff4:	d011      	beq.n	800901a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0201 	orr.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009006:	e008      	b.n	800901a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e000      	b.n	800901c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40010000 	.word	0x40010000
 8009030:	40000400 	.word	0x40000400
 8009034:	40000800 	.word	0x40000800
 8009038:	40000c00 	.word	0x40000c00
 800903c:	40010400 	.word	0x40010400
 8009040:	40001800 	.word	0x40001800
 8009044:	40014000 	.word	0x40014000
 8009048:	00010007 	.word	0x00010007

0800904c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d020      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01b      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f06f 0202 	mvn.w	r2, #2
 8009080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f8e9 	bl	800926e <HAL_TIM_IC_CaptureCallback>
 800909c:	e005      	b.n	80090aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8db 	bl	800925a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8ec 	bl	8009282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d020      	beq.n	80090fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01b      	beq.n	80090fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f06f 0204 	mvn.w	r2, #4
 80090cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f8c3 	bl	800926e <HAL_TIM_IC_CaptureCallback>
 80090e8:	e005      	b.n	80090f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f8b5 	bl	800925a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f8c6 	bl	8009282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d020      	beq.n	8009148 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01b      	beq.n	8009148 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0208 	mvn.w	r2, #8
 8009118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2204      	movs	r2, #4
 800911e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f89d 	bl	800926e <HAL_TIM_IC_CaptureCallback>
 8009134:	e005      	b.n	8009142 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f88f 	bl	800925a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8a0 	bl	8009282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b00      	cmp	r3, #0
 8009150:	d020      	beq.n	8009194 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01b      	beq.n	8009194 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0210 	mvn.w	r2, #16
 8009164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2208      	movs	r2, #8
 800916a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f877 	bl	800926e <HAL_TIM_IC_CaptureCallback>
 8009180:	e005      	b.n	800918e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f869 	bl	800925a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f87a 	bl	8009282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00c      	beq.n	80091b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f06f 0201 	mvn.w	r2, #1
 80091b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7f8 f9ec 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80091de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f913 	bl	800940c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f90b 	bl	8009420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00c      	beq.n	800922e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d007      	beq.n	800922e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f834 	bl	8009296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f06f 0220 	mvn.w	r2, #32
 800924a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f8d3 	bl	80093f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
	...

080092ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a46      	ldr	r2, [pc, #280]	@ (80093d8 <TIM_Base_SetConfig+0x12c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d013      	beq.n	80092ec <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ca:	d00f      	beq.n	80092ec <TIM_Base_SetConfig+0x40>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a43      	ldr	r2, [pc, #268]	@ (80093dc <TIM_Base_SetConfig+0x130>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d00b      	beq.n	80092ec <TIM_Base_SetConfig+0x40>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a42      	ldr	r2, [pc, #264]	@ (80093e0 <TIM_Base_SetConfig+0x134>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d007      	beq.n	80092ec <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a41      	ldr	r2, [pc, #260]	@ (80093e4 <TIM_Base_SetConfig+0x138>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a40      	ldr	r2, [pc, #256]	@ (80093e8 <TIM_Base_SetConfig+0x13c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d108      	bne.n	80092fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a35      	ldr	r2, [pc, #212]	@ (80093d8 <TIM_Base_SetConfig+0x12c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d01f      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800930c:	d01b      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a32      	ldr	r2, [pc, #200]	@ (80093dc <TIM_Base_SetConfig+0x130>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d017      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a31      	ldr	r2, [pc, #196]	@ (80093e0 <TIM_Base_SetConfig+0x134>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d013      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a30      	ldr	r2, [pc, #192]	@ (80093e4 <TIM_Base_SetConfig+0x138>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00f      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a2f      	ldr	r2, [pc, #188]	@ (80093e8 <TIM_Base_SetConfig+0x13c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00b      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2e      	ldr	r2, [pc, #184]	@ (80093ec <TIM_Base_SetConfig+0x140>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d007      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2d      	ldr	r2, [pc, #180]	@ (80093f0 <TIM_Base_SetConfig+0x144>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_Base_SetConfig+0x9a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2c      	ldr	r2, [pc, #176]	@ (80093f4 <TIM_Base_SetConfig+0x148>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d108      	bne.n	8009358 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800934c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4313      	orrs	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a16      	ldr	r2, [pc, #88]	@ (80093d8 <TIM_Base_SetConfig+0x12c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00f      	beq.n	80093a4 <TIM_Base_SetConfig+0xf8>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a18      	ldr	r2, [pc, #96]	@ (80093e8 <TIM_Base_SetConfig+0x13c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00b      	beq.n	80093a4 <TIM_Base_SetConfig+0xf8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a17      	ldr	r2, [pc, #92]	@ (80093ec <TIM_Base_SetConfig+0x140>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_Base_SetConfig+0xf8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a16      	ldr	r2, [pc, #88]	@ (80093f0 <TIM_Base_SetConfig+0x144>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_Base_SetConfig+0xf8>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a15      	ldr	r2, [pc, #84]	@ (80093f4 <TIM_Base_SetConfig+0x148>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d103      	bne.n	80093ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d105      	bne.n	80093ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f023 0201 	bic.w	r2, r3, #1
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	611a      	str	r2, [r3, #16]
  }
}
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40010000 	.word	0x40010000
 80093dc:	40000400 	.word	0x40000400
 80093e0:	40000800 	.word	0x40000800
 80093e4:	40000c00 	.word	0x40000c00
 80093e8:	40010400 	.word	0x40010400
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e042      	b.n	80094cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 fcdd 	bl	8001e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2224      	movs	r2, #36	@ 0x24
 8009462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 faea 	bl	800aa58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fd7f 	bl	8009f88 <UART_SetConfig>
 800948a:	4603      	mov	r3, r0
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e01b      	b.n	80094cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fb69 	bl	800ab9c <UART_CheckIdleState>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	@ 0x28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	4613      	mov	r3, r2
 80094e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d167      	bne.n	80095bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_UART_Transmit_DMA+0x24>
 80094f2:	88fb      	ldrh	r3, [r7, #6]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e060      	b.n	80095be <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	88fa      	ldrh	r2, [r7, #6]
 800950e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2221      	movs	r2, #33	@ 0x21
 800951e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d028      	beq.n	800957c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800952e:	4a26      	ldr	r2, [pc, #152]	@ (80095c8 <HAL_UART_Transmit_DMA+0xf4>)
 8009530:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009536:	4a25      	ldr	r2, [pc, #148]	@ (80095cc <HAL_UART_Transmit_DMA+0xf8>)
 8009538:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800953e:	4a24      	ldr	r2, [pc, #144]	@ (80095d0 <HAL_UART_Transmit_DMA+0xfc>)
 8009540:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009546:	2200      	movs	r2, #0
 8009548:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009552:	4619      	mov	r1, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3328      	adds	r3, #40	@ 0x28
 800955a:	461a      	mov	r2, r3
 800955c:	88fb      	ldrh	r3, [r7, #6]
 800955e:	f7f9 fbc9 	bl	8002cf4 <HAL_DMA_Start_IT>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2210      	movs	r2, #16
 800956c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e020      	b.n	80095be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2240      	movs	r2, #64	@ 0x40
 8009582:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	613b      	str	r3, [r7, #16]
   return(result);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800959a:	627b      	str	r3, [r7, #36]	@ 0x24
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a4:	623a      	str	r2, [r7, #32]
 80095a6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	69f9      	ldr	r1, [r7, #28]
 80095aa:	6a3a      	ldr	r2, [r7, #32]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e5      	bne.n	8009584 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e000      	b.n	80095be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80095bc:	2302      	movs	r3, #2
  }
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3728      	adds	r7, #40	@ 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	0800b069 	.word	0x0800b069
 80095cc:	0800b0ff 	.word	0x0800b0ff
 80095d0:	0800b281 	.word	0x0800b281

080095d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	@ 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d137      	bne.n	800965c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <HAL_UART_Receive_DMA+0x24>
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e030      	b.n	800965e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a18      	ldr	r2, [pc, #96]	@ (8009668 <HAL_UART_Receive_DMA+0x94>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d01f      	beq.n	800964c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d018      	beq.n	800964c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	613b      	str	r3, [r7, #16]
   return(result);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	623b      	str	r3, [r7, #32]
 800963a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963c:	69f9      	ldr	r1, [r7, #28]
 800963e:	6a3a      	ldr	r2, [r7, #32]
 8009640:	e841 2300 	strex	r3, r2, [r1]
 8009644:	61bb      	str	r3, [r7, #24]
   return(result);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1e6      	bne.n	800961a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800964c:	88fb      	ldrh	r3, [r7, #6]
 800964e:	461a      	mov	r2, r3
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f001 fbba 	bl	800adcc <UART_Start_Receive_DMA>
 8009658:	4603      	mov	r3, r0
 800965a:	e000      	b.n	800965e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800965c:	2302      	movs	r3, #2
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	3728      	adds	r7, #40	@ 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	58000c00 	.word	0x58000c00

0800966c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b090      	sub	sp, #64	@ 0x40
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968e:	2b80      	cmp	r3, #128	@ 0x80
 8009690:	d139      	bne.n	8009706 <HAL_UART_DMAStop+0x9a>
 8009692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009694:	2b21      	cmp	r3, #33	@ 0x21
 8009696:	d136      	bne.n	8009706 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d015      	beq.n	8009700 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f9 fd75 	bl	80031c8 <HAL_DMA_Abort>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00d      	beq.n	8009700 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fb f9fb 	bl	8004ae4 <HAL_DMA_GetError>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d105      	bne.n	8009700 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2210      	movs	r2, #16
 80096f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e047      	b.n	8009790 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f001 fc09 	bl	800af18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009710:	2b40      	cmp	r3, #64	@ 0x40
 8009712:	d13c      	bne.n	800978e <HAL_UART_DMAStop+0x122>
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	2b22      	cmp	r3, #34	@ 0x22
 8009718:	d139      	bne.n	800978e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	60bb      	str	r3, [r7, #8]
   return(result);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009730:	633b      	str	r3, [r7, #48]	@ 0x30
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973a:	61ba      	str	r2, [r7, #24]
 800973c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6979      	ldr	r1, [r7, #20]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	613b      	str	r3, [r7, #16]
   return(result);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e5      	bne.n	800971a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009754:	2b00      	cmp	r3, #0
 8009756:	d017      	beq.n	8009788 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975e:	4618      	mov	r0, r3
 8009760:	f7f9 fd32 	bl	80031c8 <HAL_DMA_Abort>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00e      	beq.n	8009788 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009770:	4618      	mov	r0, r3
 8009772:	f7fb f9b7 	bl	8004ae4 <HAL_DMA_GetError>
 8009776:	4603      	mov	r3, r0
 8009778:	2b20      	cmp	r3, #32
 800977a:	d105      	bne.n	8009788 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2210      	movs	r2, #16
 8009780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e003      	b.n	8009790 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fc07 	bl	800af9c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3740      	adds	r7, #64	@ 0x40
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b0ba      	sub	sp, #232	@ 0xe8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80097c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80097c6:	4013      	ands	r3, r2
 80097c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80097cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11b      	bne.n	800980c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d015      	beq.n	800980c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 8377 	beq.w	8009ef0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
      }
      return;
 800980a:	e371      	b.n	8009ef0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800980c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 8123 	beq.w	8009a5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009816:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800981a:	4b8d      	ldr	r3, [pc, #564]	@ (8009a50 <HAL_UART_IRQHandler+0x2b8>)
 800981c:	4013      	ands	r3, r2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009826:	4b8b      	ldr	r3, [pc, #556]	@ (8009a54 <HAL_UART_IRQHandler+0x2bc>)
 8009828:	4013      	ands	r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 8116 	beq.w	8009a5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d011      	beq.n	8009860 <HAL_UART_IRQHandler+0xc8>
 800983c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2201      	movs	r2, #1
 800984e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009856:	f043 0201 	orr.w	r2, r3, #1
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d011      	beq.n	8009890 <HAL_UART_IRQHandler+0xf8>
 800986c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2202      	movs	r2, #2
 800987e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009886:	f043 0204 	orr.w	r2, r3, #4
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d011      	beq.n	80098c0 <HAL_UART_IRQHandler+0x128>
 800989c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2204      	movs	r2, #4
 80098ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b6:	f043 0202 	orr.w	r2, r3, #2
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d017      	beq.n	80098fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d105      	bne.n	80098e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a50 <HAL_UART_IRQHandler+0x2b8>)
 80098de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2208      	movs	r2, #8
 80098ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f2:	f043 0208 	orr.w	r2, r3, #8
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009904:	2b00      	cmp	r3, #0
 8009906:	d012      	beq.n	800992e <HAL_UART_IRQHandler+0x196>
 8009908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00c      	beq.n	800992e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800991c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009924:	f043 0220 	orr.w	r2, r3, #32
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 82dd 	beq.w	8009ef4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800993a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	d013      	beq.n	800996e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d105      	bne.n	800995e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009974:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009982:	2b40      	cmp	r3, #64	@ 0x40
 8009984:	d005      	beq.n	8009992 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800998a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800998e:	2b00      	cmp	r3, #0
 8009990:	d054      	beq.n	8009a3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fb02 	bl	800af9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099a2:	2b40      	cmp	r3, #64	@ 0x40
 80099a4:	d146      	bne.n	8009a34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3308      	adds	r3, #8
 80099ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80099bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80099d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80099d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80099de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1d9      	bne.n	80099a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d017      	beq.n	8009a2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <HAL_UART_IRQHandler+0x2c0>)
 8009a04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7f9 fef9 	bl	8003804 <HAL_DMA_Abort_IT>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d019      	beq.n	8009a4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009a26:	4610      	mov	r0, r2
 8009a28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2a:	e00f      	b.n	8009a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa95 	bl	8009f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a32:	e00b      	b.n	8009a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa91 	bl	8009f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a3a:	e007      	b.n	8009a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa8d 	bl	8009f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009a4a:	e253      	b.n	8009ef4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a4c:	bf00      	nop
    return;
 8009a4e:	e251      	b.n	8009ef4 <HAL_UART_IRQHandler+0x75c>
 8009a50:	10000001 	.word	0x10000001
 8009a54:	04000120 	.word	0x04000120
 8009a58:	0800b301 	.word	0x0800b301

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f040 81e7 	bne.w	8009e34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 81e0 	beq.w	8009e34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 81d9 	beq.w	8009e34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2210      	movs	r2, #16
 8009a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a94:	2b40      	cmp	r3, #64	@ 0x40
 8009a96:	f040 8151 	bne.w	8009d3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a96      	ldr	r2, [pc, #600]	@ (8009cfc <HAL_UART_IRQHandler+0x564>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d068      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a93      	ldr	r2, [pc, #588]	@ (8009d00 <HAL_UART_IRQHandler+0x568>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d061      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a91      	ldr	r2, [pc, #580]	@ (8009d04 <HAL_UART_IRQHandler+0x56c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d05a      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a8e      	ldr	r2, [pc, #568]	@ (8009d08 <HAL_UART_IRQHandler+0x570>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d053      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a8c      	ldr	r2, [pc, #560]	@ (8009d0c <HAL_UART_IRQHandler+0x574>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d04c      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a89      	ldr	r2, [pc, #548]	@ (8009d10 <HAL_UART_IRQHandler+0x578>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d045      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a87      	ldr	r2, [pc, #540]	@ (8009d14 <HAL_UART_IRQHandler+0x57c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d03e      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a84      	ldr	r2, [pc, #528]	@ (8009d18 <HAL_UART_IRQHandler+0x580>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d037      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a82      	ldr	r2, [pc, #520]	@ (8009d1c <HAL_UART_IRQHandler+0x584>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d030      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a7f      	ldr	r2, [pc, #508]	@ (8009d20 <HAL_UART_IRQHandler+0x588>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d029      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a7d      	ldr	r2, [pc, #500]	@ (8009d24 <HAL_UART_IRQHandler+0x58c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d022      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8009d28 <HAL_UART_IRQHandler+0x590>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d01b      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a78      	ldr	r2, [pc, #480]	@ (8009d2c <HAL_UART_IRQHandler+0x594>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d014      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a75      	ldr	r2, [pc, #468]	@ (8009d30 <HAL_UART_IRQHandler+0x598>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00d      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a73      	ldr	r2, [pc, #460]	@ (8009d34 <HAL_UART_IRQHandler+0x59c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d006      	beq.n	8009b7a <HAL_UART_IRQHandler+0x3e2>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a70      	ldr	r2, [pc, #448]	@ (8009d38 <HAL_UART_IRQHandler+0x5a0>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d106      	bne.n	8009b88 <HAL_UART_IRQHandler+0x3f0>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	e005      	b.n	8009b94 <HAL_UART_IRQHandler+0x3fc>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 81ab 	beq.w	8009ef8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bac:	429a      	cmp	r2, r3
 8009bae:	f080 81a3 	bcs.w	8009ef8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc8:	f000 8087 	beq.w	8009cda <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bfa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1da      	bne.n	8009bcc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e1      	bne.n	8009c16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c5c:	e853 3f00 	ldrex	r3, [r3]
 8009c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e3      	bne.n	8009c52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ca8:	f023 0310 	bic.w	r3, r3, #16
 8009cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e4      	bne.n	8009c98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7f9 fa77 	bl	80031c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f93b 	bl	8009f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cfa:	e0fd      	b.n	8009ef8 <HAL_UART_IRQHandler+0x760>
 8009cfc:	40020010 	.word	0x40020010
 8009d00:	40020028 	.word	0x40020028
 8009d04:	40020040 	.word	0x40020040
 8009d08:	40020058 	.word	0x40020058
 8009d0c:	40020070 	.word	0x40020070
 8009d10:	40020088 	.word	0x40020088
 8009d14:	400200a0 	.word	0x400200a0
 8009d18:	400200b8 	.word	0x400200b8
 8009d1c:	40020410 	.word	0x40020410
 8009d20:	40020428 	.word	0x40020428
 8009d24:	40020440 	.word	0x40020440
 8009d28:	40020458 	.word	0x40020458
 8009d2c:	40020470 	.word	0x40020470
 8009d30:	40020488 	.word	0x40020488
 8009d34:	400204a0 	.word	0x400204a0
 8009d38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80cf 	beq.w	8009efc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80ca 	beq.w	8009efc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e4      	bne.n	8009d68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	623b      	str	r3, [r7, #32]
   return(result);
 8009dae:	6a3a      	ldr	r2, [r7, #32]
 8009db0:	4b55      	ldr	r3, [pc, #340]	@ (8009f08 <HAL_UART_IRQHandler+0x770>)
 8009db2:	4013      	ands	r3, r2
 8009db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e3      	bne.n	8009d9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0310 	bic.w	r3, r3, #16
 8009dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	69b9      	ldr	r1, [r7, #24]
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	617b      	str	r3, [r7, #20]
   return(result);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e4      	bne.n	8009dea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f89f 	bl	8009f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e32:	e063      	b.n	8009efc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00e      	beq.n	8009e5e <HAL_UART_IRQHandler+0x6c6>
 8009e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d008      	beq.n	8009e5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 fa93 	bl	800b382 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e5c:	e051      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d014      	beq.n	8009e94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d03a      	beq.n	8009f00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
    }
    return;
 8009e92:	e035      	b.n	8009f00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x71c>
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 fa3d 	bl	800b32c <UART_EndTransmit_IT>
    return;
 8009eb2:	e026      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x73c>
 8009ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ec4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fa6c 	bl	800b3aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ed2:	e016      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d010      	beq.n	8009f02 <HAL_UART_IRQHandler+0x76a>
 8009ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	da0c      	bge.n	8009f02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 fa54 	bl	800b396 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eee:	e008      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009ef0:	bf00      	nop
 8009ef2:	e006      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
    return;
 8009ef4:	bf00      	nop
 8009ef6:	e004      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009ef8:	bf00      	nop
 8009efa:	e002      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8009efc:	bf00      	nop
 8009efe:	e000      	b.n	8009f02 <HAL_UART_IRQHandler+0x76a>
    return;
 8009f00:	bf00      	nop
  }
}
 8009f02:	37e8      	adds	r7, #232	@ 0xe8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	effffffe 	.word	0xeffffffe

08009f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f8c:	b092      	sub	sp, #72	@ 0x48
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4bbe      	ldr	r3, [pc, #760]	@ (800a2b0 <UART_SetConfig+0x328>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4ab3      	ldr	r2, [pc, #716]	@ (800a2b4 <UART_SetConfig+0x32c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d004      	beq.n	8009ff4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	4baf      	ldr	r3, [pc, #700]	@ (800a2b8 <UART_SetConfig+0x330>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	6812      	ldr	r2, [r2, #0]
 800a002:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a004:	430b      	orrs	r3, r1
 800a006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00e:	f023 010f 	bic.w	r1, r3, #15
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4aa6      	ldr	r2, [pc, #664]	@ (800a2bc <UART_SetConfig+0x334>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d177      	bne.n	800a118 <UART_SetConfig+0x190>
 800a028:	4ba5      	ldr	r3, [pc, #660]	@ (800a2c0 <UART_SetConfig+0x338>)
 800a02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a030:	2b28      	cmp	r3, #40	@ 0x28
 800a032:	d86d      	bhi.n	800a110 <UART_SetConfig+0x188>
 800a034:	a201      	add	r2, pc, #4	@ (adr r2, 800a03c <UART_SetConfig+0xb4>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a0e1 	.word	0x0800a0e1
 800a040:	0800a111 	.word	0x0800a111
 800a044:	0800a111 	.word	0x0800a111
 800a048:	0800a111 	.word	0x0800a111
 800a04c:	0800a111 	.word	0x0800a111
 800a050:	0800a111 	.word	0x0800a111
 800a054:	0800a111 	.word	0x0800a111
 800a058:	0800a111 	.word	0x0800a111
 800a05c:	0800a0e9 	.word	0x0800a0e9
 800a060:	0800a111 	.word	0x0800a111
 800a064:	0800a111 	.word	0x0800a111
 800a068:	0800a111 	.word	0x0800a111
 800a06c:	0800a111 	.word	0x0800a111
 800a070:	0800a111 	.word	0x0800a111
 800a074:	0800a111 	.word	0x0800a111
 800a078:	0800a111 	.word	0x0800a111
 800a07c:	0800a0f1 	.word	0x0800a0f1
 800a080:	0800a111 	.word	0x0800a111
 800a084:	0800a111 	.word	0x0800a111
 800a088:	0800a111 	.word	0x0800a111
 800a08c:	0800a111 	.word	0x0800a111
 800a090:	0800a111 	.word	0x0800a111
 800a094:	0800a111 	.word	0x0800a111
 800a098:	0800a111 	.word	0x0800a111
 800a09c:	0800a0f9 	.word	0x0800a0f9
 800a0a0:	0800a111 	.word	0x0800a111
 800a0a4:	0800a111 	.word	0x0800a111
 800a0a8:	0800a111 	.word	0x0800a111
 800a0ac:	0800a111 	.word	0x0800a111
 800a0b0:	0800a111 	.word	0x0800a111
 800a0b4:	0800a111 	.word	0x0800a111
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a111 	.word	0x0800a111
 800a0cc:	0800a111 	.word	0x0800a111
 800a0d0:	0800a111 	.word	0x0800a111
 800a0d4:	0800a111 	.word	0x0800a111
 800a0d8:	0800a111 	.word	0x0800a111
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e222      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ee:	e21e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f6:	e21a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e216      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a100:	2320      	movs	r3, #32
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e212      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a108:	2340      	movs	r3, #64	@ 0x40
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10e:	e20e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a110:	2380      	movs	r3, #128	@ 0x80
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e20a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a69      	ldr	r2, [pc, #420]	@ (800a2c4 <UART_SetConfig+0x33c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d130      	bne.n	800a184 <UART_SetConfig+0x1fc>
 800a122:	4b67      	ldr	r3, [pc, #412]	@ (800a2c0 <UART_SetConfig+0x338>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d826      	bhi.n	800a17c <UART_SetConfig+0x1f4>
 800a12e:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <UART_SetConfig+0x1ac>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a155 	.word	0x0800a155
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e1ec      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a154:	2304      	movs	r3, #4
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e1e8      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a15c:	2308      	movs	r3, #8
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e1e4      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a164:	2310      	movs	r3, #16
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e1e0      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a16c:	2320      	movs	r3, #32
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e1dc      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a174:	2340      	movs	r3, #64	@ 0x40
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e1d8      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e1d4      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a4f      	ldr	r2, [pc, #316]	@ (800a2c8 <UART_SetConfig+0x340>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d130      	bne.n	800a1f0 <UART_SetConfig+0x268>
 800a18e:	4b4c      	ldr	r3, [pc, #304]	@ (800a2c0 <UART_SetConfig+0x338>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b05      	cmp	r3, #5
 800a198:	d826      	bhi.n	800a1e8 <UART_SetConfig+0x260>
 800a19a:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <UART_SetConfig+0x218>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d9 	.word	0x0800a1d9
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e1b6      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e1b2      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e1ae      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e1aa      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e1a6      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1e0:	2340      	movs	r3, #64	@ 0x40
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e1a2      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1e8:	2380      	movs	r3, #128	@ 0x80
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e19e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a35      	ldr	r2, [pc, #212]	@ (800a2cc <UART_SetConfig+0x344>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d130      	bne.n	800a25c <UART_SetConfig+0x2d4>
 800a1fa:	4b31      	ldr	r3, [pc, #196]	@ (800a2c0 <UART_SetConfig+0x338>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	2b05      	cmp	r3, #5
 800a204:	d826      	bhi.n	800a254 <UART_SetConfig+0x2cc>
 800a206:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <UART_SetConfig+0x284>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a225 	.word	0x0800a225
 800a210:	0800a22d 	.word	0x0800a22d
 800a214:	0800a235 	.word	0x0800a235
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a24d 	.word	0x0800a24d
 800a224:	2300      	movs	r3, #0
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e180      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a22c:	2304      	movs	r3, #4
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e17c      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a234:	2308      	movs	r3, #8
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23a:	e178      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a23c:	2310      	movs	r3, #16
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a242:	e174      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a244:	2320      	movs	r3, #32
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e170      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a24c:	2340      	movs	r3, #64	@ 0x40
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e16c      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a254:	2380      	movs	r3, #128	@ 0x80
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e168      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d0 <UART_SetConfig+0x348>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d142      	bne.n	800a2ec <UART_SetConfig+0x364>
 800a266:	4b16      	ldr	r3, [pc, #88]	@ (800a2c0 <UART_SetConfig+0x338>)
 800a268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	2b05      	cmp	r3, #5
 800a270:	d838      	bhi.n	800a2e4 <UART_SetConfig+0x35c>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <UART_SetConfig+0x2f0>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a291 	.word	0x0800a291
 800a27c:	0800a299 	.word	0x0800a299
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a2a9 	.word	0x0800a2a9
 800a288:	0800a2d5 	.word	0x0800a2d5
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e14a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a298:	2304      	movs	r3, #4
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e146      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e142      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e13e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2b0:	cfff69f3 	.word	0xcfff69f3
 800a2b4:	58000c00 	.word	0x58000c00
 800a2b8:	11fff4ff 	.word	0x11fff4ff
 800a2bc:	40011000 	.word	0x40011000
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	40004400 	.word	0x40004400
 800a2c8:	40004800 	.word	0x40004800
 800a2cc:	40004c00 	.word	0x40004c00
 800a2d0:	40005000 	.word	0x40005000
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e128      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2dc:	2340      	movs	r3, #64	@ 0x40
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e2:	e124      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2e4:	2380      	movs	r3, #128	@ 0x80
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ea:	e120      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4acb      	ldr	r2, [pc, #812]	@ (800a620 <UART_SetConfig+0x698>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d176      	bne.n	800a3e4 <UART_SetConfig+0x45c>
 800a2f6:	4bcb      	ldr	r3, [pc, #812]	@ (800a624 <UART_SetConfig+0x69c>)
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2fe:	2b28      	cmp	r3, #40	@ 0x28
 800a300:	d86c      	bhi.n	800a3dc <UART_SetConfig+0x454>
 800a302:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <UART_SetConfig+0x380>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a3ad 	.word	0x0800a3ad
 800a30c:	0800a3dd 	.word	0x0800a3dd
 800a310:	0800a3dd 	.word	0x0800a3dd
 800a314:	0800a3dd 	.word	0x0800a3dd
 800a318:	0800a3dd 	.word	0x0800a3dd
 800a31c:	0800a3dd 	.word	0x0800a3dd
 800a320:	0800a3dd 	.word	0x0800a3dd
 800a324:	0800a3dd 	.word	0x0800a3dd
 800a328:	0800a3b5 	.word	0x0800a3b5
 800a32c:	0800a3dd 	.word	0x0800a3dd
 800a330:	0800a3dd 	.word	0x0800a3dd
 800a334:	0800a3dd 	.word	0x0800a3dd
 800a338:	0800a3dd 	.word	0x0800a3dd
 800a33c:	0800a3dd 	.word	0x0800a3dd
 800a340:	0800a3dd 	.word	0x0800a3dd
 800a344:	0800a3dd 	.word	0x0800a3dd
 800a348:	0800a3bd 	.word	0x0800a3bd
 800a34c:	0800a3dd 	.word	0x0800a3dd
 800a350:	0800a3dd 	.word	0x0800a3dd
 800a354:	0800a3dd 	.word	0x0800a3dd
 800a358:	0800a3dd 	.word	0x0800a3dd
 800a35c:	0800a3dd 	.word	0x0800a3dd
 800a360:	0800a3dd 	.word	0x0800a3dd
 800a364:	0800a3dd 	.word	0x0800a3dd
 800a368:	0800a3c5 	.word	0x0800a3c5
 800a36c:	0800a3dd 	.word	0x0800a3dd
 800a370:	0800a3dd 	.word	0x0800a3dd
 800a374:	0800a3dd 	.word	0x0800a3dd
 800a378:	0800a3dd 	.word	0x0800a3dd
 800a37c:	0800a3dd 	.word	0x0800a3dd
 800a380:	0800a3dd 	.word	0x0800a3dd
 800a384:	0800a3dd 	.word	0x0800a3dd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3dd 	.word	0x0800a3dd
 800a390:	0800a3dd 	.word	0x0800a3dd
 800a394:	0800a3dd 	.word	0x0800a3dd
 800a398:	0800a3dd 	.word	0x0800a3dd
 800a39c:	0800a3dd 	.word	0x0800a3dd
 800a3a0:	0800a3dd 	.word	0x0800a3dd
 800a3a4:	0800a3dd 	.word	0x0800a3dd
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e0bc      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e0b8      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e0b4      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e0b0      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e0ac      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3d4:	2340      	movs	r3, #64	@ 0x40
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e0a8      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3dc:	2380      	movs	r3, #128	@ 0x80
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e0a4      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a8f      	ldr	r2, [pc, #572]	@ (800a628 <UART_SetConfig+0x6a0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d130      	bne.n	800a450 <UART_SetConfig+0x4c8>
 800a3ee:	4b8d      	ldr	r3, [pc, #564]	@ (800a624 <UART_SetConfig+0x69c>)
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b05      	cmp	r3, #5
 800a3f8:	d826      	bhi.n	800a448 <UART_SetConfig+0x4c0>
 800a3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a400 <UART_SetConfig+0x478>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a419 	.word	0x0800a419
 800a404:	0800a421 	.word	0x0800a421
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a431 	.word	0x0800a431
 800a410:	0800a439 	.word	0x0800a439
 800a414:	0800a441 	.word	0x0800a441
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e086      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e082      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e07e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e07a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a438:	2320      	movs	r3, #32
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e076      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a440:	2340      	movs	r3, #64	@ 0x40
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e072      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a448:	2380      	movs	r3, #128	@ 0x80
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e06e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a75      	ldr	r2, [pc, #468]	@ (800a62c <UART_SetConfig+0x6a4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d130      	bne.n	800a4bc <UART_SetConfig+0x534>
 800a45a:	4b72      	ldr	r3, [pc, #456]	@ (800a624 <UART_SetConfig+0x69c>)
 800a45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b05      	cmp	r3, #5
 800a464:	d826      	bhi.n	800a4b4 <UART_SetConfig+0x52c>
 800a466:	a201      	add	r2, pc, #4	@ (adr r2, 800a46c <UART_SetConfig+0x4e4>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a485 	.word	0x0800a485
 800a470:	0800a48d 	.word	0x0800a48d
 800a474:	0800a495 	.word	0x0800a495
 800a478:	0800a49d 	.word	0x0800a49d
 800a47c:	0800a4a5 	.word	0x0800a4a5
 800a480:	0800a4ad 	.word	0x0800a4ad
 800a484:	2300      	movs	r3, #0
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e050      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a48c:	2304      	movs	r3, #4
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e04c      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a494:	2308      	movs	r3, #8
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e048      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a49c:	2310      	movs	r3, #16
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e044      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e040      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a4ac:	2340      	movs	r3, #64	@ 0x40
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e03c      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a4b4:	2380      	movs	r3, #128	@ 0x80
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e038      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a5b      	ldr	r2, [pc, #364]	@ (800a630 <UART_SetConfig+0x6a8>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d130      	bne.n	800a528 <UART_SetConfig+0x5a0>
 800a4c6:	4b57      	ldr	r3, [pc, #348]	@ (800a624 <UART_SetConfig+0x69c>)
 800a4c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d826      	bhi.n	800a520 <UART_SetConfig+0x598>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <UART_SetConfig+0x550>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a501 	.word	0x0800a501
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e01a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e016      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a500:	2308      	movs	r3, #8
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e012      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a508:	2310      	movs	r3, #16
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e00e      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a510:	2320      	movs	r3, #32
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e00a      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a518:	2340      	movs	r3, #64	@ 0x40
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e006      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a520:	2380      	movs	r3, #128	@ 0x80
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e002      	b.n	800a52e <UART_SetConfig+0x5a6>
 800a528:	2380      	movs	r3, #128	@ 0x80
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a3f      	ldr	r2, [pc, #252]	@ (800a630 <UART_SetConfig+0x6a8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	f040 80f8 	bne.w	800a72a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a53a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a53e:	2b20      	cmp	r3, #32
 800a540:	dc46      	bgt.n	800a5d0 <UART_SetConfig+0x648>
 800a542:	2b02      	cmp	r3, #2
 800a544:	f2c0 8082 	blt.w	800a64c <UART_SetConfig+0x6c4>
 800a548:	3b02      	subs	r3, #2
 800a54a:	2b1e      	cmp	r3, #30
 800a54c:	d87e      	bhi.n	800a64c <UART_SetConfig+0x6c4>
 800a54e:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <UART_SetConfig+0x5cc>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a5d7 	.word	0x0800a5d7
 800a558:	0800a64d 	.word	0x0800a64d
 800a55c:	0800a5df 	.word	0x0800a5df
 800a560:	0800a64d 	.word	0x0800a64d
 800a564:	0800a64d 	.word	0x0800a64d
 800a568:	0800a64d 	.word	0x0800a64d
 800a56c:	0800a5ef 	.word	0x0800a5ef
 800a570:	0800a64d 	.word	0x0800a64d
 800a574:	0800a64d 	.word	0x0800a64d
 800a578:	0800a64d 	.word	0x0800a64d
 800a57c:	0800a64d 	.word	0x0800a64d
 800a580:	0800a64d 	.word	0x0800a64d
 800a584:	0800a64d 	.word	0x0800a64d
 800a588:	0800a64d 	.word	0x0800a64d
 800a58c:	0800a5ff 	.word	0x0800a5ff
 800a590:	0800a64d 	.word	0x0800a64d
 800a594:	0800a64d 	.word	0x0800a64d
 800a598:	0800a64d 	.word	0x0800a64d
 800a59c:	0800a64d 	.word	0x0800a64d
 800a5a0:	0800a64d 	.word	0x0800a64d
 800a5a4:	0800a64d 	.word	0x0800a64d
 800a5a8:	0800a64d 	.word	0x0800a64d
 800a5ac:	0800a64d 	.word	0x0800a64d
 800a5b0:	0800a64d 	.word	0x0800a64d
 800a5b4:	0800a64d 	.word	0x0800a64d
 800a5b8:	0800a64d 	.word	0x0800a64d
 800a5bc:	0800a64d 	.word	0x0800a64d
 800a5c0:	0800a64d 	.word	0x0800a64d
 800a5c4:	0800a64d 	.word	0x0800a64d
 800a5c8:	0800a64d 	.word	0x0800a64d
 800a5cc:	0800a63f 	.word	0x0800a63f
 800a5d0:	2b40      	cmp	r3, #64	@ 0x40
 800a5d2:	d037      	beq.n	800a644 <UART_SetConfig+0x6bc>
 800a5d4:	e03a      	b.n	800a64c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a5d6:	f7fe f83d 	bl	8008654 <HAL_RCCEx_GetD3PCLK1Freq>
 800a5da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e03c      	b.n	800a658 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe f84c 	bl	8008680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ec:	e034      	b.n	800a658 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ee:	f107 0318 	add.w	r3, r7, #24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe f998 	bl	8008928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fc:	e02c      	b.n	800a658 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <UART_SetConfig+0x69c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b00      	cmp	r3, #0
 800a608:	d016      	beq.n	800a638 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a60a:	4b06      	ldr	r3, [pc, #24]	@ (800a624 <UART_SetConfig+0x69c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	08db      	lsrs	r3, r3, #3
 800a610:	f003 0303 	and.w	r3, r3, #3
 800a614:	4a07      	ldr	r2, [pc, #28]	@ (800a634 <UART_SetConfig+0x6ac>)
 800a616:	fa22 f303 	lsr.w	r3, r2, r3
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a61c:	e01c      	b.n	800a658 <UART_SetConfig+0x6d0>
 800a61e:	bf00      	nop
 800a620:	40011400 	.word	0x40011400
 800a624:	58024400 	.word	0x58024400
 800a628:	40007800 	.word	0x40007800
 800a62c:	40007c00 	.word	0x40007c00
 800a630:	58000c00 	.word	0x58000c00
 800a634:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a638:	4b9d      	ldr	r3, [pc, #628]	@ (800a8b0 <UART_SetConfig+0x928>)
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63c:	e00c      	b.n	800a658 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a63e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8b4 <UART_SetConfig+0x92c>)
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a642:	e009      	b.n	800a658 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64a:	e005      	b.n	800a658 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a656:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 81de 	beq.w	800aa1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a664:	4a94      	ldr	r2, [pc, #592]	@ (800a8b8 <UART_SetConfig+0x930>)
 800a666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a672:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a680:	429a      	cmp	r2, r3
 800a682:	d305      	bcc.n	800a690 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a68a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d903      	bls.n	800a698 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a696:	e1c1      	b.n	800aa1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69a:	2200      	movs	r2, #0
 800a69c:	60bb      	str	r3, [r7, #8]
 800a69e:	60fa      	str	r2, [r7, #12]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a4:	4a84      	ldr	r2, [pc, #528]	@ (800a8b8 <UART_SetConfig+0x930>)
 800a6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	607a      	str	r2, [r7, #4]
 800a6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6ba:	f7f5 fec9 	bl	8000450 <__aeabi_uldivmod>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f04f 0200 	mov.w	r2, #0
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	020b      	lsls	r3, r1, #8
 800a6d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6d4:	0202      	lsls	r2, r0, #8
 800a6d6:	6979      	ldr	r1, [r7, #20]
 800a6d8:	6849      	ldr	r1, [r1, #4]
 800a6da:	0849      	lsrs	r1, r1, #1
 800a6dc:	2000      	movs	r0, #0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	eb12 0804 	adds.w	r8, r2, r4
 800a6e6:	eb43 0905 	adc.w	r9, r3, r5
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	469a      	mov	sl, r3
 800a6f2:	4693      	mov	fp, r2
 800a6f4:	4652      	mov	r2, sl
 800a6f6:	465b      	mov	r3, fp
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f5 fea8 	bl	8000450 <__aeabi_uldivmod>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4613      	mov	r3, r2
 800a706:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a70e:	d308      	bcc.n	800a722 <UART_SetConfig+0x79a>
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a716:	d204      	bcs.n	800a722 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	e17c      	b.n	800aa1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a728:	e178      	b.n	800aa1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a732:	f040 80c5 	bne.w	800a8c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a736:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	dc48      	bgt.n	800a7d0 <UART_SetConfig+0x848>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	db7b      	blt.n	800a83a <UART_SetConfig+0x8b2>
 800a742:	2b20      	cmp	r3, #32
 800a744:	d879      	bhi.n	800a83a <UART_SetConfig+0x8b2>
 800a746:	a201      	add	r2, pc, #4	@ (adr r2, 800a74c <UART_SetConfig+0x7c4>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a7d7 	.word	0x0800a7d7
 800a750:	0800a7df 	.word	0x0800a7df
 800a754:	0800a83b 	.word	0x0800a83b
 800a758:	0800a83b 	.word	0x0800a83b
 800a75c:	0800a7e7 	.word	0x0800a7e7
 800a760:	0800a83b 	.word	0x0800a83b
 800a764:	0800a83b 	.word	0x0800a83b
 800a768:	0800a83b 	.word	0x0800a83b
 800a76c:	0800a7f7 	.word	0x0800a7f7
 800a770:	0800a83b 	.word	0x0800a83b
 800a774:	0800a83b 	.word	0x0800a83b
 800a778:	0800a83b 	.word	0x0800a83b
 800a77c:	0800a83b 	.word	0x0800a83b
 800a780:	0800a83b 	.word	0x0800a83b
 800a784:	0800a83b 	.word	0x0800a83b
 800a788:	0800a83b 	.word	0x0800a83b
 800a78c:	0800a807 	.word	0x0800a807
 800a790:	0800a83b 	.word	0x0800a83b
 800a794:	0800a83b 	.word	0x0800a83b
 800a798:	0800a83b 	.word	0x0800a83b
 800a79c:	0800a83b 	.word	0x0800a83b
 800a7a0:	0800a83b 	.word	0x0800a83b
 800a7a4:	0800a83b 	.word	0x0800a83b
 800a7a8:	0800a83b 	.word	0x0800a83b
 800a7ac:	0800a83b 	.word	0x0800a83b
 800a7b0:	0800a83b 	.word	0x0800a83b
 800a7b4:	0800a83b 	.word	0x0800a83b
 800a7b8:	0800a83b 	.word	0x0800a83b
 800a7bc:	0800a83b 	.word	0x0800a83b
 800a7c0:	0800a83b 	.word	0x0800a83b
 800a7c4:	0800a83b 	.word	0x0800a83b
 800a7c8:	0800a83b 	.word	0x0800a83b
 800a7cc:	0800a82d 	.word	0x0800a82d
 800a7d0:	2b40      	cmp	r3, #64	@ 0x40
 800a7d2:	d02e      	beq.n	800a832 <UART_SetConfig+0x8aa>
 800a7d4:	e031      	b.n	800a83a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7d6:	f7fc fcc5 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 800a7da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e033      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7de:	f7fc fcd7 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 800a7e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7e4:	e02f      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fd ff48 	bl	8008680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f4:	e027      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7f6:	f107 0318 	add.w	r3, r7, #24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe f894 	bl	8008928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a804:	e01f      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a806:	4b2d      	ldr	r3, [pc, #180]	@ (800a8bc <UART_SetConfig+0x934>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0320 	and.w	r3, r3, #32
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d009      	beq.n	800a826 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a812:	4b2a      	ldr	r3, [pc, #168]	@ (800a8bc <UART_SetConfig+0x934>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	08db      	lsrs	r3, r3, #3
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	4a24      	ldr	r2, [pc, #144]	@ (800a8b0 <UART_SetConfig+0x928>)
 800a81e:	fa22 f303 	lsr.w	r3, r2, r3
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a824:	e00f      	b.n	800a846 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a826:	4b22      	ldr	r3, [pc, #136]	@ (800a8b0 <UART_SetConfig+0x928>)
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82a:	e00c      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a82c:	4b21      	ldr	r3, [pc, #132]	@ (800a8b4 <UART_SetConfig+0x92c>)
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a830:	e009      	b.n	800a846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a838:	e005      	b.n	800a846 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 80e7 	beq.w	800aa1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	4a19      	ldr	r2, [pc, #100]	@ (800a8b8 <UART_SetConfig+0x930>)
 800a854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a858:	461a      	mov	r2, r3
 800a85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a860:	005a      	lsls	r2, r3, #1
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	085b      	lsrs	r3, r3, #1
 800a868:	441a      	add	r2, r3
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a872:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a876:	2b0f      	cmp	r3, #15
 800a878:	d916      	bls.n	800a8a8 <UART_SetConfig+0x920>
 800a87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a880:	d212      	bcs.n	800a8a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	b29b      	uxth	r3, r3
 800a886:	f023 030f 	bic.w	r3, r3, #15
 800a88a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	085b      	lsrs	r3, r3, #1
 800a890:	b29b      	uxth	r3, r3
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	b29a      	uxth	r2, r3
 800a898:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a89a:	4313      	orrs	r3, r2
 800a89c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a8a4:	60da      	str	r2, [r3, #12]
 800a8a6:	e0b9      	b.n	800aa1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8ae:	e0b5      	b.n	800aa1c <UART_SetConfig+0xa94>
 800a8b0:	03d09000 	.word	0x03d09000
 800a8b4:	003d0900 	.word	0x003d0900
 800a8b8:	08018eb0 	.word	0x08018eb0
 800a8bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8c4:	2b20      	cmp	r3, #32
 800a8c6:	dc49      	bgt.n	800a95c <UART_SetConfig+0x9d4>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	db7c      	blt.n	800a9c6 <UART_SetConfig+0xa3e>
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	d87a      	bhi.n	800a9c6 <UART_SetConfig+0xa3e>
 800a8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d8 <UART_SetConfig+0x950>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a963 	.word	0x0800a963
 800a8dc:	0800a96b 	.word	0x0800a96b
 800a8e0:	0800a9c7 	.word	0x0800a9c7
 800a8e4:	0800a9c7 	.word	0x0800a9c7
 800a8e8:	0800a973 	.word	0x0800a973
 800a8ec:	0800a9c7 	.word	0x0800a9c7
 800a8f0:	0800a9c7 	.word	0x0800a9c7
 800a8f4:	0800a9c7 	.word	0x0800a9c7
 800a8f8:	0800a983 	.word	0x0800a983
 800a8fc:	0800a9c7 	.word	0x0800a9c7
 800a900:	0800a9c7 	.word	0x0800a9c7
 800a904:	0800a9c7 	.word	0x0800a9c7
 800a908:	0800a9c7 	.word	0x0800a9c7
 800a90c:	0800a9c7 	.word	0x0800a9c7
 800a910:	0800a9c7 	.word	0x0800a9c7
 800a914:	0800a9c7 	.word	0x0800a9c7
 800a918:	0800a993 	.word	0x0800a993
 800a91c:	0800a9c7 	.word	0x0800a9c7
 800a920:	0800a9c7 	.word	0x0800a9c7
 800a924:	0800a9c7 	.word	0x0800a9c7
 800a928:	0800a9c7 	.word	0x0800a9c7
 800a92c:	0800a9c7 	.word	0x0800a9c7
 800a930:	0800a9c7 	.word	0x0800a9c7
 800a934:	0800a9c7 	.word	0x0800a9c7
 800a938:	0800a9c7 	.word	0x0800a9c7
 800a93c:	0800a9c7 	.word	0x0800a9c7
 800a940:	0800a9c7 	.word	0x0800a9c7
 800a944:	0800a9c7 	.word	0x0800a9c7
 800a948:	0800a9c7 	.word	0x0800a9c7
 800a94c:	0800a9c7 	.word	0x0800a9c7
 800a950:	0800a9c7 	.word	0x0800a9c7
 800a954:	0800a9c7 	.word	0x0800a9c7
 800a958:	0800a9b9 	.word	0x0800a9b9
 800a95c:	2b40      	cmp	r3, #64	@ 0x40
 800a95e:	d02e      	beq.n	800a9be <UART_SetConfig+0xa36>
 800a960:	e031      	b.n	800a9c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a962:	f7fc fbff 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 800a966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a968:	e033      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a96a:	f7fc fc11 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 800a96e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a970:	e02f      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a976:	4618      	mov	r0, r3
 800a978:	f7fd fe82 	bl	8008680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a980:	e027      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a982:	f107 0318 	add.w	r3, r7, #24
 800a986:	4618      	mov	r0, r3
 800a988:	f7fd ffce 	bl	8008928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a990:	e01f      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a992:	4b2d      	ldr	r3, [pc, #180]	@ (800aa48 <UART_SetConfig+0xac0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a99e:	4b2a      	ldr	r3, [pc, #168]	@ (800aa48 <UART_SetConfig+0xac0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	08db      	lsrs	r3, r3, #3
 800a9a4:	f003 0303 	and.w	r3, r3, #3
 800a9a8:	4a28      	ldr	r2, [pc, #160]	@ (800aa4c <UART_SetConfig+0xac4>)
 800a9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9b0:	e00f      	b.n	800a9d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a9b2:	4b26      	ldr	r3, [pc, #152]	@ (800aa4c <UART_SetConfig+0xac4>)
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b6:	e00c      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9b8:	4b25      	ldr	r3, [pc, #148]	@ (800aa50 <UART_SetConfig+0xac8>)
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9bc:	e009      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c4:	e005      	b.n	800a9d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9d0:	bf00      	nop
    }

    if (pclk != 0U)
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d021      	beq.n	800aa1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9dc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa54 <UART_SetConfig+0xacc>)
 800a9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	441a      	add	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	2b0f      	cmp	r3, #15
 800aa00:	d909      	bls.n	800aa16 <UART_SetConfig+0xa8e>
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa08:	d205      	bcs.n	800aa16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60da      	str	r2, [r3, #12]
 800aa14:	e002      	b.n	800aa1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2200      	movs	r2, #0
 800aa36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3748      	adds	r7, #72	@ 0x48
 800aa40:	46bd      	mov	sp, r7
 800aa42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa46:	bf00      	nop
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	03d09000 	.word	0x03d09000
 800aa50:	003d0900 	.word	0x003d0900
 800aa54:	08018eb0 	.word	0x08018eb0

0800aa58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa64:	f003 0308 	and.w	r3, r3, #8
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00a      	beq.n	800aa82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00a      	beq.n	800aac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00a      	beq.n	800aae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00a      	beq.n	800ab0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01a      	beq.n	800ab6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab56:	d10a      	bne.n	800ab6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	605a      	str	r2, [r3, #4]
  }
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b098      	sub	sp, #96	@ 0x60
 800aba0:	af02      	add	r7, sp, #8
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abac:	f7f7 fc16 	bl	80023dc <HAL_GetTick>
 800abb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0308 	and.w	r3, r3, #8
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d12f      	bne.n	800ac20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abc8:	2200      	movs	r2, #0
 800abca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f88e 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d022      	beq.n	800ac20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abee:	653b      	str	r3, [r7, #80]	@ 0x50
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e6      	bne.n	800abda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e063      	b.n	800ace8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d149      	bne.n	800acc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac36:	2200      	movs	r2, #0
 800ac38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f857 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d03c      	beq.n	800acc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	623b      	str	r3, [r7, #32]
   return(result);
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e6      	bne.n	800ac48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac9a:	61fa      	str	r2, [r7, #28]
 800ac9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9e:	69b9      	ldr	r1, [r7, #24]
 800aca0:	69fa      	ldr	r2, [r7, #28]
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	617b      	str	r3, [r7, #20]
   return(result);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1e5      	bne.n	800ac7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2220      	movs	r2, #32
 800acb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e012      	b.n	800ace8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2220      	movs	r2, #32
 800acce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3758      	adds	r7, #88	@ 0x58
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad00:	e04f      	b.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad08:	d04b      	beq.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0a:	f7f7 fb67 	bl	80023dc <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e04e      	b.n	800adc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0304 	and.w	r3, r3, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d037      	beq.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b80      	cmp	r3, #128	@ 0x80
 800ad36:	d034      	beq.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b40      	cmp	r3, #64	@ 0x40
 800ad3c:	d031      	beq.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f003 0308 	and.w	r3, r3, #8
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d110      	bne.n	800ad6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2208      	movs	r2, #8
 800ad52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f921 	bl	800af9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2208      	movs	r2, #8
 800ad5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e029      	b.n	800adc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad7c:	d111      	bne.n	800ada2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 f907 	bl	800af9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e00f      	b.n	800adc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4013      	ands	r3, r2
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	429a      	cmp	r2, r3
 800adb0:	bf0c      	ite	eq
 800adb2:	2301      	moveq	r3, #1
 800adb4:	2300      	movne	r3, #0
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	461a      	mov	r2, r3
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d0a0      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b096      	sub	sp, #88	@ 0x58
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	88fa      	ldrh	r2, [r7, #6]
 800ade4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2222      	movs	r2, #34	@ 0x22
 800adf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d02d      	beq.n	800ae5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae08:	4a40      	ldr	r2, [pc, #256]	@ (800af0c <UART_Start_Receive_DMA+0x140>)
 800ae0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae12:	4a3f      	ldr	r2, [pc, #252]	@ (800af10 <UART_Start_Receive_DMA+0x144>)
 800ae14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae1c:	4a3d      	ldr	r2, [pc, #244]	@ (800af14 <UART_Start_Receive_DMA+0x148>)
 800ae1e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae26:	2200      	movs	r2, #0
 800ae28:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3324      	adds	r3, #36	@ 0x24
 800ae36:	4619      	mov	r1, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	f7f7 ff58 	bl	8002cf4 <HAL_DMA_Start_IT>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d009      	beq.n	800ae5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2210      	movs	r2, #16
 800ae4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2220      	movs	r2, #32
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e051      	b.n	800af02 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d018      	beq.n	800ae98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae86:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ae8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ae92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e6      	bne.n	800ae66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	f043 0301 	orr.w	r3, r3, #1
 800aeae:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aeb8:	637a      	str	r2, [r7, #52]	@ 0x34
 800aeba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aebe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e5      	bne.n	800ae98 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3308      	adds	r3, #8
 800aed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	613b      	str	r3, [r7, #16]
   return(result);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3308      	adds	r3, #8
 800aeea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aeec:	623a      	str	r2, [r7, #32]
 800aeee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	69f9      	ldr	r1, [r7, #28]
 800aef2:	6a3a      	ldr	r2, [r7, #32]
 800aef4:	e841 2300 	strex	r3, r2, [r1]
 800aef8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e5      	bne.n	800aecc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3758      	adds	r7, #88	@ 0x58
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	0800b11b 	.word	0x0800b11b
 800af10:	0800b243 	.word	0x0800b243
 800af14:	0800b281 	.word	0x0800b281

0800af18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af18:	b480      	push	{r7}
 800af1a:	b08f      	sub	sp, #60	@ 0x3c
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800af34:	637b      	str	r3, [r7, #52]	@ 0x34
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1e6      	bne.n	800af20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3308      	adds	r3, #8
 800af58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	60bb      	str	r3, [r7, #8]
   return(result);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800af68:	633b      	str	r3, [r7, #48]	@ 0x30
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3308      	adds	r3, #8
 800af70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af72:	61ba      	str	r2, [r7, #24]
 800af74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6979      	ldr	r1, [r7, #20]
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	613b      	str	r3, [r7, #16]
   return(result);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e5      	bne.n	800af52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800af8e:	bf00      	nop
 800af90:	373c      	adds	r7, #60	@ 0x3c
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
	...

0800af9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b095      	sub	sp, #84	@ 0x54
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800afc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	4b1e      	ldr	r3, [pc, #120]	@ (800b064 <UART_EndRxTransfer+0xc8>)
 800afea:	4013      	ands	r3, r2
 800afec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800affc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e5      	bne.n	800afd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d118      	bne.n	800b044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f023 0310 	bic.w	r3, r3, #16
 800b026:	647b      	str	r3, [r7, #68]	@ 0x44
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	461a      	mov	r2, r3
 800b02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6979      	ldr	r1, [r7, #20]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	613b      	str	r3, [r7, #16]
   return(result);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e6      	bne.n	800b012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2220      	movs	r2, #32
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b058:	bf00      	nop
 800b05a:	3754      	adds	r7, #84	@ 0x54
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	effffffe 	.word	0xeffffffe

0800b068 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b090      	sub	sp, #64	@ 0x40
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b07e:	d037      	beq.n	800b0f0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b082:	2200      	movs	r2, #0
 800b084:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3308      	adds	r3, #8
 800b08e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	623b      	str	r3, [r7, #32]
   return(result);
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b09e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e5      	bne.n	800b088 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0da:	61fb      	str	r3, [r7, #28]
 800b0dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	69b9      	ldr	r1, [r7, #24]
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e6      	bne.n	800b0bc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0ee:	e002      	b.n	800b0f6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b0f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b0f2:	f7fe ff0b 	bl	8009f0c <HAL_UART_TxCpltCallback>
}
 800b0f6:	bf00      	nop
 800b0f8:	3740      	adds	r7, #64	@ 0x40
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7fe ff07 	bl	8009f20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b09c      	sub	sp, #112	@ 0x70
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b130:	d071      	beq.n	800b216 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b134:	2200      	movs	r2, #0
 800b136:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b13a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b142:	e853 3f00 	ldrex	r3, [r3]
 800b146:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b14a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b14e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b15a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b15e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b160:	e841 2300 	strex	r3, r2, [r1]
 800b164:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e6      	bne.n	800b13a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b16c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3308      	adds	r3, #8
 800b172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17e:	f023 0301 	bic.w	r3, r3, #1
 800b182:	667b      	str	r3, [r7, #100]	@ 0x64
 800b184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3308      	adds	r3, #8
 800b18a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b18c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b18e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e5      	bne.n	800b16c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b1b0:	6a3b      	ldr	r3, [r7, #32]
 800b1b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1c0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e5      	bne.n	800b1a0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d118      	bne.n	800b216 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f023 0310 	bic.w	r3, r3, #16
 800b1f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	69b9      	ldr	r1, [r7, #24]
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	617b      	str	r3, [r7, #20]
   return(result);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b218:	2200      	movs	r2, #0
 800b21a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d107      	bne.n	800b234 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b22a:	4619      	mov	r1, r3
 800b22c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b22e:	f7fe fe9f 	bl	8009f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b232:	e002      	b.n	800b23a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b234:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b236:	f7fe fe7d 	bl	8009f34 <HAL_UART_RxCpltCallback>
}
 800b23a:	bf00      	nop
 800b23c:	3770      	adds	r7, #112	@ 0x70
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2201      	movs	r2, #1
 800b254:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d109      	bne.n	800b272 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	b29b      	uxth	r3, r3
 800b268:	4619      	mov	r1, r3
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7fe fe80 	bl	8009f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b270:	e002      	b.n	800b278 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7fe fe68 	bl	8009f48 <HAL_UART_RxHalfCpltCallback>
}
 800b278:	bf00      	nop
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b294:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b29c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2a8:	2b80      	cmp	r3, #128	@ 0x80
 800b2aa:	d109      	bne.n	800b2c0 <UART_DMAError+0x40>
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2b21      	cmp	r3, #33	@ 0x21
 800b2b0:	d106      	bne.n	800b2c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b2ba:	6978      	ldr	r0, [r7, #20]
 800b2bc:	f7ff fe2c 	bl	800af18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ca:	2b40      	cmp	r3, #64	@ 0x40
 800b2cc:	d109      	bne.n	800b2e2 <UART_DMAError+0x62>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b22      	cmp	r3, #34	@ 0x22
 800b2d2:	d106      	bne.n	800b2e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b2dc:	6978      	ldr	r0, [r7, #20]
 800b2de:	f7ff fe5d 	bl	800af9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e8:	f043 0210 	orr.w	r2, r3, #16
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2f2:	6978      	ldr	r0, [r7, #20]
 800b2f4:	f7fe fe32 	bl	8009f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2f8:	bf00      	nop
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7fe fe1c 	bl	8009f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	60bb      	str	r3, [r7, #8]
   return(result);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b348:	61fb      	str	r3, [r7, #28]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6979      	ldr	r1, [r7, #20]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	613b      	str	r3, [r7, #16]
   return(result);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e6      	bne.n	800b334 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2220      	movs	r2, #32
 800b36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fe fdc9 	bl	8009f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37a:	bf00      	nop
 800b37c:	3720      	adds	r7, #32
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b38a:	bf00      	nop
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b39e:	bf00      	nop
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d101      	bne.n	800b3d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e027      	b.n	800b424 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2224      	movs	r2, #36	@ 0x24
 800b3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0201 	bic.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b402:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b444:	2302      	movs	r3, #2
 800b446:	e02d      	b.n	800b4a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2224      	movs	r2, #36	@ 0x24
 800b454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0201 	bic.w	r2, r2, #1
 800b46e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f84f 	bl	800b528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e02d      	b.n	800b520 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2224      	movs	r2, #36	@ 0x24
 800b4d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f022 0201 	bic.w	r2, r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f811 	bl	800b528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b534:	2b00      	cmp	r3, #0
 800b536:	d108      	bne.n	800b54a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b548:	e031      	b.n	800b5ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b54a:	2310      	movs	r3, #16
 800b54c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b54e:	2310      	movs	r3, #16
 800b550:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	0e5b      	lsrs	r3, r3, #25
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	f003 0307 	and.w	r3, r3, #7
 800b560:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	0f5b      	lsrs	r3, r3, #29
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	7b3a      	ldrb	r2, [r7, #12]
 800b576:	4911      	ldr	r1, [pc, #68]	@ (800b5bc <UARTEx_SetNbDataToProcess+0x94>)
 800b578:	5c8a      	ldrb	r2, [r1, r2]
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b57e:	7b3a      	ldrb	r2, [r7, #12]
 800b580:	490f      	ldr	r1, [pc, #60]	@ (800b5c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b582:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b584:	fb93 f3f2 	sdiv	r3, r3, r2
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	7b7a      	ldrb	r2, [r7, #13]
 800b594:	4909      	ldr	r1, [pc, #36]	@ (800b5bc <UARTEx_SetNbDataToProcess+0x94>)
 800b596:	5c8a      	ldrb	r2, [r1, r2]
 800b598:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b59c:	7b7a      	ldrb	r2, [r7, #13]
 800b59e:	4908      	ldr	r1, [pc, #32]	@ (800b5c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b5a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	08018ec8 	.word	0x08018ec8
 800b5c0:	08018ed0 	.word	0x08018ed0

0800b5c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	f107 001c 	add.w	r0, r7, #28
 800b5d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d121      	bne.n	800b622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	4b2c      	ldr	r3, [pc, #176]	@ (800b6a0 <USB_CoreInit+0xdc>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b606:	2b01      	cmp	r3, #1
 800b608:	d105      	bne.n	800b616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 faaa 	bl	800bb70 <USB_CoreReset>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
 800b620:	e01b      	b.n	800b65a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa9e 	bl	800bb70 <USB_CoreReset>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b638:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d106      	bne.n	800b64e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b64c:	e005      	b.n	800b65a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b65a:	7fbb      	ldrb	r3, [r7, #30]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d116      	bne.n	800b68e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b664:	b29a      	uxth	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b66e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <USB_CoreInit+0xe0>)
 800b670:	4313      	orrs	r3, r2
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f043 0206 	orr.w	r2, r3, #6
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f043 0220 	orr.w	r2, r3, #32
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b69a:	b004      	add	sp, #16
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	ffbdffbf 	.word	0xffbdffbf
 800b6a4:	03ee0000 	.word	0x03ee0000

0800b6a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f023 0201 	bic.w	r2, r3, #1
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6e6:	78fb      	ldrb	r3, [r7, #3]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d115      	bne.n	800b718 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6f8:	200a      	movs	r0, #10
 800b6fa:	f7f6 fe7b 	bl	80023f4 <HAL_Delay>
      ms += 10U;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	330a      	adds	r3, #10
 800b702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fa25 	bl	800bb54 <USB_GetMode>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d01e      	beq.n	800b74e <USB_SetCurrentMode+0x84>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2bc7      	cmp	r3, #199	@ 0xc7
 800b714:	d9f0      	bls.n	800b6f8 <USB_SetCurrentMode+0x2e>
 800b716:	e01a      	b.n	800b74e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d115      	bne.n	800b74a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b72a:	200a      	movs	r0, #10
 800b72c:	f7f6 fe62 	bl	80023f4 <HAL_Delay>
      ms += 10U;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	330a      	adds	r3, #10
 800b734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fa0c 	bl	800bb54 <USB_GetMode>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d005      	beq.n	800b74e <USB_SetCurrentMode+0x84>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2bc7      	cmp	r3, #199	@ 0xc7
 800b746:	d9f0      	bls.n	800b72a <USB_SetCurrentMode+0x60>
 800b748:	e001      	b.n	800b74e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e005      	b.n	800b75a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2bc8      	cmp	r3, #200	@ 0xc8
 800b752:	d101      	bne.n	800b758 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b764:	b084      	sub	sp, #16
 800b766:	b580      	push	{r7, lr}
 800b768:	b086      	sub	sp, #24
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b77e:	2300      	movs	r3, #0
 800b780:	613b      	str	r3, [r7, #16]
 800b782:	e009      	b.n	800b798 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	3340      	adds	r3, #64	@ 0x40
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	2200      	movs	r2, #0
 800b790:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3301      	adds	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	2b0e      	cmp	r3, #14
 800b79c:	d9f2      	bls.n	800b784 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b79e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d11c      	bne.n	800b7e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7b4:	f043 0302 	orr.w	r3, r3, #2
 800b7b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	e005      	b.n	800b7ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d10d      	bne.n	800b81c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b808:	2100      	movs	r1, #0
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f968 	bl	800bae0 <USB_SetDevSpeed>
 800b810:	e008      	b.n	800b824 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b812:	2101      	movs	r1, #1
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f963 	bl	800bae0 <USB_SetDevSpeed>
 800b81a:	e003      	b.n	800b824 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b81c:	2103      	movs	r1, #3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f95e 	bl	800bae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b824:	2110      	movs	r1, #16
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f8fa 	bl	800ba20 <USB_FlushTxFifo>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f924 	bl	800ba84 <USB_FlushRxFifo>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b84c:	461a      	mov	r2, r3
 800b84e:	2300      	movs	r3, #0
 800b850:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b858:	461a      	mov	r2, r3
 800b85a:	2300      	movs	r3, #0
 800b85c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b864:	461a      	mov	r2, r3
 800b866:	2300      	movs	r3, #0
 800b868:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b86a:	2300      	movs	r3, #0
 800b86c:	613b      	str	r3, [r7, #16]
 800b86e:	e043      	b.n	800b8f8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b886:	d118      	bne.n	800b8ba <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b89a:	461a      	mov	r2, r3
 800b89c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	e013      	b.n	800b8cc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	e008      	b.n	800b8cc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	015a      	lsls	r2, r3, #5
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8d8:	461a      	mov	r2, r3
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b8f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	4293      	cmp	r3, r2
 800b902:	d3b5      	bcc.n	800b870 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b904:	2300      	movs	r3, #0
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	e043      	b.n	800b992 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b91c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b920:	d118      	bne.n	800b954 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	015a      	lsls	r2, r3, #5
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	4413      	add	r3, r2
 800b930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b934:	461a      	mov	r2, r3
 800b936:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	e013      	b.n	800b966 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	015a      	lsls	r2, r3, #5
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	4413      	add	r3, r2
 800b946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b94a:	461a      	mov	r2, r3
 800b94c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	e008      	b.n	800b966 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b960:	461a      	mov	r2, r3
 800b962:	2300      	movs	r3, #0
 800b964:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b972:	461a      	mov	r2, r3
 800b974:	2300      	movs	r3, #0
 800b976:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b984:	461a      	mov	r2, r3
 800b986:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b98a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	3301      	adds	r3, #1
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b996:	461a      	mov	r2, r3
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d3b5      	bcc.n	800b90a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b9be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d105      	bne.n	800b9d4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	f043 0210 	orr.w	r2, r3, #16
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699a      	ldr	r2, [r3, #24]
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800ba18 <USB_DevInit+0x2b4>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b9e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d005      	beq.n	800b9f4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	f043 0208 	orr.w	r2, r3, #8
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d105      	bne.n	800ba08 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	699a      	ldr	r2, [r3, #24]
 800ba00:	4b06      	ldr	r3, [pc, #24]	@ (800ba1c <USB_DevInit+0x2b8>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba14:	b004      	add	sp, #16
 800ba16:	4770      	bx	lr
 800ba18:	803c3800 	.word	0x803c3800
 800ba1c:	40000004 	.word	0x40000004

0800ba20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3301      	adds	r3, #1
 800ba32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba3a:	d901      	bls.n	800ba40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e01b      	b.n	800ba78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	daf2      	bge.n	800ba2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	019b      	lsls	r3, r3, #6
 800ba50:	f043 0220 	orr.w	r2, r3, #32
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba64:	d901      	bls.n	800ba6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e006      	b.n	800ba78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f003 0320 	and.w	r3, r3, #32
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d0f0      	beq.n	800ba58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba9c:	d901      	bls.n	800baa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e018      	b.n	800bad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	daf2      	bge.n	800ba90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2210      	movs	r2, #16
 800bab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bac0:	d901      	bls.n	800bac6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e006      	b.n	800bad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0310 	and.w	r3, r3, #16
 800bace:	2b10      	cmp	r3, #16
 800bad0:	d0f0      	beq.n	800bab4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	68f9      	ldr	r1, [r7, #12]
 800bafc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb00:	4313      	orrs	r3, r2
 800bb02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb2c:	f023 0303 	bic.w	r3, r3, #3
 800bb30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb40:	f043 0302 	orr.w	r3, r3, #2
 800bb44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	f003 0301 	and.w	r3, r3, #1
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb88:	d901      	bls.n	800bb8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e01b      	b.n	800bbc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	daf2      	bge.n	800bb7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	f043 0201 	orr.w	r2, r3, #1
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbb2:	d901      	bls.n	800bbb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e006      	b.n	800bbc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d0f0      	beq.n	800bba6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <__NVIC_SetPriority>:
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bbe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	db0a      	blt.n	800bbfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	490c      	ldr	r1, [pc, #48]	@ (800bc20 <__NVIC_SetPriority+0x4c>)
 800bbee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbf2:	0112      	lsls	r2, r2, #4
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbfc:	e00a      	b.n	800bc14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4908      	ldr	r1, [pc, #32]	@ (800bc24 <__NVIC_SetPriority+0x50>)
 800bc04:	88fb      	ldrh	r3, [r7, #6]
 800bc06:	f003 030f 	and.w	r3, r3, #15
 800bc0a:	3b04      	subs	r3, #4
 800bc0c:	0112      	lsls	r2, r2, #4
 800bc0e:	b2d2      	uxtb	r2, r2
 800bc10:	440b      	add	r3, r1
 800bc12:	761a      	strb	r2, [r3, #24]
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	e000e100 	.word	0xe000e100
 800bc24:	e000ed00 	.word	0xe000ed00

0800bc28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <SysTick_Handler+0x1c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc30:	f001 fd6e 	bl	800d710 <xTaskGetSchedulerState>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d001      	beq.n	800bc3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc3a:	f002 fb65 	bl	800e308 <xPortSysTickHandler>
  }
}
 800bc3e:	bf00      	nop
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	e000e010 	.word	0xe000e010

0800bc48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f06f 0004 	mvn.w	r0, #4
 800bc52:	f7ff ffbf 	bl	800bbd4 <__NVIC_SetPriority>
#endif
}
 800bc56:	bf00      	nop
 800bc58:	bd80      	pop	{r7, pc}
	...

0800bc5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc62:	f3ef 8305 	mrs	r3, IPSR
 800bc66:	603b      	str	r3, [r7, #0]
  return(result);
 800bc68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc6e:	f06f 0305 	mvn.w	r3, #5
 800bc72:	607b      	str	r3, [r7, #4]
 800bc74:	e00c      	b.n	800bc90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc76:	4b0a      	ldr	r3, [pc, #40]	@ (800bca0 <osKernelInitialize+0x44>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d105      	bne.n	800bc8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc7e:	4b08      	ldr	r3, [pc, #32]	@ (800bca0 <osKernelInitialize+0x44>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	607b      	str	r3, [r7, #4]
 800bc88:	e002      	b.n	800bc90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc90:	687b      	ldr	r3, [r7, #4]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	24032094 	.word	0x24032094

0800bca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcaa:	f3ef 8305 	mrs	r3, IPSR
 800bcae:	603b      	str	r3, [r7, #0]
  return(result);
 800bcb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <osKernelStart+0x1a>
    stat = osErrorISR;
 800bcb6:	f06f 0305 	mvn.w	r3, #5
 800bcba:	607b      	str	r3, [r7, #4]
 800bcbc:	e010      	b.n	800bce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bcec <osKernelStart+0x48>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d109      	bne.n	800bcda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bcc6:	f7ff ffbf 	bl	800bc48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcca:	4b08      	ldr	r3, [pc, #32]	@ (800bcec <osKernelStart+0x48>)
 800bccc:	2202      	movs	r2, #2
 800bcce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcd0:	f001 f892 	bl	800cdf8 <vTaskStartScheduler>
      stat = osOK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	e002      	b.n	800bce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bce0:	687b      	ldr	r3, [r7, #4]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	24032094 	.word	0x24032094

0800bcf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08e      	sub	sp, #56	@ 0x38
 800bcf4:	af04      	add	r7, sp, #16
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd00:	f3ef 8305 	mrs	r3, IPSR
 800bd04:	617b      	str	r3, [r7, #20]
  return(result);
 800bd06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d17e      	bne.n	800be0a <osThreadNew+0x11a>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d07b      	beq.n	800be0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bd12:	2380      	movs	r3, #128	@ 0x80
 800bd14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bd16:	2318      	movs	r3, #24
 800bd18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bd1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d045      	beq.n	800bdb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <osThreadNew+0x48>
        name = attr->name;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d008      	beq.n	800bd5e <osThreadNew+0x6e>
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2b38      	cmp	r3, #56	@ 0x38
 800bd50:	d805      	bhi.n	800bd5e <osThreadNew+0x6e>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <osThreadNew+0x72>
        return (NULL);
 800bd5e:	2300      	movs	r3, #0
 800bd60:	e054      	b.n	800be0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	089b      	lsrs	r3, r3, #2
 800bd70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00e      	beq.n	800bd98 <osThreadNew+0xa8>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd80:	d90a      	bls.n	800bd98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d006      	beq.n	800bd98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <osThreadNew+0xa8>
        mem = 1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	61bb      	str	r3, [r7, #24]
 800bd96:	e010      	b.n	800bdba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10c      	bne.n	800bdba <osThreadNew+0xca>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d108      	bne.n	800bdba <osThreadNew+0xca>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <osThreadNew+0xca>
          mem = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61bb      	str	r3, [r7, #24]
 800bdb4:	e001      	b.n	800bdba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d110      	bne.n	800bde2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdc8:	9202      	str	r2, [sp, #8]
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 fe1a 	bl	800ca10 <xTaskCreateStatic>
 800bddc:	4603      	mov	r3, r0
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	e013      	b.n	800be0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d110      	bne.n	800be0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	f107 0310 	add.w	r3, r7, #16
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fe68 	bl	800cad0 <xTaskCreate>
 800be00:	4603      	mov	r3, r0
 800be02:	2b01      	cmp	r3, #1
 800be04:	d001      	beq.n	800be0a <osThreadNew+0x11a>
            hTask = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be0a:	693b      	ldr	r3, [r7, #16]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3728      	adds	r7, #40	@ 0x28
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be1c:	f3ef 8305 	mrs	r3, IPSR
 800be20:	60bb      	str	r3, [r7, #8]
  return(result);
 800be22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <osDelay+0x1c>
    stat = osErrorISR;
 800be28:	f06f 0305 	mvn.w	r3, #5
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	e007      	b.n	800be40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be30:	2300      	movs	r3, #0
 800be32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 ffa6 	bl	800cd8c <vTaskDelay>
    }
  }

  return (stat);
 800be40:	68fb      	ldr	r3, [r7, #12]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4a07      	ldr	r2, [pc, #28]	@ (800be78 <vApplicationGetIdleTaskMemory+0x2c>)
 800be5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	4a06      	ldr	r2, [pc, #24]	@ (800be7c <vApplicationGetIdleTaskMemory+0x30>)
 800be62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2280      	movs	r2, #128	@ 0x80
 800be68:	601a      	str	r2, [r3, #0]
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	24032098 	.word	0x24032098
 800be7c:	24032140 	.word	0x24032140

0800be80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4a07      	ldr	r2, [pc, #28]	@ (800beac <vApplicationGetTimerTaskMemory+0x2c>)
 800be90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	4a06      	ldr	r2, [pc, #24]	@ (800beb0 <vApplicationGetTimerTaskMemory+0x30>)
 800be96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be9e:	601a      	str	r2, [r3, #0]
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	24032340 	.word	0x24032340
 800beb0:	240323e8 	.word	0x240323e8

0800beb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f103 0208 	add.w	r2, r3, #8
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800becc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f103 0208 	add.w	r2, r3, #8
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f103 0208 	add.w	r2, r3, #8
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b085      	sub	sp, #20
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf6c:	d103      	bne.n	800bf76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e00c      	b.n	800bf90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3308      	adds	r3, #8
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e002      	b.n	800bf84 <vListInsert+0x2e>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d2f6      	bcs.n	800bf7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	601a      	str	r2, [r3, #0]
}
 800bfbc:	bf00      	nop
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6892      	ldr	r2, [r2, #8]
 800bfde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6852      	ldr	r2, [r2, #4]
 800bfe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d103      	bne.n	800bffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	1e5a      	subs	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10b      	bne.n	800c048 <xQueueGenericReset+0x2c>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60bb      	str	r3, [r7, #8]
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c048:	f002 f8ce 	bl	800e1e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c058:	fb01 f303 	mul.w	r3, r1, r3
 800c05c:	441a      	add	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c078:	3b01      	subs	r3, #1
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c07e:	fb01 f303 	mul.w	r3, r1, r3
 800c082:	441a      	add	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	22ff      	movs	r2, #255	@ 0xff
 800c08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	22ff      	movs	r2, #255	@ 0xff
 800c094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d114      	bne.n	800c0c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d01a      	beq.n	800c0dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3310      	adds	r3, #16
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 f942 	bl	800d334 <xTaskRemoveFromEventList>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d012      	beq.n	800c0dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0ec <xQueueGenericReset+0xd0>)
 800c0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	e009      	b.n	800c0dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3310      	adds	r3, #16
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fef1 	bl	800beb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3324      	adds	r3, #36	@ 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff feec 	bl	800beb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0dc:	f002 f8b6 	bl	800e24c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0e0:	2301      	movs	r3, #1
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08e      	sub	sp, #56	@ 0x38
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10b      	bne.n	800c11c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c116:	bf00      	nop
 800c118:	bf00      	nop
 800c11a:	e7fd      	b.n	800c118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10b      	bne.n	800c13a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop
 800c138:	e7fd      	b.n	800c136 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <xQueueGenericCreateStatic+0x56>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <xQueueGenericCreateStatic+0x5a>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <xQueueGenericCreateStatic+0x5c>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10b      	bne.n	800c168 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	623b      	str	r3, [r7, #32]
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	e7fd      	b.n	800c164 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <xQueueGenericCreateStatic+0x84>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <xQueueGenericCreateStatic+0x88>
 800c174:	2301      	movs	r3, #1
 800c176:	e000      	b.n	800c17a <xQueueGenericCreateStatic+0x8a>
 800c178:	2300      	movs	r3, #0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10b      	bne.n	800c196 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	61fb      	str	r3, [r7, #28]
}
 800c190:	bf00      	nop
 800c192:	bf00      	nop
 800c194:	e7fd      	b.n	800c192 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c196:	2350      	movs	r3, #80	@ 0x50
 800c198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b50      	cmp	r3, #80	@ 0x50
 800c19e:	d00b      	beq.n	800c1b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	61bb      	str	r3, [r7, #24]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00d      	beq.n	800c1e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 f805 	bl	800c1ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3730      	adds	r7, #48	@ 0x30
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
 800c1f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d103      	bne.n	800c206 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e002      	b.n	800c20c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c218:	2101      	movs	r1, #1
 800c21a:	69b8      	ldr	r0, [r7, #24]
 800c21c:	f7ff fefe 	bl	800c01c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	78fa      	ldrb	r2, [r7, #3]
 800c224:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08e      	sub	sp, #56	@ 0x38
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c23e:	2300      	movs	r3, #0
 800c240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <xQueueGenericSend+0x34>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	e7fd      	b.n	800c260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d103      	bne.n	800c272 <xQueueGenericSend+0x42>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <xQueueGenericSend+0x46>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericSend+0x48>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <xQueueGenericSend+0x64>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	e7fd      	b.n	800c290 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b02      	cmp	r3, #2
 800c298:	d103      	bne.n	800c2a2 <xQueueGenericSend+0x72>
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <xQueueGenericSend+0x76>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e000      	b.n	800c2a8 <xQueueGenericSend+0x78>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10b      	bne.n	800c2c4 <xQueueGenericSend+0x94>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	623b      	str	r3, [r7, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	e7fd      	b.n	800c2c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2c4:	f001 fa24 	bl	800d710 <xTaskGetSchedulerState>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <xQueueGenericSend+0xa4>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <xQueueGenericSend+0xa8>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e000      	b.n	800c2da <xQueueGenericSend+0xaa>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10b      	bne.n	800c2f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	61fb      	str	r3, [r7, #28]
}
 800c2f0:	bf00      	nop
 800c2f2:	bf00      	nop
 800c2f4:	e7fd      	b.n	800c2f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f6:	f001 ff77 	bl	800e1e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c302:	429a      	cmp	r2, r3
 800c304:	d302      	bcc.n	800c30c <xQueueGenericSend+0xdc>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d129      	bne.n	800c360 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c312:	f000 fa0f 	bl	800c734 <prvCopyDataToQueue>
 800c316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d010      	beq.n	800c342 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c322:	3324      	adds	r3, #36	@ 0x24
 800c324:	4618      	mov	r0, r3
 800c326:	f001 f805 	bl	800d334 <xTaskRemoveFromEventList>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d013      	beq.n	800c358 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c330:	4b3f      	ldr	r3, [pc, #252]	@ (800c430 <xQueueGenericSend+0x200>)
 800c332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	e00a      	b.n	800c358 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c348:	4b39      	ldr	r3, [pc, #228]	@ (800c430 <xQueueGenericSend+0x200>)
 800c34a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c34e:	601a      	str	r2, [r3, #0]
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c358:	f001 ff78 	bl	800e24c <vPortExitCritical>
				return pdPASS;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e063      	b.n	800c428 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d103      	bne.n	800c36e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c366:	f001 ff71 	bl	800e24c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e05c      	b.n	800c428 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c370:	2b00      	cmp	r3, #0
 800c372:	d106      	bne.n	800c382 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c374:	f107 0314 	add.w	r3, r7, #20
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 f867 	bl	800d44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c37e:	2301      	movs	r3, #1
 800c380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c382:	f001 ff63 	bl	800e24c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c386:	f000 fda7 	bl	800ced8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c38a:	f001 ff2d 	bl	800e1e8 <vPortEnterCritical>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c394:	b25b      	sxtb	r3, r3
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c39a:	d103      	bne.n	800c3a4 <xQueueGenericSend+0x174>
 800c39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3aa:	b25b      	sxtb	r3, r3
 800c3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3b0:	d103      	bne.n	800c3ba <xQueueGenericSend+0x18a>
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3ba:	f001 ff47 	bl	800e24c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3be:	1d3a      	adds	r2, r7, #4
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f001 f856 	bl	800d478 <xTaskCheckForTimeOut>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d124      	bne.n	800c41c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3d4:	f000 faa6 	bl	800c924 <prvIsQueueFull>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d018      	beq.n	800c410 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 ff52 	bl	800d290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3ee:	f000 fa31 	bl	800c854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3f2:	f000 fd7f 	bl	800cef4 <xTaskResumeAll>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f47f af7c 	bne.w	800c2f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c3fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c430 <xQueueGenericSend+0x200>)
 800c400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	e772      	b.n	800c2f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c412:	f000 fa1f 	bl	800c854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c416:	f000 fd6d 	bl	800cef4 <xTaskResumeAll>
 800c41a:	e76c      	b.n	800c2f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c41e:	f000 fa19 	bl	800c854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c422:	f000 fd67 	bl	800cef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3738      	adds	r7, #56	@ 0x38
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b090      	sub	sp, #64	@ 0x40
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10b      	bne.n	800c464 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c45e:	bf00      	nop
 800c460:	bf00      	nop
 800c462:	e7fd      	b.n	800c460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d103      	bne.n	800c472 <xQueueGenericSendFromISR+0x3e>
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <xQueueGenericSendFromISR+0x42>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <xQueueGenericSendFromISR+0x44>
 800c476:	2300      	movs	r3, #0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c48e:	bf00      	nop
 800c490:	bf00      	nop
 800c492:	e7fd      	b.n	800c490 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b02      	cmp	r3, #2
 800c498:	d103      	bne.n	800c4a2 <xQueueGenericSendFromISR+0x6e>
 800c49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d101      	bne.n	800c4a6 <xQueueGenericSendFromISR+0x72>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e000      	b.n	800c4a8 <xQueueGenericSendFromISR+0x74>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10b      	bne.n	800c4c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	623b      	str	r3, [r7, #32]
}
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
 800c4c2:	e7fd      	b.n	800c4c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4c4:	f001 ff70 	bl	800e3a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c4c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	61fa      	str	r2, [r7, #28]
 800c4de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d302      	bcc.n	800c4f6 <xQueueGenericSendFromISR+0xc2>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d12f      	bne.n	800c556 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c50c:	f000 f912 	bl	800c734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c510:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c518:	d112      	bne.n	800c540 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d016      	beq.n	800c550 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	3324      	adds	r3, #36	@ 0x24
 800c526:	4618      	mov	r0, r3
 800c528:	f000 ff04 	bl	800d334 <xTaskRemoveFromEventList>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00e      	beq.n	800c550 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e007      	b.n	800c550 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c544:	3301      	adds	r3, #1
 800c546:	b2db      	uxtb	r3, r3
 800c548:	b25a      	sxtb	r2, r3
 800c54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c550:	2301      	movs	r3, #1
 800c552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c554:	e001      	b.n	800c55a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c556:	2300      	movs	r3, #0
 800c558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c564:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3740      	adds	r7, #64	@ 0x40
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08c      	sub	sp, #48	@ 0x30
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10b      	bne.n	800c5a2 <xQueueReceive+0x32>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	623b      	str	r3, [r7, #32]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d103      	bne.n	800c5b0 <xQueueReceive+0x40>
 800c5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <xQueueReceive+0x44>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <xQueueReceive+0x46>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10b      	bne.n	800c5d2 <xQueueReceive+0x62>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	61fb      	str	r3, [r7, #28]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5d2:	f001 f89d 	bl	800d710 <xTaskGetSchedulerState>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <xQueueReceive+0x72>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <xQueueReceive+0x76>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <xQueueReceive+0x78>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10b      	bne.n	800c604 <xQueueReceive+0x94>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	61bb      	str	r3, [r7, #24]
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	e7fd      	b.n	800c600 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c604:	f001 fdf0 	bl	800e1e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c618:	f000 f8f6 	bl	800c808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c622:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00f      	beq.n	800c64c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62e:	3310      	adds	r3, #16
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fe7f 	bl	800d334 <xTaskRemoveFromEventList>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d007      	beq.n	800c64c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c63c:	4b3c      	ldr	r3, [pc, #240]	@ (800c730 <xQueueReceive+0x1c0>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c64c:	f001 fdfe 	bl	800e24c <vPortExitCritical>
				return pdPASS;
 800c650:	2301      	movs	r3, #1
 800c652:	e069      	b.n	800c728 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d103      	bne.n	800c662 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c65a:	f001 fdf7 	bl	800e24c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c65e:	2300      	movs	r3, #0
 800c660:	e062      	b.n	800c728 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c668:	f107 0310 	add.w	r3, r7, #16
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 feed 	bl	800d44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c672:	2301      	movs	r3, #1
 800c674:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c676:	f001 fde9 	bl	800e24c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c67a:	f000 fc2d 	bl	800ced8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c67e:	f001 fdb3 	bl	800e1e8 <vPortEnterCritical>
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c688:	b25b      	sxtb	r3, r3
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c68e:	d103      	bne.n	800c698 <xQueueReceive+0x128>
 800c690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6a4:	d103      	bne.n	800c6ae <xQueueReceive+0x13e>
 800c6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6ae:	f001 fdcd 	bl	800e24c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6b2:	1d3a      	adds	r2, r7, #4
 800c6b4:	f107 0310 	add.w	r3, r7, #16
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fedc 	bl	800d478 <xTaskCheckForTimeOut>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d123      	bne.n	800c70e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6c8:	f000 f916 	bl	800c8f8 <prvIsQueueEmpty>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d017      	beq.n	800c702 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d4:	3324      	adds	r3, #36	@ 0x24
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fdd8 	bl	800d290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6e2:	f000 f8b7 	bl	800c854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6e6:	f000 fc05 	bl	800cef4 <xTaskResumeAll>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d189      	bne.n	800c604 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c6f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c730 <xQueueReceive+0x1c0>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	e780      	b.n	800c604 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c704:	f000 f8a6 	bl	800c854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c708:	f000 fbf4 	bl	800cef4 <xTaskResumeAll>
 800c70c:	e77a      	b.n	800c604 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c70e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c710:	f000 f8a0 	bl	800c854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c714:	f000 fbee 	bl	800cef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c71a:	f000 f8ed 	bl	800c8f8 <prvIsQueueEmpty>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	f43f af6f 	beq.w	800c604 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3730      	adds	r7, #48	@ 0x30
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	e000ed04 	.word	0xe000ed04

0800c734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10d      	bne.n	800c76e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d14d      	bne.n	800c7f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fff4 	bl	800d74c <xTaskPriorityDisinherit>
 800c764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	609a      	str	r2, [r3, #8]
 800c76c:	e043      	b.n	800c7f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d119      	bne.n	800c7a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6858      	ldr	r0, [r3, #4]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77c:	461a      	mov	r2, r3
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	f00b fc51 	bl	8018026 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	685a      	ldr	r2, [r3, #4]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78c:	441a      	add	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d32b      	bcc.n	800c7f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	e026      	b.n	800c7f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68d8      	ldr	r0, [r3, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	f00b fc37 	bl	8018026 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	68da      	ldr	r2, [r3, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c0:	425b      	negs	r3, r3
 800c7c2:	441a      	add	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d207      	bcs.n	800c7e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	689a      	ldr	r2, [r3, #8]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7dc:	425b      	negs	r3, r3
 800c7de:	441a      	add	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d105      	bne.n	800c7f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c7fe:	697b      	ldr	r3, [r7, #20]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c816:	2b00      	cmp	r3, #0
 800c818:	d018      	beq.n	800c84c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68da      	ldr	r2, [r3, #12]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c822:	441a      	add	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68da      	ldr	r2, [r3, #12]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	429a      	cmp	r2, r3
 800c832:	d303      	bcc.n	800c83c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68d9      	ldr	r1, [r3, #12]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c844:	461a      	mov	r2, r3
 800c846:	6838      	ldr	r0, [r7, #0]
 800c848:	f00b fbed 	bl	8018026 <memcpy>
	}
}
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c85c:	f001 fcc4 	bl	800e1e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c868:	e011      	b.n	800c88e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d012      	beq.n	800c898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3324      	adds	r3, #36	@ 0x24
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fd5c 	bl	800d334 <xTaskRemoveFromEventList>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c882:	f000 fe5d 	bl	800d540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	3b01      	subs	r3, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c892:	2b00      	cmp	r3, #0
 800c894:	dce9      	bgt.n	800c86a <prvUnlockQueue+0x16>
 800c896:	e000      	b.n	800c89a <prvUnlockQueue+0x46>
					break;
 800c898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	22ff      	movs	r2, #255	@ 0xff
 800c89e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c8a2:	f001 fcd3 	bl	800e24c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c8a6:	f001 fc9f 	bl	800e1e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8b2:	e011      	b.n	800c8d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d012      	beq.n	800c8e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3310      	adds	r3, #16
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 fd37 	bl	800d334 <xTaskRemoveFromEventList>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c8cc:	f000 fe38 	bl	800d540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dce9      	bgt.n	800c8b4 <prvUnlockQueue+0x60>
 800c8e0:	e000      	b.n	800c8e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c8e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	22ff      	movs	r2, #255	@ 0xff
 800c8e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c8ec:	f001 fcae 	bl	800e24c <vPortExitCritical>
}
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c900:	f001 fc72 	bl	800e1e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d102      	bne.n	800c912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c90c:	2301      	movs	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e001      	b.n	800c916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c916:	f001 fc99 	bl	800e24c <vPortExitCritical>

	return xReturn;
 800c91a:	68fb      	ldr	r3, [r7, #12]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c92c:	f001 fc5c 	bl	800e1e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c938:	429a      	cmp	r2, r3
 800c93a:	d102      	bne.n	800c942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e001      	b.n	800c946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c942:	2300      	movs	r3, #0
 800c944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c946:	f001 fc81 	bl	800e24c <vPortExitCritical>

	return xReturn;
 800c94a:	68fb      	ldr	r3, [r7, #12]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c95e:	2300      	movs	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]
 800c962:	e014      	b.n	800c98e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c964:	4a0f      	ldr	r2, [pc, #60]	@ (800c9a4 <vQueueAddToRegistry+0x50>)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10b      	bne.n	800c988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c970:	490c      	ldr	r1, [pc, #48]	@ (800c9a4 <vQueueAddToRegistry+0x50>)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c97a:	4a0a      	ldr	r2, [pc, #40]	@ (800c9a4 <vQueueAddToRegistry+0x50>)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	4413      	add	r3, r2
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c986:	e006      	b.n	800c996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3301      	adds	r3, #1
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2b07      	cmp	r3, #7
 800c992:	d9e7      	bls.n	800c964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	240327e8 	.word	0x240327e8

0800c9a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c9b8:	f001 fc16 	bl	800e1e8 <vPortEnterCritical>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9c8:	d103      	bne.n	800c9d2 <vQueueWaitForMessageRestricted+0x2a>
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9de:	d103      	bne.n	800c9e8 <vQueueWaitForMessageRestricted+0x40>
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9e8:	f001 fc30 	bl	800e24c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d106      	bne.n	800ca02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	3324      	adds	r3, #36	@ 0x24
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 fc6d 	bl	800d2dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca02:	6978      	ldr	r0, [r7, #20]
 800ca04:	f7ff ff26 	bl	800c854 <prvUnlockQueue>
	}
 800ca08:	bf00      	nop
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08e      	sub	sp, #56	@ 0x38
 800ca14:	af04      	add	r7, sp, #16
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10b      	bne.n	800ca3c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	623b      	str	r3, [r7, #32]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10b      	bne.n	800ca5a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	61fb      	str	r3, [r7, #28]
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop
 800ca58:	e7fd      	b.n	800ca56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca5a:	23a8      	movs	r3, #168	@ 0xa8
 800ca5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2ba8      	cmp	r3, #168	@ 0xa8
 800ca62:	d00b      	beq.n	800ca7c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	61bb      	str	r3, [r7, #24]
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d01e      	beq.n	800cac2 <xTaskCreateStatic+0xb2>
 800ca84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d01b      	beq.n	800cac2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	2202      	movs	r2, #2
 800ca98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9303      	str	r3, [sp, #12]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	9302      	str	r3, [sp, #8]
 800caa4:	f107 0314 	add.w	r3, r7, #20
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 f851 	bl	800cb5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cabc:	f000 f8f6 	bl	800ccac <prvAddNewTaskToReadyList>
 800cac0:	e001      	b.n	800cac6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cac6:	697b      	ldr	r3, [r7, #20]
	}
 800cac8:	4618      	mov	r0, r3
 800caca:	3728      	adds	r7, #40	@ 0x28
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08c      	sub	sp, #48	@ 0x30
 800cad4:	af04      	add	r7, sp, #16
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	603b      	str	r3, [r7, #0]
 800cadc:	4613      	mov	r3, r2
 800cade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cae0:	88fb      	ldrh	r3, [r7, #6]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f001 fca1 	bl	800e42c <pvPortMalloc>
 800caea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00e      	beq.n	800cb10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800caf2:	20a8      	movs	r0, #168	@ 0xa8
 800caf4:	f001 fc9a 	bl	800e42c <pvPortMalloc>
 800caf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb06:	e005      	b.n	800cb14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb08:	6978      	ldr	r0, [r7, #20]
 800cb0a:	f001 fd5d 	bl	800e5c8 <vPortFree>
 800cb0e:	e001      	b.n	800cb14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d017      	beq.n	800cb4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb22:	88fa      	ldrh	r2, [r7, #6]
 800cb24:	2300      	movs	r3, #0
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	9302      	str	r3, [sp, #8]
 800cb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f80f 	bl	800cb5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb3e:	69f8      	ldr	r0, [r7, #28]
 800cb40:	f000 f8b4 	bl	800ccac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb44:	2301      	movs	r3, #1
 800cb46:	61bb      	str	r3, [r7, #24]
 800cb48:	e002      	b.n	800cb50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb50:	69bb      	ldr	r3, [r7, #24]
	}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b088      	sub	sp, #32
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	461a      	mov	r2, r3
 800cb74:	21a5      	movs	r1, #165	@ 0xa5
 800cb76:	f00b f937 	bl	8017de8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cb84:	440b      	add	r3, r1
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	f023 0307 	bic.w	r3, r3, #7
 800cb92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	617b      	str	r3, [r7, #20]
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	e7fd      	b.n	800cbb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01f      	beq.n	800cbfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	61fb      	str	r3, [r7, #28]
 800cbc0:	e012      	b.n	800cbe8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	7819      	ldrb	r1, [r3, #0]
 800cbca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	4413      	add	r3, r2
 800cbd0:	3334      	adds	r3, #52	@ 0x34
 800cbd2:	460a      	mov	r2, r1
 800cbd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4413      	add	r3, r2
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d006      	beq.n	800cbf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	61fb      	str	r3, [r7, #28]
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	2b0f      	cmp	r3, #15
 800cbec:	d9e9      	bls.n	800cbc2 <prvInitialiseNewTask+0x66>
 800cbee:	e000      	b.n	800cbf2 <prvInitialiseNewTask+0x96>
			{
				break;
 800cbf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbfa:	e003      	b.n	800cc04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc06:	2b37      	cmp	r3, #55	@ 0x37
 800cc08:	d901      	bls.n	800cc0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc0a:	2337      	movs	r3, #55	@ 0x37
 800cc0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff f965 	bl	800bef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	3318      	adds	r3, #24
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff f960 	bl	800bef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5c:	3354      	adds	r3, #84	@ 0x54
 800cc5e:	224c      	movs	r2, #76	@ 0x4c
 800cc60:	2100      	movs	r1, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f00b f8c0 	bl	8017de8 <memset>
 800cc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6a:	4a0d      	ldr	r2, [pc, #52]	@ (800cca0 <prvInitialiseNewTask+0x144>)
 800cc6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc70:	4a0c      	ldr	r2, [pc, #48]	@ (800cca4 <prvInitialiseNewTask+0x148>)
 800cc72:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc76:	4a0c      	ldr	r2, [pc, #48]	@ (800cca8 <prvInitialiseNewTask+0x14c>)
 800cc78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	68f9      	ldr	r1, [r7, #12]
 800cc7e:	69b8      	ldr	r0, [r7, #24]
 800cc80:	f001 f982 	bl	800df88 <pxPortInitialiseStack>
 800cc84:	4602      	mov	r2, r0
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc96:	bf00      	nop
 800cc98:	3720      	adds	r7, #32
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	240686d0 	.word	0x240686d0
 800cca4:	24068738 	.word	0x24068738
 800cca8:	240687a0 	.word	0x240687a0

0800ccac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ccb4:	f001 fa98 	bl	800e1e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ccb8:	4b2d      	ldr	r3, [pc, #180]	@ (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	4a2c      	ldr	r2, [pc, #176]	@ (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800ccc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ccc2:	4b2c      	ldr	r3, [pc, #176]	@ (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d109      	bne.n	800ccde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ccca:	4a2a      	ldr	r2, [pc, #168]	@ (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ccd0:	4b27      	ldr	r3, [pc, #156]	@ (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d110      	bne.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ccd8:	f000 fc56 	bl	800d588 <prvInitialiseTaskLists>
 800ccdc:	e00d      	b.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ccde:	4b26      	ldr	r3, [pc, #152]	@ (800cd78 <prvAddNewTaskToReadyList+0xcc>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d109      	bne.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cce6:	4b23      	ldr	r3, [pc, #140]	@ (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d802      	bhi.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccf4:	4a1f      	ldr	r2, [pc, #124]	@ (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccfa:	4b20      	ldr	r3, [pc, #128]	@ (800cd7c <prvAddNewTaskToReadyList+0xd0>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	4a1e      	ldr	r2, [pc, #120]	@ (800cd7c <prvAddNewTaskToReadyList+0xd0>)
 800cd02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd04:	4b1d      	ldr	r3, [pc, #116]	@ (800cd7c <prvAddNewTaskToReadyList+0xd0>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd10:	4b1b      	ldr	r3, [pc, #108]	@ (800cd80 <prvAddNewTaskToReadyList+0xd4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d903      	bls.n	800cd20 <prvAddNewTaskToReadyList+0x74>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1c:	4a18      	ldr	r2, [pc, #96]	@ (800cd80 <prvAddNewTaskToReadyList+0xd4>)
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd24:	4613      	mov	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4a15      	ldr	r2, [pc, #84]	@ (800cd84 <prvAddNewTaskToReadyList+0xd8>)
 800cd2e:	441a      	add	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f7ff f8e9 	bl	800bf0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd3c:	f001 fa86 	bl	800e24c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd40:	4b0d      	ldr	r3, [pc, #52]	@ (800cd78 <prvAddNewTaskToReadyList+0xcc>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00e      	beq.n	800cd66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd48:	4b0a      	ldr	r3, [pc, #40]	@ (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d207      	bcs.n	800cd66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd56:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <prvAddNewTaskToReadyList+0xdc>)
 800cd58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	24032cfc 	.word	0x24032cfc
 800cd74:	24032828 	.word	0x24032828
 800cd78:	24032d08 	.word	0x24032d08
 800cd7c:	24032d18 	.word	0x24032d18
 800cd80:	24032d04 	.word	0x24032d04
 800cd84:	2403282c 	.word	0x2403282c
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d018      	beq.n	800cdd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd9e:	4b14      	ldr	r3, [pc, #80]	@ (800cdf0 <vTaskDelay+0x64>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00b      	beq.n	800cdbe <vTaskDelay+0x32>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	60bb      	str	r3, [r7, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	e7fd      	b.n	800cdba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cdbe:	f000 f88b 	bl	800ced8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fd31 	bl	800d82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cdca:	f000 f893 	bl	800cef4 <xTaskResumeAll>
 800cdce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d107      	bne.n	800cde6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cdd6:	4b07      	ldr	r3, [pc, #28]	@ (800cdf4 <vTaskDelay+0x68>)
 800cdd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cde6:	bf00      	nop
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	24032d24 	.word	0x24032d24
 800cdf4:	e000ed04 	.word	0xe000ed04

0800cdf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce06:	463a      	mov	r2, r7
 800ce08:	1d39      	adds	r1, r7, #4
 800ce0a:	f107 0308 	add.w	r3, r7, #8
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff f81c 	bl	800be4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	9202      	str	r2, [sp, #8]
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	2300      	movs	r3, #0
 800ce24:	460a      	mov	r2, r1
 800ce26:	4924      	ldr	r1, [pc, #144]	@ (800ceb8 <vTaskStartScheduler+0xc0>)
 800ce28:	4824      	ldr	r0, [pc, #144]	@ (800cebc <vTaskStartScheduler+0xc4>)
 800ce2a:	f7ff fdf1 	bl	800ca10 <xTaskCreateStatic>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	4a23      	ldr	r2, [pc, #140]	@ (800cec0 <vTaskStartScheduler+0xc8>)
 800ce32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce34:	4b22      	ldr	r3, [pc, #136]	@ (800cec0 <vTaskStartScheduler+0xc8>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	617b      	str	r3, [r7, #20]
 800ce40:	e001      	b.n	800ce46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d102      	bne.n	800ce52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce4c:	f000 fd42 	bl	800d8d4 <xTimerCreateTimerTask>
 800ce50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d11b      	bne.n	800ce90 <vTaskStartScheduler+0x98>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	613b      	str	r3, [r7, #16]
}
 800ce6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce6c:	4b15      	ldr	r3, [pc, #84]	@ (800cec4 <vTaskStartScheduler+0xcc>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	3354      	adds	r3, #84	@ 0x54
 800ce72:	4a15      	ldr	r2, [pc, #84]	@ (800cec8 <vTaskStartScheduler+0xd0>)
 800ce74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce76:	4b15      	ldr	r3, [pc, #84]	@ (800cecc <vTaskStartScheduler+0xd4>)
 800ce78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce7e:	4b14      	ldr	r3, [pc, #80]	@ (800ced0 <vTaskStartScheduler+0xd8>)
 800ce80:	2201      	movs	r2, #1
 800ce82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce84:	4b13      	ldr	r3, [pc, #76]	@ (800ced4 <vTaskStartScheduler+0xdc>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce8a:	f001 f909 	bl	800e0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce8e:	e00f      	b.n	800ceb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce96:	d10b      	bne.n	800ceb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	60fb      	str	r3, [r7, #12]
}
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
 800ceae:	e7fd      	b.n	800ceac <vTaskStartScheduler+0xb4>
}
 800ceb0:	bf00      	nop
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	08018e50 	.word	0x08018e50
 800cebc:	0800d559 	.word	0x0800d559
 800cec0:	24032d20 	.word	0x24032d20
 800cec4:	24032828 	.word	0x24032828
 800cec8:	240000c4 	.word	0x240000c4
 800cecc:	24032d1c 	.word	0x24032d1c
 800ced0:	24032d08 	.word	0x24032d08
 800ced4:	24032d00 	.word	0x24032d00

0800ced8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cedc:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <vTaskSuspendAll+0x18>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a03      	ldr	r2, [pc, #12]	@ (800cef0 <vTaskSuspendAll+0x18>)
 800cee4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cee6:	bf00      	nop
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	24032d24 	.word	0x24032d24

0800cef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf02:	4b42      	ldr	r3, [pc, #264]	@ (800d00c <xTaskResumeAll+0x118>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10b      	bne.n	800cf22 <xTaskResumeAll+0x2e>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	603b      	str	r3, [r7, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	bf00      	nop
 800cf20:	e7fd      	b.n	800cf1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf22:	f001 f961 	bl	800e1e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf26:	4b39      	ldr	r3, [pc, #228]	@ (800d00c <xTaskResumeAll+0x118>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	4a37      	ldr	r2, [pc, #220]	@ (800d00c <xTaskResumeAll+0x118>)
 800cf2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf30:	4b36      	ldr	r3, [pc, #216]	@ (800d00c <xTaskResumeAll+0x118>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d162      	bne.n	800cffe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf38:	4b35      	ldr	r3, [pc, #212]	@ (800d010 <xTaskResumeAll+0x11c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d05e      	beq.n	800cffe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf40:	e02f      	b.n	800cfa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf42:	4b34      	ldr	r3, [pc, #208]	@ (800d014 <xTaskResumeAll+0x120>)
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3318      	adds	r3, #24
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff f83a 	bl	800bfc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3304      	adds	r3, #4
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff f835 	bl	800bfc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf62:	4b2d      	ldr	r3, [pc, #180]	@ (800d018 <xTaskResumeAll+0x124>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d903      	bls.n	800cf72 <xTaskResumeAll+0x7e>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6e:	4a2a      	ldr	r2, [pc, #168]	@ (800d018 <xTaskResumeAll+0x124>)
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf76:	4613      	mov	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	4a27      	ldr	r2, [pc, #156]	@ (800d01c <xTaskResumeAll+0x128>)
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4619      	mov	r1, r3
 800cf88:	4610      	mov	r0, r2
 800cf8a:	f7fe ffc0 	bl	800bf0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf92:	4b23      	ldr	r3, [pc, #140]	@ (800d020 <xTaskResumeAll+0x12c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d302      	bcc.n	800cfa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cf9c:	4b21      	ldr	r3, [pc, #132]	@ (800d024 <xTaskResumeAll+0x130>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfa2:	4b1c      	ldr	r3, [pc, #112]	@ (800d014 <xTaskResumeAll+0x120>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1cb      	bne.n	800cf42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cfb0:	f000 fb8e 	bl	800d6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800d028 <xTaskResumeAll+0x134>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d010      	beq.n	800cfe2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cfc0:	f000 f846 	bl	800d050 <xTaskIncrementTick>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cfca:	4b16      	ldr	r3, [pc, #88]	@ (800d024 <xTaskResumeAll+0x130>)
 800cfcc:	2201      	movs	r2, #1
 800cfce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1f1      	bne.n	800cfc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cfdc:	4b12      	ldr	r3, [pc, #72]	@ (800d028 <xTaskResumeAll+0x134>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cfe2:	4b10      	ldr	r3, [pc, #64]	@ (800d024 <xTaskResumeAll+0x130>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d009      	beq.n	800cffe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cfea:	2301      	movs	r3, #1
 800cfec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cfee:	4b0f      	ldr	r3, [pc, #60]	@ (800d02c <xTaskResumeAll+0x138>)
 800cff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cffe:	f001 f925 	bl	800e24c <vPortExitCritical>

	return xAlreadyYielded;
 800d002:	68bb      	ldr	r3, [r7, #8]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	24032d24 	.word	0x24032d24
 800d010:	24032cfc 	.word	0x24032cfc
 800d014:	24032cbc 	.word	0x24032cbc
 800d018:	24032d04 	.word	0x24032d04
 800d01c:	2403282c 	.word	0x2403282c
 800d020:	24032828 	.word	0x24032828
 800d024:	24032d10 	.word	0x24032d10
 800d028:	24032d0c 	.word	0x24032d0c
 800d02c:	e000ed04 	.word	0xe000ed04

0800d030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d036:	4b05      	ldr	r3, [pc, #20]	@ (800d04c <xTaskGetTickCount+0x1c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d03c:	687b      	ldr	r3, [r7, #4]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	24032d00 	.word	0x24032d00

0800d050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d05a:	4b4f      	ldr	r3, [pc, #316]	@ (800d198 <xTaskIncrementTick+0x148>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f040 8090 	bne.w	800d184 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d064:	4b4d      	ldr	r3, [pc, #308]	@ (800d19c <xTaskIncrementTick+0x14c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3301      	adds	r3, #1
 800d06a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d06c:	4a4b      	ldr	r2, [pc, #300]	@ (800d19c <xTaskIncrementTick+0x14c>)
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d121      	bne.n	800d0bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d078:	4b49      	ldr	r3, [pc, #292]	@ (800d1a0 <xTaskIncrementTick+0x150>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00b      	beq.n	800d09a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	603b      	str	r3, [r7, #0]
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	e7fd      	b.n	800d096 <xTaskIncrementTick+0x46>
 800d09a:	4b41      	ldr	r3, [pc, #260]	@ (800d1a0 <xTaskIncrementTick+0x150>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	4b40      	ldr	r3, [pc, #256]	@ (800d1a4 <xTaskIncrementTick+0x154>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a3e      	ldr	r2, [pc, #248]	@ (800d1a0 <xTaskIncrementTick+0x150>)
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	4a3e      	ldr	r2, [pc, #248]	@ (800d1a4 <xTaskIncrementTick+0x154>)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	4b3e      	ldr	r3, [pc, #248]	@ (800d1a8 <xTaskIncrementTick+0x158>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	4a3c      	ldr	r2, [pc, #240]	@ (800d1a8 <xTaskIncrementTick+0x158>)
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	f000 fb0a 	bl	800d6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0bc:	4b3b      	ldr	r3, [pc, #236]	@ (800d1ac <xTaskIncrementTick+0x15c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d349      	bcc.n	800d15a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0c6:	4b36      	ldr	r3, [pc, #216]	@ (800d1a0 <xTaskIncrementTick+0x150>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d104      	bne.n	800d0da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0d0:	4b36      	ldr	r3, [pc, #216]	@ (800d1ac <xTaskIncrementTick+0x15c>)
 800d0d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0d6:	601a      	str	r2, [r3, #0]
					break;
 800d0d8:	e03f      	b.n	800d15a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0da:	4b31      	ldr	r3, [pc, #196]	@ (800d1a0 <xTaskIncrementTick+0x150>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d203      	bcs.n	800d0fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0f2:	4a2e      	ldr	r2, [pc, #184]	@ (800d1ac <xTaskIncrementTick+0x15c>)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0f8:	e02f      	b.n	800d15a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe ff62 	bl	800bfc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	3318      	adds	r3, #24
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe ff59 	bl	800bfc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d11a:	4b25      	ldr	r3, [pc, #148]	@ (800d1b0 <xTaskIncrementTick+0x160>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d903      	bls.n	800d12a <xTaskIncrementTick+0xda>
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d126:	4a22      	ldr	r2, [pc, #136]	@ (800d1b0 <xTaskIncrementTick+0x160>)
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4a1f      	ldr	r2, [pc, #124]	@ (800d1b4 <xTaskIncrementTick+0x164>)
 800d138:	441a      	add	r2, r3
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	3304      	adds	r3, #4
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f7fe fee4 	bl	800bf0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d14a:	4b1b      	ldr	r3, [pc, #108]	@ (800d1b8 <xTaskIncrementTick+0x168>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d150:	429a      	cmp	r2, r3
 800d152:	d3b8      	bcc.n	800d0c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d154:	2301      	movs	r3, #1
 800d156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d158:	e7b5      	b.n	800d0c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d15a:	4b17      	ldr	r3, [pc, #92]	@ (800d1b8 <xTaskIncrementTick+0x168>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d160:	4914      	ldr	r1, [pc, #80]	@ (800d1b4 <xTaskIncrementTick+0x164>)
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	440b      	add	r3, r1
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d901      	bls.n	800d176 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d172:	2301      	movs	r3, #1
 800d174:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d176:	4b11      	ldr	r3, [pc, #68]	@ (800d1bc <xTaskIncrementTick+0x16c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d17e:	2301      	movs	r3, #1
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	e004      	b.n	800d18e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d184:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c0 <xTaskIncrementTick+0x170>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3301      	adds	r3, #1
 800d18a:	4a0d      	ldr	r2, [pc, #52]	@ (800d1c0 <xTaskIncrementTick+0x170>)
 800d18c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	24032d24 	.word	0x24032d24
 800d19c:	24032d00 	.word	0x24032d00
 800d1a0:	24032cb4 	.word	0x24032cb4
 800d1a4:	24032cb8 	.word	0x24032cb8
 800d1a8:	24032d14 	.word	0x24032d14
 800d1ac:	24032d1c 	.word	0x24032d1c
 800d1b0:	24032d04 	.word	0x24032d04
 800d1b4:	2403282c 	.word	0x2403282c
 800d1b8:	24032828 	.word	0x24032828
 800d1bc:	24032d10 	.word	0x24032d10
 800d1c0:	24032d0c 	.word	0x24032d0c

0800d1c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800d278 <vTaskSwitchContext+0xb4>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1d2:	4b2a      	ldr	r3, [pc, #168]	@ (800d27c <vTaskSwitchContext+0xb8>)
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d1d8:	e047      	b.n	800d26a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d1da:	4b28      	ldr	r3, [pc, #160]	@ (800d27c <vTaskSwitchContext+0xb8>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e0:	4b27      	ldr	r3, [pc, #156]	@ (800d280 <vTaskSwitchContext+0xbc>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]
 800d1e6:	e011      	b.n	800d20c <vTaskSwitchContext+0x48>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <vTaskSwitchContext+0x42>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	607b      	str	r3, [r7, #4]
}
 800d200:	bf00      	nop
 800d202:	bf00      	nop
 800d204:	e7fd      	b.n	800d202 <vTaskSwitchContext+0x3e>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3b01      	subs	r3, #1
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	491d      	ldr	r1, [pc, #116]	@ (800d284 <vTaskSwitchContext+0xc0>)
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	440b      	add	r3, r1
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d0e3      	beq.n	800d1e8 <vTaskSwitchContext+0x24>
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4a16      	ldr	r2, [pc, #88]	@ (800d284 <vTaskSwitchContext+0xc0>)
 800d22c:	4413      	add	r3, r2
 800d22e:	60bb      	str	r3, [r7, #8]
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	605a      	str	r2, [r3, #4]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	3308      	adds	r3, #8
 800d242:	429a      	cmp	r2, r3
 800d244:	d104      	bne.n	800d250 <vTaskSwitchContext+0x8c>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	605a      	str	r2, [r3, #4]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	4a0c      	ldr	r2, [pc, #48]	@ (800d288 <vTaskSwitchContext+0xc4>)
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	4a09      	ldr	r2, [pc, #36]	@ (800d280 <vTaskSwitchContext+0xbc>)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d260:	4b09      	ldr	r3, [pc, #36]	@ (800d288 <vTaskSwitchContext+0xc4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3354      	adds	r3, #84	@ 0x54
 800d266:	4a09      	ldr	r2, [pc, #36]	@ (800d28c <vTaskSwitchContext+0xc8>)
 800d268:	6013      	str	r3, [r2, #0]
}
 800d26a:	bf00      	nop
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	24032d24 	.word	0x24032d24
 800d27c:	24032d10 	.word	0x24032d10
 800d280:	24032d04 	.word	0x24032d04
 800d284:	2403282c 	.word	0x2403282c
 800d288:	24032828 	.word	0x24032828
 800d28c:	240000c4 	.word	0x240000c4

0800d290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	60fb      	str	r3, [r7, #12]
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2b8:	4b07      	ldr	r3, [pc, #28]	@ (800d2d8 <vTaskPlaceOnEventList+0x48>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3318      	adds	r3, #24
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7fe fe48 	bl	800bf56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	6838      	ldr	r0, [r7, #0]
 800d2ca:	f000 faaf 	bl	800d82c <prvAddCurrentTaskToDelayedList>
}
 800d2ce:	bf00      	nop
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	24032828 	.word	0x24032828

0800d2dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10b      	bne.n	800d306 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	617b      	str	r3, [r7, #20]
}
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	e7fd      	b.n	800d302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d306:	4b0a      	ldr	r3, [pc, #40]	@ (800d330 <vTaskPlaceOnEventListRestricted+0x54>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3318      	adds	r3, #24
 800d30c:	4619      	mov	r1, r3
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7fe fdfd 	bl	800bf0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d31a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d31e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	68b8      	ldr	r0, [r7, #8]
 800d324:	f000 fa82 	bl	800d82c <prvAddCurrentTaskToDelayedList>
	}
 800d328:	bf00      	nop
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	24032828 	.word	0x24032828

0800d334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10b      	bne.n	800d362 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	60fb      	str	r3, [r7, #12]
}
 800d35c:	bf00      	nop
 800d35e:	bf00      	nop
 800d360:	e7fd      	b.n	800d35e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	3318      	adds	r3, #24
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe fe2e 	bl	800bfc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d36c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3e4 <xTaskRemoveFromEventList+0xb0>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d11d      	bne.n	800d3b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	3304      	adds	r3, #4
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe fe25 	bl	800bfc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d382:	4b19      	ldr	r3, [pc, #100]	@ (800d3e8 <xTaskRemoveFromEventList+0xb4>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d903      	bls.n	800d392 <xTaskRemoveFromEventList+0x5e>
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d38e:	4a16      	ldr	r2, [pc, #88]	@ (800d3e8 <xTaskRemoveFromEventList+0xb4>)
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4a13      	ldr	r2, [pc, #76]	@ (800d3ec <xTaskRemoveFromEventList+0xb8>)
 800d3a0:	441a      	add	r2, r3
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	f7fe fdb0 	bl	800bf0e <vListInsertEnd>
 800d3ae:	e005      	b.n	800d3bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3318      	adds	r3, #24
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	480e      	ldr	r0, [pc, #56]	@ (800d3f0 <xTaskRemoveFromEventList+0xbc>)
 800d3b8:	f7fe fda9 	bl	800bf0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f4 <xTaskRemoveFromEventList+0xc0>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d905      	bls.n	800d3d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f8 <xTaskRemoveFromEventList+0xc4>)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	e001      	b.n	800d3da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3da:	697b      	ldr	r3, [r7, #20]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	24032d24 	.word	0x24032d24
 800d3e8:	24032d04 	.word	0x24032d04
 800d3ec:	2403282c 	.word	0x2403282c
 800d3f0:	24032cbc 	.word	0x24032cbc
 800d3f4:	24032828 	.word	0x24032828
 800d3f8:	24032d10 	.word	0x24032d10

0800d3fc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10b      	bne.n	800d422 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	60fb      	str	r3, [r7, #12]
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	e7fd      	b.n	800d41e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d422:	f000 fee1 	bl	800e1e8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d426:	4b07      	ldr	r3, [pc, #28]	@ (800d444 <vTaskSetTimeOutState+0x48>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d42e:	4b06      	ldr	r3, [pc, #24]	@ (800d448 <vTaskSetTimeOutState+0x4c>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d436:	f000 ff09 	bl	800e24c <vPortExitCritical>
}
 800d43a:	bf00      	nop
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	24032d14 	.word	0x24032d14
 800d448:	24032d00 	.word	0x24032d00

0800d44c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d454:	4b06      	ldr	r3, [pc, #24]	@ (800d470 <vTaskInternalSetTimeOutState+0x24>)
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d45c:	4b05      	ldr	r3, [pc, #20]	@ (800d474 <vTaskInternalSetTimeOutState+0x28>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	605a      	str	r2, [r3, #4]
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	24032d14 	.word	0x24032d14
 800d474:	24032d00 	.word	0x24032d00

0800d478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10b      	bne.n	800d4a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	613b      	str	r3, [r7, #16]
}
 800d49a:	bf00      	nop
 800d49c:	bf00      	nop
 800d49e:	e7fd      	b.n	800d49c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10b      	bne.n	800d4be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	60fb      	str	r3, [r7, #12]
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	e7fd      	b.n	800d4ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d4be:	f000 fe93 	bl	800e1e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d538 <xTaskCheckForTimeOut+0xc0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4da:	d102      	bne.n	800d4e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	e023      	b.n	800d52a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	4b15      	ldr	r3, [pc, #84]	@ (800d53c <xTaskCheckForTimeOut+0xc4>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d007      	beq.n	800d4fe <xTaskCheckForTimeOut+0x86>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	69ba      	ldr	r2, [r7, #24]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d302      	bcc.n	800d4fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	61fb      	str	r3, [r7, #28]
 800d4fc:	e015      	b.n	800d52a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	429a      	cmp	r2, r3
 800d506:	d20b      	bcs.n	800d520 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff ff99 	bl	800d44c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	e004      	b.n	800d52a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d526:	2301      	movs	r3, #1
 800d528:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d52a:	f000 fe8f 	bl	800e24c <vPortExitCritical>

	return xReturn;
 800d52e:	69fb      	ldr	r3, [r7, #28]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	24032d00 	.word	0x24032d00
 800d53c:	24032d14 	.word	0x24032d14

0800d540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d544:	4b03      	ldr	r3, [pc, #12]	@ (800d554 <vTaskMissedYield+0x14>)
 800d546:	2201      	movs	r2, #1
 800d548:	601a      	str	r2, [r3, #0]
}
 800d54a:	bf00      	nop
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	24032d10 	.word	0x24032d10

0800d558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d560:	f000 f852 	bl	800d608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d564:	4b06      	ldr	r3, [pc, #24]	@ (800d580 <prvIdleTask+0x28>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d9f9      	bls.n	800d560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d56c:	4b05      	ldr	r3, [pc, #20]	@ (800d584 <prvIdleTask+0x2c>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d57c:	e7f0      	b.n	800d560 <prvIdleTask+0x8>
 800d57e:	bf00      	nop
 800d580:	2403282c 	.word	0x2403282c
 800d584:	e000ed04 	.word	0xe000ed04

0800d588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d58e:	2300      	movs	r3, #0
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	e00c      	b.n	800d5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4a12      	ldr	r2, [pc, #72]	@ (800d5e8 <prvInitialiseTaskLists+0x60>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe fc86 	bl	800beb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b37      	cmp	r3, #55	@ 0x37
 800d5b2:	d9ef      	bls.n	800d594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5b4:	480d      	ldr	r0, [pc, #52]	@ (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5b6:	f7fe fc7d 	bl	800beb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ba:	480d      	ldr	r0, [pc, #52]	@ (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5bc:	f7fe fc7a 	bl	800beb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5c0:	480c      	ldr	r0, [pc, #48]	@ (800d5f4 <prvInitialiseTaskLists+0x6c>)
 800d5c2:	f7fe fc77 	bl	800beb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5c6:	480c      	ldr	r0, [pc, #48]	@ (800d5f8 <prvInitialiseTaskLists+0x70>)
 800d5c8:	f7fe fc74 	bl	800beb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5cc:	480b      	ldr	r0, [pc, #44]	@ (800d5fc <prvInitialiseTaskLists+0x74>)
 800d5ce:	f7fe fc71 	bl	800beb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d600 <prvInitialiseTaskLists+0x78>)
 800d5d4:	4a05      	ldr	r2, [pc, #20]	@ (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d604 <prvInitialiseTaskLists+0x7c>)
 800d5da:	4a05      	ldr	r2, [pc, #20]	@ (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	2403282c 	.word	0x2403282c
 800d5ec:	24032c8c 	.word	0x24032c8c
 800d5f0:	24032ca0 	.word	0x24032ca0
 800d5f4:	24032cbc 	.word	0x24032cbc
 800d5f8:	24032cd0 	.word	0x24032cd0
 800d5fc:	24032ce8 	.word	0x24032ce8
 800d600:	24032cb4 	.word	0x24032cb4
 800d604:	24032cb8 	.word	0x24032cb8

0800d608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d60e:	e019      	b.n	800d644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d610:	f000 fdea 	bl	800e1e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d614:	4b10      	ldr	r3, [pc, #64]	@ (800d658 <prvCheckTasksWaitingTermination+0x50>)
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3304      	adds	r3, #4
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fcd1 	bl	800bfc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d626:	4b0d      	ldr	r3, [pc, #52]	@ (800d65c <prvCheckTasksWaitingTermination+0x54>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4a0b      	ldr	r2, [pc, #44]	@ (800d65c <prvCheckTasksWaitingTermination+0x54>)
 800d62e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d630:	4b0b      	ldr	r3, [pc, #44]	@ (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3b01      	subs	r3, #1
 800d636:	4a0a      	ldr	r2, [pc, #40]	@ (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d63a:	f000 fe07 	bl	800e24c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f810 	bl	800d664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d644:	4b06      	ldr	r3, [pc, #24]	@ (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1e1      	bne.n	800d610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d64c:	bf00      	nop
 800d64e:	bf00      	nop
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	24032cd0 	.word	0x24032cd0
 800d65c:	24032cfc 	.word	0x24032cfc
 800d660:	24032ce4 	.word	0x24032ce4

0800d664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3354      	adds	r3, #84	@ 0x54
 800d670:	4618      	mov	r0, r3
 800d672:	f00a fc07 	bl	8017e84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d108      	bne.n	800d692 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d684:	4618      	mov	r0, r3
 800d686:	f000 ff9f 	bl	800e5c8 <vPortFree>
				vPortFree( pxTCB );
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 ff9c 	bl	800e5c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d690:	e019      	b.n	800d6c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d103      	bne.n	800d6a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 ff93 	bl	800e5c8 <vPortFree>
	}
 800d6a2:	e010      	b.n	800d6c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d00b      	beq.n	800d6c6 <prvDeleteTCB+0x62>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <prvDeleteTCB+0x5e>
	}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6e8:	e008      	b.n	800d6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b07      	ldr	r3, [pc, #28]	@ (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	4a04      	ldr	r2, [pc, #16]	@ (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6fa:	6013      	str	r3, [r2, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	24032cb4 	.word	0x24032cb4
 800d70c:	24032d1c 	.word	0x24032d1c

0800d710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d716:	4b0b      	ldr	r3, [pc, #44]	@ (800d744 <xTaskGetSchedulerState+0x34>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d71e:	2301      	movs	r3, #1
 800d720:	607b      	str	r3, [r7, #4]
 800d722:	e008      	b.n	800d736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d724:	4b08      	ldr	r3, [pc, #32]	@ (800d748 <xTaskGetSchedulerState+0x38>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d72c:	2302      	movs	r3, #2
 800d72e:	607b      	str	r3, [r7, #4]
 800d730:	e001      	b.n	800d736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d732:	2300      	movs	r3, #0
 800d734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d736:	687b      	ldr	r3, [r7, #4]
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	24032d08 	.word	0x24032d08
 800d748:	24032d24 	.word	0x24032d24

0800d74c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d058      	beq.n	800d814 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d762:	4b2f      	ldr	r3, [pc, #188]	@ (800d820 <xTaskPriorityDisinherit+0xd4>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d00b      	beq.n	800d784 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	60fb      	str	r3, [r7, #12]
}
 800d77e:	bf00      	nop
 800d780:	bf00      	nop
 800d782:	e7fd      	b.n	800d780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10b      	bne.n	800d7a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	60bb      	str	r3, [r7, #8]
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a8:	1e5a      	subs	r2, r3, #1
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d02c      	beq.n	800d814 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d128      	bne.n	800d814 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fbfe 	bl	800bfc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d824 <xTaskPriorityDisinherit+0xd8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d903      	bls.n	800d7f4 <xTaskPriorityDisinherit+0xa8>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800d824 <xTaskPriorityDisinherit+0xd8>)
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4a09      	ldr	r2, [pc, #36]	@ (800d828 <xTaskPriorityDisinherit+0xdc>)
 800d802:	441a      	add	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	3304      	adds	r3, #4
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7fe fb7f 	bl	800bf0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d814:	697b      	ldr	r3, [r7, #20]
	}
 800d816:	4618      	mov	r0, r3
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	24032828 	.word	0x24032828
 800d824:	24032d04 	.word	0x24032d04
 800d828:	2403282c 	.word	0x2403282c

0800d82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d836:	4b21      	ldr	r3, [pc, #132]	@ (800d8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d83c:	4b20      	ldr	r3, [pc, #128]	@ (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3304      	adds	r3, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe fbc0 	bl	800bfc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d84e:	d10a      	bne.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b1a      	ldr	r3, [pc, #104]	@ (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4819      	ldr	r0, [pc, #100]	@ (800d8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d860:	f7fe fb55 	bl	800bf0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d864:	e026      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4413      	add	r3, r2
 800d86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d86e:	4b14      	ldr	r3, [pc, #80]	@ (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d209      	bcs.n	800d892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b0f      	ldr	r3, [pc, #60]	@ (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7fe fb63 	bl	800bf56 <vListInsert>
}
 800d890:	e010      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d892:	4b0e      	ldr	r3, [pc, #56]	@ (800d8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b0a      	ldr	r3, [pc, #40]	@ (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fe fb59 	bl	800bf56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d202      	bcs.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8ae:	4a08      	ldr	r2, [pc, #32]	@ (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6013      	str	r3, [r2, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	24032d00 	.word	0x24032d00
 800d8c0:	24032828 	.word	0x24032828
 800d8c4:	24032ce8 	.word	0x24032ce8
 800d8c8:	24032cb8 	.word	0x24032cb8
 800d8cc:	24032cb4 	.word	0x24032cb4
 800d8d0:	24032d1c 	.word	0x24032d1c

0800d8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08a      	sub	sp, #40	@ 0x28
 800d8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8de:	f000 fb13 	bl	800df08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d958 <xTimerCreateTimerTask+0x84>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d021      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8f2:	1d3a      	adds	r2, r7, #4
 800d8f4:	f107 0108 	add.w	r1, r7, #8
 800d8f8:	f107 030c 	add.w	r3, r7, #12
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fabf 	bl	800be80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	9202      	str	r2, [sp, #8]
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	2302      	movs	r3, #2
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	460a      	mov	r2, r1
 800d914:	4911      	ldr	r1, [pc, #68]	@ (800d95c <xTimerCreateTimerTask+0x88>)
 800d916:	4812      	ldr	r0, [pc, #72]	@ (800d960 <xTimerCreateTimerTask+0x8c>)
 800d918:	f7ff f87a 	bl	800ca10 <xTaskCreateStatic>
 800d91c:	4603      	mov	r3, r0
 800d91e:	4a11      	ldr	r2, [pc, #68]	@ (800d964 <xTimerCreateTimerTask+0x90>)
 800d920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d922:	4b10      	ldr	r3, [pc, #64]	@ (800d964 <xTimerCreateTimerTask+0x90>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10b      	bne.n	800d94c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	613b      	str	r3, [r7, #16]
}
 800d946:	bf00      	nop
 800d948:	bf00      	nop
 800d94a:	e7fd      	b.n	800d948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d94c:	697b      	ldr	r3, [r7, #20]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	24032d58 	.word	0x24032d58
 800d95c:	08018e58 	.word	0x08018e58
 800d960:	0800daa1 	.word	0x0800daa1
 800d964:	24032d5c 	.word	0x24032d5c

0800d968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	@ 0x28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d976:	2300      	movs	r3, #0
 800d978:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10b      	bne.n	800d998 <xTimerGenericCommand+0x30>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	623b      	str	r3, [r7, #32]
}
 800d992:	bf00      	nop
 800d994:	bf00      	nop
 800d996:	e7fd      	b.n	800d994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d998:	4b19      	ldr	r3, [pc, #100]	@ (800da00 <xTimerGenericCommand+0x98>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d02a      	beq.n	800d9f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	dc18      	bgt.n	800d9e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9b2:	f7ff fead 	bl	800d710 <xTaskGetSchedulerState>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d109      	bne.n	800d9d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9bc:	4b10      	ldr	r3, [pc, #64]	@ (800da00 <xTimerGenericCommand+0x98>)
 800d9be:	6818      	ldr	r0, [r3, #0]
 800d9c0:	f107 0110 	add.w	r1, r7, #16
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9c8:	f7fe fc32 	bl	800c230 <xQueueGenericSend>
 800d9cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d9ce:	e012      	b.n	800d9f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800da00 <xTimerGenericCommand+0x98>)
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	f107 0110 	add.w	r1, r7, #16
 800d9d8:	2300      	movs	r3, #0
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f7fe fc28 	bl	800c230 <xQueueGenericSend>
 800d9e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d9e2:	e008      	b.n	800d9f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9e4:	4b06      	ldr	r3, [pc, #24]	@ (800da00 <xTimerGenericCommand+0x98>)
 800d9e6:	6818      	ldr	r0, [r3, #0]
 800d9e8:	f107 0110 	add.w	r1, r7, #16
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	f7fe fd20 	bl	800c434 <xQueueGenericSendFromISR>
 800d9f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3728      	adds	r7, #40	@ 0x28
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	24032d58 	.word	0x24032d58

0800da04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af02      	add	r7, sp, #8
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0e:	4b23      	ldr	r3, [pc, #140]	@ (800da9c <prvProcessExpiredTimer+0x98>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fad3 	bl	800bfc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d023      	beq.n	800da78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	699a      	ldr	r2, [r3, #24]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	18d1      	adds	r1, r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	6978      	ldr	r0, [r7, #20]
 800da3e:	f000 f8d5 	bl	800dbec <prvInsertTimerInActiveList>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d020      	beq.n	800da8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da48:	2300      	movs	r3, #0
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	2300      	movs	r3, #0
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	2100      	movs	r1, #0
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7ff ff88 	bl	800d968 <xTimerGenericCommand>
 800da58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d114      	bne.n	800da8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	60fb      	str	r3, [r7, #12]
}
 800da72:	bf00      	nop
 800da74:	bf00      	nop
 800da76:	e7fd      	b.n	800da74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da7e:	f023 0301 	bic.w	r3, r3, #1
 800da82:	b2da      	uxtb	r2, r3
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	6978      	ldr	r0, [r7, #20]
 800da90:	4798      	blx	r3
}
 800da92:	bf00      	nop
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	24032d50 	.word	0x24032d50

0800daa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daa8:	f107 0308 	add.w	r3, r7, #8
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f859 	bl	800db64 <prvGetNextExpireTime>
 800dab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	4619      	mov	r1, r3
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 f805 	bl	800dac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dabe:	f000 f8d7 	bl	800dc70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dac2:	bf00      	nop
 800dac4:	e7f0      	b.n	800daa8 <prvTimerTask+0x8>
	...

0800dac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dad2:	f7ff fa01 	bl	800ced8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dad6:	f107 0308 	add.w	r3, r7, #8
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 f866 	bl	800dbac <prvSampleTimeNow>
 800dae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d130      	bne.n	800db4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10a      	bne.n	800db04 <prvProcessTimerOrBlockTask+0x3c>
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d806      	bhi.n	800db04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daf6:	f7ff f9fd 	bl	800cef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dafa:	68f9      	ldr	r1, [r7, #12]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff ff81 	bl	800da04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db02:	e024      	b.n	800db4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d008      	beq.n	800db1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db0a:	4b13      	ldr	r3, [pc, #76]	@ (800db58 <prvProcessTimerOrBlockTask+0x90>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <prvProcessTimerOrBlockTask+0x50>
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <prvProcessTimerOrBlockTask+0x52>
 800db18:	2300      	movs	r3, #0
 800db1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db1c:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <prvProcessTimerOrBlockTask+0x94>)
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	4619      	mov	r1, r3
 800db2a:	f7fe ff3d 	bl	800c9a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db2e:	f7ff f9e1 	bl	800cef4 <xTaskResumeAll>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10a      	bne.n	800db4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db38:	4b09      	ldr	r3, [pc, #36]	@ (800db60 <prvProcessTimerOrBlockTask+0x98>)
 800db3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	f3bf 8f6f 	isb	sy
}
 800db48:	e001      	b.n	800db4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db4a:	f7ff f9d3 	bl	800cef4 <xTaskResumeAll>
}
 800db4e:	bf00      	nop
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	24032d54 	.word	0x24032d54
 800db5c:	24032d58 	.word	0x24032d58
 800db60:	e000ed04 	.word	0xe000ed04

0800db64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dba8 <prvGetNextExpireTime+0x44>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <prvGetNextExpireTime+0x16>
 800db76:	2201      	movs	r2, #1
 800db78:	e000      	b.n	800db7c <prvGetNextExpireTime+0x18>
 800db7a:	2200      	movs	r2, #0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d105      	bne.n	800db94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db88:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <prvGetNextExpireTime+0x44>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	e001      	b.n	800db98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db94:	2300      	movs	r3, #0
 800db96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db98:	68fb      	ldr	r3, [r7, #12]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	24032d50 	.word	0x24032d50

0800dbac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dbb4:	f7ff fa3c 	bl	800d030 <xTaskGetTickCount>
 800dbb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbba:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe8 <prvSampleTimeNow+0x3c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d205      	bcs.n	800dbd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbc4:	f000 f93a 	bl	800de3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e002      	b.n	800dbd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbd6:	4a04      	ldr	r2, [pc, #16]	@ (800dbe8 <prvSampleTimeNow+0x3c>)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	24032d60 	.word	0x24032d60

0800dbec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d812      	bhi.n	800dc38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	1ad2      	subs	r2, r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d302      	bcc.n	800dc26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc20:	2301      	movs	r3, #1
 800dc22:	617b      	str	r3, [r7, #20]
 800dc24:	e01b      	b.n	800dc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc26:	4b10      	ldr	r3, [pc, #64]	@ (800dc68 <prvInsertTimerInActiveList+0x7c>)
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4610      	mov	r0, r2
 800dc32:	f7fe f990 	bl	800bf56 <vListInsert>
 800dc36:	e012      	b.n	800dc5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d206      	bcs.n	800dc4e <prvInsertTimerInActiveList+0x62>
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d302      	bcc.n	800dc4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	e007      	b.n	800dc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc4e:	4b07      	ldr	r3, [pc, #28]	@ (800dc6c <prvInsertTimerInActiveList+0x80>)
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3304      	adds	r3, #4
 800dc56:	4619      	mov	r1, r3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	f7fe f97c 	bl	800bf56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc5e:	697b      	ldr	r3, [r7, #20]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	24032d54 	.word	0x24032d54
 800dc6c:	24032d50 	.word	0x24032d50

0800dc70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08e      	sub	sp, #56	@ 0x38
 800dc74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc76:	e0ce      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	da19      	bge.n	800dcb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc7e:	1d3b      	adds	r3, r7, #4
 800dc80:	3304      	adds	r3, #4
 800dc82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10b      	bne.n	800dca2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	61fb      	str	r3, [r7, #28]
}
 800dc9c:	bf00      	nop
 800dc9e:	bf00      	nop
 800dca0:	e7fd      	b.n	800dc9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dca8:	6850      	ldr	r0, [r2, #4]
 800dcaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcac:	6892      	ldr	r2, [r2, #8]
 800dcae:	4611      	mov	r1, r2
 800dcb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f2c0 80ae 	blt.w	800de16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d004      	beq.n	800dcd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe f97c 	bl	800bfc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcd0:	463b      	mov	r3, r7
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff ff6a 	bl	800dbac <prvSampleTimeNow>
 800dcd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b09      	cmp	r3, #9
 800dcde:	f200 8097 	bhi.w	800de10 <prvProcessReceivedCommands+0x1a0>
 800dce2:	a201      	add	r2, pc, #4	@ (adr r2, 800dce8 <prvProcessReceivedCommands+0x78>)
 800dce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce8:	0800dd11 	.word	0x0800dd11
 800dcec:	0800dd11 	.word	0x0800dd11
 800dcf0:	0800dd11 	.word	0x0800dd11
 800dcf4:	0800dd87 	.word	0x0800dd87
 800dcf8:	0800dd9b 	.word	0x0800dd9b
 800dcfc:	0800dde7 	.word	0x0800dde7
 800dd00:	0800dd11 	.word	0x0800dd11
 800dd04:	0800dd11 	.word	0x0800dd11
 800dd08:	0800dd87 	.word	0x0800dd87
 800dd0c:	0800dd9b 	.word	0x0800dd9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	18d1      	adds	r1, r2, r3
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd30:	f7ff ff5c 	bl	800dbec <prvInsertTimerInActiveList>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d06c      	beq.n	800de14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd48:	f003 0304 	and.w	r3, r3, #4
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d061      	beq.n	800de14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	441a      	add	r2, r3
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	2100      	movs	r1, #0
 800dd60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd62:	f7ff fe01 	bl	800d968 <xTimerGenericCommand>
 800dd66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d152      	bne.n	800de14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	61bb      	str	r3, [r7, #24]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd8c:	f023 0301 	bic.w	r3, r3, #1
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd98:	e03d      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dda0:	f043 0301 	orr.w	r3, r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb4:	699b      	ldr	r3, [r3, #24]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10b      	bne.n	800ddd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	617b      	str	r3, [r7, #20]
}
 800ddcc:	bf00      	nop
 800ddce:	bf00      	nop
 800ddd0:	e7fd      	b.n	800ddce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd4:	699a      	ldr	r2, [r3, #24]
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd8:	18d1      	adds	r1, r2, r3
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dde0:	f7ff ff04 	bl	800dbec <prvInsertTimerInActiveList>
					break;
 800dde4:	e017      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddec:	f003 0302 	and.w	r3, r3, #2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d103      	bne.n	800ddfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ddf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddf6:	f000 fbe7 	bl	800e5c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddfa:	e00c      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de02:	f023 0301 	bic.w	r3, r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de0e:	e002      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800de10:	bf00      	nop
 800de12:	e000      	b.n	800de16 <prvProcessReceivedCommands+0x1a6>
					break;
 800de14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de16:	4b08      	ldr	r3, [pc, #32]	@ (800de38 <prvProcessReceivedCommands+0x1c8>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	1d39      	adds	r1, r7, #4
 800de1c:	2200      	movs	r2, #0
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe fba6 	bl	800c570 <xQueueReceive>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	f47f af26 	bne.w	800dc78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de2c:	bf00      	nop
 800de2e:	bf00      	nop
 800de30:	3730      	adds	r7, #48	@ 0x30
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	24032d58 	.word	0x24032d58

0800de3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de42:	e049      	b.n	800ded8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de44:	4b2e      	ldr	r3, [pc, #184]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de4e:	4b2c      	ldr	r3, [pc, #176]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fe f8b3 	bl	800bfc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a1b      	ldr	r3, [r3, #32]
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de70:	f003 0304 	and.w	r3, r3, #4
 800de74:	2b00      	cmp	r3, #0
 800de76:	d02f      	beq.n	800ded8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	429a      	cmp	r2, r3
 800de88:	d90e      	bls.n	800dea8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de96:	4b1a      	ldr	r3, [pc, #104]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3304      	adds	r3, #4
 800de9e:	4619      	mov	r1, r3
 800dea0:	4610      	mov	r0, r2
 800dea2:	f7fe f858 	bl	800bf56 <vListInsert>
 800dea6:	e017      	b.n	800ded8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dea8:	2300      	movs	r3, #0
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	2300      	movs	r3, #0
 800deae:	693a      	ldr	r2, [r7, #16]
 800deb0:	2100      	movs	r1, #0
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff fd58 	bl	800d968 <xTimerGenericCommand>
 800deb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10b      	bne.n	800ded8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	603b      	str	r3, [r7, #0]
}
 800ded2:	bf00      	nop
 800ded4:	bf00      	nop
 800ded6:	e7fd      	b.n	800ded4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ded8:	4b09      	ldr	r3, [pc, #36]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1b0      	bne.n	800de44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dee2:	4b07      	ldr	r3, [pc, #28]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dee8:	4b06      	ldr	r3, [pc, #24]	@ (800df04 <prvSwitchTimerLists+0xc8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a04      	ldr	r2, [pc, #16]	@ (800df00 <prvSwitchTimerLists+0xc4>)
 800deee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800def0:	4a04      	ldr	r2, [pc, #16]	@ (800df04 <prvSwitchTimerLists+0xc8>)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	6013      	str	r3, [r2, #0]
}
 800def6:	bf00      	nop
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	24032d50 	.word	0x24032d50
 800df04:	24032d54 	.word	0x24032d54

0800df08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df0e:	f000 f96b 	bl	800e1e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df12:	4b15      	ldr	r3, [pc, #84]	@ (800df68 <prvCheckForValidListAndQueue+0x60>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d120      	bne.n	800df5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df1a:	4814      	ldr	r0, [pc, #80]	@ (800df6c <prvCheckForValidListAndQueue+0x64>)
 800df1c:	f7fd ffca 	bl	800beb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df20:	4813      	ldr	r0, [pc, #76]	@ (800df70 <prvCheckForValidListAndQueue+0x68>)
 800df22:	f7fd ffc7 	bl	800beb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df26:	4b13      	ldr	r3, [pc, #76]	@ (800df74 <prvCheckForValidListAndQueue+0x6c>)
 800df28:	4a10      	ldr	r2, [pc, #64]	@ (800df6c <prvCheckForValidListAndQueue+0x64>)
 800df2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df2c:	4b12      	ldr	r3, [pc, #72]	@ (800df78 <prvCheckForValidListAndQueue+0x70>)
 800df2e:	4a10      	ldr	r2, [pc, #64]	@ (800df70 <prvCheckForValidListAndQueue+0x68>)
 800df30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df32:	2300      	movs	r3, #0
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	4b11      	ldr	r3, [pc, #68]	@ (800df7c <prvCheckForValidListAndQueue+0x74>)
 800df38:	4a11      	ldr	r2, [pc, #68]	@ (800df80 <prvCheckForValidListAndQueue+0x78>)
 800df3a:	2110      	movs	r1, #16
 800df3c:	200a      	movs	r0, #10
 800df3e:	f7fe f8d7 	bl	800c0f0 <xQueueGenericCreateStatic>
 800df42:	4603      	mov	r3, r0
 800df44:	4a08      	ldr	r2, [pc, #32]	@ (800df68 <prvCheckForValidListAndQueue+0x60>)
 800df46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df48:	4b07      	ldr	r3, [pc, #28]	@ (800df68 <prvCheckForValidListAndQueue+0x60>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d005      	beq.n	800df5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df50:	4b05      	ldr	r3, [pc, #20]	@ (800df68 <prvCheckForValidListAndQueue+0x60>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	490b      	ldr	r1, [pc, #44]	@ (800df84 <prvCheckForValidListAndQueue+0x7c>)
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe fcfc 	bl	800c954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df5c:	f000 f976 	bl	800e24c <vPortExitCritical>
}
 800df60:	bf00      	nop
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	24032d58 	.word	0x24032d58
 800df6c:	24032d28 	.word	0x24032d28
 800df70:	24032d3c 	.word	0x24032d3c
 800df74:	24032d50 	.word	0x24032d50
 800df78:	24032d54 	.word	0x24032d54
 800df7c:	24032e04 	.word	0x24032e04
 800df80:	24032d64 	.word	0x24032d64
 800df84:	08018e60 	.word	0x08018e60

0800df88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3b04      	subs	r3, #4
 800df98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dfa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	3b04      	subs	r3, #4
 800dfa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	f023 0201 	bic.w	r2, r3, #1
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3b04      	subs	r3, #4
 800dfb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfb8:	4a0c      	ldr	r2, [pc, #48]	@ (800dfec <pxPortInitialiseStack+0x64>)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3b14      	subs	r3, #20
 800dfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3b04      	subs	r3, #4
 800dfce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f06f 0202 	mvn.w	r2, #2
 800dfd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3b20      	subs	r3, #32
 800dfdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfde:	68fb      	ldr	r3, [r7, #12]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	0800dff1 	.word	0x0800dff1

0800dff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dffa:	4b13      	ldr	r3, [pc, #76]	@ (800e048 <prvTaskExitError+0x58>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e002:	d00b      	beq.n	800e01c <prvTaskExitError+0x2c>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	60fb      	str	r3, [r7, #12]
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	e7fd      	b.n	800e018 <prvTaskExitError+0x28>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	60bb      	str	r3, [r7, #8]
}
 800e02e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e030:	bf00      	nop
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0fc      	beq.n	800e032 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	24000014 	.word	0x24000014
 800e04c:	00000000 	.word	0x00000000

0800e050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e050:	4b07      	ldr	r3, [pc, #28]	@ (800e070 <pxCurrentTCBConst2>)
 800e052:	6819      	ldr	r1, [r3, #0]
 800e054:	6808      	ldr	r0, [r1, #0]
 800e056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	f380 8809 	msr	PSP, r0
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f04f 0000 	mov.w	r0, #0
 800e066:	f380 8811 	msr	BASEPRI, r0
 800e06a:	4770      	bx	lr
 800e06c:	f3af 8000 	nop.w

0800e070 <pxCurrentTCBConst2>:
 800e070:	24032828 	.word	0x24032828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop

0800e078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e078:	4808      	ldr	r0, [pc, #32]	@ (800e09c <prvPortStartFirstTask+0x24>)
 800e07a:	6800      	ldr	r0, [r0, #0]
 800e07c:	6800      	ldr	r0, [r0, #0]
 800e07e:	f380 8808 	msr	MSP, r0
 800e082:	f04f 0000 	mov.w	r0, #0
 800e086:	f380 8814 	msr	CONTROL, r0
 800e08a:	b662      	cpsie	i
 800e08c:	b661      	cpsie	f
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	df00      	svc	0
 800e098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e09a:	bf00      	nop
 800e09c:	e000ed08 	.word	0xe000ed08

0800e0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0a6:	4b47      	ldr	r3, [pc, #284]	@ (800e1c4 <xPortStartScheduler+0x124>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a47      	ldr	r2, [pc, #284]	@ (800e1c8 <xPortStartScheduler+0x128>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d10b      	bne.n	800e0c8 <xPortStartScheduler+0x28>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	613b      	str	r3, [r7, #16]
}
 800e0c2:	bf00      	nop
 800e0c4:	bf00      	nop
 800e0c6:	e7fd      	b.n	800e0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0c8:	4b3e      	ldr	r3, [pc, #248]	@ (800e1c4 <xPortStartScheduler+0x124>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a3f      	ldr	r2, [pc, #252]	@ (800e1cc <xPortStartScheduler+0x12c>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d10b      	bne.n	800e0ea <xPortStartScheduler+0x4a>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	60fb      	str	r3, [r7, #12]
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop
 800e0e8:	e7fd      	b.n	800e0e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0ea:	4b39      	ldr	r3, [pc, #228]	@ (800e1d0 <xPortStartScheduler+0x130>)
 800e0ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	22ff      	movs	r2, #255	@ 0xff
 800e0fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	b2db      	uxtb	r3, r3
 800e102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	4b31      	ldr	r3, [pc, #196]	@ (800e1d4 <xPortStartScheduler+0x134>)
 800e110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e112:	4b31      	ldr	r3, [pc, #196]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e114:	2207      	movs	r2, #7
 800e116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e118:	e009      	b.n	800e12e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e11a:	4b2f      	ldr	r3, [pc, #188]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3b01      	subs	r3, #1
 800e120:	4a2d      	ldr	r2, [pc, #180]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e124:	78fb      	ldrb	r3, [r7, #3]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e12e:	78fb      	ldrb	r3, [r7, #3]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e136:	2b80      	cmp	r3, #128	@ 0x80
 800e138:	d0ef      	beq.n	800e11a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e13a:	4b27      	ldr	r3, [pc, #156]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f1c3 0307 	rsb	r3, r3, #7
 800e142:	2b04      	cmp	r3, #4
 800e144:	d00b      	beq.n	800e15e <xPortStartScheduler+0xbe>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	60bb      	str	r3, [r7, #8]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e15e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	021b      	lsls	r3, r3, #8
 800e164:	4a1c      	ldr	r2, [pc, #112]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e168:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e170:	4a19      	ldr	r2, [pc, #100]	@ (800e1d8 <xPortStartScheduler+0x138>)
 800e172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	b2da      	uxtb	r2, r3
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e17c:	4b17      	ldr	r3, [pc, #92]	@ (800e1dc <xPortStartScheduler+0x13c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a16      	ldr	r2, [pc, #88]	@ (800e1dc <xPortStartScheduler+0x13c>)
 800e182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e188:	4b14      	ldr	r3, [pc, #80]	@ (800e1dc <xPortStartScheduler+0x13c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a13      	ldr	r2, [pc, #76]	@ (800e1dc <xPortStartScheduler+0x13c>)
 800e18e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e194:	f000 f8da 	bl	800e34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e198:	4b11      	ldr	r3, [pc, #68]	@ (800e1e0 <xPortStartScheduler+0x140>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e19e:	f000 f8f9 	bl	800e394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1a2:	4b10      	ldr	r3, [pc, #64]	@ (800e1e4 <xPortStartScheduler+0x144>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a0f      	ldr	r2, [pc, #60]	@ (800e1e4 <xPortStartScheduler+0x144>)
 800e1a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e1ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1ae:	f7ff ff63 	bl	800e078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1b2:	f7ff f807 	bl	800d1c4 <vTaskSwitchContext>
	prvTaskExitError();
 800e1b6:	f7ff ff1b 	bl	800dff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	e000ed00 	.word	0xe000ed00
 800e1c8:	410fc271 	.word	0x410fc271
 800e1cc:	410fc270 	.word	0x410fc270
 800e1d0:	e000e400 	.word	0xe000e400
 800e1d4:	24032e54 	.word	0x24032e54
 800e1d8:	24032e58 	.word	0x24032e58
 800e1dc:	e000ed20 	.word	0xe000ed20
 800e1e0:	24000014 	.word	0x24000014
 800e1e4:	e000ef34 	.word	0xe000ef34

0800e1e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	607b      	str	r3, [r7, #4]
}
 800e200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e202:	4b10      	ldr	r3, [pc, #64]	@ (800e244 <vPortEnterCritical+0x5c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3301      	adds	r3, #1
 800e208:	4a0e      	ldr	r2, [pc, #56]	@ (800e244 <vPortEnterCritical+0x5c>)
 800e20a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e20c:	4b0d      	ldr	r3, [pc, #52]	@ (800e244 <vPortEnterCritical+0x5c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d110      	bne.n	800e236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e214:	4b0c      	ldr	r3, [pc, #48]	@ (800e248 <vPortEnterCritical+0x60>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <vPortEnterCritical+0x4e>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	603b      	str	r3, [r7, #0]
}
 800e230:	bf00      	nop
 800e232:	bf00      	nop
 800e234:	e7fd      	b.n	800e232 <vPortEnterCritical+0x4a>
	}
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	24000014 	.word	0x24000014
 800e248:	e000ed04 	.word	0xe000ed04

0800e24c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e252:	4b12      	ldr	r3, [pc, #72]	@ (800e29c <vPortExitCritical+0x50>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10b      	bne.n	800e272 <vPortExitCritical+0x26>
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	607b      	str	r3, [r7, #4]
}
 800e26c:	bf00      	nop
 800e26e:	bf00      	nop
 800e270:	e7fd      	b.n	800e26e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e272:	4b0a      	ldr	r3, [pc, #40]	@ (800e29c <vPortExitCritical+0x50>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3b01      	subs	r3, #1
 800e278:	4a08      	ldr	r2, [pc, #32]	@ (800e29c <vPortExitCritical+0x50>)
 800e27a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e27c:	4b07      	ldr	r3, [pc, #28]	@ (800e29c <vPortExitCritical+0x50>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <vPortExitCritical+0x44>
 800e284:	2300      	movs	r3, #0
 800e286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	f383 8811 	msr	BASEPRI, r3
}
 800e28e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	24000014 	.word	0x24000014

0800e2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2a0:	f3ef 8009 	mrs	r0, PSP
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	4b15      	ldr	r3, [pc, #84]	@ (800e300 <pxCurrentTCBConst>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	f01e 0f10 	tst.w	lr, #16
 800e2b0:	bf08      	it	eq
 800e2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ba:	6010      	str	r0, [r2, #0]
 800e2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e2c4:	f380 8811 	msr	BASEPRI, r0
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f7fe ff78 	bl	800d1c4 <vTaskSwitchContext>
 800e2d4:	f04f 0000 	mov.w	r0, #0
 800e2d8:	f380 8811 	msr	BASEPRI, r0
 800e2dc:	bc09      	pop	{r0, r3}
 800e2de:	6819      	ldr	r1, [r3, #0]
 800e2e0:	6808      	ldr	r0, [r1, #0]
 800e2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e6:	f01e 0f10 	tst.w	lr, #16
 800e2ea:	bf08      	it	eq
 800e2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2f0:	f380 8809 	msr	PSP, r0
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	f3af 8000 	nop.w

0800e300 <pxCurrentTCBConst>:
 800e300:	24032828 	.word	0x24032828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop

0800e308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
	__asm volatile
 800e30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	607b      	str	r3, [r7, #4]
}
 800e320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e322:	f7fe fe95 	bl	800d050 <xTaskIncrementTick>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e32c:	4b06      	ldr	r3, [pc, #24]	@ (800e348 <xPortSysTickHandler+0x40>)
 800e32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e332:	601a      	str	r2, [r3, #0]
 800e334:	2300      	movs	r3, #0
 800e336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f383 8811 	msr	BASEPRI, r3
}
 800e33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e350:	4b0b      	ldr	r3, [pc, #44]	@ (800e380 <vPortSetupTimerInterrupt+0x34>)
 800e352:	2200      	movs	r2, #0
 800e354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e356:	4b0b      	ldr	r3, [pc, #44]	@ (800e384 <vPortSetupTimerInterrupt+0x38>)
 800e358:	2200      	movs	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e35c:	4b0a      	ldr	r3, [pc, #40]	@ (800e388 <vPortSetupTimerInterrupt+0x3c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a0a      	ldr	r2, [pc, #40]	@ (800e38c <vPortSetupTimerInterrupt+0x40>)
 800e362:	fba2 2303 	umull	r2, r3, r2, r3
 800e366:	099b      	lsrs	r3, r3, #6
 800e368:	4a09      	ldr	r2, [pc, #36]	@ (800e390 <vPortSetupTimerInterrupt+0x44>)
 800e36a:	3b01      	subs	r3, #1
 800e36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e36e:	4b04      	ldr	r3, [pc, #16]	@ (800e380 <vPortSetupTimerInterrupt+0x34>)
 800e370:	2207      	movs	r2, #7
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	bf00      	nop
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	e000e010 	.word	0xe000e010
 800e384:	e000e018 	.word	0xe000e018
 800e388:	24000004 	.word	0x24000004
 800e38c:	10624dd3 	.word	0x10624dd3
 800e390:	e000e014 	.word	0xe000e014

0800e394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e3a4 <vPortEnableVFP+0x10>
 800e398:	6801      	ldr	r1, [r0, #0]
 800e39a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e39e:	6001      	str	r1, [r0, #0]
 800e3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3a2:	bf00      	nop
 800e3a4:	e000ed88 	.word	0xe000ed88

0800e3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3ae:	f3ef 8305 	mrs	r3, IPSR
 800e3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b0f      	cmp	r3, #15
 800e3b8:	d915      	bls.n	800e3e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3ba:	4a18      	ldr	r2, [pc, #96]	@ (800e41c <vPortValidateInterruptPriority+0x74>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4413      	add	r3, r2
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3c4:	4b16      	ldr	r3, [pc, #88]	@ (800e420 <vPortValidateInterruptPriority+0x78>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	7afa      	ldrb	r2, [r7, #11]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d20b      	bcs.n	800e3e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	607b      	str	r3, [r7, #4]
}
 800e3e0:	bf00      	nop
 800e3e2:	bf00      	nop
 800e3e4:	e7fd      	b.n	800e3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e424 <vPortValidateInterruptPriority+0x7c>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e428 <vPortValidateInterruptPriority+0x80>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d90b      	bls.n	800e40e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	603b      	str	r3, [r7, #0]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <vPortValidateInterruptPriority+0x62>
	}
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	e000e3f0 	.word	0xe000e3f0
 800e420:	24032e54 	.word	0x24032e54
 800e424:	e000ed0c 	.word	0xe000ed0c
 800e428:	24032e58 	.word	0x24032e58

0800e42c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08a      	sub	sp, #40	@ 0x28
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e434:	2300      	movs	r3, #0
 800e436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e438:	f7fe fd4e 	bl	800ced8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e43c:	4b5c      	ldr	r3, [pc, #368]	@ (800e5b0 <pvPortMalloc+0x184>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e444:	f000 f924 	bl	800e690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e448:	4b5a      	ldr	r3, [pc, #360]	@ (800e5b4 <pvPortMalloc+0x188>)
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4013      	ands	r3, r2
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 8095 	bne.w	800e580 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01e      	beq.n	800e49a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e45c:	2208      	movs	r2, #8
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	4413      	add	r3, r2
 800e462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d015      	beq.n	800e49a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f023 0307 	bic.w	r3, r3, #7
 800e474:	3308      	adds	r3, #8
 800e476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f003 0307 	and.w	r3, r3, #7
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00b      	beq.n	800e49a <pvPortMalloc+0x6e>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	617b      	str	r3, [r7, #20]
}
 800e494:	bf00      	nop
 800e496:	bf00      	nop
 800e498:	e7fd      	b.n	800e496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d06f      	beq.n	800e580 <pvPortMalloc+0x154>
 800e4a0:	4b45      	ldr	r3, [pc, #276]	@ (800e5b8 <pvPortMalloc+0x18c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d86a      	bhi.n	800e580 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4aa:	4b44      	ldr	r3, [pc, #272]	@ (800e5bc <pvPortMalloc+0x190>)
 800e4ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4ae:	4b43      	ldr	r3, [pc, #268]	@ (800e5bc <pvPortMalloc+0x190>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4b4:	e004      	b.n	800e4c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d903      	bls.n	800e4d2 <pvPortMalloc+0xa6>
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1f1      	bne.n	800e4b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4d2:	4b37      	ldr	r3, [pc, #220]	@ (800e5b0 <pvPortMalloc+0x184>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d051      	beq.n	800e580 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2208      	movs	r2, #8
 800e4e2:	4413      	add	r3, r2
 800e4e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	1ad2      	subs	r2, r2, r3
 800e4f6:	2308      	movs	r3, #8
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d920      	bls.n	800e540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4413      	add	r3, r2
 800e504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	f003 0307 	and.w	r3, r3, #7
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00b      	beq.n	800e528 <pvPortMalloc+0xfc>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	613b      	str	r3, [r7, #16]
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	e7fd      	b.n	800e524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e53a:	69b8      	ldr	r0, [r7, #24]
 800e53c:	f000 f90c 	bl	800e758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e540:	4b1d      	ldr	r3, [pc, #116]	@ (800e5b8 <pvPortMalloc+0x18c>)
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	4a1b      	ldr	r2, [pc, #108]	@ (800e5b8 <pvPortMalloc+0x18c>)
 800e54c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e54e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5b8 <pvPortMalloc+0x18c>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c0 <pvPortMalloc+0x194>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	d203      	bcs.n	800e562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e55a:	4b17      	ldr	r3, [pc, #92]	@ (800e5b8 <pvPortMalloc+0x18c>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4a18      	ldr	r2, [pc, #96]	@ (800e5c0 <pvPortMalloc+0x194>)
 800e560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	4b13      	ldr	r3, [pc, #76]	@ (800e5b4 <pvPortMalloc+0x188>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	431a      	orrs	r2, r3
 800e56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e572:	2200      	movs	r2, #0
 800e574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e576:	4b13      	ldr	r3, [pc, #76]	@ (800e5c4 <pvPortMalloc+0x198>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3301      	adds	r3, #1
 800e57c:	4a11      	ldr	r2, [pc, #68]	@ (800e5c4 <pvPortMalloc+0x198>)
 800e57e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e580:	f7fe fcb8 	bl	800cef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	f003 0307 	and.w	r3, r3, #7
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00b      	beq.n	800e5a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	60fb      	str	r3, [r7, #12]
}
 800e5a0:	bf00      	nop
 800e5a2:	bf00      	nop
 800e5a4:	e7fd      	b.n	800e5a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3728      	adds	r7, #40	@ 0x28
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	24063ba4 	.word	0x24063ba4
 800e5b4:	24063bb8 	.word	0x24063bb8
 800e5b8:	24063ba8 	.word	0x24063ba8
 800e5bc:	24063b9c 	.word	0x24063b9c
 800e5c0:	24063bac 	.word	0x24063bac
 800e5c4:	24063bb0 	.word	0x24063bb0

0800e5c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d04f      	beq.n	800e67a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5da:	2308      	movs	r3, #8
 800e5dc:	425b      	negs	r3, r3
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	4b25      	ldr	r3, [pc, #148]	@ (800e684 <vPortFree+0xbc>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10b      	bne.n	800e60e <vPortFree+0x46>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	60fb      	str	r3, [r7, #12]
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	e7fd      	b.n	800e60a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00b      	beq.n	800e62e <vPortFree+0x66>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	60bb      	str	r3, [r7, #8]
}
 800e628:	bf00      	nop
 800e62a:	bf00      	nop
 800e62c:	e7fd      	b.n	800e62a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	4b14      	ldr	r3, [pc, #80]	@ (800e684 <vPortFree+0xbc>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4013      	ands	r3, r2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01e      	beq.n	800e67a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d11a      	bne.n	800e67a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	4b0e      	ldr	r3, [pc, #56]	@ (800e684 <vPortFree+0xbc>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	43db      	mvns	r3, r3
 800e64e:	401a      	ands	r2, r3
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e654:	f7fe fc40 	bl	800ced8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	4b0a      	ldr	r3, [pc, #40]	@ (800e688 <vPortFree+0xc0>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4413      	add	r3, r2
 800e662:	4a09      	ldr	r2, [pc, #36]	@ (800e688 <vPortFree+0xc0>)
 800e664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e666:	6938      	ldr	r0, [r7, #16]
 800e668:	f000 f876 	bl	800e758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e66c:	4b07      	ldr	r3, [pc, #28]	@ (800e68c <vPortFree+0xc4>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	3301      	adds	r3, #1
 800e672:	4a06      	ldr	r2, [pc, #24]	@ (800e68c <vPortFree+0xc4>)
 800e674:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e676:	f7fe fc3d 	bl	800cef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e67a:	bf00      	nop
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	24063bb8 	.word	0x24063bb8
 800e688:	24063ba8 	.word	0x24063ba8
 800e68c:	24063bb4 	.word	0x24063bb4

0800e690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e696:	4b29      	ldr	r3, [pc, #164]	@ (800e73c <prvHeapInit+0xac>)
 800e698:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e69a:	4b29      	ldr	r3, [pc, #164]	@ (800e740 <prvHeapInit+0xb0>)
 800e69c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f003 0307 	and.w	r3, r3, #7
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00c      	beq.n	800e6c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3307      	adds	r3, #7
 800e6ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	4a20      	ldr	r2, [pc, #128]	@ (800e740 <prvHeapInit+0xb0>)
 800e6be:	4413      	add	r3, r2
 800e6c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e744 <prvHeapInit+0xb4>)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e744 <prvHeapInit+0xb4>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6da:	2208      	movs	r2, #8
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f023 0307 	bic.w	r3, r3, #7
 800e6e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	4a16      	ldr	r2, [pc, #88]	@ (800e748 <prvHeapInit+0xb8>)
 800e6ee:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6f0:	4b15      	ldr	r3, [pc, #84]	@ (800e748 <prvHeapInit+0xb8>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6f8:	4b13      	ldr	r3, [pc, #76]	@ (800e748 <prvHeapInit+0xb8>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	68fa      	ldr	r2, [r7, #12]
 800e708:	1ad2      	subs	r2, r2, r3
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e70e:	4b0e      	ldr	r3, [pc, #56]	@ (800e748 <prvHeapInit+0xb8>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	4a0c      	ldr	r2, [pc, #48]	@ (800e74c <prvHeapInit+0xbc>)
 800e71c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	4a0b      	ldr	r2, [pc, #44]	@ (800e750 <prvHeapInit+0xc0>)
 800e724:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e726:	4b0b      	ldr	r3, [pc, #44]	@ (800e754 <prvHeapInit+0xc4>)
 800e728:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e72c:	601a      	str	r2, [r3, #0]
}
 800e72e:	bf00      	nop
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	00030d40 	.word	0x00030d40
 800e740:	24032e5c 	.word	0x24032e5c
 800e744:	24063b9c 	.word	0x24063b9c
 800e748:	24063ba4 	.word	0x24063ba4
 800e74c:	24063bac 	.word	0x24063bac
 800e750:	24063ba8 	.word	0x24063ba8
 800e754:	24063bb8 	.word	0x24063bb8

0800e758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e760:	4b28      	ldr	r3, [pc, #160]	@ (800e804 <prvInsertBlockIntoFreeList+0xac>)
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	e002      	b.n	800e76c <prvInsertBlockIntoFreeList+0x14>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d8f7      	bhi.n	800e766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	4413      	add	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d108      	bne.n	800e79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	441a      	add	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	441a      	add	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d118      	bne.n	800e7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	4b15      	ldr	r3, [pc, #84]	@ (800e808 <prvInsertBlockIntoFreeList+0xb0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d00d      	beq.n	800e7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	441a      	add	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	e008      	b.n	800e7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e808 <prvInsertBlockIntoFreeList+0xb0>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	601a      	str	r2, [r3, #0]
 800e7de:	e003      	b.n	800e7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d002      	beq.n	800e7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7f6:	bf00      	nop
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	24063b9c 	.word	0x24063b9c
 800e808:	24063ba4 	.word	0x24063ba4

0800e80c <rcl_get_zero_initialized_publisher>:
 800e80c:	4b01      	ldr	r3, [pc, #4]	@ (800e814 <rcl_get_zero_initialized_publisher+0x8>)
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	08018ed8 	.word	0x08018ed8

0800e818 <rcl_publisher_init>:
 800e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e81c:	b088      	sub	sp, #32
 800e81e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e820:	2e00      	cmp	r6, #0
 800e822:	d06b      	beq.n	800e8fc <rcl_publisher_init+0xe4>
 800e824:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800e828:	4605      	mov	r5, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	4690      	mov	r8, r2
 800e82e:	4650      	mov	r0, sl
 800e830:	4699      	mov	r9, r3
 800e832:	f000 f9e5 	bl	800ec00 <rcutils_allocator_is_valid>
 800e836:	f080 0401 	eor.w	r4, r0, #1
 800e83a:	b2e4      	uxtb	r4, r4
 800e83c:	2c00      	cmp	r4, #0
 800e83e:	d15d      	bne.n	800e8fc <rcl_publisher_init+0xe4>
 800e840:	2d00      	cmp	r5, #0
 800e842:	d05b      	beq.n	800e8fc <rcl_publisher_init+0xe4>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b123      	cbz	r3, 800e852 <rcl_publisher_init+0x3a>
 800e848:	2464      	movs	r4, #100	@ 0x64
 800e84a:	4620      	mov	r0, r4
 800e84c:	b008      	add	sp, #32
 800e84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e852:	4638      	mov	r0, r7
 800e854:	f005 f872 	bl	801393c <rcl_node_is_valid>
 800e858:	2800      	cmp	r0, #0
 800e85a:	d054      	beq.n	800e906 <rcl_publisher_init+0xee>
 800e85c:	f1b8 0f00 	cmp.w	r8, #0
 800e860:	d04c      	beq.n	800e8fc <rcl_publisher_init+0xe4>
 800e862:	fab9 f389 	clz	r3, r9
 800e866:	095b      	lsrs	r3, r3, #5
 800e868:	f1b9 0f00 	cmp.w	r9, #0
 800e86c:	d046      	beq.n	800e8fc <rcl_publisher_init+0xe4>
 800e86e:	aa07      	add	r2, sp, #28
 800e870:	9307      	str	r3, [sp, #28]
 800e872:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e876:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e87a:	9205      	str	r2, [sp, #20]
 800e87c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e880:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e884:	4649      	mov	r1, r9
 800e886:	4638      	mov	r0, r7
 800e888:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800e88c:	f005 f8ae 	bl	80139ec <rcl_node_resolve_name>
 800e890:	2800      	cmp	r0, #0
 800e892:	d14f      	bne.n	800e934 <rcl_publisher_init+0x11c>
 800e894:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e896:	20c8      	movs	r0, #200	@ 0xc8
 800e898:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e89a:	4798      	blx	r3
 800e89c:	6028      	str	r0, [r5, #0]
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d050      	beq.n	800e944 <rcl_publisher_init+0x12c>
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	f005 f86c 	bl	8013980 <rcl_node_get_rmw_handle>
 800e8a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e8ac:	4641      	mov	r1, r8
 800e8ae:	9a07      	ldr	r2, [sp, #28]
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	4633      	mov	r3, r6
 800e8b4:	682c      	ldr	r4, [r5, #0]
 800e8b6:	f000 fa61 	bl	800ed7c <rmw_create_publisher>
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800e8c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e8c4:	b370      	cbz	r0, 800e924 <rcl_publisher_init+0x10c>
 800e8c6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e8ca:	f000 fb3b 	bl	800ef44 <rmw_publisher_get_actual_qos>
 800e8ce:	682b      	ldr	r3, [r5, #0]
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	b9d0      	cbnz	r0, 800e90a <rcl_publisher_init+0xf2>
 800e8d4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e8e0:	2270      	movs	r2, #112	@ 0x70
 800e8e2:	f009 fba0 	bl	8018026 <memcpy>
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e8ec:	9807      	ldr	r0, [sp, #28]
 800e8ee:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e8f0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e8f2:	4798      	blx	r3
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	b008      	add	sp, #32
 800e8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fc:	240b      	movs	r4, #11
 800e8fe:	4620      	mov	r0, r4
 800e900:	b008      	add	sp, #32
 800e902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e906:	24c8      	movs	r4, #200	@ 0xc8
 800e908:	e79f      	b.n	800e84a <rcl_publisher_init+0x32>
 800e90a:	b1cb      	cbz	r3, 800e940 <rcl_publisher_init+0x128>
 800e90c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e910:	b142      	cbz	r2, 800e924 <rcl_publisher_init+0x10c>
 800e912:	4638      	mov	r0, r7
 800e914:	f005 f834 	bl	8013980 <rcl_node_get_rmw_handle>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e91e:	f000 fb25 	bl	800ef6c <rmw_destroy_publisher>
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	4618      	mov	r0, r3
 800e926:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e928:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e92a:	2401      	movs	r4, #1
 800e92c:	4790      	blx	r2
 800e92e:	2300      	movs	r3, #0
 800e930:	602b      	str	r3, [r5, #0]
 800e932:	e7db      	b.n	800e8ec <rcl_publisher_init+0xd4>
 800e934:	2867      	cmp	r0, #103	@ 0x67
 800e936:	d007      	beq.n	800e948 <rcl_publisher_init+0x130>
 800e938:	2869      	cmp	r0, #105	@ 0x69
 800e93a:	d005      	beq.n	800e948 <rcl_publisher_init+0x130>
 800e93c:	280a      	cmp	r0, #10
 800e93e:	d001      	beq.n	800e944 <rcl_publisher_init+0x12c>
 800e940:	2401      	movs	r4, #1
 800e942:	e7d3      	b.n	800e8ec <rcl_publisher_init+0xd4>
 800e944:	240a      	movs	r4, #10
 800e946:	e7d1      	b.n	800e8ec <rcl_publisher_init+0xd4>
 800e948:	2467      	movs	r4, #103	@ 0x67
 800e94a:	e7cf      	b.n	800e8ec <rcl_publisher_init+0xd4>

0800e94c <rcl_publisher_get_default_options>:
 800e94c:	b570      	push	{r4, r5, r6, lr}
 800e94e:	4d14      	ldr	r5, [pc, #80]	@ (800e9a0 <rcl_publisher_get_default_options+0x54>)
 800e950:	b088      	sub	sp, #32
 800e952:	4604      	mov	r4, r0
 800e954:	2250      	movs	r2, #80	@ 0x50
 800e956:	4913      	ldr	r1, [pc, #76]	@ (800e9a4 <rcl_publisher_get_default_options+0x58>)
 800e958:	4628      	mov	r0, r5
 800e95a:	f009 fb64 	bl	8018026 <memcpy>
 800e95e:	a802      	add	r0, sp, #8
 800e960:	f000 f940 	bl	800ebe4 <rcutils_get_default_allocator>
 800e964:	f10d 0c08 	add.w	ip, sp, #8
 800e968:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e96c:	466e      	mov	r6, sp
 800e96e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e972:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e976:	f8dc 3000 	ldr.w	r3, [ip]
 800e97a:	4630      	mov	r0, r6
 800e97c:	f8ce 3000 	str.w	r3, [lr]
 800e980:	f000 f97e 	bl	800ec80 <rmw_get_default_publisher_options>
 800e984:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e988:	2270      	movs	r2, #112	@ 0x70
 800e98a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e98e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e992:	4629      	mov	r1, r5
 800e994:	4620      	mov	r0, r4
 800e996:	f009 fb46 	bl	8018026 <memcpy>
 800e99a:	4620      	mov	r0, r4
 800e99c:	b008      	add	sp, #32
 800e99e:	bd70      	pop	{r4, r5, r6, pc}
 800e9a0:	24063bc0 	.word	0x24063bc0
 800e9a4:	08018ee0 	.word	0x08018ee0

0800e9a8 <rcl_publish>:
 800e9a8:	b1f8      	cbz	r0, 800e9ea <rcl_publish+0x42>
 800e9aa:	6803      	ldr	r3, [r0, #0]
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	b1b3      	cbz	r3, 800e9e0 <rcl_publish+0x38>
 800e9b2:	4616      	mov	r6, r2
 800e9b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e9b8:	b192      	cbz	r2, 800e9e0 <rcl_publish+0x38>
 800e9ba:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e9be:	460d      	mov	r5, r1
 800e9c0:	f004 fbdc 	bl	801317c <rcl_context_is_valid>
 800e9c4:	b160      	cbz	r0, 800e9e0 <rcl_publish+0x38>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e9cc:	b140      	cbz	r0, 800e9e0 <rcl_publish+0x38>
 800e9ce:	b155      	cbz	r5, 800e9e6 <rcl_publish+0x3e>
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	f000 f972 	bl	800ecbc <rmw_publish>
 800e9d8:	3800      	subs	r0, #0
 800e9da:	bf18      	it	ne
 800e9dc:	2001      	movne	r0, #1
 800e9de:	bd70      	pop	{r4, r5, r6, pc}
 800e9e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e9e4:	bd70      	pop	{r4, r5, r6, pc}
 800e9e6:	200b      	movs	r0, #11
 800e9e8:	bd70      	pop	{r4, r5, r6, pc}
 800e9ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e9ee:	4770      	bx	lr

0800e9f0 <rclc_support_init>:
 800e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	b086      	sub	sp, #24
 800e9f6:	b3bb      	cbz	r3, 800ea68 <rclc_support_init+0x78>
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	b3a8      	cbz	r0, 800ea68 <rclc_support_init+0x78>
 800e9fc:	461c      	mov	r4, r3
 800e9fe:	460f      	mov	r7, r1
 800ea00:	4690      	mov	r8, r2
 800ea02:	f004 fd27 	bl	8013454 <rcl_get_zero_initialized_init_options>
 800ea06:	f104 050c 	add.w	r5, r4, #12
 800ea0a:	9005      	str	r0, [sp, #20]
 800ea0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea10:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ea14:	a805      	add	r0, sp, #20
 800ea16:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ea1a:	f004 fd1d 	bl	8013458 <rcl_init_options_init>
 800ea1e:	4605      	mov	r5, r0
 800ea20:	b9e0      	cbnz	r0, 800ea5c <rclc_support_init+0x6c>
 800ea22:	ad02      	add	r5, sp, #8
 800ea24:	4628      	mov	r0, r5
 800ea26:	f004 fb9f 	bl	8013168 <rcl_get_zero_initialized_context>
 800ea2a:	4633      	mov	r3, r6
 800ea2c:	aa05      	add	r2, sp, #20
 800ea2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea32:	e886 0003 	stmia.w	r6, {r0, r1}
 800ea36:	4641      	mov	r1, r8
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f004 fc05 	bl	8013248 <rcl_init>
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b9b8      	cbnz	r0, 800ea72 <rclc_support_init+0x82>
 800ea42:	4622      	mov	r2, r4
 800ea44:	f106 010c 	add.w	r1, r6, #12
 800ea48:	2003      	movs	r0, #3
 800ea4a:	60b4      	str	r4, [r6, #8]
 800ea4c:	f005 f9bc 	bl	8013dc8 <rcl_clock_init>
 800ea50:	4605      	mov	r5, r0
 800ea52:	b970      	cbnz	r0, 800ea72 <rclc_support_init+0x82>
 800ea54:	a805      	add	r0, sp, #20
 800ea56:	f004 fd65 	bl	8013524 <rcl_init_options_fini>
 800ea5a:	b108      	cbz	r0, 800ea60 <rclc_support_init+0x70>
 800ea5c:	f000 f8f4 	bl	800ec48 <rcutils_reset_error>
 800ea60:	4628      	mov	r0, r5
 800ea62:	b006      	add	sp, #24
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea68:	250b      	movs	r5, #11
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	b006      	add	sp, #24
 800ea6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea72:	f000 f8e9 	bl	800ec48 <rcutils_reset_error>
 800ea76:	a805      	add	r0, sp, #20
 800ea78:	f004 fd54 	bl	8013524 <rcl_init_options_fini>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d0ef      	beq.n	800ea60 <rclc_support_init+0x70>
 800ea80:	e7ec      	b.n	800ea5c <rclc_support_init+0x6c>
 800ea82:	bf00      	nop

0800ea84 <rclc_node_init_default>:
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bf18      	it	ne
 800ea88:	2a00      	cmpne	r2, #0
 800ea8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea8e:	4616      	mov	r6, r2
 800ea90:	bf0c      	ite	eq
 800ea92:	2201      	moveq	r2, #1
 800ea94:	2200      	movne	r2, #0
 800ea96:	b0a1      	sub	sp, #132	@ 0x84
 800ea98:	2900      	cmp	r1, #0
 800ea9a:	bf08      	it	eq
 800ea9c:	f042 0201 	orreq.w	r2, r2, #1
 800eaa0:	bb22      	cbnz	r2, 800eaec <rclc_node_init_default+0x68>
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	b310      	cbz	r0, 800eaec <rclc_node_init_default+0x68>
 800eaa6:	f10d 0810 	add.w	r8, sp, #16
 800eaaa:	461f      	mov	r7, r3
 800eaac:	460d      	mov	r5, r1
 800eaae:	f10d 0918 	add.w	r9, sp, #24
 800eab2:	4640      	mov	r0, r8
 800eab4:	f004 fdf0 	bl	8013698 <rcl_get_zero_initialized_node>
 800eab8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800eabc:	e884 0003 	stmia.w	r4, {r0, r1}
 800eac0:	4648      	mov	r0, r9
 800eac2:	f004 ff63 	bl	801398c <rcl_node_get_default_options>
 800eac6:	4640      	mov	r0, r8
 800eac8:	f004 fde6 	bl	8013698 <rcl_get_zero_initialized_node>
 800eacc:	f8cd 9000 	str.w	r9, [sp]
 800ead0:	463b      	mov	r3, r7
 800ead2:	4632      	mov	r2, r6
 800ead4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ead8:	e884 0003 	stmia.w	r4, {r0, r1}
 800eadc:	4629      	mov	r1, r5
 800eade:	4620      	mov	r0, r4
 800eae0:	f004 fde4 	bl	80136ac <rcl_node_init>
 800eae4:	b930      	cbnz	r0, 800eaf4 <rclc_node_init_default+0x70>
 800eae6:	b021      	add	sp, #132	@ 0x84
 800eae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaec:	200b      	movs	r0, #11
 800eaee:	b021      	add	sp, #132	@ 0x84
 800eaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaf4:	9003      	str	r0, [sp, #12]
 800eaf6:	f000 f8a7 	bl	800ec48 <rcutils_reset_error>
 800eafa:	f000 f8a5 	bl	800ec48 <rcutils_reset_error>
 800eafe:	9803      	ldr	r0, [sp, #12]
 800eb00:	b021      	add	sp, #132	@ 0x84
 800eb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb06:	bf00      	nop

0800eb08 <rclc_publisher_init_default>:
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	bf18      	it	ne
 800eb0c:	2a00      	cmpne	r2, #0
 800eb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb12:	4616      	mov	r6, r2
 800eb14:	bf0c      	ite	eq
 800eb16:	2201      	moveq	r2, #1
 800eb18:	2200      	movne	r2, #0
 800eb1a:	b0a0      	sub	sp, #128	@ 0x80
 800eb1c:	2900      	cmp	r1, #0
 800eb1e:	bf08      	it	eq
 800eb20:	f042 0201 	orreq.w	r2, r2, #1
 800eb24:	bb1a      	cbnz	r2, 800eb6e <rclc_publisher_init_default+0x66>
 800eb26:	4604      	mov	r4, r0
 800eb28:	b308      	cbz	r0, 800eb6e <rclc_publisher_init_default+0x66>
 800eb2a:	f10d 0810 	add.w	r8, sp, #16
 800eb2e:	461f      	mov	r7, r3
 800eb30:	460d      	mov	r5, r1
 800eb32:	f7ff fe6b 	bl	800e80c <rcl_get_zero_initialized_publisher>
 800eb36:	6020      	str	r0, [r4, #0]
 800eb38:	4640      	mov	r0, r8
 800eb3a:	f7ff ff07 	bl	800e94c <rcl_publisher_get_default_options>
 800eb3e:	2250      	movs	r2, #80	@ 0x50
 800eb40:	490d      	ldr	r1, [pc, #52]	@ (800eb78 <rclc_publisher_init_default+0x70>)
 800eb42:	4640      	mov	r0, r8
 800eb44:	f009 fa6f 	bl	8018026 <memcpy>
 800eb48:	463b      	mov	r3, r7
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f8cd 8000 	str.w	r8, [sp]
 800eb54:	f7ff fe60 	bl	800e818 <rcl_publisher_init>
 800eb58:	b910      	cbnz	r0, 800eb60 <rclc_publisher_init_default+0x58>
 800eb5a:	b020      	add	sp, #128	@ 0x80
 800eb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb60:	9003      	str	r0, [sp, #12]
 800eb62:	f000 f871 	bl	800ec48 <rcutils_reset_error>
 800eb66:	9803      	ldr	r0, [sp, #12]
 800eb68:	b020      	add	sp, #128	@ 0x80
 800eb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6e:	200b      	movs	r0, #11
 800eb70:	b020      	add	sp, #128	@ 0x80
 800eb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb76:	bf00      	nop
 800eb78:	08018f30 	.word	0x08018f30

0800eb7c <__default_zero_allocate>:
 800eb7c:	f008 bd86 	b.w	801768c <calloc>

0800eb80 <__default_reallocate>:
 800eb80:	f008 bf12 	b.w	80179a8 <realloc>

0800eb84 <__default_deallocate>:
 800eb84:	f008 bdee 	b.w	8017764 <free>

0800eb88 <__default_allocate>:
 800eb88:	f008 bde4 	b.w	8017754 <malloc>

0800eb8c <rcutils_get_zero_initialized_allocator>:
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	4c05      	ldr	r4, [pc, #20]	@ (800eba4 <rcutils_get_zero_initialized_allocator+0x18>)
 800eb90:	4686      	mov	lr, r0
 800eb92:	4684      	mov	ip, r0
 800eb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	4670      	mov	r0, lr
 800eb9e:	f8cc 3000 	str.w	r3, [ip]
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	08018f80 	.word	0x08018f80

0800eba8 <rcutils_set_default_allocator>:
 800eba8:	b1a8      	cbz	r0, 800ebd6 <rcutils_set_default_allocator+0x2e>
 800ebaa:	6802      	ldr	r2, [r0, #0]
 800ebac:	b1a2      	cbz	r2, 800ebd8 <rcutils_set_default_allocator+0x30>
 800ebae:	6841      	ldr	r1, [r0, #4]
 800ebb0:	b1a1      	cbz	r1, 800ebdc <rcutils_set_default_allocator+0x34>
 800ebb2:	b410      	push	{r4}
 800ebb4:	68c4      	ldr	r4, [r0, #12]
 800ebb6:	b164      	cbz	r4, 800ebd2 <rcutils_set_default_allocator+0x2a>
 800ebb8:	6880      	ldr	r0, [r0, #8]
 800ebba:	b138      	cbz	r0, 800ebcc <rcutils_set_default_allocator+0x24>
 800ebbc:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <rcutils_set_default_allocator+0x38>)
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ebcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	e7fa      	b.n	800ebcc <rcutils_set_default_allocator+0x24>
 800ebd6:	4770      	bx	lr
 800ebd8:	4610      	mov	r0, r2
 800ebda:	4770      	bx	lr
 800ebdc:	4608      	mov	r0, r1
 800ebde:	4770      	bx	lr
 800ebe0:	24000018 	.word	0x24000018

0800ebe4 <rcutils_get_default_allocator>:
 800ebe4:	b510      	push	{r4, lr}
 800ebe6:	4c05      	ldr	r4, [pc, #20]	@ (800ebfc <rcutils_get_default_allocator+0x18>)
 800ebe8:	4686      	mov	lr, r0
 800ebea:	4684      	mov	ip, r0
 800ebec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	4670      	mov	r0, lr
 800ebf6:	f8cc 3000 	str.w	r3, [ip]
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	24000018 	.word	0x24000018

0800ec00 <rcutils_allocator_is_valid>:
 800ec00:	b158      	cbz	r0, 800ec1a <rcutils_allocator_is_valid+0x1a>
 800ec02:	6803      	ldr	r3, [r0, #0]
 800ec04:	b143      	cbz	r3, 800ec18 <rcutils_allocator_is_valid+0x18>
 800ec06:	6843      	ldr	r3, [r0, #4]
 800ec08:	b133      	cbz	r3, 800ec18 <rcutils_allocator_is_valid+0x18>
 800ec0a:	68c3      	ldr	r3, [r0, #12]
 800ec0c:	b123      	cbz	r3, 800ec18 <rcutils_allocator_is_valid+0x18>
 800ec0e:	6880      	ldr	r0, [r0, #8]
 800ec10:	3800      	subs	r0, #0
 800ec12:	bf18      	it	ne
 800ec14:	2001      	movne	r0, #1
 800ec16:	4770      	bx	lr
 800ec18:	4618      	mov	r0, r3
 800ec1a:	4770      	bx	lr

0800ec1c <rcutils_get_error_string>:
 800ec1c:	4b06      	ldr	r3, [pc, #24]	@ (800ec38 <rcutils_get_error_string+0x1c>)
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	b13b      	cbz	r3, 800ec32 <rcutils_get_error_string+0x16>
 800ec22:	4b06      	ldr	r3, [pc, #24]	@ (800ec3c <rcutils_get_error_string+0x20>)
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	b90a      	cbnz	r2, 800ec2c <rcutils_get_error_string+0x10>
 800ec28:	2201      	movs	r2, #1
 800ec2a:	701a      	strb	r2, [r3, #0]
 800ec2c:	4b04      	ldr	r3, [pc, #16]	@ (800ec40 <rcutils_get_error_string+0x24>)
 800ec2e:	7818      	ldrb	r0, [r3, #0]
 800ec30:	4770      	bx	lr
 800ec32:	4b04      	ldr	r3, [pc, #16]	@ (800ec44 <rcutils_get_error_string+0x28>)
 800ec34:	7818      	ldrb	r0, [r3, #0]
 800ec36:	4770      	bx	lr
 800ec38:	24063c30 	.word	0x24063c30
 800ec3c:	24063c49 	.word	0x24063c49
 800ec40:	24063c48 	.word	0x24063c48
 800ec44:	08018f94 	.word	0x08018f94

0800ec48 <rcutils_reset_error>:
 800ec48:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ec68 <rcutils_reset_error+0x20>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4a08      	ldr	r2, [pc, #32]	@ (800ec70 <rcutils_reset_error+0x28>)
 800ec50:	4808      	ldr	r0, [pc, #32]	@ (800ec74 <rcutils_reset_error+0x2c>)
 800ec52:	8013      	strh	r3, [r2, #0]
 800ec54:	4908      	ldr	r1, [pc, #32]	@ (800ec78 <rcutils_reset_error+0x30>)
 800ec56:	7003      	strb	r3, [r0, #0]
 800ec58:	700b      	strb	r3, [r1, #0]
 800ec5a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ec5e:	4a07      	ldr	r2, [pc, #28]	@ (800ec7c <rcutils_reset_error+0x34>)
 800ec60:	7013      	strb	r3, [r2, #0]
 800ec62:	4770      	bx	lr
 800ec64:	f3af 8000 	nop.w
	...
 800ec70:	24063c38 	.word	0x24063c38
 800ec74:	24063c49 	.word	0x24063c49
 800ec78:	24063c48 	.word	0x24063c48
 800ec7c:	24063c30 	.word	0x24063c30

0800ec80 <rmw_get_default_publisher_options>:
 800ec80:	2200      	movs	r2, #0
 800ec82:	6002      	str	r2, [r0, #0]
 800ec84:	7102      	strb	r2, [r0, #4]
 800ec86:	4770      	bx	lr

0800ec88 <rmw_uros_set_custom_transport>:
 800ec88:	b470      	push	{r4, r5, r6}
 800ec8a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ec8e:	b162      	cbz	r2, 800ecaa <rmw_uros_set_custom_transport+0x22>
 800ec90:	b15b      	cbz	r3, 800ecaa <rmw_uros_set_custom_transport+0x22>
 800ec92:	b155      	cbz	r5, 800ecaa <rmw_uros_set_custom_transport+0x22>
 800ec94:	b14e      	cbz	r6, 800ecaa <rmw_uros_set_custom_transport+0x22>
 800ec96:	4c06      	ldr	r4, [pc, #24]	@ (800ecb0 <rmw_uros_set_custom_transport+0x28>)
 800ec98:	7020      	strb	r0, [r4, #0]
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	6166      	str	r6, [r4, #20]
 800ec9e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800eca2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eca6:	bc70      	pop	{r4, r5, r6}
 800eca8:	4770      	bx	lr
 800ecaa:	200b      	movs	r0, #11
 800ecac:	bc70      	pop	{r4, r5, r6}
 800ecae:	4770      	bx	lr
 800ecb0:	24063c4c 	.word	0x24063c4c

0800ecb4 <flush_session>:
 800ecb4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ecb6:	f002 bb6d 	b.w	8011394 <uxr_run_session_until_confirm_delivery>
 800ecba:	bf00      	nop

0800ecbc <rmw_publish>:
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d053      	beq.n	800ed68 <rmw_publish+0xac>
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	460d      	mov	r5, r1
 800ecc4:	b08e      	sub	sp, #56	@ 0x38
 800ecc6:	2900      	cmp	r1, #0
 800ecc8:	d04b      	beq.n	800ed62 <rmw_publish+0xa6>
 800ecca:	4604      	mov	r4, r0
 800eccc:	6800      	ldr	r0, [r0, #0]
 800ecce:	f000 fc77 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d045      	beq.n	800ed62 <rmw_publish+0xa6>
 800ecd6:	6866      	ldr	r6, [r4, #4]
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	d042      	beq.n	800ed62 <rmw_publish+0xa6>
 800ecdc:	69b4      	ldr	r4, [r6, #24]
 800ecde:	4628      	mov	r0, r5
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	4798      	blx	r3
 800ece4:	69f3      	ldr	r3, [r6, #28]
 800ece6:	9005      	str	r0, [sp, #20]
 800ece8:	b113      	cbz	r3, 800ecf0 <rmw_publish+0x34>
 800ecea:	a805      	add	r0, sp, #20
 800ecec:	4798      	blx	r3
 800ecee:	9805      	ldr	r0, [sp, #20]
 800ecf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	9000      	str	r0, [sp, #0]
 800ecf8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ecfc:	6972      	ldr	r2, [r6, #20]
 800ecfe:	ab06      	add	r3, sp, #24
 800ed00:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ed02:	f003 f999 	bl	8012038 <uxr_prepare_output_stream>
 800ed06:	b1d8      	cbz	r0, 800ed40 <rmw_publish+0x84>
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	a906      	add	r1, sp, #24
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	4798      	blx	r3
 800ed10:	6a33      	ldr	r3, [r6, #32]
 800ed12:	4604      	mov	r4, r0
 800ed14:	b10b      	cbz	r3, 800ed1a <rmw_publish+0x5e>
 800ed16:	a806      	add	r0, sp, #24
 800ed18:	4798      	blx	r3
 800ed1a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ed24:	d022      	beq.n	800ed6c <rmw_publish+0xb0>
 800ed26:	6918      	ldr	r0, [r3, #16]
 800ed28:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800ed2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed2e:	f002 fb31 	bl	8011394 <uxr_run_session_until_confirm_delivery>
 800ed32:	4020      	ands	r0, r4
 800ed34:	b2c4      	uxtb	r4, r0
 800ed36:	f084 0001 	eor.w	r0, r4, #1
 800ed3a:	b2c0      	uxtb	r0, r0
 800ed3c:	b00e      	add	sp, #56	@ 0x38
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ed44:	6918      	ldr	r0, [r3, #16]
 800ed46:	9b05      	ldr	r3, [sp, #20]
 800ed48:	9602      	str	r6, [sp, #8]
 800ed4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	4b09      	ldr	r3, [pc, #36]	@ (800ed78 <rmw_publish+0xbc>)
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	ab06      	add	r3, sp, #24
 800ed56:	6972      	ldr	r2, [r6, #20]
 800ed58:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ed5a:	f003 f99d 	bl	8012098 <uxr_prepare_output_stream_fragmented>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d1d2      	bne.n	800ed08 <rmw_publish+0x4c>
 800ed62:	2001      	movs	r0, #1
 800ed64:	b00e      	add	sp, #56	@ 0x38
 800ed66:	bd70      	pop	{r4, r5, r6, pc}
 800ed68:	2001      	movs	r0, #1
 800ed6a:	4770      	bx	lr
 800ed6c:	6918      	ldr	r0, [r3, #16]
 800ed6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed72:	f001 ff8f 	bl	8010c94 <uxr_flash_output_streams>
 800ed76:	e7de      	b.n	800ed36 <rmw_publish+0x7a>
 800ed78:	0800ecb5 	.word	0x0800ecb5

0800ed7c <rmw_create_publisher>:
 800ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	b087      	sub	sp, #28
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f000 80d2 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800ed88:	460e      	mov	r6, r1
 800ed8a:	2900      	cmp	r1, #0
 800ed8c:	f000 80ce 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800ed90:	4604      	mov	r4, r0
 800ed92:	6800      	ldr	r0, [r0, #0]
 800ed94:	4615      	mov	r5, r2
 800ed96:	461f      	mov	r7, r3
 800ed98:	f000 fc12 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 800ed9c:	f080 0001 	eor.w	r0, r0, #1
 800eda0:	b2c0      	uxtb	r0, r0
 800eda2:	2800      	cmp	r0, #0
 800eda4:	f040 80c2 	bne.w	800ef2c <rmw_create_publisher+0x1b0>
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	f000 80bf 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800edae:	782b      	ldrb	r3, [r5, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 80bb 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800edb6:	2f00      	cmp	r7, #0
 800edb8:	f000 80b8 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800edbc:	485e      	ldr	r0, [pc, #376]	@ (800ef38 <rmw_create_publisher+0x1bc>)
 800edbe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800edc2:	f005 fdbf 	bl	8014944 <get_memory>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	f000 80b0 	beq.w	800ef2c <rmw_create_publisher+0x1b0>
 800edcc:	6884      	ldr	r4, [r0, #8]
 800edce:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800edd2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800edd6:	f005 fdd9 	bl	801498c <rmw_get_implementation_identifier>
 800edda:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800edde:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ede2:	4628      	mov	r0, r5
 800ede4:	f7f1 fa86 	bl	80002f4 <strlen>
 800ede8:	3001      	adds	r0, #1
 800edea:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800edee:	283c      	cmp	r0, #60	@ 0x3c
 800edf0:	f200 808f 	bhi.w	800ef12 <rmw_create_publisher+0x196>
 800edf4:	462b      	mov	r3, r5
 800edf6:	4a51      	ldr	r2, [pc, #324]	@ (800ef3c <rmw_create_publisher+0x1c0>)
 800edf8:	213c      	movs	r1, #60	@ 0x3c
 800edfa:	4650      	mov	r0, sl
 800edfc:	f008 ff44 	bl	8017c88 <sniprintf>
 800ee00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ee04:	4639      	mov	r1, r7
 800ee06:	2250      	movs	r2, #80	@ 0x50
 800ee08:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ee0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ee0e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ee12:	f009 f908 	bl	8018026 <memcpy>
 800ee16:	7a3b      	ldrb	r3, [r7, #8]
 800ee18:	4630      	mov	r0, r6
 800ee1a:	4949      	ldr	r1, [pc, #292]	@ (800ef40 <rmw_create_publisher+0x1c4>)
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee22:	bf0c      	ite	eq
 800ee24:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ee28:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ee2c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ee34:	f000 fbd2 	bl	800f5dc <get_message_typesupport_handle>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d06a      	beq.n	800ef12 <rmw_create_publisher+0x196>
 800ee3c:	6842      	ldr	r2, [r0, #4]
 800ee3e:	61a2      	str	r2, [r4, #24]
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	d066      	beq.n	800ef12 <rmw_create_publisher+0x196>
 800ee44:	4629      	mov	r1, r5
 800ee46:	463b      	mov	r3, r7
 800ee48:	4648      	mov	r0, r9
 800ee4a:	f006 f80b 	bl	8014e64 <create_topic>
 800ee4e:	6260      	str	r0, [r4, #36]	@ 0x24
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d062      	beq.n	800ef1a <rmw_create_publisher+0x19e>
 800ee54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee58:	2103      	movs	r1, #3
 800ee5a:	2506      	movs	r5, #6
 800ee5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee60:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ee64:	1c42      	adds	r2, r0, #1
 800ee66:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ee6a:	f001 fdc3 	bl	80109f4 <uxr_object_id>
 800ee6e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ee72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee76:	6120      	str	r0, [r4, #16]
 800ee78:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ee7c:	6910      	ldr	r0, [r2, #16]
 800ee7e:	9500      	str	r5, [sp, #0]
 800ee80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee84:	6819      	ldr	r1, [r3, #0]
 800ee86:	6922      	ldr	r2, [r4, #16]
 800ee88:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ee8c:	f001 fd0c 	bl	80108a8 <uxr_buffer_create_publisher_bin>
 800ee90:	4602      	mov	r2, r0
 800ee92:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ee96:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ee9a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ee9e:	f000 fb15 	bl	800f4cc <run_xrce_session>
 800eea2:	b3b0      	cbz	r0, 800ef12 <rmw_create_publisher+0x196>
 800eea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eea8:	2105      	movs	r1, #5
 800eeaa:	f10d 0a10 	add.w	sl, sp, #16
 800eeae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eeb2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800eeb6:	1c42      	adds	r2, r0, #1
 800eeb8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800eebc:	f001 fd9a 	bl	80109f4 <uxr_object_id>
 800eec0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eec4:	4639      	mov	r1, r7
 800eec6:	6160      	str	r0, [r4, #20]
 800eec8:	691e      	ldr	r6, [r3, #16]
 800eeca:	4650      	mov	r0, sl
 800eecc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eed0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800eed4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800eed8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800eedc:	f000 fb12 	bl	800f504 <convert_qos_profile>
 800eee0:	9503      	str	r5, [sp, #12]
 800eee2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800eee6:	9001      	str	r0, [sp, #4]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eeee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eefa:	f001 fd05 	bl	8010908 <uxr_buffer_create_datawriter_bin>
 800eefe:	4602      	mov	r2, r0
 800ef00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ef08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ef0c:	f000 fade 	bl	800f4cc <run_xrce_session>
 800ef10:	b970      	cbnz	r0, 800ef30 <rmw_create_publisher+0x1b4>
 800ef12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ef14:	b108      	cbz	r0, 800ef1a <rmw_create_publisher+0x19e>
 800ef16:	f000 fa73 	bl	800f400 <rmw_uxrce_fini_topic_memory>
 800ef1a:	4640      	mov	r0, r8
 800ef1c:	f04f 0800 	mov.w	r8, #0
 800ef20:	f000 fa16 	bl	800f350 <rmw_uxrce_fini_publisher_memory>
 800ef24:	4640      	mov	r0, r8
 800ef26:	b007      	add	sp, #28
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	f04f 0800 	mov.w	r8, #0
 800ef30:	4640      	mov	r0, r8
 800ef32:	b007      	add	sp, #28
 800ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef38:	24068544 	.word	0x24068544
 800ef3c:	08018fcc 	.word	0x08018fcc
 800ef40:	08018f98 	.word	0x08018f98

0800ef44 <rmw_publisher_get_actual_qos>:
 800ef44:	b178      	cbz	r0, 800ef66 <rmw_publisher_get_actual_qos+0x22>
 800ef46:	b510      	push	{r4, lr}
 800ef48:	fab1 f481 	clz	r4, r1
 800ef4c:	0964      	lsrs	r4, r4, #5
 800ef4e:	b141      	cbz	r1, 800ef62 <rmw_publisher_get_actual_qos+0x1e>
 800ef50:	6843      	ldr	r3, [r0, #4]
 800ef52:	2250      	movs	r2, #80	@ 0x50
 800ef54:	4608      	mov	r0, r1
 800ef56:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ef5a:	f009 f864 	bl	8018026 <memcpy>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	200b      	movs	r0, #11
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	200b      	movs	r0, #11
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop

0800ef6c <rmw_destroy_publisher>:
 800ef6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef70:	b128      	cbz	r0, 800ef7e <rmw_destroy_publisher+0x12>
 800ef72:	4604      	mov	r4, r0
 800ef74:	6800      	ldr	r0, [r0, #0]
 800ef76:	460d      	mov	r5, r1
 800ef78:	f000 fb22 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 800ef7c:	b918      	cbnz	r0, 800ef86 <rmw_destroy_publisher+0x1a>
 800ef7e:	2401      	movs	r4, #1
 800ef80:	4620      	mov	r0, r4
 800ef82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef86:	6863      	ldr	r3, [r4, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d0f8      	beq.n	800ef7e <rmw_destroy_publisher+0x12>
 800ef8c:	fab5 f485 	clz	r4, r5
 800ef90:	0964      	lsrs	r4, r4, #5
 800ef92:	2d00      	cmp	r5, #0
 800ef94:	d0f3      	beq.n	800ef7e <rmw_destroy_publisher+0x12>
 800ef96:	6828      	ldr	r0, [r5, #0]
 800ef98:	f000 fb12 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d0ee      	beq.n	800ef7e <rmw_destroy_publisher+0x12>
 800efa0:	686e      	ldr	r6, [r5, #4]
 800efa2:	2e00      	cmp	r6, #0
 800efa4:	d0eb      	beq.n	800ef7e <rmw_destroy_publisher+0x12>
 800efa6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800efa8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800efac:	f005 ffaa 	bl	8014f04 <destroy_topic>
 800efb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800efb4:	6972      	ldr	r2, [r6, #20]
 800efb6:	6918      	ldr	r0, [r3, #16]
 800efb8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800efbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efc0:	6819      	ldr	r1, [r3, #0]
 800efc2:	f001 fbbd 	bl	8010740 <uxr_buffer_delete_entity>
 800efc6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800efca:	4680      	mov	r8, r0
 800efcc:	6932      	ldr	r2, [r6, #16]
 800efce:	6918      	ldr	r0, [r3, #16]
 800efd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800efd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	f001 fbb1 	bl	8010740 <uxr_buffer_delete_entity>
 800efde:	4606      	mov	r6, r0
 800efe0:	6938      	ldr	r0, [r7, #16]
 800efe2:	4642      	mov	r2, r8
 800efe4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800efe8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800efec:	f000 fa6e 	bl	800f4cc <run_xrce_session>
 800eff0:	693f      	ldr	r7, [r7, #16]
 800eff2:	4632      	mov	r2, r6
 800eff4:	4606      	mov	r6, r0
 800eff6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800effa:	4638      	mov	r0, r7
 800effc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f000:	f000 fa64 	bl	800f4cc <run_xrce_session>
 800f004:	b126      	cbz	r6, 800f010 <rmw_destroy_publisher+0xa4>
 800f006:	b118      	cbz	r0, 800f010 <rmw_destroy_publisher+0xa4>
 800f008:	4628      	mov	r0, r5
 800f00a:	f000 f9a1 	bl	800f350 <rmw_uxrce_fini_publisher_memory>
 800f00e:	e7b7      	b.n	800ef80 <rmw_destroy_publisher+0x14>
 800f010:	2402      	movs	r4, #2
 800f012:	e7f9      	b.n	800f008 <rmw_destroy_publisher+0x9c>

0800f014 <rmw_uros_epoch_nanos>:
 800f014:	4b05      	ldr	r3, [pc, #20]	@ (800f02c <rmw_uros_epoch_nanos+0x18>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	b123      	cbz	r3, 800f024 <rmw_uros_epoch_nanos+0x10>
 800f01a:	6898      	ldr	r0, [r3, #8]
 800f01c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f020:	f001 be2e 	b.w	8010c80 <uxr_epoch_nanos>
 800f024:	2000      	movs	r0, #0
 800f026:	2100      	movs	r1, #0
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	24068564 	.word	0x24068564

0800f030 <rmw_uros_sync_session>:
 800f030:	b508      	push	{r3, lr}
 800f032:	4b07      	ldr	r3, [pc, #28]	@ (800f050 <rmw_uros_sync_session+0x20>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	b14b      	cbz	r3, 800f04c <rmw_uros_sync_session+0x1c>
 800f038:	4601      	mov	r1, r0
 800f03a:	6898      	ldr	r0, [r3, #8]
 800f03c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f040:	f002 fa22 	bl	8011488 <uxr_sync_session>
 800f044:	f080 0001 	eor.w	r0, r0, #1
 800f048:	b2c0      	uxtb	r0, r0
 800f04a:	bd08      	pop	{r3, pc}
 800f04c:	2001      	movs	r0, #1
 800f04e:	bd08      	pop	{r3, pc}
 800f050:	24068564 	.word	0x24068564

0800f054 <rmw_uxrce_init_service_memory>:
 800f054:	b1e2      	cbz	r2, 800f090 <rmw_uxrce_init_service_memory+0x3c>
 800f056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f05a:	7b05      	ldrb	r5, [r0, #12]
 800f05c:	4606      	mov	r6, r0
 800f05e:	b9ad      	cbnz	r5, 800f08c <rmw_uxrce_init_service_memory+0x38>
 800f060:	23c8      	movs	r3, #200	@ 0xc8
 800f062:	4617      	mov	r7, r2
 800f064:	460c      	mov	r4, r1
 800f066:	46a8      	mov	r8, r5
 800f068:	6083      	str	r3, [r0, #8]
 800f06a:	f240 1301 	movw	r3, #257	@ 0x101
 800f06e:	e9c0 5500 	strd	r5, r5, [r0]
 800f072:	8183      	strh	r3, [r0, #12]
 800f074:	3501      	adds	r5, #1
 800f076:	4621      	mov	r1, r4
 800f078:	4630      	mov	r0, r6
 800f07a:	f005 fc73 	bl	8014964 <put_memory>
 800f07e:	42af      	cmp	r7, r5
 800f080:	60a4      	str	r4, [r4, #8]
 800f082:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f086:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f08a:	d1f3      	bne.n	800f074 <rmw_uxrce_init_service_memory+0x20>
 800f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop

0800f094 <rmw_uxrce_init_client_memory>:
 800f094:	b1e2      	cbz	r2, 800f0d0 <rmw_uxrce_init_client_memory+0x3c>
 800f096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09a:	7b05      	ldrb	r5, [r0, #12]
 800f09c:	4606      	mov	r6, r0
 800f09e:	b9ad      	cbnz	r5, 800f0cc <rmw_uxrce_init_client_memory+0x38>
 800f0a0:	23c8      	movs	r3, #200	@ 0xc8
 800f0a2:	4617      	mov	r7, r2
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	46a8      	mov	r8, r5
 800f0a8:	6083      	str	r3, [r0, #8]
 800f0aa:	f240 1301 	movw	r3, #257	@ 0x101
 800f0ae:	e9c0 5500 	strd	r5, r5, [r0]
 800f0b2:	8183      	strh	r3, [r0, #12]
 800f0b4:	3501      	adds	r5, #1
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f005 fc53 	bl	8014964 <put_memory>
 800f0be:	42af      	cmp	r7, r5
 800f0c0:	60a4      	str	r4, [r4, #8]
 800f0c2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f0c6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f0ca:	d1f3      	bne.n	800f0b4 <rmw_uxrce_init_client_memory+0x20>
 800f0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop

0800f0d4 <rmw_uxrce_init_publisher_memory>:
 800f0d4:	b1e2      	cbz	r2, 800f110 <rmw_uxrce_init_publisher_memory+0x3c>
 800f0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0da:	7b05      	ldrb	r5, [r0, #12]
 800f0dc:	4606      	mov	r6, r0
 800f0de:	b9ad      	cbnz	r5, 800f10c <rmw_uxrce_init_publisher_memory+0x38>
 800f0e0:	23d8      	movs	r3, #216	@ 0xd8
 800f0e2:	4617      	mov	r7, r2
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	46a8      	mov	r8, r5
 800f0e8:	6083      	str	r3, [r0, #8]
 800f0ea:	f240 1301 	movw	r3, #257	@ 0x101
 800f0ee:	e9c0 5500 	strd	r5, r5, [r0]
 800f0f2:	8183      	strh	r3, [r0, #12]
 800f0f4:	3501      	adds	r5, #1
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f005 fc33 	bl	8014964 <put_memory>
 800f0fe:	42af      	cmp	r7, r5
 800f100:	60a4      	str	r4, [r4, #8]
 800f102:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f106:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f10a:	d1f3      	bne.n	800f0f4 <rmw_uxrce_init_publisher_memory+0x20>
 800f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop

0800f114 <rmw_uxrce_init_subscription_memory>:
 800f114:	b1e2      	cbz	r2, 800f150 <rmw_uxrce_init_subscription_memory+0x3c>
 800f116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f11a:	7b05      	ldrb	r5, [r0, #12]
 800f11c:	4606      	mov	r6, r0
 800f11e:	b9ad      	cbnz	r5, 800f14c <rmw_uxrce_init_subscription_memory+0x38>
 800f120:	23d8      	movs	r3, #216	@ 0xd8
 800f122:	4617      	mov	r7, r2
 800f124:	460c      	mov	r4, r1
 800f126:	46a8      	mov	r8, r5
 800f128:	6083      	str	r3, [r0, #8]
 800f12a:	f240 1301 	movw	r3, #257	@ 0x101
 800f12e:	e9c0 5500 	strd	r5, r5, [r0]
 800f132:	8183      	strh	r3, [r0, #12]
 800f134:	3501      	adds	r5, #1
 800f136:	4621      	mov	r1, r4
 800f138:	4630      	mov	r0, r6
 800f13a:	f005 fc13 	bl	8014964 <put_memory>
 800f13e:	42af      	cmp	r7, r5
 800f140:	60a4      	str	r4, [r4, #8]
 800f142:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f146:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f14a:	d1f3      	bne.n	800f134 <rmw_uxrce_init_subscription_memory+0x20>
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop

0800f154 <rmw_uxrce_init_node_memory>:
 800f154:	b1e2      	cbz	r2, 800f190 <rmw_uxrce_init_node_memory+0x3c>
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	7b05      	ldrb	r5, [r0, #12]
 800f15c:	4606      	mov	r6, r0
 800f15e:	b9ad      	cbnz	r5, 800f18c <rmw_uxrce_init_node_memory+0x38>
 800f160:	23a4      	movs	r3, #164	@ 0xa4
 800f162:	4617      	mov	r7, r2
 800f164:	460c      	mov	r4, r1
 800f166:	46a8      	mov	r8, r5
 800f168:	6083      	str	r3, [r0, #8]
 800f16a:	f240 1301 	movw	r3, #257	@ 0x101
 800f16e:	e9c0 5500 	strd	r5, r5, [r0]
 800f172:	8183      	strh	r3, [r0, #12]
 800f174:	3501      	adds	r5, #1
 800f176:	4621      	mov	r1, r4
 800f178:	4630      	mov	r0, r6
 800f17a:	f005 fbf3 	bl	8014964 <put_memory>
 800f17e:	42af      	cmp	r7, r5
 800f180:	60a4      	str	r4, [r4, #8]
 800f182:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f186:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f18a:	d1f3      	bne.n	800f174 <rmw_uxrce_init_node_memory+0x20>
 800f18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop

0800f194 <rmw_uxrce_init_session_memory>:
 800f194:	b1ea      	cbz	r2, 800f1d2 <rmw_uxrce_init_session_memory+0x3e>
 800f196:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19a:	7b05      	ldrb	r5, [r0, #12]
 800f19c:	4606      	mov	r6, r0
 800f19e:	b9b5      	cbnz	r5, 800f1ce <rmw_uxrce_init_session_memory+0x3a>
 800f1a0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800f1a4:	f240 1301 	movw	r3, #257	@ 0x101
 800f1a8:	4617      	mov	r7, r2
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	46a9      	mov	r9, r5
 800f1ae:	f8c0 8008 	str.w	r8, [r0, #8]
 800f1b2:	8183      	strh	r3, [r0, #12]
 800f1b4:	e9c0 5500 	strd	r5, r5, [r0]
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f005 fbd1 	bl	8014964 <put_memory>
 800f1c2:	42af      	cmp	r7, r5
 800f1c4:	60a4      	str	r4, [r4, #8]
 800f1c6:	f884 900c 	strb.w	r9, [r4, #12]
 800f1ca:	4444      	add	r4, r8
 800f1cc:	d1f4      	bne.n	800f1b8 <rmw_uxrce_init_session_memory+0x24>
 800f1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d2:	4770      	bx	lr

0800f1d4 <rmw_uxrce_init_topic_memory>:
 800f1d4:	b1e2      	cbz	r2, 800f210 <rmw_uxrce_init_topic_memory+0x3c>
 800f1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1da:	7b05      	ldrb	r5, [r0, #12]
 800f1dc:	4606      	mov	r6, r0
 800f1de:	b9ad      	cbnz	r5, 800f20c <rmw_uxrce_init_topic_memory+0x38>
 800f1e0:	231c      	movs	r3, #28
 800f1e2:	4617      	mov	r7, r2
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	46a8      	mov	r8, r5
 800f1e8:	6083      	str	r3, [r0, #8]
 800f1ea:	f240 1301 	movw	r3, #257	@ 0x101
 800f1ee:	e9c0 5500 	strd	r5, r5, [r0]
 800f1f2:	8183      	strh	r3, [r0, #12]
 800f1f4:	3501      	adds	r5, #1
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	f005 fbb3 	bl	8014964 <put_memory>
 800f1fe:	42af      	cmp	r7, r5
 800f200:	60a4      	str	r4, [r4, #8]
 800f202:	f104 041c 	add.w	r4, r4, #28
 800f206:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f20a:	d1f3      	bne.n	800f1f4 <rmw_uxrce_init_topic_memory+0x20>
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop

0800f214 <rmw_uxrce_init_static_input_buffer_memory>:
 800f214:	b1ea      	cbz	r2, 800f252 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21a:	7b05      	ldrb	r5, [r0, #12]
 800f21c:	4606      	mov	r6, r0
 800f21e:	b9b5      	cbnz	r5, 800f24e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f220:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f224:	4617      	mov	r7, r2
 800f226:	460c      	mov	r4, r1
 800f228:	46a8      	mov	r8, r5
 800f22a:	6083      	str	r3, [r0, #8]
 800f22c:	f240 1301 	movw	r3, #257	@ 0x101
 800f230:	e9c0 5500 	strd	r5, r5, [r0]
 800f234:	8183      	strh	r3, [r0, #12]
 800f236:	3501      	adds	r5, #1
 800f238:	4621      	mov	r1, r4
 800f23a:	4630      	mov	r0, r6
 800f23c:	f005 fb92 	bl	8014964 <put_memory>
 800f240:	42af      	cmp	r7, r5
 800f242:	60a4      	str	r4, [r4, #8]
 800f244:	f884 800c 	strb.w	r8, [r4, #12]
 800f248:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f24c:	d1f3      	bne.n	800f236 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f252:	4770      	bx	lr

0800f254 <rmw_uxrce_init_init_options_impl_memory>:
 800f254:	b1e2      	cbz	r2, 800f290 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f25a:	7b05      	ldrb	r5, [r0, #12]
 800f25c:	4606      	mov	r6, r0
 800f25e:	b9ad      	cbnz	r5, 800f28c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f260:	232c      	movs	r3, #44	@ 0x2c
 800f262:	4617      	mov	r7, r2
 800f264:	460c      	mov	r4, r1
 800f266:	46a8      	mov	r8, r5
 800f268:	6083      	str	r3, [r0, #8]
 800f26a:	f240 1301 	movw	r3, #257	@ 0x101
 800f26e:	e9c0 5500 	strd	r5, r5, [r0]
 800f272:	8183      	strh	r3, [r0, #12]
 800f274:	3501      	adds	r5, #1
 800f276:	4621      	mov	r1, r4
 800f278:	4630      	mov	r0, r6
 800f27a:	f005 fb73 	bl	8014964 <put_memory>
 800f27e:	42af      	cmp	r7, r5
 800f280:	60a4      	str	r4, [r4, #8]
 800f282:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800f286:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f28a:	d1f3      	bne.n	800f274 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop

0800f294 <rmw_uxrce_init_wait_set_memory>:
 800f294:	b1e2      	cbz	r2, 800f2d0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29a:	7b05      	ldrb	r5, [r0, #12]
 800f29c:	4606      	mov	r6, r0
 800f29e:	b9ad      	cbnz	r5, 800f2cc <rmw_uxrce_init_wait_set_memory+0x38>
 800f2a0:	231c      	movs	r3, #28
 800f2a2:	4617      	mov	r7, r2
 800f2a4:	460c      	mov	r4, r1
 800f2a6:	46a8      	mov	r8, r5
 800f2a8:	6083      	str	r3, [r0, #8]
 800f2aa:	f240 1301 	movw	r3, #257	@ 0x101
 800f2ae:	e9c0 5500 	strd	r5, r5, [r0]
 800f2b2:	8183      	strh	r3, [r0, #12]
 800f2b4:	3501      	adds	r5, #1
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f005 fb53 	bl	8014964 <put_memory>
 800f2be:	42af      	cmp	r7, r5
 800f2c0:	60a4      	str	r4, [r4, #8]
 800f2c2:	f104 041c 	add.w	r4, r4, #28
 800f2c6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f2ca:	d1f3      	bne.n	800f2b4 <rmw_uxrce_init_wait_set_memory+0x20>
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop

0800f2d4 <rmw_uxrce_init_guard_condition_memory>:
 800f2d4:	b1e2      	cbz	r2, 800f310 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2da:	7b05      	ldrb	r5, [r0, #12]
 800f2dc:	4606      	mov	r6, r0
 800f2de:	b9ad      	cbnz	r5, 800f30c <rmw_uxrce_init_guard_condition_memory+0x38>
 800f2e0:	2320      	movs	r3, #32
 800f2e2:	4617      	mov	r7, r2
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	46a8      	mov	r8, r5
 800f2e8:	6083      	str	r3, [r0, #8]
 800f2ea:	f240 1301 	movw	r3, #257	@ 0x101
 800f2ee:	e9c0 5500 	strd	r5, r5, [r0]
 800f2f2:	8183      	strh	r3, [r0, #12]
 800f2f4:	3501      	adds	r5, #1
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f005 fb33 	bl	8014964 <put_memory>
 800f2fe:	42af      	cmp	r7, r5
 800f300:	60a4      	str	r4, [r4, #8]
 800f302:	f104 0420 	add.w	r4, r4, #32
 800f306:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f30a:	d1f3      	bne.n	800f2f4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop

0800f314 <rmw_uxrce_fini_session_memory>:
 800f314:	4601      	mov	r1, r0
 800f316:	4801      	ldr	r0, [pc, #4]	@ (800f31c <rmw_uxrce_fini_session_memory+0x8>)
 800f318:	f005 bb24 	b.w	8014964 <put_memory>
 800f31c:	24068564 	.word	0x24068564

0800f320 <rmw_uxrce_fini_node_memory>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4604      	mov	r4, r0
 800f324:	6800      	ldr	r0, [r0, #0]
 800f326:	b128      	cbz	r0, 800f334 <rmw_uxrce_fini_node_memory+0x14>
 800f328:	4b07      	ldr	r3, [pc, #28]	@ (800f348 <rmw_uxrce_fini_node_memory+0x28>)
 800f32a:	6819      	ldr	r1, [r3, #0]
 800f32c:	f7f0 ffd8 	bl	80002e0 <strcmp>
 800f330:	b940      	cbnz	r0, 800f344 <rmw_uxrce_fini_node_memory+0x24>
 800f332:	6020      	str	r0, [r4, #0]
 800f334:	6861      	ldr	r1, [r4, #4]
 800f336:	b129      	cbz	r1, 800f344 <rmw_uxrce_fini_node_memory+0x24>
 800f338:	2500      	movs	r5, #0
 800f33a:	4804      	ldr	r0, [pc, #16]	@ (800f34c <rmw_uxrce_fini_node_memory+0x2c>)
 800f33c:	610d      	str	r5, [r1, #16]
 800f33e:	f005 fb11 	bl	8014964 <put_memory>
 800f342:	6065      	str	r5, [r4, #4]
 800f344:	bd38      	pop	{r3, r4, r5, pc}
 800f346:	bf00      	nop
 800f348:	080195b4 	.word	0x080195b4
 800f34c:	24068534 	.word	0x24068534

0800f350 <rmw_uxrce_fini_publisher_memory>:
 800f350:	b510      	push	{r4, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	6800      	ldr	r0, [r0, #0]
 800f356:	b128      	cbz	r0, 800f364 <rmw_uxrce_fini_publisher_memory+0x14>
 800f358:	4b06      	ldr	r3, [pc, #24]	@ (800f374 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f35a:	6819      	ldr	r1, [r3, #0]
 800f35c:	f7f0 ffc0 	bl	80002e0 <strcmp>
 800f360:	b938      	cbnz	r0, 800f372 <rmw_uxrce_fini_publisher_memory+0x22>
 800f362:	6020      	str	r0, [r4, #0]
 800f364:	6861      	ldr	r1, [r4, #4]
 800f366:	b121      	cbz	r1, 800f372 <rmw_uxrce_fini_publisher_memory+0x22>
 800f368:	4803      	ldr	r0, [pc, #12]	@ (800f378 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f36a:	f005 fafb 	bl	8014964 <put_memory>
 800f36e:	2300      	movs	r3, #0
 800f370:	6063      	str	r3, [r4, #4]
 800f372:	bd10      	pop	{r4, pc}
 800f374:	080195b4 	.word	0x080195b4
 800f378:	24068544 	.word	0x24068544

0800f37c <rmw_uxrce_fini_subscription_memory>:
 800f37c:	b510      	push	{r4, lr}
 800f37e:	4604      	mov	r4, r0
 800f380:	6800      	ldr	r0, [r0, #0]
 800f382:	b128      	cbz	r0, 800f390 <rmw_uxrce_fini_subscription_memory+0x14>
 800f384:	4b06      	ldr	r3, [pc, #24]	@ (800f3a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f386:	6819      	ldr	r1, [r3, #0]
 800f388:	f7f0 ffaa 	bl	80002e0 <strcmp>
 800f38c:	b938      	cbnz	r0, 800f39e <rmw_uxrce_fini_subscription_memory+0x22>
 800f38e:	6020      	str	r0, [r4, #0]
 800f390:	6861      	ldr	r1, [r4, #4]
 800f392:	b121      	cbz	r1, 800f39e <rmw_uxrce_fini_subscription_memory+0x22>
 800f394:	4803      	ldr	r0, [pc, #12]	@ (800f3a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f396:	f005 fae5 	bl	8014964 <put_memory>
 800f39a:	2300      	movs	r3, #0
 800f39c:	6063      	str	r3, [r4, #4]
 800f39e:	bd10      	pop	{r4, pc}
 800f3a0:	080195b4 	.word	0x080195b4
 800f3a4:	24068584 	.word	0x24068584

0800f3a8 <rmw_uxrce_fini_service_memory>:
 800f3a8:	b510      	push	{r4, lr}
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	6800      	ldr	r0, [r0, #0]
 800f3ae:	b128      	cbz	r0, 800f3bc <rmw_uxrce_fini_service_memory+0x14>
 800f3b0:	4b06      	ldr	r3, [pc, #24]	@ (800f3cc <rmw_uxrce_fini_service_memory+0x24>)
 800f3b2:	6819      	ldr	r1, [r3, #0]
 800f3b4:	f7f0 ff94 	bl	80002e0 <strcmp>
 800f3b8:	b938      	cbnz	r0, 800f3ca <rmw_uxrce_fini_service_memory+0x22>
 800f3ba:	6020      	str	r0, [r4, #0]
 800f3bc:	6861      	ldr	r1, [r4, #4]
 800f3be:	b121      	cbz	r1, 800f3ca <rmw_uxrce_fini_service_memory+0x22>
 800f3c0:	4803      	ldr	r0, [pc, #12]	@ (800f3d0 <rmw_uxrce_fini_service_memory+0x28>)
 800f3c2:	f005 facf 	bl	8014964 <put_memory>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	6063      	str	r3, [r4, #4]
 800f3ca:	bd10      	pop	{r4, pc}
 800f3cc:	080195b4 	.word	0x080195b4
 800f3d0:	24068554 	.word	0x24068554

0800f3d4 <rmw_uxrce_fini_client_memory>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	6800      	ldr	r0, [r0, #0]
 800f3da:	b128      	cbz	r0, 800f3e8 <rmw_uxrce_fini_client_memory+0x14>
 800f3dc:	4b06      	ldr	r3, [pc, #24]	@ (800f3f8 <rmw_uxrce_fini_client_memory+0x24>)
 800f3de:	6819      	ldr	r1, [r3, #0]
 800f3e0:	f7f0 ff7e 	bl	80002e0 <strcmp>
 800f3e4:	b938      	cbnz	r0, 800f3f6 <rmw_uxrce_fini_client_memory+0x22>
 800f3e6:	6020      	str	r0, [r4, #0]
 800f3e8:	6861      	ldr	r1, [r4, #4]
 800f3ea:	b121      	cbz	r1, 800f3f6 <rmw_uxrce_fini_client_memory+0x22>
 800f3ec:	4803      	ldr	r0, [pc, #12]	@ (800f3fc <rmw_uxrce_fini_client_memory+0x28>)
 800f3ee:	f005 fab9 	bl	8014964 <put_memory>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	6063      	str	r3, [r4, #4]
 800f3f6:	bd10      	pop	{r4, pc}
 800f3f8:	080195b4 	.word	0x080195b4
 800f3fc:	24063c68 	.word	0x24063c68

0800f400 <rmw_uxrce_fini_topic_memory>:
 800f400:	b510      	push	{r4, lr}
 800f402:	4604      	mov	r4, r0
 800f404:	4803      	ldr	r0, [pc, #12]	@ (800f414 <rmw_uxrce_fini_topic_memory+0x14>)
 800f406:	4621      	mov	r1, r4
 800f408:	f005 faac 	bl	8014964 <put_memory>
 800f40c:	2300      	movs	r3, #0
 800f40e:	61a3      	str	r3, [r4, #24]
 800f410:	bd10      	pop	{r4, pc}
 800f412:	bf00      	nop
 800f414:	24068594 	.word	0x24068594

0800f418 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f418:	b082      	sub	sp, #8
 800f41a:	492b      	ldr	r1, [pc, #172]	@ (800f4c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f41c:	b530      	push	{r4, r5, lr}
 800f41e:	680d      	ldr	r5, [r1, #0]
 800f420:	ac03      	add	r4, sp, #12
 800f422:	e884 000c 	stmia.w	r4, {r2, r3}
 800f426:	461c      	mov	r4, r3
 800f428:	2d00      	cmp	r5, #0
 800f42a:	d04b      	beq.n	800f4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f42c:	462b      	mov	r3, r5
 800f42e:	2100      	movs	r1, #0
 800f430:	689a      	ldr	r2, [r3, #8]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f438:	4290      	cmp	r0, r2
 800f43a:	bf08      	it	eq
 800f43c:	3101      	addeq	r1, #1
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f6      	bne.n	800f430 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f442:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f446:	2b02      	cmp	r3, #2
 800f448:	d029      	beq.n	800f49e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f44a:	d820      	bhi.n	800f48e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f44c:	428c      	cmp	r4, r1
 800f44e:	d828      	bhi.n	800f4a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f450:	fab4 f284 	clz	r2, r4
 800f454:	0952      	lsrs	r2, r2, #5
 800f456:	b324      	cbz	r4, 800f4a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f458:	b1dd      	cbz	r5, 800f492 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f45a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f45e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f462:	e001      	b.n	800f468 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f464:	686d      	ldr	r5, [r5, #4]
 800f466:	b1ad      	cbz	r5, 800f494 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f468:	68ab      	ldr	r3, [r5, #8]
 800f46a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f46e:	4288      	cmp	r0, r1
 800f470:	d1f8      	bne.n	800f464 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f472:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f476:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f47a:	4561      	cmp	r1, ip
 800f47c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f480:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f484:	daee      	bge.n	800f464 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f486:	468c      	mov	ip, r1
 800f488:	461c      	mov	r4, r3
 800f48a:	462a      	mov	r2, r5
 800f48c:	e7ea      	b.n	800f464 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f48e:	2b03      	cmp	r3, #3
 800f490:	d0dc      	beq.n	800f44c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f492:	2200      	movs	r2, #0
 800f494:	4610      	mov	r0, r2
 800f496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f49a:	b002      	add	sp, #8
 800f49c:	4770      	bx	lr
 800f49e:	428c      	cmp	r4, r1
 800f4a0:	d905      	bls.n	800f4ae <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f4a2:	4809      	ldr	r0, [pc, #36]	@ (800f4c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4a8:	b002      	add	sp, #8
 800f4aa:	f005 ba4b 	b.w	8014944 <get_memory>
 800f4ae:	fab4 f284 	clz	r2, r4
 800f4b2:	0952      	lsrs	r2, r2, #5
 800f4b4:	2c00      	cmp	r4, #0
 800f4b6:	d1ed      	bne.n	800f494 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f4b8:	4803      	ldr	r0, [pc, #12]	@ (800f4c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f4ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4be:	b002      	add	sp, #8
 800f4c0:	f005 ba40 	b.w	8014944 <get_memory>
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	e7bc      	b.n	800f442 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f4c8:	24068574 	.word	0x24068574

0800f4cc <run_xrce_session>:
 800f4cc:	b510      	push	{r4, lr}
 800f4ce:	788c      	ldrb	r4, [r1, #2]
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	2c01      	cmp	r4, #1
 800f4d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f4d8:	d00c      	beq.n	800f4f4 <run_xrce_session+0x28>
 800f4da:	2401      	movs	r4, #1
 800f4dc:	4619      	mov	r1, r3
 800f4de:	f10d 020e 	add.w	r2, sp, #14
 800f4e2:	f10d 0317 	add.w	r3, sp, #23
 800f4e6:	9400      	str	r4, [sp, #0]
 800f4e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4ec:	f001 ff76 	bl	80113dc <uxr_run_session_until_all_status>
 800f4f0:	b006      	add	sp, #24
 800f4f2:	bd10      	pop	{r4, pc}
 800f4f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4f8:	f001 fbcc 	bl	8010c94 <uxr_flash_output_streams>
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	b006      	add	sp, #24
 800f500:	bd10      	pop	{r4, pc}
 800f502:	bf00      	nop

0800f504 <convert_qos_profile>:
 800f504:	7a4a      	ldrb	r2, [r1, #9]
 800f506:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f50a:	2a02      	cmp	r2, #2
 800f50c:	bf18      	it	ne
 800f50e:	2200      	movne	r2, #0
 800f510:	7002      	strb	r2, [r0, #0]
 800f512:	f1ac 0202 	sub.w	r2, ip, #2
 800f516:	fab2 f282 	clz	r2, r2
 800f51a:	0952      	lsrs	r2, r2, #5
 800f51c:	7042      	strb	r2, [r0, #1]
 800f51e:	780a      	ldrb	r2, [r1, #0]
 800f520:	8889      	ldrh	r1, [r1, #4]
 800f522:	f1a2 0202 	sub.w	r2, r2, #2
 800f526:	8081      	strh	r1, [r0, #4]
 800f528:	fab2 f282 	clz	r2, r2
 800f52c:	0952      	lsrs	r2, r2, #5
 800f52e:	7082      	strb	r2, [r0, #2]
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop

0800f534 <generate_type_name>:
 800f534:	2300      	movs	r3, #0
 800f536:	b530      	push	{r4, r5, lr}
 800f538:	700b      	strb	r3, [r1, #0]
 800f53a:	b087      	sub	sp, #28
 800f53c:	6803      	ldr	r3, [r0, #0]
 800f53e:	4614      	mov	r4, r2
 800f540:	b1bb      	cbz	r3, 800f572 <generate_type_name+0x3e>
 800f542:	4a0e      	ldr	r2, [pc, #56]	@ (800f57c <generate_type_name+0x48>)
 800f544:	4615      	mov	r5, r2
 800f546:	9500      	str	r5, [sp, #0]
 800f548:	9203      	str	r2, [sp, #12]
 800f54a:	4d0d      	ldr	r5, [pc, #52]	@ (800f580 <generate_type_name+0x4c>)
 800f54c:	6842      	ldr	r2, [r0, #4]
 800f54e:	4608      	mov	r0, r1
 800f550:	490c      	ldr	r1, [pc, #48]	@ (800f584 <generate_type_name+0x50>)
 800f552:	9204      	str	r2, [sp, #16]
 800f554:	9105      	str	r1, [sp, #20]
 800f556:	9102      	str	r1, [sp, #8]
 800f558:	4621      	mov	r1, r4
 800f55a:	4a0b      	ldr	r2, [pc, #44]	@ (800f588 <generate_type_name+0x54>)
 800f55c:	9501      	str	r5, [sp, #4]
 800f55e:	f008 fb93 	bl	8017c88 <sniprintf>
 800f562:	2800      	cmp	r0, #0
 800f564:	bfa8      	it	ge
 800f566:	4284      	cmpge	r4, r0
 800f568:	bfcc      	ite	gt
 800f56a:	2001      	movgt	r0, #1
 800f56c:	2000      	movle	r0, #0
 800f56e:	b007      	add	sp, #28
 800f570:	bd30      	pop	{r4, r5, pc}
 800f572:	4b06      	ldr	r3, [pc, #24]	@ (800f58c <generate_type_name+0x58>)
 800f574:	4a01      	ldr	r2, [pc, #4]	@ (800f57c <generate_type_name+0x48>)
 800f576:	461d      	mov	r5, r3
 800f578:	e7e5      	b.n	800f546 <generate_type_name+0x12>
 800f57a:	bf00      	nop
 800f57c:	08018fbc 	.word	0x08018fbc
 800f580:	08018fd4 	.word	0x08018fd4
 800f584:	08018fd0 	.word	0x08018fd0
 800f588:	08018fc0 	.word	0x08018fc0
 800f58c:	0801938c 	.word	0x0801938c

0800f590 <generate_topic_name>:
 800f590:	b530      	push	{r4, r5, lr}
 800f592:	4614      	mov	r4, r2
 800f594:	b083      	sub	sp, #12
 800f596:	4605      	mov	r5, r0
 800f598:	4b07      	ldr	r3, [pc, #28]	@ (800f5b8 <generate_topic_name+0x28>)
 800f59a:	4a08      	ldr	r2, [pc, #32]	@ (800f5bc <generate_topic_name+0x2c>)
 800f59c:	4608      	mov	r0, r1
 800f59e:	9500      	str	r5, [sp, #0]
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	f008 fb71 	bl	8017c88 <sniprintf>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	bfa8      	it	ge
 800f5aa:	4284      	cmpge	r4, r0
 800f5ac:	bfcc      	ite	gt
 800f5ae:	2001      	movgt	r0, #1
 800f5b0:	2000      	movle	r0, #0
 800f5b2:	b003      	add	sp, #12
 800f5b4:	bd30      	pop	{r4, r5, pc}
 800f5b6:	bf00      	nop
 800f5b8:	08018fe0 	.word	0x08018fe0
 800f5bc:	08018fd8 	.word	0x08018fd8

0800f5c0 <is_uxrce_rmw_identifier_valid>:
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	b140      	cbz	r0, 800f5d8 <is_uxrce_rmw_identifier_valid+0x18>
 800f5c6:	f005 f9e1 	bl	801498c <rmw_get_implementation_identifier>
 800f5ca:	4601      	mov	r1, r0
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f7f0 fe87 	bl	80002e0 <strcmp>
 800f5d2:	fab0 f080 	clz	r0, r0
 800f5d6:	0940      	lsrs	r0, r0, #5
 800f5d8:	bd10      	pop	{r4, pc}
 800f5da:	bf00      	nop

0800f5dc <get_message_typesupport_handle>:
 800f5dc:	6883      	ldr	r3, [r0, #8]
 800f5de:	4718      	bx	r3

0800f5e0 <get_message_typesupport_handle_function>:
 800f5e0:	b510      	push	{r4, lr}
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	6800      	ldr	r0, [r0, #0]
 800f5e6:	f7f0 fe7b 	bl	80002e0 <strcmp>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	bf0c      	ite	eq
 800f5ee:	4620      	moveq	r0, r4
 800f5f0:	2000      	movne	r0, #0
 800f5f2:	bd10      	pop	{r4, pc}

0800f5f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f5f4:	4b04      	ldr	r3, [pc, #16]	@ (800f608 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	b10a      	cbz	r2, 800f5fe <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f5fa:	4803      	ldr	r0, [pc, #12]	@ (800f608 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f5fc:	4770      	bx	lr
 800f5fe:	4a03      	ldr	r2, [pc, #12]	@ (800f60c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f600:	4801      	ldr	r0, [pc, #4]	@ (800f608 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f602:	6812      	ldr	r2, [r2, #0]
 800f604:	601a      	str	r2, [r3, #0]
 800f606:	4770      	bx	lr
 800f608:	24000034 	.word	0x24000034
 800f60c:	240000b0 	.word	0x240000b0

0800f610 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f610:	4a02      	ldr	r2, [pc, #8]	@ (800f61c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f612:	4b03      	ldr	r3, [pc, #12]	@ (800f620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f614:	6812      	ldr	r2, [r2, #0]
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	240000b0 	.word	0x240000b0
 800f620:	24000034 	.word	0x24000034

0800f624 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f624:	f005 be92 	b.w	801534c <std_msgs__msg__Int32__init>

0800f628 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f628:	f005 be94 	b.w	8015354 <std_msgs__msg__Int32__fini>

0800f62c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f62c:	4b04      	ldr	r3, [pc, #16]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	b10a      	cbz	r2, 800f636 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f632:	4803      	ldr	r0, [pc, #12]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f634:	4770      	bx	lr
 800f636:	4a03      	ldr	r2, [pc, #12]	@ (800f644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f638:	4801      	ldr	r0, [pc, #4]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f63a:	6812      	ldr	r2, [r2, #0]
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	4770      	bx	lr
 800f640:	2400007c 	.word	0x2400007c
 800f644:	240000b4 	.word	0x240000b4

0800f648 <_Int32__max_serialized_size>:
 800f648:	2104      	movs	r1, #4
 800f64a:	2000      	movs	r0, #0
 800f64c:	b508      	push	{r3, lr}
 800f64e:	f001 f807 	bl	8010660 <ucdr_alignment>
 800f652:	3004      	adds	r0, #4
 800f654:	bd08      	pop	{r3, pc}
 800f656:	bf00      	nop

0800f658 <_Int32__cdr_deserialize>:
 800f658:	b109      	cbz	r1, 800f65e <_Int32__cdr_deserialize+0x6>
 800f65a:	f000 bf19 	b.w	8010490 <ucdr_deserialize_int32_t>
 800f65e:	4608      	mov	r0, r1
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop

0800f664 <get_serialized_size_std_msgs__msg__Int32>:
 800f664:	b138      	cbz	r0, 800f676 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f666:	b508      	push	{r3, lr}
 800f668:	460b      	mov	r3, r1
 800f66a:	2104      	movs	r1, #4
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 fff7 	bl	8010660 <ucdr_alignment>
 800f672:	3004      	adds	r0, #4
 800f674:	bd08      	pop	{r3, pc}
 800f676:	4770      	bx	lr

0800f678 <_Int32__cdr_serialize>:
 800f678:	460a      	mov	r2, r1
 800f67a:	b118      	cbz	r0, 800f684 <_Int32__cdr_serialize+0xc>
 800f67c:	6801      	ldr	r1, [r0, #0]
 800f67e:	4610      	mov	r0, r2
 800f680:	f000 be6e 	b.w	8010360 <ucdr_serialize_int32_t>
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop

0800f688 <_Int32__get_serialized_size>:
 800f688:	b130      	cbz	r0, 800f698 <_Int32__get_serialized_size+0x10>
 800f68a:	2104      	movs	r1, #4
 800f68c:	2000      	movs	r0, #0
 800f68e:	b508      	push	{r3, lr}
 800f690:	f000 ffe6 	bl	8010660 <ucdr_alignment>
 800f694:	3004      	adds	r0, #4
 800f696:	bd08      	pop	{r3, pc}
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop

0800f69c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f69c:	4800      	ldr	r0, [pc, #0]	@ (800f6a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f69e:	4770      	bx	lr
 800f6a0:	24000088 	.word	0x24000088

0800f6a4 <ucdr_serialize_bool>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	460d      	mov	r5, r1
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	f000 ff8c 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f6b0:	b148      	cbz	r0, 800f6c6 <ucdr_serialize_bool+0x22>
 800f6b2:	68a3      	ldr	r3, [r4, #8]
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	701d      	strb	r5, [r3, #0]
 800f6b8:	68a2      	ldr	r2, [r4, #8]
 800f6ba:	6923      	ldr	r3, [r4, #16]
 800f6bc:	440a      	add	r2, r1
 800f6be:	7561      	strb	r1, [r4, #21]
 800f6c0:	440b      	add	r3, r1
 800f6c2:	60a2      	str	r2, [r4, #8]
 800f6c4:	6123      	str	r3, [r4, #16]
 800f6c6:	7da0      	ldrb	r0, [r4, #22]
 800f6c8:	f080 0001 	eor.w	r0, r0, #1
 800f6cc:	bd38      	pop	{r3, r4, r5, pc}
 800f6ce:	bf00      	nop

0800f6d0 <ucdr_deserialize_bool>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	2101      	movs	r1, #1
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	f000 ff76 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f6dc:	b160      	cbz	r0, 800f6f8 <ucdr_deserialize_bool+0x28>
 800f6de:	68a2      	ldr	r2, [r4, #8]
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f6e8:	440b      	add	r3, r1
 800f6ea:	3800      	subs	r0, #0
 800f6ec:	bf18      	it	ne
 800f6ee:	2001      	movne	r0, #1
 800f6f0:	7028      	strb	r0, [r5, #0]
 800f6f2:	60a2      	str	r2, [r4, #8]
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	7561      	strb	r1, [r4, #21]
 800f6f8:	7da0      	ldrb	r0, [r4, #22]
 800f6fa:	f080 0001 	eor.w	r0, r0, #1
 800f6fe:	bd38      	pop	{r3, r4, r5, pc}

0800f700 <ucdr_serialize_uint8_t>:
 800f700:	b538      	push	{r3, r4, r5, lr}
 800f702:	460d      	mov	r5, r1
 800f704:	2101      	movs	r1, #1
 800f706:	4604      	mov	r4, r0
 800f708:	f000 ff5e 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f70c:	b148      	cbz	r0, 800f722 <ucdr_serialize_uint8_t+0x22>
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	2101      	movs	r1, #1
 800f712:	701d      	strb	r5, [r3, #0]
 800f714:	68a2      	ldr	r2, [r4, #8]
 800f716:	6923      	ldr	r3, [r4, #16]
 800f718:	440a      	add	r2, r1
 800f71a:	7561      	strb	r1, [r4, #21]
 800f71c:	440b      	add	r3, r1
 800f71e:	60a2      	str	r2, [r4, #8]
 800f720:	6123      	str	r3, [r4, #16]
 800f722:	7da0      	ldrb	r0, [r4, #22]
 800f724:	f080 0001 	eor.w	r0, r0, #1
 800f728:	bd38      	pop	{r3, r4, r5, pc}
 800f72a:	bf00      	nop

0800f72c <ucdr_deserialize_uint8_t>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	460d      	mov	r5, r1
 800f730:	2101      	movs	r1, #1
 800f732:	4604      	mov	r4, r0
 800f734:	f000 ff48 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f738:	b150      	cbz	r0, 800f750 <ucdr_deserialize_uint8_t+0x24>
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	2101      	movs	r1, #1
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	702b      	strb	r3, [r5, #0]
 800f742:	68a2      	ldr	r2, [r4, #8]
 800f744:	6923      	ldr	r3, [r4, #16]
 800f746:	440a      	add	r2, r1
 800f748:	7561      	strb	r1, [r4, #21]
 800f74a:	440b      	add	r3, r1
 800f74c:	60a2      	str	r2, [r4, #8]
 800f74e:	6123      	str	r3, [r4, #16]
 800f750:	7da0      	ldrb	r0, [r4, #22]
 800f752:	f080 0001 	eor.w	r0, r0, #1
 800f756:	bd38      	pop	{r3, r4, r5, pc}

0800f758 <ucdr_serialize_uint16_t>:
 800f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75c:	460b      	mov	r3, r1
 800f75e:	b082      	sub	sp, #8
 800f760:	4604      	mov	r4, r0
 800f762:	2102      	movs	r1, #2
 800f764:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f768:	f000 ff82 	bl	8010670 <ucdr_buffer_alignment>
 800f76c:	4601      	mov	r1, r0
 800f76e:	4620      	mov	r0, r4
 800f770:	7d67      	ldrb	r7, [r4, #21]
 800f772:	f000 ffc5 	bl	8010700 <ucdr_advance_buffer>
 800f776:	2102      	movs	r1, #2
 800f778:	4620      	mov	r0, r4
 800f77a:	f000 ff19 	bl	80105b0 <ucdr_check_buffer_available_for>
 800f77e:	bb78      	cbnz	r0, 800f7e0 <ucdr_serialize_uint16_t+0x88>
 800f780:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f784:	42ab      	cmp	r3, r5
 800f786:	d926      	bls.n	800f7d6 <ucdr_serialize_uint16_t+0x7e>
 800f788:	1b5e      	subs	r6, r3, r5
 800f78a:	60a3      	str	r3, [r4, #8]
 800f78c:	6923      	ldr	r3, [r4, #16]
 800f78e:	4620      	mov	r0, r4
 800f790:	f1c6 0802 	rsb	r8, r6, #2
 800f794:	4433      	add	r3, r6
 800f796:	4641      	mov	r1, r8
 800f798:	6123      	str	r3, [r4, #16]
 800f79a:	f000 ff15 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d03b      	beq.n	800f81a <ucdr_serialize_uint16_t+0xc2>
 800f7a2:	7d23      	ldrb	r3, [r4, #20]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d04a      	beq.n	800f83e <ucdr_serialize_uint16_t+0xe6>
 800f7a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7ac:	702b      	strb	r3, [r5, #0]
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	d040      	beq.n	800f834 <ucdr_serialize_uint16_t+0xdc>
 800f7b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7b6:	706b      	strb	r3, [r5, #1]
 800f7b8:	6923      	ldr	r3, [r4, #16]
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	68a2      	ldr	r2, [r4, #8]
 800f7be:	3302      	adds	r3, #2
 800f7c0:	7da0      	ldrb	r0, [r4, #22]
 800f7c2:	4442      	add	r2, r8
 800f7c4:	7561      	strb	r1, [r4, #21]
 800f7c6:	1b9e      	subs	r6, r3, r6
 800f7c8:	f080 0001 	eor.w	r0, r0, #1
 800f7cc:	60a2      	str	r2, [r4, #8]
 800f7ce:	6126      	str	r6, [r4, #16]
 800f7d0:	b002      	add	sp, #8
 800f7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d6:	2102      	movs	r1, #2
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f000 fef5 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f7de:	b190      	cbz	r0, 800f806 <ucdr_serialize_uint16_t+0xae>
 800f7e0:	7d23      	ldrb	r3, [r4, #20]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	68a3      	ldr	r3, [r4, #8]
 800f7e6:	d014      	beq.n	800f812 <ucdr_serialize_uint16_t+0xba>
 800f7e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f7ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7f0:	7019      	strb	r1, [r3, #0]
 800f7f2:	68a3      	ldr	r3, [r4, #8]
 800f7f4:	705a      	strb	r2, [r3, #1]
 800f7f6:	2102      	movs	r1, #2
 800f7f8:	68a2      	ldr	r2, [r4, #8]
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	440a      	add	r2, r1
 800f7fe:	7561      	strb	r1, [r4, #21]
 800f800:	440b      	add	r3, r1
 800f802:	60a2      	str	r2, [r4, #8]
 800f804:	6123      	str	r3, [r4, #16]
 800f806:	7da0      	ldrb	r0, [r4, #22]
 800f808:	f080 0001 	eor.w	r0, r0, #1
 800f80c:	b002      	add	sp, #8
 800f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f812:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f816:	801a      	strh	r2, [r3, #0]
 800f818:	e7ed      	b.n	800f7f6 <ucdr_serialize_uint16_t+0x9e>
 800f81a:	68a2      	ldr	r2, [r4, #8]
 800f81c:	6923      	ldr	r3, [r4, #16]
 800f81e:	7da0      	ldrb	r0, [r4, #22]
 800f820:	1b92      	subs	r2, r2, r6
 800f822:	1b9b      	subs	r3, r3, r6
 800f824:	7567      	strb	r7, [r4, #21]
 800f826:	f080 0001 	eor.w	r0, r0, #1
 800f82a:	60a2      	str	r2, [r4, #8]
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	b002      	add	sp, #8
 800f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f834:	68a3      	ldr	r3, [r4, #8]
 800f836:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f83a:	701a      	strb	r2, [r3, #0]
 800f83c:	e7bc      	b.n	800f7b8 <ucdr_serialize_uint16_t+0x60>
 800f83e:	4628      	mov	r0, r5
 800f840:	f10d 0506 	add.w	r5, sp, #6
 800f844:	4632      	mov	r2, r6
 800f846:	4629      	mov	r1, r5
 800f848:	f008 fbed 	bl	8018026 <memcpy>
 800f84c:	4642      	mov	r2, r8
 800f84e:	19a9      	adds	r1, r5, r6
 800f850:	68a0      	ldr	r0, [r4, #8]
 800f852:	f008 fbe8 	bl	8018026 <memcpy>
 800f856:	e7af      	b.n	800f7b8 <ucdr_serialize_uint16_t+0x60>

0800f858 <ucdr_serialize_endian_uint16_t>:
 800f858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f85c:	4604      	mov	r4, r0
 800f85e:	b083      	sub	sp, #12
 800f860:	460d      	mov	r5, r1
 800f862:	2102      	movs	r1, #2
 800f864:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f868:	f000 ff02 	bl	8010670 <ucdr_buffer_alignment>
 800f86c:	4601      	mov	r1, r0
 800f86e:	4620      	mov	r0, r4
 800f870:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f874:	f000 ff44 	bl	8010700 <ucdr_advance_buffer>
 800f878:	2102      	movs	r1, #2
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 fe98 	bl	80105b0 <ucdr_check_buffer_available_for>
 800f880:	bb70      	cbnz	r0, 800f8e0 <ucdr_serialize_endian_uint16_t+0x88>
 800f882:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f886:	42be      	cmp	r6, r7
 800f888:	d925      	bls.n	800f8d6 <ucdr_serialize_endian_uint16_t+0x7e>
 800f88a:	6923      	ldr	r3, [r4, #16]
 800f88c:	4620      	mov	r0, r4
 800f88e:	60a6      	str	r6, [r4, #8]
 800f890:	1bf6      	subs	r6, r6, r7
 800f892:	4433      	add	r3, r6
 800f894:	f1c6 0902 	rsb	r9, r6, #2
 800f898:	6123      	str	r3, [r4, #16]
 800f89a:	4649      	mov	r1, r9
 800f89c:	f000 fe94 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d039      	beq.n	800f918 <ucdr_serialize_endian_uint16_t+0xc0>
 800f8a4:	2d01      	cmp	r5, #1
 800f8a6:	d04a      	beq.n	800f93e <ucdr_serialize_endian_uint16_t+0xe6>
 800f8a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8ac:	703b      	strb	r3, [r7, #0]
 800f8ae:	2e00      	cmp	r6, #0
 800f8b0:	d040      	beq.n	800f934 <ucdr_serialize_endian_uint16_t+0xdc>
 800f8b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8b6:	707b      	strb	r3, [r7, #1]
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	2102      	movs	r1, #2
 800f8bc:	68a2      	ldr	r2, [r4, #8]
 800f8be:	7da0      	ldrb	r0, [r4, #22]
 800f8c0:	3302      	adds	r3, #2
 800f8c2:	444a      	add	r2, r9
 800f8c4:	7561      	strb	r1, [r4, #21]
 800f8c6:	1b9b      	subs	r3, r3, r6
 800f8c8:	f080 0001 	eor.w	r0, r0, #1
 800f8cc:	60a2      	str	r2, [r4, #8]
 800f8ce:	6123      	str	r3, [r4, #16]
 800f8d0:	b003      	add	sp, #12
 800f8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d6:	2102      	movs	r1, #2
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 fe75 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f8de:	b188      	cbz	r0, 800f904 <ucdr_serialize_endian_uint16_t+0xac>
 800f8e0:	2d01      	cmp	r5, #1
 800f8e2:	68a3      	ldr	r3, [r4, #8]
 800f8e4:	d014      	beq.n	800f910 <ucdr_serialize_endian_uint16_t+0xb8>
 800f8e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f8ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8ee:	7019      	strb	r1, [r3, #0]
 800f8f0:	68a3      	ldr	r3, [r4, #8]
 800f8f2:	705a      	strb	r2, [r3, #1]
 800f8f4:	2102      	movs	r1, #2
 800f8f6:	68a2      	ldr	r2, [r4, #8]
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	440a      	add	r2, r1
 800f8fc:	7561      	strb	r1, [r4, #21]
 800f8fe:	440b      	add	r3, r1
 800f900:	60a2      	str	r2, [r4, #8]
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	7da0      	ldrb	r0, [r4, #22]
 800f906:	f080 0001 	eor.w	r0, r0, #1
 800f90a:	b003      	add	sp, #12
 800f90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f910:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f914:	801a      	strh	r2, [r3, #0]
 800f916:	e7ed      	b.n	800f8f4 <ucdr_serialize_endian_uint16_t+0x9c>
 800f918:	68a2      	ldr	r2, [r4, #8]
 800f91a:	6923      	ldr	r3, [r4, #16]
 800f91c:	7da0      	ldrb	r0, [r4, #22]
 800f91e:	1b92      	subs	r2, r2, r6
 800f920:	1b9b      	subs	r3, r3, r6
 800f922:	f884 8015 	strb.w	r8, [r4, #21]
 800f926:	f080 0001 	eor.w	r0, r0, #1
 800f92a:	60a2      	str	r2, [r4, #8]
 800f92c:	6123      	str	r3, [r4, #16]
 800f92e:	b003      	add	sp, #12
 800f930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f934:	68a3      	ldr	r3, [r4, #8]
 800f936:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f93a:	701a      	strb	r2, [r3, #0]
 800f93c:	e7bc      	b.n	800f8b8 <ucdr_serialize_endian_uint16_t+0x60>
 800f93e:	f10d 0506 	add.w	r5, sp, #6
 800f942:	4632      	mov	r2, r6
 800f944:	4638      	mov	r0, r7
 800f946:	4629      	mov	r1, r5
 800f948:	f008 fb6d 	bl	8018026 <memcpy>
 800f94c:	464a      	mov	r2, r9
 800f94e:	19a9      	adds	r1, r5, r6
 800f950:	68a0      	ldr	r0, [r4, #8]
 800f952:	f008 fb68 	bl	8018026 <memcpy>
 800f956:	e7af      	b.n	800f8b8 <ucdr_serialize_endian_uint16_t+0x60>

0800f958 <ucdr_deserialize_uint16_t>:
 800f958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f95c:	4604      	mov	r4, r0
 800f95e:	460d      	mov	r5, r1
 800f960:	2102      	movs	r1, #2
 800f962:	f000 fe85 	bl	8010670 <ucdr_buffer_alignment>
 800f966:	4601      	mov	r1, r0
 800f968:	4620      	mov	r0, r4
 800f96a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f96e:	f000 fec7 	bl	8010700 <ucdr_advance_buffer>
 800f972:	2102      	movs	r1, #2
 800f974:	4620      	mov	r0, r4
 800f976:	f000 fe1b 	bl	80105b0 <ucdr_check_buffer_available_for>
 800f97a:	bb60      	cbnz	r0, 800f9d6 <ucdr_deserialize_uint16_t+0x7e>
 800f97c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f980:	42be      	cmp	r6, r7
 800f982:	d923      	bls.n	800f9cc <ucdr_deserialize_uint16_t+0x74>
 800f984:	6923      	ldr	r3, [r4, #16]
 800f986:	4620      	mov	r0, r4
 800f988:	60a6      	str	r6, [r4, #8]
 800f98a:	1bf6      	subs	r6, r6, r7
 800f98c:	4433      	add	r3, r6
 800f98e:	f1c6 0902 	rsb	r9, r6, #2
 800f992:	6123      	str	r3, [r4, #16]
 800f994:	4649      	mov	r1, r9
 800f996:	f000 fe17 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d034      	beq.n	800fa08 <ucdr_deserialize_uint16_t+0xb0>
 800f99e:	7d23      	ldrb	r3, [r4, #20]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d042      	beq.n	800fa2a <ucdr_deserialize_uint16_t+0xd2>
 800f9a4:	787b      	ldrb	r3, [r7, #1]
 800f9a6:	702b      	strb	r3, [r5, #0]
 800f9a8:	2e00      	cmp	r6, #0
 800f9aa:	d03a      	beq.n	800fa22 <ucdr_deserialize_uint16_t+0xca>
 800f9ac:	783b      	ldrb	r3, [r7, #0]
 800f9ae:	706b      	strb	r3, [r5, #1]
 800f9b0:	6923      	ldr	r3, [r4, #16]
 800f9b2:	2102      	movs	r1, #2
 800f9b4:	68a2      	ldr	r2, [r4, #8]
 800f9b6:	3302      	adds	r3, #2
 800f9b8:	7da0      	ldrb	r0, [r4, #22]
 800f9ba:	444a      	add	r2, r9
 800f9bc:	7561      	strb	r1, [r4, #21]
 800f9be:	1b9b      	subs	r3, r3, r6
 800f9c0:	f080 0001 	eor.w	r0, r0, #1
 800f9c4:	60a2      	str	r2, [r4, #8]
 800f9c6:	6123      	str	r3, [r4, #16]
 800f9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9cc:	2102      	movs	r1, #2
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 fdfa 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800f9d4:	b180      	cbz	r0, 800f9f8 <ucdr_deserialize_uint16_t+0xa0>
 800f9d6:	7d23      	ldrb	r3, [r4, #20]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	68a3      	ldr	r3, [r4, #8]
 800f9dc:	d011      	beq.n	800fa02 <ucdr_deserialize_uint16_t+0xaa>
 800f9de:	785b      	ldrb	r3, [r3, #1]
 800f9e0:	702b      	strb	r3, [r5, #0]
 800f9e2:	68a3      	ldr	r3, [r4, #8]
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	706b      	strb	r3, [r5, #1]
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	68a2      	ldr	r2, [r4, #8]
 800f9ec:	6923      	ldr	r3, [r4, #16]
 800f9ee:	440a      	add	r2, r1
 800f9f0:	7561      	strb	r1, [r4, #21]
 800f9f2:	440b      	add	r3, r1
 800f9f4:	60a2      	str	r2, [r4, #8]
 800f9f6:	6123      	str	r3, [r4, #16]
 800f9f8:	7da0      	ldrb	r0, [r4, #22]
 800f9fa:	f080 0001 	eor.w	r0, r0, #1
 800f9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	802b      	strh	r3, [r5, #0]
 800fa06:	e7ef      	b.n	800f9e8 <ucdr_deserialize_uint16_t+0x90>
 800fa08:	68a2      	ldr	r2, [r4, #8]
 800fa0a:	6923      	ldr	r3, [r4, #16]
 800fa0c:	1b92      	subs	r2, r2, r6
 800fa0e:	7da0      	ldrb	r0, [r4, #22]
 800fa10:	1b9b      	subs	r3, r3, r6
 800fa12:	f884 8015 	strb.w	r8, [r4, #21]
 800fa16:	f080 0001 	eor.w	r0, r0, #1
 800fa1a:	60a2      	str	r2, [r4, #8]
 800fa1c:	6123      	str	r3, [r4, #16]
 800fa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa22:	68a3      	ldr	r3, [r4, #8]
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	706b      	strb	r3, [r5, #1]
 800fa28:	e7c2      	b.n	800f9b0 <ucdr_deserialize_uint16_t+0x58>
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	4632      	mov	r2, r6
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f008 faf9 	bl	8018026 <memcpy>
 800fa34:	464a      	mov	r2, r9
 800fa36:	19a8      	adds	r0, r5, r6
 800fa38:	68a1      	ldr	r1, [r4, #8]
 800fa3a:	f008 faf4 	bl	8018026 <memcpy>
 800fa3e:	e7b7      	b.n	800f9b0 <ucdr_deserialize_uint16_t+0x58>

0800fa40 <ucdr_deserialize_endian_uint16_t>:
 800fa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa44:	4604      	mov	r4, r0
 800fa46:	460e      	mov	r6, r1
 800fa48:	2102      	movs	r1, #2
 800fa4a:	4615      	mov	r5, r2
 800fa4c:	f000 fe10 	bl	8010670 <ucdr_buffer_alignment>
 800fa50:	4601      	mov	r1, r0
 800fa52:	4620      	mov	r0, r4
 800fa54:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa58:	f000 fe52 	bl	8010700 <ucdr_advance_buffer>
 800fa5c:	2102      	movs	r1, #2
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 fda6 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fa64:	bb70      	cbnz	r0, 800fac4 <ucdr_deserialize_endian_uint16_t+0x84>
 800fa66:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fa6a:	454f      	cmp	r7, r9
 800fa6c:	d925      	bls.n	800faba <ucdr_deserialize_endian_uint16_t+0x7a>
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	4620      	mov	r0, r4
 800fa72:	60a7      	str	r7, [r4, #8]
 800fa74:	eba7 0709 	sub.w	r7, r7, r9
 800fa78:	443b      	add	r3, r7
 800fa7a:	f1c7 0a02 	rsb	sl, r7, #2
 800fa7e:	6123      	str	r3, [r4, #16]
 800fa80:	4651      	mov	r1, sl
 800fa82:	f000 fda1 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d034      	beq.n	800faf4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800fa8a:	2e01      	cmp	r6, #1
 800fa8c:	d043      	beq.n	800fb16 <ucdr_deserialize_endian_uint16_t+0xd6>
 800fa8e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fa92:	702b      	strb	r3, [r5, #0]
 800fa94:	2f00      	cmp	r7, #0
 800fa96:	d03a      	beq.n	800fb0e <ucdr_deserialize_endian_uint16_t+0xce>
 800fa98:	f899 3000 	ldrb.w	r3, [r9]
 800fa9c:	706b      	strb	r3, [r5, #1]
 800fa9e:	6923      	ldr	r3, [r4, #16]
 800faa0:	2102      	movs	r1, #2
 800faa2:	68a2      	ldr	r2, [r4, #8]
 800faa4:	3302      	adds	r3, #2
 800faa6:	7da0      	ldrb	r0, [r4, #22]
 800faa8:	4452      	add	r2, sl
 800faaa:	7561      	strb	r1, [r4, #21]
 800faac:	1bdb      	subs	r3, r3, r7
 800faae:	f080 0001 	eor.w	r0, r0, #1
 800fab2:	60a2      	str	r2, [r4, #8]
 800fab4:	6123      	str	r3, [r4, #16]
 800fab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faba:	2102      	movs	r1, #2
 800fabc:	4620      	mov	r0, r4
 800fabe:	f000 fd83 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fac2:	b178      	cbz	r0, 800fae4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800fac4:	2e01      	cmp	r6, #1
 800fac6:	68a3      	ldr	r3, [r4, #8]
 800fac8:	d011      	beq.n	800faee <ucdr_deserialize_endian_uint16_t+0xae>
 800faca:	785b      	ldrb	r3, [r3, #1]
 800facc:	702b      	strb	r3, [r5, #0]
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	706b      	strb	r3, [r5, #1]
 800fad4:	2102      	movs	r1, #2
 800fad6:	68a2      	ldr	r2, [r4, #8]
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	440a      	add	r2, r1
 800fadc:	7561      	strb	r1, [r4, #21]
 800fade:	440b      	add	r3, r1
 800fae0:	60a2      	str	r2, [r4, #8]
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	7da0      	ldrb	r0, [r4, #22]
 800fae6:	f080 0001 	eor.w	r0, r0, #1
 800faea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	802b      	strh	r3, [r5, #0]
 800faf2:	e7ef      	b.n	800fad4 <ucdr_deserialize_endian_uint16_t+0x94>
 800faf4:	68a2      	ldr	r2, [r4, #8]
 800faf6:	6923      	ldr	r3, [r4, #16]
 800faf8:	1bd2      	subs	r2, r2, r7
 800fafa:	7da0      	ldrb	r0, [r4, #22]
 800fafc:	1bdb      	subs	r3, r3, r7
 800fafe:	f884 8015 	strb.w	r8, [r4, #21]
 800fb02:	f080 0001 	eor.w	r0, r0, #1
 800fb06:	60a2      	str	r2, [r4, #8]
 800fb08:	6123      	str	r3, [r4, #16]
 800fb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	706b      	strb	r3, [r5, #1]
 800fb14:	e7c3      	b.n	800fa9e <ucdr_deserialize_endian_uint16_t+0x5e>
 800fb16:	4649      	mov	r1, r9
 800fb18:	463a      	mov	r2, r7
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f008 fa83 	bl	8018026 <memcpy>
 800fb20:	4652      	mov	r2, sl
 800fb22:	19e8      	adds	r0, r5, r7
 800fb24:	68a1      	ldr	r1, [r4, #8]
 800fb26:	f008 fa7e 	bl	8018026 <memcpy>
 800fb2a:	e7b8      	b.n	800fa9e <ucdr_deserialize_endian_uint16_t+0x5e>

0800fb2c <ucdr_serialize_uint32_t>:
 800fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	4604      	mov	r4, r0
 800fb34:	9101      	str	r1, [sp, #4]
 800fb36:	2104      	movs	r1, #4
 800fb38:	f000 fd9a 	bl	8010670 <ucdr_buffer_alignment>
 800fb3c:	4601      	mov	r1, r0
 800fb3e:	4620      	mov	r0, r4
 800fb40:	7d67      	ldrb	r7, [r4, #21]
 800fb42:	f000 fddd 	bl	8010700 <ucdr_advance_buffer>
 800fb46:	2104      	movs	r1, #4
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f000 fd31 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d139      	bne.n	800fbc6 <ucdr_serialize_uint32_t+0x9a>
 800fb52:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb56:	42ab      	cmp	r3, r5
 800fb58:	d930      	bls.n	800fbbc <ucdr_serialize_uint32_t+0x90>
 800fb5a:	1b5e      	subs	r6, r3, r5
 800fb5c:	60a3      	str	r3, [r4, #8]
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	4620      	mov	r0, r4
 800fb62:	f1c6 0804 	rsb	r8, r6, #4
 800fb66:	4433      	add	r3, r6
 800fb68:	4641      	mov	r1, r8
 800fb6a:	6123      	str	r3, [r4, #16]
 800fb6c:	f000 fd2c 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d04c      	beq.n	800fc0e <ucdr_serialize_uint32_t+0xe2>
 800fb74:	7d23      	ldrb	r3, [r4, #20]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d063      	beq.n	800fc42 <ucdr_serialize_uint32_t+0x116>
 800fb7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb7e:	702b      	strb	r3, [r5, #0]
 800fb80:	2e00      	cmp	r6, #0
 800fb82:	d051      	beq.n	800fc28 <ucdr_serialize_uint32_t+0xfc>
 800fb84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb88:	2e01      	cmp	r6, #1
 800fb8a:	706b      	strb	r3, [r5, #1]
 800fb8c:	d050      	beq.n	800fc30 <ucdr_serialize_uint32_t+0x104>
 800fb8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fb92:	2e02      	cmp	r6, #2
 800fb94:	70ab      	strb	r3, [r5, #2]
 800fb96:	d04f      	beq.n	800fc38 <ucdr_serialize_uint32_t+0x10c>
 800fb98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fb9c:	70eb      	strb	r3, [r5, #3]
 800fb9e:	6923      	ldr	r3, [r4, #16]
 800fba0:	2104      	movs	r1, #4
 800fba2:	68a2      	ldr	r2, [r4, #8]
 800fba4:	3304      	adds	r3, #4
 800fba6:	7da0      	ldrb	r0, [r4, #22]
 800fba8:	4442      	add	r2, r8
 800fbaa:	7561      	strb	r1, [r4, #21]
 800fbac:	1b9e      	subs	r6, r3, r6
 800fbae:	f080 0001 	eor.w	r0, r0, #1
 800fbb2:	60a2      	str	r2, [r4, #8]
 800fbb4:	6126      	str	r6, [r4, #16]
 800fbb6:	b002      	add	sp, #8
 800fbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbbc:	2104      	movs	r1, #4
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 fd02 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fbc4:	b1d0      	cbz	r0, 800fbfc <ucdr_serialize_uint32_t+0xd0>
 800fbc6:	7d23      	ldrb	r3, [r4, #20]
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	68a3      	ldr	r3, [r4, #8]
 800fbcc:	d01c      	beq.n	800fc08 <ucdr_serialize_uint32_t+0xdc>
 800fbce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fbd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbd6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fbda:	7018      	strb	r0, [r3, #0]
 800fbdc:	68a3      	ldr	r3, [r4, #8]
 800fbde:	705a      	strb	r2, [r3, #1]
 800fbe0:	68a3      	ldr	r3, [r4, #8]
 800fbe2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fbe6:	7099      	strb	r1, [r3, #2]
 800fbe8:	68a3      	ldr	r3, [r4, #8]
 800fbea:	70da      	strb	r2, [r3, #3]
 800fbec:	2104      	movs	r1, #4
 800fbee:	68a2      	ldr	r2, [r4, #8]
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	440a      	add	r2, r1
 800fbf4:	7561      	strb	r1, [r4, #21]
 800fbf6:	440b      	add	r3, r1
 800fbf8:	60a2      	str	r2, [r4, #8]
 800fbfa:	6123      	str	r3, [r4, #16]
 800fbfc:	7da0      	ldrb	r0, [r4, #22]
 800fbfe:	f080 0001 	eor.w	r0, r0, #1
 800fc02:	b002      	add	sp, #8
 800fc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc08:	9a01      	ldr	r2, [sp, #4]
 800fc0a:	601a      	str	r2, [r3, #0]
 800fc0c:	e7ee      	b.n	800fbec <ucdr_serialize_uint32_t+0xc0>
 800fc0e:	68a2      	ldr	r2, [r4, #8]
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	7da0      	ldrb	r0, [r4, #22]
 800fc14:	1b92      	subs	r2, r2, r6
 800fc16:	1b9b      	subs	r3, r3, r6
 800fc18:	7567      	strb	r7, [r4, #21]
 800fc1a:	f080 0001 	eor.w	r0, r0, #1
 800fc1e:	60a2      	str	r2, [r4, #8]
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	b002      	add	sp, #8
 800fc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	68a3      	ldr	r3, [r4, #8]
 800fc3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc3e:	701a      	strb	r2, [r3, #0]
 800fc40:	e7ad      	b.n	800fb9e <ucdr_serialize_uint32_t+0x72>
 800fc42:	4628      	mov	r0, r5
 800fc44:	ad01      	add	r5, sp, #4
 800fc46:	4632      	mov	r2, r6
 800fc48:	4629      	mov	r1, r5
 800fc4a:	f008 f9ec 	bl	8018026 <memcpy>
 800fc4e:	4642      	mov	r2, r8
 800fc50:	19a9      	adds	r1, r5, r6
 800fc52:	68a0      	ldr	r0, [r4, #8]
 800fc54:	f008 f9e7 	bl	8018026 <memcpy>
 800fc58:	e7a1      	b.n	800fb9e <ucdr_serialize_uint32_t+0x72>
 800fc5a:	bf00      	nop

0800fc5c <ucdr_serialize_endian_uint32_t>:
 800fc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc60:	4604      	mov	r4, r0
 800fc62:	b083      	sub	sp, #12
 800fc64:	460d      	mov	r5, r1
 800fc66:	2104      	movs	r1, #4
 800fc68:	9201      	str	r2, [sp, #4]
 800fc6a:	f000 fd01 	bl	8010670 <ucdr_buffer_alignment>
 800fc6e:	4601      	mov	r1, r0
 800fc70:	4620      	mov	r0, r4
 800fc72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc76:	f000 fd43 	bl	8010700 <ucdr_advance_buffer>
 800fc7a:	2104      	movs	r1, #4
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 fc97 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d138      	bne.n	800fcf8 <ucdr_serialize_endian_uint32_t+0x9c>
 800fc86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fc8a:	42b7      	cmp	r7, r6
 800fc8c:	d92f      	bls.n	800fcee <ucdr_serialize_endian_uint32_t+0x92>
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	4620      	mov	r0, r4
 800fc92:	60a7      	str	r7, [r4, #8]
 800fc94:	1bbf      	subs	r7, r7, r6
 800fc96:	443b      	add	r3, r7
 800fc98:	f1c7 0904 	rsb	r9, r7, #4
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	4649      	mov	r1, r9
 800fca0:	f000 fc92 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d04a      	beq.n	800fd3e <ucdr_serialize_endian_uint32_t+0xe2>
 800fca8:	2d01      	cmp	r5, #1
 800fcaa:	d063      	beq.n	800fd74 <ucdr_serialize_endian_uint32_t+0x118>
 800fcac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fcb0:	7033      	strb	r3, [r6, #0]
 800fcb2:	2f00      	cmp	r7, #0
 800fcb4:	d051      	beq.n	800fd5a <ucdr_serialize_endian_uint32_t+0xfe>
 800fcb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcba:	2f01      	cmp	r7, #1
 800fcbc:	7073      	strb	r3, [r6, #1]
 800fcbe:	d050      	beq.n	800fd62 <ucdr_serialize_endian_uint32_t+0x106>
 800fcc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fcc4:	2f02      	cmp	r7, #2
 800fcc6:	70b3      	strb	r3, [r6, #2]
 800fcc8:	d04f      	beq.n	800fd6a <ucdr_serialize_endian_uint32_t+0x10e>
 800fcca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcce:	70f3      	strb	r3, [r6, #3]
 800fcd0:	6923      	ldr	r3, [r4, #16]
 800fcd2:	2104      	movs	r1, #4
 800fcd4:	68a2      	ldr	r2, [r4, #8]
 800fcd6:	7da0      	ldrb	r0, [r4, #22]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	444a      	add	r2, r9
 800fcdc:	7561      	strb	r1, [r4, #21]
 800fcde:	1bdb      	subs	r3, r3, r7
 800fce0:	f080 0001 	eor.w	r0, r0, #1
 800fce4:	60a2      	str	r2, [r4, #8]
 800fce6:	6123      	str	r3, [r4, #16]
 800fce8:	b003      	add	sp, #12
 800fcea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcee:	2104      	movs	r1, #4
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fc69 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fcf6:	b1c8      	cbz	r0, 800fd2c <ucdr_serialize_endian_uint32_t+0xd0>
 800fcf8:	2d01      	cmp	r5, #1
 800fcfa:	68a3      	ldr	r3, [r4, #8]
 800fcfc:	d01c      	beq.n	800fd38 <ucdr_serialize_endian_uint32_t+0xdc>
 800fcfe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fd02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd06:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fd0a:	7018      	strb	r0, [r3, #0]
 800fd0c:	68a3      	ldr	r3, [r4, #8]
 800fd0e:	705a      	strb	r2, [r3, #1]
 800fd10:	68a3      	ldr	r3, [r4, #8]
 800fd12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd16:	7099      	strb	r1, [r3, #2]
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	70da      	strb	r2, [r3, #3]
 800fd1c:	2104      	movs	r1, #4
 800fd1e:	68a2      	ldr	r2, [r4, #8]
 800fd20:	6923      	ldr	r3, [r4, #16]
 800fd22:	440a      	add	r2, r1
 800fd24:	7561      	strb	r1, [r4, #21]
 800fd26:	440b      	add	r3, r1
 800fd28:	60a2      	str	r2, [r4, #8]
 800fd2a:	6123      	str	r3, [r4, #16]
 800fd2c:	7da0      	ldrb	r0, [r4, #22]
 800fd2e:	f080 0001 	eor.w	r0, r0, #1
 800fd32:	b003      	add	sp, #12
 800fd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd38:	9a01      	ldr	r2, [sp, #4]
 800fd3a:	601a      	str	r2, [r3, #0]
 800fd3c:	e7ee      	b.n	800fd1c <ucdr_serialize_endian_uint32_t+0xc0>
 800fd3e:	68a2      	ldr	r2, [r4, #8]
 800fd40:	6923      	ldr	r3, [r4, #16]
 800fd42:	7da0      	ldrb	r0, [r4, #22]
 800fd44:	1bd2      	subs	r2, r2, r7
 800fd46:	1bdb      	subs	r3, r3, r7
 800fd48:	f884 8015 	strb.w	r8, [r4, #21]
 800fd4c:	f080 0001 	eor.w	r0, r0, #1
 800fd50:	60a2      	str	r2, [r4, #8]
 800fd52:	6123      	str	r3, [r4, #16]
 800fd54:	b003      	add	sp, #12
 800fd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd5a:	68a3      	ldr	r3, [r4, #8]
 800fd5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	68a3      	ldr	r3, [r4, #8]
 800fd64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd68:	701a      	strb	r2, [r3, #0]
 800fd6a:	68a3      	ldr	r3, [r4, #8]
 800fd6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd70:	701a      	strb	r2, [r3, #0]
 800fd72:	e7ad      	b.n	800fcd0 <ucdr_serialize_endian_uint32_t+0x74>
 800fd74:	ad01      	add	r5, sp, #4
 800fd76:	463a      	mov	r2, r7
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	f008 f953 	bl	8018026 <memcpy>
 800fd80:	464a      	mov	r2, r9
 800fd82:	19e9      	adds	r1, r5, r7
 800fd84:	68a0      	ldr	r0, [r4, #8]
 800fd86:	f008 f94e 	bl	8018026 <memcpy>
 800fd8a:	e7a1      	b.n	800fcd0 <ucdr_serialize_endian_uint32_t+0x74>

0800fd8c <ucdr_deserialize_uint32_t>:
 800fd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	2104      	movs	r1, #4
 800fd96:	f000 fc6b 	bl	8010670 <ucdr_buffer_alignment>
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fda2:	f000 fcad 	bl	8010700 <ucdr_advance_buffer>
 800fda6:	2104      	movs	r1, #4
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 fc01 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d138      	bne.n	800fe24 <ucdr_deserialize_uint32_t+0x98>
 800fdb2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fdb6:	42b7      	cmp	r7, r6
 800fdb8:	d92f      	bls.n	800fe1a <ucdr_deserialize_uint32_t+0x8e>
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	60a7      	str	r7, [r4, #8]
 800fdc0:	1bbf      	subs	r7, r7, r6
 800fdc2:	443b      	add	r3, r7
 800fdc4:	f1c7 0904 	rsb	r9, r7, #4
 800fdc8:	6123      	str	r3, [r4, #16]
 800fdca:	4649      	mov	r1, r9
 800fdcc:	f000 fbfc 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d046      	beq.n	800fe62 <ucdr_deserialize_uint32_t+0xd6>
 800fdd4:	7d23      	ldrb	r3, [r4, #20]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d05c      	beq.n	800fe94 <ucdr_deserialize_uint32_t+0x108>
 800fdda:	78f3      	ldrb	r3, [r6, #3]
 800fddc:	702b      	strb	r3, [r5, #0]
 800fdde:	2f00      	cmp	r7, #0
 800fde0:	d04c      	beq.n	800fe7c <ucdr_deserialize_uint32_t+0xf0>
 800fde2:	78b3      	ldrb	r3, [r6, #2]
 800fde4:	2f01      	cmp	r7, #1
 800fde6:	706b      	strb	r3, [r5, #1]
 800fde8:	f105 0302 	add.w	r3, r5, #2
 800fdec:	d04a      	beq.n	800fe84 <ucdr_deserialize_uint32_t+0xf8>
 800fdee:	7873      	ldrb	r3, [r6, #1]
 800fdf0:	2f02      	cmp	r7, #2
 800fdf2:	70ab      	strb	r3, [r5, #2]
 800fdf4:	f105 0303 	add.w	r3, r5, #3
 800fdf8:	d048      	beq.n	800fe8c <ucdr_deserialize_uint32_t+0x100>
 800fdfa:	7833      	ldrb	r3, [r6, #0]
 800fdfc:	70eb      	strb	r3, [r5, #3]
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	2104      	movs	r1, #4
 800fe02:	68a2      	ldr	r2, [r4, #8]
 800fe04:	3304      	adds	r3, #4
 800fe06:	7da0      	ldrb	r0, [r4, #22]
 800fe08:	444a      	add	r2, r9
 800fe0a:	7561      	strb	r1, [r4, #21]
 800fe0c:	1bdb      	subs	r3, r3, r7
 800fe0e:	f080 0001 	eor.w	r0, r0, #1
 800fe12:	60a2      	str	r2, [r4, #8]
 800fe14:	6123      	str	r3, [r4, #16]
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	2104      	movs	r1, #4
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f000 fbd3 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fe22:	b1b0      	cbz	r0, 800fe52 <ucdr_deserialize_uint32_t+0xc6>
 800fe24:	7d23      	ldrb	r3, [r4, #20]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	68a3      	ldr	r3, [r4, #8]
 800fe2a:	d017      	beq.n	800fe5c <ucdr_deserialize_uint32_t+0xd0>
 800fe2c:	78db      	ldrb	r3, [r3, #3]
 800fe2e:	702b      	strb	r3, [r5, #0]
 800fe30:	68a3      	ldr	r3, [r4, #8]
 800fe32:	789b      	ldrb	r3, [r3, #2]
 800fe34:	706b      	strb	r3, [r5, #1]
 800fe36:	68a3      	ldr	r3, [r4, #8]
 800fe38:	785b      	ldrb	r3, [r3, #1]
 800fe3a:	70ab      	strb	r3, [r5, #2]
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	70eb      	strb	r3, [r5, #3]
 800fe42:	2104      	movs	r1, #4
 800fe44:	68a2      	ldr	r2, [r4, #8]
 800fe46:	6923      	ldr	r3, [r4, #16]
 800fe48:	440a      	add	r2, r1
 800fe4a:	7561      	strb	r1, [r4, #21]
 800fe4c:	440b      	add	r3, r1
 800fe4e:	60a2      	str	r2, [r4, #8]
 800fe50:	6123      	str	r3, [r4, #16]
 800fe52:	7da0      	ldrb	r0, [r4, #22]
 800fe54:	f080 0001 	eor.w	r0, r0, #1
 800fe58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	602b      	str	r3, [r5, #0]
 800fe60:	e7ef      	b.n	800fe42 <ucdr_deserialize_uint32_t+0xb6>
 800fe62:	68a2      	ldr	r2, [r4, #8]
 800fe64:	6923      	ldr	r3, [r4, #16]
 800fe66:	1bd2      	subs	r2, r2, r7
 800fe68:	7da0      	ldrb	r0, [r4, #22]
 800fe6a:	1bdb      	subs	r3, r3, r7
 800fe6c:	f884 8015 	strb.w	r8, [r4, #21]
 800fe70:	f080 0001 	eor.w	r0, r0, #1
 800fe74:	60a2      	str	r2, [r4, #8]
 800fe76:	6123      	str	r3, [r4, #16]
 800fe78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7c:	68a3      	ldr	r3, [r4, #8]
 800fe7e:	789b      	ldrb	r3, [r3, #2]
 800fe80:	706b      	strb	r3, [r5, #1]
 800fe82:	1cab      	adds	r3, r5, #2
 800fe84:	68a2      	ldr	r2, [r4, #8]
 800fe86:	7852      	ldrb	r2, [r2, #1]
 800fe88:	f803 2b01 	strb.w	r2, [r3], #1
 800fe8c:	68a2      	ldr	r2, [r4, #8]
 800fe8e:	7812      	ldrb	r2, [r2, #0]
 800fe90:	701a      	strb	r2, [r3, #0]
 800fe92:	e7b4      	b.n	800fdfe <ucdr_deserialize_uint32_t+0x72>
 800fe94:	4631      	mov	r1, r6
 800fe96:	463a      	mov	r2, r7
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f008 f8c4 	bl	8018026 <memcpy>
 800fe9e:	464a      	mov	r2, r9
 800fea0:	19e8      	adds	r0, r5, r7
 800fea2:	68a1      	ldr	r1, [r4, #8]
 800fea4:	f008 f8bf 	bl	8018026 <memcpy>
 800fea8:	e7a9      	b.n	800fdfe <ucdr_deserialize_uint32_t+0x72>
 800feaa:	bf00      	nop

0800feac <ucdr_deserialize_endian_uint32_t>:
 800feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feb0:	4604      	mov	r4, r0
 800feb2:	460e      	mov	r6, r1
 800feb4:	2104      	movs	r1, #4
 800feb6:	4615      	mov	r5, r2
 800feb8:	f000 fbda 	bl	8010670 <ucdr_buffer_alignment>
 800febc:	4601      	mov	r1, r0
 800febe:	4620      	mov	r0, r4
 800fec0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fec4:	f000 fc1c 	bl	8010700 <ucdr_advance_buffer>
 800fec8:	2104      	movs	r1, #4
 800feca:	4620      	mov	r0, r4
 800fecc:	f000 fb70 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d13c      	bne.n	800ff4e <ucdr_deserialize_endian_uint32_t+0xa2>
 800fed4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fed8:	42bb      	cmp	r3, r7
 800feda:	d933      	bls.n	800ff44 <ucdr_deserialize_endian_uint32_t+0x98>
 800fedc:	eba3 0907 	sub.w	r9, r3, r7
 800fee0:	60a3      	str	r3, [r4, #8]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	4620      	mov	r0, r4
 800fee6:	f1c9 0a04 	rsb	sl, r9, #4
 800feea:	444b      	add	r3, r9
 800feec:	4651      	mov	r1, sl
 800feee:	6123      	str	r3, [r4, #16]
 800fef0:	f000 fb6a 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d048      	beq.n	800ff8a <ucdr_deserialize_endian_uint32_t+0xde>
 800fef8:	2e01      	cmp	r6, #1
 800fefa:	d061      	beq.n	800ffc0 <ucdr_deserialize_endian_uint32_t+0x114>
 800fefc:	78fb      	ldrb	r3, [r7, #3]
 800fefe:	702b      	strb	r3, [r5, #0]
 800ff00:	f1b9 0f00 	cmp.w	r9, #0
 800ff04:	d050      	beq.n	800ffa8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800ff06:	78bb      	ldrb	r3, [r7, #2]
 800ff08:	f1b9 0f01 	cmp.w	r9, #1
 800ff0c:	706b      	strb	r3, [r5, #1]
 800ff0e:	f105 0302 	add.w	r3, r5, #2
 800ff12:	d04d      	beq.n	800ffb0 <ucdr_deserialize_endian_uint32_t+0x104>
 800ff14:	787b      	ldrb	r3, [r7, #1]
 800ff16:	f1b9 0f02 	cmp.w	r9, #2
 800ff1a:	70ab      	strb	r3, [r5, #2]
 800ff1c:	f105 0303 	add.w	r3, r5, #3
 800ff20:	d04a      	beq.n	800ffb8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ff22:	783b      	ldrb	r3, [r7, #0]
 800ff24:	70eb      	strb	r3, [r5, #3]
 800ff26:	6923      	ldr	r3, [r4, #16]
 800ff28:	2104      	movs	r1, #4
 800ff2a:	68a2      	ldr	r2, [r4, #8]
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	7da0      	ldrb	r0, [r4, #22]
 800ff30:	4452      	add	r2, sl
 800ff32:	7561      	strb	r1, [r4, #21]
 800ff34:	eba3 0309 	sub.w	r3, r3, r9
 800ff38:	f080 0001 	eor.w	r0, r0, #1
 800ff3c:	60a2      	str	r2, [r4, #8]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff44:	2104      	movs	r1, #4
 800ff46:	4620      	mov	r0, r4
 800ff48:	f000 fb3e 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 800ff4c:	b1a8      	cbz	r0, 800ff7a <ucdr_deserialize_endian_uint32_t+0xce>
 800ff4e:	2e01      	cmp	r6, #1
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	d017      	beq.n	800ff84 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ff54:	78db      	ldrb	r3, [r3, #3]
 800ff56:	702b      	strb	r3, [r5, #0]
 800ff58:	68a3      	ldr	r3, [r4, #8]
 800ff5a:	789b      	ldrb	r3, [r3, #2]
 800ff5c:	706b      	strb	r3, [r5, #1]
 800ff5e:	68a3      	ldr	r3, [r4, #8]
 800ff60:	785b      	ldrb	r3, [r3, #1]
 800ff62:	70ab      	strb	r3, [r5, #2]
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	70eb      	strb	r3, [r5, #3]
 800ff6a:	2104      	movs	r1, #4
 800ff6c:	68a2      	ldr	r2, [r4, #8]
 800ff6e:	6923      	ldr	r3, [r4, #16]
 800ff70:	440a      	add	r2, r1
 800ff72:	7561      	strb	r1, [r4, #21]
 800ff74:	440b      	add	r3, r1
 800ff76:	60a2      	str	r2, [r4, #8]
 800ff78:	6123      	str	r3, [r4, #16]
 800ff7a:	7da0      	ldrb	r0, [r4, #22]
 800ff7c:	f080 0001 	eor.w	r0, r0, #1
 800ff80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	e7ef      	b.n	800ff6a <ucdr_deserialize_endian_uint32_t+0xbe>
 800ff8a:	68a2      	ldr	r2, [r4, #8]
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	eba2 0209 	sub.w	r2, r2, r9
 800ff92:	7da0      	ldrb	r0, [r4, #22]
 800ff94:	eba3 0309 	sub.w	r3, r3, r9
 800ff98:	f884 8015 	strb.w	r8, [r4, #21]
 800ff9c:	f080 0001 	eor.w	r0, r0, #1
 800ffa0:	60a2      	str	r2, [r4, #8]
 800ffa2:	6123      	str	r3, [r4, #16]
 800ffa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa8:	68a3      	ldr	r3, [r4, #8]
 800ffaa:	789b      	ldrb	r3, [r3, #2]
 800ffac:	706b      	strb	r3, [r5, #1]
 800ffae:	1cab      	adds	r3, r5, #2
 800ffb0:	68a2      	ldr	r2, [r4, #8]
 800ffb2:	7852      	ldrb	r2, [r2, #1]
 800ffb4:	f803 2b01 	strb.w	r2, [r3], #1
 800ffb8:	68a2      	ldr	r2, [r4, #8]
 800ffba:	7812      	ldrb	r2, [r2, #0]
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	e7b2      	b.n	800ff26 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	464a      	mov	r2, r9
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f008 f82e 	bl	8018026 <memcpy>
 800ffca:	4652      	mov	r2, sl
 800ffcc:	eb05 0009 	add.w	r0, r5, r9
 800ffd0:	68a1      	ldr	r1, [r4, #8]
 800ffd2:	f008 f828 	bl	8018026 <memcpy>
 800ffd6:	e7a6      	b.n	800ff26 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ffd8 <ucdr_serialize_uint64_t>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	4604      	mov	r4, r0
 800ffde:	b082      	sub	sp, #8
 800ffe0:	2108      	movs	r1, #8
 800ffe2:	e9cd 2300 	strd	r2, r3, [sp]
 800ffe6:	f000 fb43 	bl	8010670 <ucdr_buffer_alignment>
 800ffea:	4601      	mov	r1, r0
 800ffec:	4620      	mov	r0, r4
 800ffee:	7d67      	ldrb	r7, [r4, #21]
 800fff0:	f000 fb86 	bl	8010700 <ucdr_advance_buffer>
 800fff4:	2108      	movs	r1, #8
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 fada 	bl	80105b0 <ucdr_check_buffer_available_for>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d14e      	bne.n	801009e <ucdr_serialize_uint64_t+0xc6>
 8010000:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010004:	42ab      	cmp	r3, r5
 8010006:	d945      	bls.n	8010094 <ucdr_serialize_uint64_t+0xbc>
 8010008:	1b5e      	subs	r6, r3, r5
 801000a:	60a3      	str	r3, [r4, #8]
 801000c:	6923      	ldr	r3, [r4, #16]
 801000e:	4620      	mov	r0, r4
 8010010:	f1c6 0808 	rsb	r8, r6, #8
 8010014:	4433      	add	r3, r6
 8010016:	4641      	mov	r1, r8
 8010018:	6123      	str	r3, [r4, #16]
 801001a:	f000 fad5 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 801001e:	2800      	cmp	r0, #0
 8010020:	d074      	beq.n	801010c <ucdr_serialize_uint64_t+0x134>
 8010022:	7d23      	ldrb	r3, [r4, #20]
 8010024:	2b01      	cmp	r3, #1
 8010026:	f000 809b 	beq.w	8010160 <ucdr_serialize_uint64_t+0x188>
 801002a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801002e:	702b      	strb	r3, [r5, #0]
 8010030:	2e00      	cmp	r6, #0
 8010032:	d078      	beq.n	8010126 <ucdr_serialize_uint64_t+0x14e>
 8010034:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010038:	2e01      	cmp	r6, #1
 801003a:	706b      	strb	r3, [r5, #1]
 801003c:	d077      	beq.n	801012e <ucdr_serialize_uint64_t+0x156>
 801003e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010042:	2e02      	cmp	r6, #2
 8010044:	70ab      	strb	r3, [r5, #2]
 8010046:	d076      	beq.n	8010136 <ucdr_serialize_uint64_t+0x15e>
 8010048:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801004c:	2e03      	cmp	r6, #3
 801004e:	70eb      	strb	r3, [r5, #3]
 8010050:	d075      	beq.n	801013e <ucdr_serialize_uint64_t+0x166>
 8010052:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010056:	2e04      	cmp	r6, #4
 8010058:	712b      	strb	r3, [r5, #4]
 801005a:	d074      	beq.n	8010146 <ucdr_serialize_uint64_t+0x16e>
 801005c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010060:	2e05      	cmp	r6, #5
 8010062:	716b      	strb	r3, [r5, #5]
 8010064:	d073      	beq.n	801014e <ucdr_serialize_uint64_t+0x176>
 8010066:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801006a:	2e06      	cmp	r6, #6
 801006c:	71ab      	strb	r3, [r5, #6]
 801006e:	d072      	beq.n	8010156 <ucdr_serialize_uint64_t+0x17e>
 8010070:	f89d 3000 	ldrb.w	r3, [sp]
 8010074:	71eb      	strb	r3, [r5, #7]
 8010076:	6923      	ldr	r3, [r4, #16]
 8010078:	2108      	movs	r1, #8
 801007a:	68a2      	ldr	r2, [r4, #8]
 801007c:	3308      	adds	r3, #8
 801007e:	7da0      	ldrb	r0, [r4, #22]
 8010080:	4442      	add	r2, r8
 8010082:	7561      	strb	r1, [r4, #21]
 8010084:	1b9e      	subs	r6, r3, r6
 8010086:	f080 0001 	eor.w	r0, r0, #1
 801008a:	60a2      	str	r2, [r4, #8]
 801008c:	6126      	str	r6, [r4, #16]
 801008e:	b002      	add	sp, #8
 8010090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010094:	2108      	movs	r1, #8
 8010096:	4620      	mov	r0, r4
 8010098:	f000 fa96 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 801009c:	b350      	cbz	r0, 80100f4 <ucdr_serialize_uint64_t+0x11c>
 801009e:	7d23      	ldrb	r3, [r4, #20]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d02d      	beq.n	8010100 <ucdr_serialize_uint64_t+0x128>
 80100a4:	68a3      	ldr	r3, [r4, #8]
 80100a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80100aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100ae:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80100b2:	7018      	strb	r0, [r3, #0]
 80100b4:	68a3      	ldr	r3, [r4, #8]
 80100b6:	705a      	strb	r2, [r3, #1]
 80100b8:	68a3      	ldr	r3, [r4, #8]
 80100ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100be:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80100c2:	7099      	strb	r1, [r3, #2]
 80100c4:	68a3      	ldr	r3, [r4, #8]
 80100c6:	70da      	strb	r2, [r3, #3]
 80100c8:	68a3      	ldr	r3, [r4, #8]
 80100ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80100ce:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80100d2:	7118      	strb	r0, [r3, #4]
 80100d4:	68a3      	ldr	r3, [r4, #8]
 80100d6:	715a      	strb	r2, [r3, #5]
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	f89d 2000 	ldrb.w	r2, [sp]
 80100de:	7199      	strb	r1, [r3, #6]
 80100e0:	68a3      	ldr	r3, [r4, #8]
 80100e2:	71da      	strb	r2, [r3, #7]
 80100e4:	2108      	movs	r1, #8
 80100e6:	68a2      	ldr	r2, [r4, #8]
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	440a      	add	r2, r1
 80100ec:	7561      	strb	r1, [r4, #21]
 80100ee:	440b      	add	r3, r1
 80100f0:	60a2      	str	r2, [r4, #8]
 80100f2:	6123      	str	r3, [r4, #16]
 80100f4:	7da0      	ldrb	r0, [r4, #22]
 80100f6:	f080 0001 	eor.w	r0, r0, #1
 80100fa:	b002      	add	sp, #8
 80100fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010100:	466b      	mov	r3, sp
 8010102:	68a2      	ldr	r2, [r4, #8]
 8010104:	cb03      	ldmia	r3!, {r0, r1}
 8010106:	6010      	str	r0, [r2, #0]
 8010108:	6051      	str	r1, [r2, #4]
 801010a:	e7eb      	b.n	80100e4 <ucdr_serialize_uint64_t+0x10c>
 801010c:	68a2      	ldr	r2, [r4, #8]
 801010e:	6923      	ldr	r3, [r4, #16]
 8010110:	7da0      	ldrb	r0, [r4, #22]
 8010112:	1b92      	subs	r2, r2, r6
 8010114:	1b9b      	subs	r3, r3, r6
 8010116:	7567      	strb	r7, [r4, #21]
 8010118:	f080 0001 	eor.w	r0, r0, #1
 801011c:	60a2      	str	r2, [r4, #8]
 801011e:	6123      	str	r3, [r4, #16]
 8010120:	b002      	add	sp, #8
 8010122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010126:	68a3      	ldr	r3, [r4, #8]
 8010128:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801012c:	701a      	strb	r2, [r3, #0]
 801012e:	68a3      	ldr	r3, [r4, #8]
 8010130:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010134:	701a      	strb	r2, [r3, #0]
 8010136:	68a3      	ldr	r3, [r4, #8]
 8010138:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801013c:	701a      	strb	r2, [r3, #0]
 801013e:	68a3      	ldr	r3, [r4, #8]
 8010140:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010144:	701a      	strb	r2, [r3, #0]
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	68a3      	ldr	r3, [r4, #8]
 8010150:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010154:	701a      	strb	r2, [r3, #0]
 8010156:	68a3      	ldr	r3, [r4, #8]
 8010158:	f89d 2000 	ldrb.w	r2, [sp]
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	e78a      	b.n	8010076 <ucdr_serialize_uint64_t+0x9e>
 8010160:	4628      	mov	r0, r5
 8010162:	466d      	mov	r5, sp
 8010164:	4632      	mov	r2, r6
 8010166:	4629      	mov	r1, r5
 8010168:	f007 ff5d 	bl	8018026 <memcpy>
 801016c:	4642      	mov	r2, r8
 801016e:	19a9      	adds	r1, r5, r6
 8010170:	68a0      	ldr	r0, [r4, #8]
 8010172:	f007 ff58 	bl	8018026 <memcpy>
 8010176:	e77e      	b.n	8010076 <ucdr_serialize_uint64_t+0x9e>

08010178 <ucdr_serialize_int16_t>:
 8010178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801017c:	460b      	mov	r3, r1
 801017e:	b082      	sub	sp, #8
 8010180:	4604      	mov	r4, r0
 8010182:	2102      	movs	r1, #2
 8010184:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010188:	f000 fa72 	bl	8010670 <ucdr_buffer_alignment>
 801018c:	4601      	mov	r1, r0
 801018e:	4620      	mov	r0, r4
 8010190:	7d67      	ldrb	r7, [r4, #21]
 8010192:	f000 fab5 	bl	8010700 <ucdr_advance_buffer>
 8010196:	2102      	movs	r1, #2
 8010198:	4620      	mov	r0, r4
 801019a:	f000 fa09 	bl	80105b0 <ucdr_check_buffer_available_for>
 801019e:	bb78      	cbnz	r0, 8010200 <ucdr_serialize_int16_t+0x88>
 80101a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	d926      	bls.n	80101f6 <ucdr_serialize_int16_t+0x7e>
 80101a8:	1b5e      	subs	r6, r3, r5
 80101aa:	60a3      	str	r3, [r4, #8]
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	4620      	mov	r0, r4
 80101b0:	f1c6 0802 	rsb	r8, r6, #2
 80101b4:	4433      	add	r3, r6
 80101b6:	4641      	mov	r1, r8
 80101b8:	6123      	str	r3, [r4, #16]
 80101ba:	f000 fa05 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80101be:	2800      	cmp	r0, #0
 80101c0:	d03b      	beq.n	801023a <ucdr_serialize_int16_t+0xc2>
 80101c2:	7d23      	ldrb	r3, [r4, #20]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d04a      	beq.n	801025e <ucdr_serialize_int16_t+0xe6>
 80101c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101cc:	702b      	strb	r3, [r5, #0]
 80101ce:	2e00      	cmp	r6, #0
 80101d0:	d040      	beq.n	8010254 <ucdr_serialize_int16_t+0xdc>
 80101d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101d6:	706b      	strb	r3, [r5, #1]
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	2102      	movs	r1, #2
 80101dc:	68a2      	ldr	r2, [r4, #8]
 80101de:	3302      	adds	r3, #2
 80101e0:	7da0      	ldrb	r0, [r4, #22]
 80101e2:	4442      	add	r2, r8
 80101e4:	7561      	strb	r1, [r4, #21]
 80101e6:	1b9e      	subs	r6, r3, r6
 80101e8:	f080 0001 	eor.w	r0, r0, #1
 80101ec:	60a2      	str	r2, [r4, #8]
 80101ee:	6126      	str	r6, [r4, #16]
 80101f0:	b002      	add	sp, #8
 80101f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f6:	2102      	movs	r1, #2
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 f9e5 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80101fe:	b190      	cbz	r0, 8010226 <ucdr_serialize_int16_t+0xae>
 8010200:	7d23      	ldrb	r3, [r4, #20]
 8010202:	2b01      	cmp	r3, #1
 8010204:	68a3      	ldr	r3, [r4, #8]
 8010206:	d014      	beq.n	8010232 <ucdr_serialize_int16_t+0xba>
 8010208:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801020c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010210:	7019      	strb	r1, [r3, #0]
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	705a      	strb	r2, [r3, #1]
 8010216:	2102      	movs	r1, #2
 8010218:	68a2      	ldr	r2, [r4, #8]
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	440a      	add	r2, r1
 801021e:	7561      	strb	r1, [r4, #21]
 8010220:	440b      	add	r3, r1
 8010222:	60a2      	str	r2, [r4, #8]
 8010224:	6123      	str	r3, [r4, #16]
 8010226:	7da0      	ldrb	r0, [r4, #22]
 8010228:	f080 0001 	eor.w	r0, r0, #1
 801022c:	b002      	add	sp, #8
 801022e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010232:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010236:	801a      	strh	r2, [r3, #0]
 8010238:	e7ed      	b.n	8010216 <ucdr_serialize_int16_t+0x9e>
 801023a:	68a2      	ldr	r2, [r4, #8]
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	7da0      	ldrb	r0, [r4, #22]
 8010240:	1b92      	subs	r2, r2, r6
 8010242:	1b9b      	subs	r3, r3, r6
 8010244:	7567      	strb	r7, [r4, #21]
 8010246:	f080 0001 	eor.w	r0, r0, #1
 801024a:	60a2      	str	r2, [r4, #8]
 801024c:	6123      	str	r3, [r4, #16]
 801024e:	b002      	add	sp, #8
 8010250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010254:	68a3      	ldr	r3, [r4, #8]
 8010256:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801025a:	701a      	strb	r2, [r3, #0]
 801025c:	e7bc      	b.n	80101d8 <ucdr_serialize_int16_t+0x60>
 801025e:	4628      	mov	r0, r5
 8010260:	f10d 0506 	add.w	r5, sp, #6
 8010264:	4632      	mov	r2, r6
 8010266:	4629      	mov	r1, r5
 8010268:	f007 fedd 	bl	8018026 <memcpy>
 801026c:	4642      	mov	r2, r8
 801026e:	19a9      	adds	r1, r5, r6
 8010270:	68a0      	ldr	r0, [r4, #8]
 8010272:	f007 fed8 	bl	8018026 <memcpy>
 8010276:	e7af      	b.n	80101d8 <ucdr_serialize_int16_t+0x60>

08010278 <ucdr_deserialize_int16_t>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4604      	mov	r4, r0
 801027e:	460d      	mov	r5, r1
 8010280:	2102      	movs	r1, #2
 8010282:	f000 f9f5 	bl	8010670 <ucdr_buffer_alignment>
 8010286:	4601      	mov	r1, r0
 8010288:	4620      	mov	r0, r4
 801028a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801028e:	f000 fa37 	bl	8010700 <ucdr_advance_buffer>
 8010292:	2102      	movs	r1, #2
 8010294:	4620      	mov	r0, r4
 8010296:	f000 f98b 	bl	80105b0 <ucdr_check_buffer_available_for>
 801029a:	bb60      	cbnz	r0, 80102f6 <ucdr_deserialize_int16_t+0x7e>
 801029c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80102a0:	42be      	cmp	r6, r7
 80102a2:	d923      	bls.n	80102ec <ucdr_deserialize_int16_t+0x74>
 80102a4:	6923      	ldr	r3, [r4, #16]
 80102a6:	4620      	mov	r0, r4
 80102a8:	60a6      	str	r6, [r4, #8]
 80102aa:	1bf6      	subs	r6, r6, r7
 80102ac:	4433      	add	r3, r6
 80102ae:	f1c6 0902 	rsb	r9, r6, #2
 80102b2:	6123      	str	r3, [r4, #16]
 80102b4:	4649      	mov	r1, r9
 80102b6:	f000 f987 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d034      	beq.n	8010328 <ucdr_deserialize_int16_t+0xb0>
 80102be:	7d23      	ldrb	r3, [r4, #20]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d042      	beq.n	801034a <ucdr_deserialize_int16_t+0xd2>
 80102c4:	787b      	ldrb	r3, [r7, #1]
 80102c6:	702b      	strb	r3, [r5, #0]
 80102c8:	2e00      	cmp	r6, #0
 80102ca:	d03a      	beq.n	8010342 <ucdr_deserialize_int16_t+0xca>
 80102cc:	783b      	ldrb	r3, [r7, #0]
 80102ce:	706b      	strb	r3, [r5, #1]
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	2102      	movs	r1, #2
 80102d4:	68a2      	ldr	r2, [r4, #8]
 80102d6:	3302      	adds	r3, #2
 80102d8:	7da0      	ldrb	r0, [r4, #22]
 80102da:	444a      	add	r2, r9
 80102dc:	7561      	strb	r1, [r4, #21]
 80102de:	1b9b      	subs	r3, r3, r6
 80102e0:	f080 0001 	eor.w	r0, r0, #1
 80102e4:	60a2      	str	r2, [r4, #8]
 80102e6:	6123      	str	r3, [r4, #16]
 80102e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ec:	2102      	movs	r1, #2
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f96a 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80102f4:	b180      	cbz	r0, 8010318 <ucdr_deserialize_int16_t+0xa0>
 80102f6:	7d23      	ldrb	r3, [r4, #20]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	68a3      	ldr	r3, [r4, #8]
 80102fc:	d011      	beq.n	8010322 <ucdr_deserialize_int16_t+0xaa>
 80102fe:	785b      	ldrb	r3, [r3, #1]
 8010300:	702b      	strb	r3, [r5, #0]
 8010302:	68a3      	ldr	r3, [r4, #8]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	706b      	strb	r3, [r5, #1]
 8010308:	2102      	movs	r1, #2
 801030a:	68a2      	ldr	r2, [r4, #8]
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	440a      	add	r2, r1
 8010310:	7561      	strb	r1, [r4, #21]
 8010312:	440b      	add	r3, r1
 8010314:	60a2      	str	r2, [r4, #8]
 8010316:	6123      	str	r3, [r4, #16]
 8010318:	7da0      	ldrb	r0, [r4, #22]
 801031a:	f080 0001 	eor.w	r0, r0, #1
 801031e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	802b      	strh	r3, [r5, #0]
 8010326:	e7ef      	b.n	8010308 <ucdr_deserialize_int16_t+0x90>
 8010328:	68a2      	ldr	r2, [r4, #8]
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	1b92      	subs	r2, r2, r6
 801032e:	7da0      	ldrb	r0, [r4, #22]
 8010330:	1b9b      	subs	r3, r3, r6
 8010332:	f884 8015 	strb.w	r8, [r4, #21]
 8010336:	f080 0001 	eor.w	r0, r0, #1
 801033a:	60a2      	str	r2, [r4, #8]
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010342:	68a3      	ldr	r3, [r4, #8]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	706b      	strb	r3, [r5, #1]
 8010348:	e7c2      	b.n	80102d0 <ucdr_deserialize_int16_t+0x58>
 801034a:	4639      	mov	r1, r7
 801034c:	4632      	mov	r2, r6
 801034e:	4628      	mov	r0, r5
 8010350:	f007 fe69 	bl	8018026 <memcpy>
 8010354:	464a      	mov	r2, r9
 8010356:	19a8      	adds	r0, r5, r6
 8010358:	68a1      	ldr	r1, [r4, #8]
 801035a:	f007 fe64 	bl	8018026 <memcpy>
 801035e:	e7b7      	b.n	80102d0 <ucdr_deserialize_int16_t+0x58>

08010360 <ucdr_serialize_int32_t>:
 8010360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010364:	b082      	sub	sp, #8
 8010366:	4604      	mov	r4, r0
 8010368:	9101      	str	r1, [sp, #4]
 801036a:	2104      	movs	r1, #4
 801036c:	f000 f980 	bl	8010670 <ucdr_buffer_alignment>
 8010370:	4601      	mov	r1, r0
 8010372:	4620      	mov	r0, r4
 8010374:	7d67      	ldrb	r7, [r4, #21]
 8010376:	f000 f9c3 	bl	8010700 <ucdr_advance_buffer>
 801037a:	2104      	movs	r1, #4
 801037c:	4620      	mov	r0, r4
 801037e:	f000 f917 	bl	80105b0 <ucdr_check_buffer_available_for>
 8010382:	2800      	cmp	r0, #0
 8010384:	d139      	bne.n	80103fa <ucdr_serialize_int32_t+0x9a>
 8010386:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801038a:	42ab      	cmp	r3, r5
 801038c:	d930      	bls.n	80103f0 <ucdr_serialize_int32_t+0x90>
 801038e:	1b5e      	subs	r6, r3, r5
 8010390:	60a3      	str	r3, [r4, #8]
 8010392:	6923      	ldr	r3, [r4, #16]
 8010394:	4620      	mov	r0, r4
 8010396:	f1c6 0804 	rsb	r8, r6, #4
 801039a:	4433      	add	r3, r6
 801039c:	4641      	mov	r1, r8
 801039e:	6123      	str	r3, [r4, #16]
 80103a0:	f000 f912 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d04c      	beq.n	8010442 <ucdr_serialize_int32_t+0xe2>
 80103a8:	7d23      	ldrb	r3, [r4, #20]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d063      	beq.n	8010476 <ucdr_serialize_int32_t+0x116>
 80103ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103b2:	702b      	strb	r3, [r5, #0]
 80103b4:	2e00      	cmp	r6, #0
 80103b6:	d051      	beq.n	801045c <ucdr_serialize_int32_t+0xfc>
 80103b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103bc:	2e01      	cmp	r6, #1
 80103be:	706b      	strb	r3, [r5, #1]
 80103c0:	d050      	beq.n	8010464 <ucdr_serialize_int32_t+0x104>
 80103c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80103c6:	2e02      	cmp	r6, #2
 80103c8:	70ab      	strb	r3, [r5, #2]
 80103ca:	d04f      	beq.n	801046c <ucdr_serialize_int32_t+0x10c>
 80103cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80103d0:	70eb      	strb	r3, [r5, #3]
 80103d2:	6923      	ldr	r3, [r4, #16]
 80103d4:	2104      	movs	r1, #4
 80103d6:	68a2      	ldr	r2, [r4, #8]
 80103d8:	3304      	adds	r3, #4
 80103da:	7da0      	ldrb	r0, [r4, #22]
 80103dc:	4442      	add	r2, r8
 80103de:	7561      	strb	r1, [r4, #21]
 80103e0:	1b9e      	subs	r6, r3, r6
 80103e2:	f080 0001 	eor.w	r0, r0, #1
 80103e6:	60a2      	str	r2, [r4, #8]
 80103e8:	6126      	str	r6, [r4, #16]
 80103ea:	b002      	add	sp, #8
 80103ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f0:	2104      	movs	r1, #4
 80103f2:	4620      	mov	r0, r4
 80103f4:	f000 f8e8 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80103f8:	b1d0      	cbz	r0, 8010430 <ucdr_serialize_int32_t+0xd0>
 80103fa:	7d23      	ldrb	r3, [r4, #20]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	68a3      	ldr	r3, [r4, #8]
 8010400:	d01c      	beq.n	801043c <ucdr_serialize_int32_t+0xdc>
 8010402:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010406:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801040a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801040e:	7018      	strb	r0, [r3, #0]
 8010410:	68a3      	ldr	r3, [r4, #8]
 8010412:	705a      	strb	r2, [r3, #1]
 8010414:	68a3      	ldr	r3, [r4, #8]
 8010416:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801041a:	7099      	strb	r1, [r3, #2]
 801041c:	68a3      	ldr	r3, [r4, #8]
 801041e:	70da      	strb	r2, [r3, #3]
 8010420:	2104      	movs	r1, #4
 8010422:	68a2      	ldr	r2, [r4, #8]
 8010424:	6923      	ldr	r3, [r4, #16]
 8010426:	440a      	add	r2, r1
 8010428:	7561      	strb	r1, [r4, #21]
 801042a:	440b      	add	r3, r1
 801042c:	60a2      	str	r2, [r4, #8]
 801042e:	6123      	str	r3, [r4, #16]
 8010430:	7da0      	ldrb	r0, [r4, #22]
 8010432:	f080 0001 	eor.w	r0, r0, #1
 8010436:	b002      	add	sp, #8
 8010438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801043c:	9a01      	ldr	r2, [sp, #4]
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	e7ee      	b.n	8010420 <ucdr_serialize_int32_t+0xc0>
 8010442:	68a2      	ldr	r2, [r4, #8]
 8010444:	6923      	ldr	r3, [r4, #16]
 8010446:	7da0      	ldrb	r0, [r4, #22]
 8010448:	1b92      	subs	r2, r2, r6
 801044a:	1b9b      	subs	r3, r3, r6
 801044c:	7567      	strb	r7, [r4, #21]
 801044e:	f080 0001 	eor.w	r0, r0, #1
 8010452:	60a2      	str	r2, [r4, #8]
 8010454:	6123      	str	r3, [r4, #16]
 8010456:	b002      	add	sp, #8
 8010458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045c:	68a3      	ldr	r3, [r4, #8]
 801045e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010462:	701a      	strb	r2, [r3, #0]
 8010464:	68a3      	ldr	r3, [r4, #8]
 8010466:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801046a:	701a      	strb	r2, [r3, #0]
 801046c:	68a3      	ldr	r3, [r4, #8]
 801046e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010472:	701a      	strb	r2, [r3, #0]
 8010474:	e7ad      	b.n	80103d2 <ucdr_serialize_int32_t+0x72>
 8010476:	4628      	mov	r0, r5
 8010478:	ad01      	add	r5, sp, #4
 801047a:	4632      	mov	r2, r6
 801047c:	4629      	mov	r1, r5
 801047e:	f007 fdd2 	bl	8018026 <memcpy>
 8010482:	4642      	mov	r2, r8
 8010484:	19a9      	adds	r1, r5, r6
 8010486:	68a0      	ldr	r0, [r4, #8]
 8010488:	f007 fdcd 	bl	8018026 <memcpy>
 801048c:	e7a1      	b.n	80103d2 <ucdr_serialize_int32_t+0x72>
 801048e:	bf00      	nop

08010490 <ucdr_deserialize_int32_t>:
 8010490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010494:	4604      	mov	r4, r0
 8010496:	460d      	mov	r5, r1
 8010498:	2104      	movs	r1, #4
 801049a:	f000 f8e9 	bl	8010670 <ucdr_buffer_alignment>
 801049e:	4601      	mov	r1, r0
 80104a0:	4620      	mov	r0, r4
 80104a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80104a6:	f000 f92b 	bl	8010700 <ucdr_advance_buffer>
 80104aa:	2104      	movs	r1, #4
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 f87f 	bl	80105b0 <ucdr_check_buffer_available_for>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d138      	bne.n	8010528 <ucdr_deserialize_int32_t+0x98>
 80104b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80104ba:	42b7      	cmp	r7, r6
 80104bc:	d92f      	bls.n	801051e <ucdr_deserialize_int32_t+0x8e>
 80104be:	6923      	ldr	r3, [r4, #16]
 80104c0:	4620      	mov	r0, r4
 80104c2:	60a7      	str	r7, [r4, #8]
 80104c4:	1bbf      	subs	r7, r7, r6
 80104c6:	443b      	add	r3, r7
 80104c8:	f1c7 0904 	rsb	r9, r7, #4
 80104cc:	6123      	str	r3, [r4, #16]
 80104ce:	4649      	mov	r1, r9
 80104d0:	f000 f87a 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d046      	beq.n	8010566 <ucdr_deserialize_int32_t+0xd6>
 80104d8:	7d23      	ldrb	r3, [r4, #20]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d05c      	beq.n	8010598 <ucdr_deserialize_int32_t+0x108>
 80104de:	78f3      	ldrb	r3, [r6, #3]
 80104e0:	702b      	strb	r3, [r5, #0]
 80104e2:	2f00      	cmp	r7, #0
 80104e4:	d04c      	beq.n	8010580 <ucdr_deserialize_int32_t+0xf0>
 80104e6:	78b3      	ldrb	r3, [r6, #2]
 80104e8:	2f01      	cmp	r7, #1
 80104ea:	706b      	strb	r3, [r5, #1]
 80104ec:	f105 0302 	add.w	r3, r5, #2
 80104f0:	d04a      	beq.n	8010588 <ucdr_deserialize_int32_t+0xf8>
 80104f2:	7873      	ldrb	r3, [r6, #1]
 80104f4:	2f02      	cmp	r7, #2
 80104f6:	70ab      	strb	r3, [r5, #2]
 80104f8:	f105 0303 	add.w	r3, r5, #3
 80104fc:	d048      	beq.n	8010590 <ucdr_deserialize_int32_t+0x100>
 80104fe:	7833      	ldrb	r3, [r6, #0]
 8010500:	70eb      	strb	r3, [r5, #3]
 8010502:	6923      	ldr	r3, [r4, #16]
 8010504:	2104      	movs	r1, #4
 8010506:	68a2      	ldr	r2, [r4, #8]
 8010508:	3304      	adds	r3, #4
 801050a:	7da0      	ldrb	r0, [r4, #22]
 801050c:	444a      	add	r2, r9
 801050e:	7561      	strb	r1, [r4, #21]
 8010510:	1bdb      	subs	r3, r3, r7
 8010512:	f080 0001 	eor.w	r0, r0, #1
 8010516:	60a2      	str	r2, [r4, #8]
 8010518:	6123      	str	r3, [r4, #16]
 801051a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801051e:	2104      	movs	r1, #4
 8010520:	4620      	mov	r0, r4
 8010522:	f000 f851 	bl	80105c8 <ucdr_check_final_buffer_behavior>
 8010526:	b1b0      	cbz	r0, 8010556 <ucdr_deserialize_int32_t+0xc6>
 8010528:	7d23      	ldrb	r3, [r4, #20]
 801052a:	2b01      	cmp	r3, #1
 801052c:	68a3      	ldr	r3, [r4, #8]
 801052e:	d017      	beq.n	8010560 <ucdr_deserialize_int32_t+0xd0>
 8010530:	78db      	ldrb	r3, [r3, #3]
 8010532:	702b      	strb	r3, [r5, #0]
 8010534:	68a3      	ldr	r3, [r4, #8]
 8010536:	789b      	ldrb	r3, [r3, #2]
 8010538:	706b      	strb	r3, [r5, #1]
 801053a:	68a3      	ldr	r3, [r4, #8]
 801053c:	785b      	ldrb	r3, [r3, #1]
 801053e:	70ab      	strb	r3, [r5, #2]
 8010540:	68a3      	ldr	r3, [r4, #8]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	70eb      	strb	r3, [r5, #3]
 8010546:	2104      	movs	r1, #4
 8010548:	68a2      	ldr	r2, [r4, #8]
 801054a:	6923      	ldr	r3, [r4, #16]
 801054c:	440a      	add	r2, r1
 801054e:	7561      	strb	r1, [r4, #21]
 8010550:	440b      	add	r3, r1
 8010552:	60a2      	str	r2, [r4, #8]
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	7da0      	ldrb	r0, [r4, #22]
 8010558:	f080 0001 	eor.w	r0, r0, #1
 801055c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	e7ef      	b.n	8010546 <ucdr_deserialize_int32_t+0xb6>
 8010566:	68a2      	ldr	r2, [r4, #8]
 8010568:	6923      	ldr	r3, [r4, #16]
 801056a:	1bd2      	subs	r2, r2, r7
 801056c:	7da0      	ldrb	r0, [r4, #22]
 801056e:	1bdb      	subs	r3, r3, r7
 8010570:	f884 8015 	strb.w	r8, [r4, #21]
 8010574:	f080 0001 	eor.w	r0, r0, #1
 8010578:	60a2      	str	r2, [r4, #8]
 801057a:	6123      	str	r3, [r4, #16]
 801057c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010580:	68a3      	ldr	r3, [r4, #8]
 8010582:	789b      	ldrb	r3, [r3, #2]
 8010584:	706b      	strb	r3, [r5, #1]
 8010586:	1cab      	adds	r3, r5, #2
 8010588:	68a2      	ldr	r2, [r4, #8]
 801058a:	7852      	ldrb	r2, [r2, #1]
 801058c:	f803 2b01 	strb.w	r2, [r3], #1
 8010590:	68a2      	ldr	r2, [r4, #8]
 8010592:	7812      	ldrb	r2, [r2, #0]
 8010594:	701a      	strb	r2, [r3, #0]
 8010596:	e7b4      	b.n	8010502 <ucdr_deserialize_int32_t+0x72>
 8010598:	4631      	mov	r1, r6
 801059a:	463a      	mov	r2, r7
 801059c:	4628      	mov	r0, r5
 801059e:	f007 fd42 	bl	8018026 <memcpy>
 80105a2:	464a      	mov	r2, r9
 80105a4:	19e8      	adds	r0, r5, r7
 80105a6:	68a1      	ldr	r1, [r4, #8]
 80105a8:	f007 fd3d 	bl	8018026 <memcpy>
 80105ac:	e7a9      	b.n	8010502 <ucdr_deserialize_int32_t+0x72>
 80105ae:	bf00      	nop

080105b0 <ucdr_check_buffer_available_for>:
 80105b0:	7d83      	ldrb	r3, [r0, #22]
 80105b2:	b93b      	cbnz	r3, 80105c4 <ucdr_check_buffer_available_for+0x14>
 80105b4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80105b8:	4419      	add	r1, r3
 80105ba:	4288      	cmp	r0, r1
 80105bc:	bf34      	ite	cc
 80105be:	2000      	movcc	r0, #0
 80105c0:	2001      	movcs	r0, #1
 80105c2:	4770      	bx	lr
 80105c4:	2000      	movs	r0, #0
 80105c6:	4770      	bx	lr

080105c8 <ucdr_check_final_buffer_behavior>:
 80105c8:	7d83      	ldrb	r3, [r0, #22]
 80105ca:	b943      	cbnz	r3, 80105de <ucdr_check_final_buffer_behavior+0x16>
 80105cc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80105d0:	b510      	push	{r4, lr}
 80105d2:	4291      	cmp	r1, r2
 80105d4:	4604      	mov	r4, r0
 80105d6:	d205      	bcs.n	80105e4 <ucdr_check_final_buffer_behavior+0x1c>
 80105d8:	2301      	movs	r3, #1
 80105da:	4618      	mov	r0, r3
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	2300      	movs	r3, #0
 80105e0:	4618      	mov	r0, r3
 80105e2:	4770      	bx	lr
 80105e4:	6982      	ldr	r2, [r0, #24]
 80105e6:	b13a      	cbz	r2, 80105f8 <ucdr_check_final_buffer_behavior+0x30>
 80105e8:	69c1      	ldr	r1, [r0, #28]
 80105ea:	4790      	blx	r2
 80105ec:	f080 0301 	eor.w	r3, r0, #1
 80105f0:	75a0      	strb	r0, [r4, #22]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	4618      	mov	r0, r3
 80105f6:	bd10      	pop	{r4, pc}
 80105f8:	2001      	movs	r0, #1
 80105fa:	75a0      	strb	r0, [r4, #22]
 80105fc:	e7fa      	b.n	80105f4 <ucdr_check_final_buffer_behavior+0x2c>
 80105fe:	bf00      	nop

08010600 <ucdr_set_on_full_buffer_callback>:
 8010600:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop

08010608 <ucdr_init_buffer_origin_offset_endian>:
 8010608:	b410      	push	{r4}
 801060a:	9c01      	ldr	r4, [sp, #4]
 801060c:	440a      	add	r2, r1
 801060e:	6001      	str	r1, [r0, #0]
 8010610:	6042      	str	r2, [r0, #4]
 8010612:	190a      	adds	r2, r1, r4
 8010614:	441c      	add	r4, r3
 8010616:	6082      	str	r2, [r0, #8]
 8010618:	2200      	movs	r2, #0
 801061a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801061e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010622:	7542      	strb	r2, [r0, #21]
 8010624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010628:	7582      	strb	r2, [r0, #22]
 801062a:	7503      	strb	r3, [r0, #20]
 801062c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop

08010634 <ucdr_init_buffer_origin_offset>:
 8010634:	b510      	push	{r4, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	9c04      	ldr	r4, [sp, #16]
 801063a:	9400      	str	r4, [sp, #0]
 801063c:	2401      	movs	r4, #1
 801063e:	9401      	str	r4, [sp, #4]
 8010640:	f7ff ffe2 	bl	8010608 <ucdr_init_buffer_origin_offset_endian>
 8010644:	b002      	add	sp, #8
 8010646:	bd10      	pop	{r4, pc}

08010648 <ucdr_init_buffer_origin>:
 8010648:	b510      	push	{r4, lr}
 801064a:	2400      	movs	r4, #0
 801064c:	b082      	sub	sp, #8
 801064e:	9400      	str	r4, [sp, #0]
 8010650:	f7ff fff0 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8010654:	b002      	add	sp, #8
 8010656:	bd10      	pop	{r4, pc}

08010658 <ucdr_init_buffer>:
 8010658:	2300      	movs	r3, #0
 801065a:	f7ff bff5 	b.w	8010648 <ucdr_init_buffer_origin>
 801065e:	bf00      	nop

08010660 <ucdr_alignment>:
 8010660:	fbb0 f2f1 	udiv	r2, r0, r1
 8010664:	fb02 0011 	mls	r0, r2, r1, r0
 8010668:	1e4b      	subs	r3, r1, #1
 801066a:	1a08      	subs	r0, r1, r0
 801066c:	4018      	ands	r0, r3
 801066e:	4770      	bx	lr

08010670 <ucdr_buffer_alignment>:
 8010670:	7d43      	ldrb	r3, [r0, #21]
 8010672:	428b      	cmp	r3, r1
 8010674:	d209      	bcs.n	801068a <ucdr_buffer_alignment+0x1a>
 8010676:	6903      	ldr	r3, [r0, #16]
 8010678:	1e4a      	subs	r2, r1, #1
 801067a:	fbb3 f0f1 	udiv	r0, r3, r1
 801067e:	fb01 3010 	mls	r0, r1, r0, r3
 8010682:	1a09      	subs	r1, r1, r0
 8010684:	ea01 0002 	and.w	r0, r1, r2
 8010688:	4770      	bx	lr
 801068a:	2000      	movs	r0, #0
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop

08010690 <ucdr_align_to>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4604      	mov	r4, r0
 8010694:	460d      	mov	r5, r1
 8010696:	f7ff ffeb 	bl	8010670 <ucdr_buffer_alignment>
 801069a:	68a3      	ldr	r3, [r4, #8]
 801069c:	7565      	strb	r5, [r4, #21]
 801069e:	181a      	adds	r2, r3, r0
 80106a0:	6923      	ldr	r3, [r4, #16]
 80106a2:	4418      	add	r0, r3
 80106a4:	6863      	ldr	r3, [r4, #4]
 80106a6:	4293      	cmp	r3, r2
 80106a8:	6120      	str	r0, [r4, #16]
 80106aa:	bf28      	it	cs
 80106ac:	4613      	movcs	r3, r2
 80106ae:	60a3      	str	r3, [r4, #8]
 80106b0:	bd38      	pop	{r3, r4, r5, pc}
 80106b2:	bf00      	nop

080106b4 <ucdr_buffer_length>:
 80106b4:	6882      	ldr	r2, [r0, #8]
 80106b6:	6800      	ldr	r0, [r0, #0]
 80106b8:	1a10      	subs	r0, r2, r0
 80106ba:	4770      	bx	lr

080106bc <ucdr_buffer_remaining>:
 80106bc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80106c0:	1a10      	subs	r0, r2, r0
 80106c2:	4770      	bx	lr

080106c4 <ucdr_check_final_buffer_behavior_array>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	7d83      	ldrb	r3, [r0, #22]
 80106c8:	b9a3      	cbnz	r3, 80106f4 <ucdr_check_final_buffer_behavior_array+0x30>
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d300      	bcc.n	80106d8 <ucdr_check_final_buffer_behavior_array+0x14>
 80106d6:	b931      	cbnz	r1, 80106e6 <ucdr_check_final_buffer_behavior_array+0x22>
 80106d8:	4620      	mov	r0, r4
 80106da:	f7ff ffef 	bl	80106bc <ucdr_buffer_remaining>
 80106de:	42a8      	cmp	r0, r5
 80106e0:	bf28      	it	cs
 80106e2:	4628      	movcs	r0, r5
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	6983      	ldr	r3, [r0, #24]
 80106e8:	b133      	cbz	r3, 80106f8 <ucdr_check_final_buffer_behavior_array+0x34>
 80106ea:	69c1      	ldr	r1, [r0, #28]
 80106ec:	4798      	blx	r3
 80106ee:	75a0      	strb	r0, [r4, #22]
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d0f1      	beq.n	80106d8 <ucdr_check_final_buffer_behavior_array+0x14>
 80106f4:	2000      	movs	r0, #0
 80106f6:	bd38      	pop	{r3, r4, r5, pc}
 80106f8:	2301      	movs	r3, #1
 80106fa:	7583      	strb	r3, [r0, #22]
 80106fc:	e7fa      	b.n	80106f4 <ucdr_check_final_buffer_behavior_array+0x30>
 80106fe:	bf00      	nop

08010700 <ucdr_advance_buffer>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4604      	mov	r4, r0
 8010704:	460d      	mov	r5, r1
 8010706:	f7ff ff53 	bl	80105b0 <ucdr_check_buffer_available_for>
 801070a:	b178      	cbz	r0, 801072c <ucdr_advance_buffer+0x2c>
 801070c:	6923      	ldr	r3, [r4, #16]
 801070e:	68a2      	ldr	r2, [r4, #8]
 8010710:	442b      	add	r3, r5
 8010712:	442a      	add	r2, r5
 8010714:	6123      	str	r3, [r4, #16]
 8010716:	2301      	movs	r3, #1
 8010718:	60a2      	str	r2, [r4, #8]
 801071a:	7563      	strb	r3, [r4, #21]
 801071c:	bd38      	pop	{r3, r4, r5, pc}
 801071e:	68a2      	ldr	r2, [r4, #8]
 8010720:	1a2d      	subs	r5, r5, r0
 8010722:	6923      	ldr	r3, [r4, #16]
 8010724:	4402      	add	r2, r0
 8010726:	4418      	add	r0, r3
 8010728:	60a2      	str	r2, [r4, #8]
 801072a:	6120      	str	r0, [r4, #16]
 801072c:	4629      	mov	r1, r5
 801072e:	2201      	movs	r2, #1
 8010730:	4620      	mov	r0, r4
 8010732:	f7ff ffc7 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 8010736:	2800      	cmp	r0, #0
 8010738:	d1f1      	bne.n	801071e <ucdr_advance_buffer+0x1e>
 801073a:	2301      	movs	r3, #1
 801073c:	7563      	strb	r3, [r4, #21]
 801073e:	bd38      	pop	{r3, r4, r5, pc}

08010740 <uxr_buffer_delete_entity>:
 8010740:	b510      	push	{r4, lr}
 8010742:	2300      	movs	r3, #0
 8010744:	b08e      	sub	sp, #56	@ 0x38
 8010746:	4604      	mov	r4, r0
 8010748:	9103      	str	r1, [sp, #12]
 801074a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801074e:	2303      	movs	r3, #3
 8010750:	2204      	movs	r2, #4
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	ab06      	add	r3, sp, #24
 8010756:	f001 f8c1 	bl	80118dc <uxr_prepare_stream_to_write_submessage>
 801075a:	b918      	cbnz	r0, 8010764 <uxr_buffer_delete_entity+0x24>
 801075c:	4604      	mov	r4, r0
 801075e:	4620      	mov	r0, r4
 8010760:	b00e      	add	sp, #56	@ 0x38
 8010762:	bd10      	pop	{r4, pc}
 8010764:	9902      	ldr	r1, [sp, #8]
 8010766:	aa05      	add	r2, sp, #20
 8010768:	4620      	mov	r0, r4
 801076a:	f001 f9f3 	bl	8011b54 <uxr_init_base_object_request>
 801076e:	4604      	mov	r4, r0
 8010770:	a905      	add	r1, sp, #20
 8010772:	a806      	add	r0, sp, #24
 8010774:	f002 fb5c 	bl	8012e30 <uxr_serialize_DELETE_Payload>
 8010778:	4620      	mov	r0, r4
 801077a:	b00e      	add	sp, #56	@ 0x38
 801077c:	bd10      	pop	{r4, pc}
 801077e:	bf00      	nop

08010780 <uxr_common_create_entity>:
 8010780:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010784:	b510      	push	{r4, lr}
 8010786:	f1bc 0f01 	cmp.w	ip, #1
 801078a:	b08c      	sub	sp, #48	@ 0x30
 801078c:	4604      	mov	r4, r0
 801078e:	9202      	str	r2, [sp, #8]
 8010790:	bf0c      	ite	eq
 8010792:	f003 0201 	andeq.w	r2, r3, #1
 8010796:	2200      	movne	r2, #0
 8010798:	330e      	adds	r3, #14
 801079a:	9103      	str	r1, [sp, #12]
 801079c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80107a0:	441a      	add	r2, r3
 80107a2:	ab04      	add	r3, sp, #16
 80107a4:	9101      	str	r1, [sp, #4]
 80107a6:	2101      	movs	r1, #1
 80107a8:	b292      	uxth	r2, r2
 80107aa:	9100      	str	r1, [sp, #0]
 80107ac:	9903      	ldr	r1, [sp, #12]
 80107ae:	f001 f895 	bl	80118dc <uxr_prepare_stream_to_write_submessage>
 80107b2:	b918      	cbnz	r0, 80107bc <uxr_common_create_entity+0x3c>
 80107b4:	4604      	mov	r4, r0
 80107b6:	4620      	mov	r0, r4
 80107b8:	b00c      	add	sp, #48	@ 0x30
 80107ba:	bd10      	pop	{r4, pc}
 80107bc:	9902      	ldr	r1, [sp, #8]
 80107be:	4620      	mov	r0, r4
 80107c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80107c2:	f001 f9c7 	bl	8011b54 <uxr_init_base_object_request>
 80107c6:	4604      	mov	r4, r0
 80107c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80107ca:	a804      	add	r0, sp, #16
 80107cc:	f002 fa8a 	bl	8012ce4 <uxr_serialize_CREATE_Payload>
 80107d0:	4620      	mov	r0, r4
 80107d2:	b00c      	add	sp, #48	@ 0x30
 80107d4:	bd10      	pop	{r4, pc}
 80107d6:	bf00      	nop

080107d8 <uxr_buffer_create_participant_bin>:
 80107d8:	b570      	push	{r4, r5, r6, lr}
 80107da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80107de:	4605      	mov	r5, r0
 80107e0:	ac11      	add	r4, sp, #68	@ 0x44
 80107e2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80107e6:	2303      	movs	r3, #3
 80107e8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80107ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80107f0:	7223      	strb	r3, [r4, #8]
 80107f2:	2300      	movs	r3, #0
 80107f4:	2201      	movs	r2, #1
 80107f6:	f88d 3014 	strb.w	r3, [sp, #20]
 80107fa:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80107fc:	7122      	strb	r2, [r4, #4]
 80107fe:	b1cb      	cbz	r3, 8010834 <uxr_buffer_create_participant_bin+0x5c>
 8010800:	f88d 201c 	strb.w	r2, [sp, #28]
 8010804:	9308      	str	r3, [sp, #32]
 8010806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801080a:	a915      	add	r1, sp, #84	@ 0x54
 801080c:	a809      	add	r0, sp, #36	@ 0x24
 801080e:	f7ff ff23 	bl	8010658 <ucdr_init_buffer>
 8010812:	a905      	add	r1, sp, #20
 8010814:	a809      	add	r0, sp, #36	@ 0x24
 8010816:	f001 ff3b 	bl	8012690 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801081a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801081c:	9600      	str	r6, [sp, #0]
 801081e:	4628      	mov	r0, r5
 8010820:	9401      	str	r4, [sp, #4]
 8010822:	60e3      	str	r3, [r4, #12]
 8010824:	b29b      	uxth	r3, r3
 8010826:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801082a:	f7ff ffa9 	bl	8010780 <uxr_common_create_entity>
 801082e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010832:	bd70      	pop	{r4, r5, r6, pc}
 8010834:	f88d 301c 	strb.w	r3, [sp, #28]
 8010838:	e7e5      	b.n	8010806 <uxr_buffer_create_participant_bin+0x2e>
 801083a:	bf00      	nop

0801083c <uxr_buffer_create_topic_bin>:
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010842:	4605      	mov	r5, r0
 8010844:	4618      	mov	r0, r3
 8010846:	9105      	str	r1, [sp, #20]
 8010848:	a997      	add	r1, sp, #604	@ 0x25c
 801084a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801084e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010850:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010854:	2302      	movs	r3, #2
 8010856:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801085a:	f000 f8ed 	bl	8010a38 <uxr_object_id_to_raw>
 801085e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010864:	a917      	add	r1, sp, #92	@ 0x5c
 8010866:	a80b      	add	r0, sp, #44	@ 0x2c
 8010868:	9306      	str	r3, [sp, #24]
 801086a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801086c:	930a      	str	r3, [sp, #40]	@ 0x28
 801086e:	2303      	movs	r3, #3
 8010870:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010874:	2301      	movs	r3, #1
 8010876:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801087a:	2300      	movs	r3, #0
 801087c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010880:	f7ff feea 	bl	8010658 <ucdr_init_buffer>
 8010884:	a906      	add	r1, sp, #24
 8010886:	a80b      	add	r0, sp, #44	@ 0x2c
 8010888:	f001 ff24 	bl	80126d4 <uxr_serialize_OBJK_Topic_Binary>
 801088c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801088e:	4628      	mov	r0, r5
 8010890:	9600      	str	r6, [sp, #0]
 8010892:	9316      	str	r3, [sp, #88]	@ 0x58
 8010894:	b29b      	uxth	r3, r3
 8010896:	9401      	str	r4, [sp, #4]
 8010898:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801089c:	f7ff ff70 	bl	8010780 <uxr_common_create_entity>
 80108a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
 80108a6:	bf00      	nop

080108a8 <uxr_buffer_create_publisher_bin>:
 80108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80108ae:	2603      	movs	r6, #3
 80108b0:	4605      	mov	r5, r0
 80108b2:	4618      	mov	r0, r3
 80108b4:	9105      	str	r1, [sp, #20]
 80108b6:	a992      	add	r1, sp, #584	@ 0x248
 80108b8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80108bc:	ac0e      	add	r4, sp, #56	@ 0x38
 80108be:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80108c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108c6:	f000 f8b7 	bl	8010a38 <uxr_object_id_to_raw>
 80108ca:	2300      	movs	r3, #0
 80108cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108d0:	a912      	add	r1, sp, #72	@ 0x48
 80108d2:	a806      	add	r0, sp, #24
 80108d4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80108d8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80108dc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80108e0:	f7ff feba 	bl	8010658 <ucdr_init_buffer>
 80108e4:	a993      	add	r1, sp, #588	@ 0x24c
 80108e6:	a806      	add	r0, sp, #24
 80108e8:	f001 ffa8 	bl	801283c <uxr_serialize_OBJK_Publisher_Binary>
 80108ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108ee:	4628      	mov	r0, r5
 80108f0:	9700      	str	r7, [sp, #0]
 80108f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	9401      	str	r4, [sp, #4]
 80108f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80108fc:	f7ff ff40 	bl	8010780 <uxr_common_create_entity>
 8010900:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010906:	bf00      	nop

08010908 <uxr_buffer_create_datawriter_bin>:
 8010908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010910:	4606      	mov	r6, r0
 8010912:	4618      	mov	r0, r3
 8010914:	2703      	movs	r7, #3
 8010916:	ac1d      	add	r4, sp, #116	@ 0x74
 8010918:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801091c:	9105      	str	r1, [sp, #20]
 801091e:	a9a1      	add	r1, sp, #644	@ 0x284
 8010920:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010924:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010928:	2305      	movs	r3, #5
 801092a:	7123      	strb	r3, [r4, #4]
 801092c:	f000 f884 	bl	8010a38 <uxr_object_id_to_raw>
 8010930:	a90e      	add	r1, sp, #56	@ 0x38
 8010932:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010934:	7227      	strb	r7, [r4, #8]
 8010936:	f000 f87f 	bl	8010a38 <uxr_object_id_to_raw>
 801093a:	2300      	movs	r3, #0
 801093c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010940:	3d00      	subs	r5, #0
 8010942:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010946:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801094a:	bf18      	it	ne
 801094c:	2501      	movne	r5, #1
 801094e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010952:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010956:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801095a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801095e:	2301      	movs	r3, #1
 8010960:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010964:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010968:	bb8a      	cbnz	r2, 80109ce <uxr_buffer_create_datawriter_bin+0xc6>
 801096a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801096e:	f04f 0c13 	mov.w	ip, #19
 8010972:	250b      	movs	r5, #11
 8010974:	2221      	movs	r2, #33	@ 0x21
 8010976:	2111      	movs	r1, #17
 8010978:	2009      	movs	r0, #9
 801097a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801097e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010982:	b923      	cbnz	r3, 801098e <uxr_buffer_create_datawriter_bin+0x86>
 8010984:	4672      	mov	r2, lr
 8010986:	4661      	mov	r1, ip
 8010988:	4628      	mov	r0, r5
 801098a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801098e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010992:	2b01      	cmp	r3, #1
 8010994:	d025      	beq.n	80109e2 <uxr_buffer_create_datawriter_bin+0xda>
 8010996:	2b03      	cmp	r3, #3
 8010998:	d029      	beq.n	80109ee <uxr_buffer_create_datawriter_bin+0xe6>
 801099a:	b32b      	cbz	r3, 80109e8 <uxr_buffer_create_datawriter_bin+0xe0>
 801099c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109a0:	a921      	add	r1, sp, #132	@ 0x84
 80109a2:	a806      	add	r0, sp, #24
 80109a4:	f7ff fe58 	bl	8010658 <ucdr_init_buffer>
 80109a8:	a90e      	add	r1, sp, #56	@ 0x38
 80109aa:	a806      	add	r0, sp, #24
 80109ac:	f001 ffbc 	bl	8012928 <uxr_serialize_OBJK_DataWriter_Binary>
 80109b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109b2:	f8cd 8000 	str.w	r8, [sp]
 80109b6:	4630      	mov	r0, r6
 80109b8:	9401      	str	r4, [sp, #4]
 80109ba:	60e3      	str	r3, [r4, #12]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109c2:	f7ff fedd 	bl	8010780 <uxr_common_create_entity>
 80109c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80109ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80109d2:	f04f 0c12 	mov.w	ip, #18
 80109d6:	250a      	movs	r5, #10
 80109d8:	2220      	movs	r2, #32
 80109da:	2110      	movs	r1, #16
 80109dc:	2008      	movs	r0, #8
 80109de:	2702      	movs	r7, #2
 80109e0:	e7cd      	b.n	801097e <uxr_buffer_create_datawriter_bin+0x76>
 80109e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80109e6:	e7d9      	b.n	801099c <uxr_buffer_create_datawriter_bin+0x94>
 80109e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80109ec:	e7d6      	b.n	801099c <uxr_buffer_create_datawriter_bin+0x94>
 80109ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80109f2:	e7d3      	b.n	801099c <uxr_buffer_create_datawriter_bin+0x94>

080109f4 <uxr_object_id>:
 80109f4:	b082      	sub	sp, #8
 80109f6:	2300      	movs	r3, #0
 80109f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80109fc:	f360 030f 	bfi	r3, r0, #0, #16
 8010a00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a04:	f362 431f 	bfi	r3, r2, #16, #16
 8010a08:	4618      	mov	r0, r3
 8010a0a:	b002      	add	sp, #8
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop

08010a10 <uxr_object_id_from_raw>:
 8010a10:	7843      	ldrb	r3, [r0, #1]
 8010a12:	b082      	sub	sp, #8
 8010a14:	7801      	ldrb	r1, [r0, #0]
 8010a16:	2000      	movs	r0, #0
 8010a18:	091a      	lsrs	r2, r3, #4
 8010a1a:	f003 030f 	and.w	r3, r3, #15
 8010a1e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010a22:	f88d 3006 	strb.w	r3, [sp, #6]
 8010a26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010a2a:	f362 000f 	bfi	r0, r2, #0, #16
 8010a2e:	f363 401f 	bfi	r0, r3, #16, #16
 8010a32:	b002      	add	sp, #8
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop

08010a38 <uxr_object_id_to_raw>:
 8010a38:	4602      	mov	r2, r0
 8010a3a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010a3e:	b082      	sub	sp, #8
 8010a40:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010a44:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010a48:	f881 c000 	strb.w	ip, [r1]
 8010a4c:	7048      	strb	r0, [r1, #1]
 8010a4e:	b002      	add	sp, #8
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop

08010a54 <on_get_fragmentation_info>:
 8010a54:	b500      	push	{lr}
 8010a56:	b08b      	sub	sp, #44	@ 0x2c
 8010a58:	4601      	mov	r1, r0
 8010a5a:	2204      	movs	r2, #4
 8010a5c:	a802      	add	r0, sp, #8
 8010a5e:	f7ff fdfb 	bl	8010658 <ucdr_init_buffer>
 8010a62:	f10d 0305 	add.w	r3, sp, #5
 8010a66:	f10d 0206 	add.w	r2, sp, #6
 8010a6a:	a901      	add	r1, sp, #4
 8010a6c:	a802      	add	r0, sp, #8
 8010a6e:	f001 f9fb 	bl	8011e68 <uxr_read_submessage_header>
 8010a72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a76:	2b0d      	cmp	r3, #13
 8010a78:	d003      	beq.n	8010a82 <on_get_fragmentation_info+0x2e>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	b00b      	add	sp, #44	@ 0x2c
 8010a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a86:	f013 0f02 	tst.w	r3, #2
 8010a8a:	bf14      	ite	ne
 8010a8c:	2002      	movne	r0, #2
 8010a8e:	2001      	moveq	r0, #1
 8010a90:	b00b      	add	sp, #44	@ 0x2c
 8010a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a96:	bf00      	nop

08010a98 <read_submessage_get_info>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	2500      	movs	r5, #0
 8010a9c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010aa0:	460e      	mov	r6, r1
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010aa8:	4629      	mov	r1, r5
 8010aaa:	a810      	add	r0, sp, #64	@ 0x40
 8010aac:	9503      	str	r5, [sp, #12]
 8010aae:	9504      	str	r5, [sp, #16]
 8010ab0:	f007 f99a 	bl	8017de8 <memset>
 8010ab4:	a903      	add	r1, sp, #12
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	f002 f9a4 	bl	8012e04 <uxr_deserialize_GET_INFO_Payload>
 8010abc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ac6:	f001 f83d 	bl	8011b44 <uxr_session_header_offset>
 8010aca:	462b      	mov	r3, r5
 8010acc:	220c      	movs	r2, #12
 8010ace:	a905      	add	r1, sp, #20
 8010ad0:	9000      	str	r0, [sp, #0]
 8010ad2:	a808      	add	r0, sp, #32
 8010ad4:	f7ff fdae 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8010ad8:	a910      	add	r1, sp, #64	@ 0x40
 8010ada:	a808      	add	r0, sp, #32
 8010adc:	f002 fa06 	bl	8012eec <uxr_serialize_INFO_Payload>
 8010ae0:	9b08      	ldr	r3, [sp, #32]
 8010ae2:	462a      	mov	r2, r5
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f000 ffd8 	bl	8011a9c <uxr_stamp_session_header>
 8010aec:	a808      	add	r0, sp, #32
 8010aee:	f7ff fde1 	bl	80106b4 <ucdr_buffer_length>
 8010af2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010af4:	4602      	mov	r2, r0
 8010af6:	a905      	add	r1, sp, #20
 8010af8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010afc:	47a0      	blx	r4
 8010afe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010b02:	bd70      	pop	{r4, r5, r6, pc}

08010b04 <write_submessage_acknack.isra.0>:
 8010b04:	b570      	push	{r4, r5, r6, lr}
 8010b06:	b092      	sub	sp, #72	@ 0x48
 8010b08:	4605      	mov	r5, r0
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	4614      	mov	r4, r2
 8010b0e:	f001 f819 	bl	8011b44 <uxr_session_header_offset>
 8010b12:	a905      	add	r1, sp, #20
 8010b14:	9000      	str	r0, [sp, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	a80a      	add	r0, sp, #40	@ 0x28
 8010b1a:	2211      	movs	r2, #17
 8010b1c:	f7ff fd8a 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8010b20:	2218      	movs	r2, #24
 8010b22:	2300      	movs	r3, #0
 8010b24:	210a      	movs	r1, #10
 8010b26:	fb02 5404 	mla	r4, r2, r4, r5
 8010b2a:	a80a      	add	r0, sp, #40	@ 0x28
 8010b2c:	2205      	movs	r2, #5
 8010b2e:	3450      	adds	r4, #80	@ 0x50
 8010b30:	f001 f980 	bl	8011e34 <uxr_buffer_submessage_header>
 8010b34:	a903      	add	r1, sp, #12
 8010b36:	4620      	mov	r0, r4
 8010b38:	f005 f808 	bl	8015b4c <uxr_compute_acknack>
 8010b3c:	ba40      	rev16	r0, r0
 8010b3e:	a903      	add	r1, sp, #12
 8010b40:	f88d 6010 	strb.w	r6, [sp, #16]
 8010b44:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010b48:	a80a      	add	r0, sp, #40	@ 0x28
 8010b4a:	f002 fa41 	bl	8012fd0 <uxr_serialize_ACKNACK_Payload>
 8010b4e:	2200      	movs	r2, #0
 8010b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b52:	4628      	mov	r0, r5
 8010b54:	4611      	mov	r1, r2
 8010b56:	f000 ffa1 	bl	8011a9c <uxr_stamp_session_header>
 8010b5a:	a80a      	add	r0, sp, #40	@ 0x28
 8010b5c:	f7ff fdaa 	bl	80106b4 <ucdr_buffer_length>
 8010b60:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010b62:	4602      	mov	r2, r0
 8010b64:	a905      	add	r1, sp, #20
 8010b66:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b6a:	47a0      	blx	r4
 8010b6c:	b012      	add	sp, #72	@ 0x48
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}

08010b70 <uxr_init_session>:
 8010b70:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010ba8 <uxr_init_session+0x38>
 8010b74:	2300      	movs	r3, #0
 8010b76:	b510      	push	{r4, lr}
 8010b78:	4604      	mov	r4, r0
 8010b7a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010b7e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010b82:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010b86:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010b8a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010b8e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010b92:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010b96:	2181      	movs	r1, #129	@ 0x81
 8010b98:	f000 fee4 	bl	8011964 <uxr_init_session_info>
 8010b9c:	f104 0008 	add.w	r0, r4, #8
 8010ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ba4:	f001 b862 	b.w	8011c6c <uxr_init_stream_storage>
	...

08010bb0 <uxr_set_status_callback>:
 8010bb0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop

08010bb8 <uxr_set_topic_callback>:
 8010bb8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop

08010bc0 <uxr_set_request_callback>:
 8010bc0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <uxr_set_reply_callback>:
 8010bc8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <uxr_create_output_best_effort_stream>:
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	b084      	sub	sp, #16
 8010bd6:	e9cd 2100 	strd	r2, r1, [sp]
 8010bda:	f000 ffb3 	bl	8011b44 <uxr_session_header_offset>
 8010bde:	4603      	mov	r3, r0
 8010be0:	f104 0008 	add.w	r0, r4, #8
 8010be4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010be8:	b004      	add	sp, #16
 8010bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bee:	f001 b883 	b.w	8011cf8 <uxr_add_output_best_effort_buffer>
 8010bf2:	bf00      	nop

08010bf4 <uxr_create_output_reliable_stream>:
 8010bf4:	b530      	push	{r4, r5, lr}
 8010bf6:	b089      	sub	sp, #36	@ 0x24
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010bfe:	9303      	str	r3, [sp, #12]
 8010c00:	f000 ffa0 	bl	8011b44 <uxr_session_header_offset>
 8010c04:	4605      	mov	r5, r0
 8010c06:	9905      	ldr	r1, [sp, #20]
 8010c08:	f104 0008 	add.w	r0, r4, #8
 8010c0c:	9500      	str	r5, [sp, #0]
 8010c0e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010c12:	f001 f885 	bl	8011d20 <uxr_add_output_reliable_buffer>
 8010c16:	2200      	movs	r2, #0
 8010c18:	fa5f fc80 	uxtb.w	ip, r0
 8010c1c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010c20:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010c24:	0e03      	lsrs	r3, r0, #24
 8010c26:	f36c 0207 	bfi	r2, ip, #0, #8
 8010c2a:	f364 220f 	bfi	r2, r4, #8, #8
 8010c2e:	f361 4217 	bfi	r2, r1, #16, #8
 8010c32:	f363 621f 	bfi	r2, r3, #24, #8
 8010c36:	4610      	mov	r0, r2
 8010c38:	b009      	add	sp, #36	@ 0x24
 8010c3a:	bd30      	pop	{r4, r5, pc}

08010c3c <uxr_create_input_best_effort_stream>:
 8010c3c:	b082      	sub	sp, #8
 8010c3e:	3008      	adds	r0, #8
 8010c40:	b002      	add	sp, #8
 8010c42:	f001 b887 	b.w	8011d54 <uxr_add_input_best_effort_buffer>
 8010c46:	bf00      	nop

08010c48 <uxr_create_input_reliable_stream>:
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8010c7c <uxr_create_input_reliable_stream+0x34>)
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	3008      	adds	r0, #8
 8010c50:	9400      	str	r4, [sp, #0]
 8010c52:	f001 f895 	bl	8011d80 <uxr_add_input_reliable_buffer>
 8010c56:	2200      	movs	r2, #0
 8010c58:	fa5f fe80 	uxtb.w	lr, r0
 8010c5c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010c60:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010c64:	0e03      	lsrs	r3, r0, #24
 8010c66:	f36e 0207 	bfi	r2, lr, #0, #8
 8010c6a:	f36c 220f 	bfi	r2, ip, #8, #8
 8010c6e:	f361 4217 	bfi	r2, r1, #16, #8
 8010c72:	f363 621f 	bfi	r2, r3, #24, #8
 8010c76:	4610      	mov	r0, r2
 8010c78:	b004      	add	sp, #16
 8010c7a:	bd10      	pop	{r4, pc}
 8010c7c:	08010a55 	.word	0x08010a55

08010c80 <uxr_epoch_nanos>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	4604      	mov	r4, r0
 8010c84:	f001 f938 	bl	8011ef8 <uxr_nanos>
 8010c88:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010c8c:	1ac0      	subs	r0, r0, r3
 8010c8e:	eb61 0102 	sbc.w	r1, r1, r2
 8010c92:	bd10      	pop	{r4, pc}

08010c94 <uxr_flash_output_streams>:
 8010c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c98:	7e03      	ldrb	r3, [r0, #24]
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	b1fb      	cbz	r3, 8010ce0 <uxr_flash_output_streams+0x4c>
 8010ca0:	f04f 0900 	mov.w	r9, #0
 8010ca4:	f10d 0802 	add.w	r8, sp, #2
 8010ca8:	af03      	add	r7, sp, #12
 8010caa:	ae02      	add	r6, sp, #8
 8010cac:	4648      	mov	r0, r9
 8010cae:	2201      	movs	r2, #1
 8010cb0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	3508      	adds	r5, #8
 8010cb8:	f000 ff7e 	bl	8011bb8 <uxr_stream_id>
 8010cbc:	4684      	mov	ip, r0
 8010cbe:	4643      	mov	r3, r8
 8010cc0:	463a      	mov	r2, r7
 8010cc2:	4631      	mov	r1, r6
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	f8cd c004 	str.w	ip, [sp, #4]
 8010cca:	f004 ffc9 	bl	8015c60 <uxr_prepare_best_effort_buffer_to_send>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d13d      	bne.n	8010d4e <uxr_flash_output_streams+0xba>
 8010cd2:	f109 0901 	add.w	r9, r9, #1
 8010cd6:	7e23      	ldrb	r3, [r4, #24]
 8010cd8:	fa5f f089 	uxtb.w	r0, r9
 8010cdc:	4283      	cmp	r3, r0
 8010cde:	d8e6      	bhi.n	8010cae <uxr_flash_output_streams+0x1a>
 8010ce0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ce4:	b383      	cbz	r3, 8010d48 <uxr_flash_output_streams+0xb4>
 8010ce6:	f04f 0900 	mov.w	r9, #0
 8010cea:	f10d 0802 	add.w	r8, sp, #2
 8010cee:	af03      	add	r7, sp, #12
 8010cf0:	ae02      	add	r6, sp, #8
 8010cf2:	4648      	mov	r0, r9
 8010cf4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	2102      	movs	r1, #2
 8010cfc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010d00:	f000 ff5a 	bl	8011bb8 <uxr_stream_id>
 8010d04:	9001      	str	r0, [sp, #4]
 8010d06:	3520      	adds	r5, #32
 8010d08:	e00c      	b.n	8010d24 <uxr_flash_output_streams+0x90>
 8010d0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d0e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d12:	9b02      	ldr	r3, [sp, #8]
 8010d14:	f000 fec2 	bl	8011a9c <uxr_stamp_session_header>
 8010d18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d1a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010d1e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010d22:	47d0      	blx	sl
 8010d24:	4643      	mov	r3, r8
 8010d26:	463a      	mov	r2, r7
 8010d28:	4631      	mov	r1, r6
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f005 f9bc 	bl	80160a8 <uxr_prepare_next_reliable_buffer_to_send>
 8010d30:	4603      	mov	r3, r0
 8010d32:	4620      	mov	r0, r4
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1e8      	bne.n	8010d0a <uxr_flash_output_streams+0x76>
 8010d38:	f109 0901 	add.w	r9, r9, #1
 8010d3c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010d40:	fa5f f089 	uxtb.w	r0, r9
 8010d44:	4283      	cmp	r3, r0
 8010d46:	d8d5      	bhi.n	8010cf4 <uxr_flash_output_streams+0x60>
 8010d48:	b004      	add	sp, #16
 8010d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4e:	9b02      	ldr	r3, [sp, #8]
 8010d50:	4620      	mov	r0, r4
 8010d52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d56:	f109 0901 	add.w	r9, r9, #1
 8010d5a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d5e:	f000 fe9d 	bl	8011a9c <uxr_stamp_session_header>
 8010d62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d64:	9a03      	ldr	r2, [sp, #12]
 8010d66:	685d      	ldr	r5, [r3, #4]
 8010d68:	6818      	ldr	r0, [r3, #0]
 8010d6a:	9902      	ldr	r1, [sp, #8]
 8010d6c:	47a8      	blx	r5
 8010d6e:	7e23      	ldrb	r3, [r4, #24]
 8010d70:	fa5f f089 	uxtb.w	r0, r9
 8010d74:	4283      	cmp	r3, r0
 8010d76:	d89a      	bhi.n	8010cae <uxr_flash_output_streams+0x1a>
 8010d78:	e7b2      	b.n	8010ce0 <uxr_flash_output_streams+0x4c>
 8010d7a:	bf00      	nop

08010d7c <read_submessage_info>:
 8010d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d80:	460d      	mov	r5, r1
 8010d82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010d86:	4606      	mov	r6, r0
 8010d88:	4669      	mov	r1, sp
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	f001 ff4c 	bl	8012c28 <uxr_deserialize_BaseObjectReply>
 8010d90:	4604      	mov	r4, r0
 8010d92:	a902      	add	r1, sp, #8
 8010d94:	4628      	mov	r0, r5
 8010d96:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8010d9a:	f7fe fc99 	bl	800f6d0 <ucdr_deserialize_bool>
 8010d9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010da2:	4004      	ands	r4, r0
 8010da4:	b2e4      	uxtb	r4, r4
 8010da6:	b95b      	cbnz	r3, 8010dc0 <read_submessage_info+0x44>
 8010da8:	a987      	add	r1, sp, #540	@ 0x21c
 8010daa:	4628      	mov	r0, r5
 8010dac:	f7fe fc90 	bl	800f6d0 <ucdr_deserialize_bool>
 8010db0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010db4:	4680      	mov	r8, r0
 8010db6:	b94b      	cbnz	r3, 8010dcc <read_submessage_info+0x50>
 8010db8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc0:	a903      	add	r1, sp, #12
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f001 fddc 	bl	8012980 <uxr_deserialize_ObjectVariant>
 8010dc8:	4004      	ands	r4, r0
 8010dca:	e7ed      	b.n	8010da8 <read_submessage_info+0x2c>
 8010dcc:	a988      	add	r1, sp, #544	@ 0x220
 8010dce:	4628      	mov	r0, r5
 8010dd0:	f7fe fcac 	bl	800f72c <ucdr_deserialize_uint8_t>
 8010dd4:	ea14 0f08 	tst.w	r4, r8
 8010dd8:	d0ee      	beq.n	8010db8 <read_submessage_info+0x3c>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0ec      	beq.n	8010db8 <read_submessage_info+0x3c>
 8010dde:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010de2:	2b0d      	cmp	r3, #13
 8010de4:	d1e8      	bne.n	8010db8 <read_submessage_info+0x3c>
 8010de6:	a98a      	add	r1, sp, #552	@ 0x228
 8010de8:	4628      	mov	r0, r5
 8010dea:	f7ff fa45 	bl	8010278 <ucdr_deserialize_int16_t>
 8010dee:	b138      	cbz	r0, 8010e00 <read_submessage_info+0x84>
 8010df0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	dd06      	ble.n	8010e06 <read_submessage_info+0x8a>
 8010df8:	2f00      	cmp	r7, #0
 8010dfa:	bf14      	ite	ne
 8010dfc:	2001      	movne	r0, #1
 8010dfe:	2002      	moveq	r0, #2
 8010e00:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010e04:	e7d8      	b.n	8010db8 <read_submessage_info+0x3c>
 8010e06:	2000      	movs	r0, #0
 8010e08:	e7fa      	b.n	8010e00 <read_submessage_info+0x84>
 8010e0a:	bf00      	nop

08010e0c <read_submessage_list>:
 8010e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e10:	4604      	mov	r4, r0
 8010e12:	b097      	sub	sp, #92	@ 0x5c
 8010e14:	460d      	mov	r5, r1
 8010e16:	4ec1      	ldr	r6, [pc, #772]	@ (801111c <read_submessage_list+0x310>)
 8010e18:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e1a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010e1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e20:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010e24:	4628      	mov	r0, r5
 8010e26:	f001 f81f 	bl	8011e68 <uxr_read_submessage_header>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	f000 8142 	beq.w	80110b4 <read_submessage_list+0x2a8>
 8010e30:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010e34:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010e38:	3b02      	subs	r3, #2
 8010e3a:	2b0d      	cmp	r3, #13
 8010e3c:	d8ed      	bhi.n	8010e1a <read_submessage_list+0xe>
 8010e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8010e44 <read_submessage_list+0x38>)
 8010e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e44:	080110ab 	.word	0x080110ab
 8010e48:	08010e1b 	.word	0x08010e1b
 8010e4c:	0801109b 	.word	0x0801109b
 8010e50:	08011039 	.word	0x08011039
 8010e54:	0801102f 	.word	0x0801102f
 8010e58:	08010e1b 	.word	0x08010e1b
 8010e5c:	08010e1b 	.word	0x08010e1b
 8010e60:	08010f85 	.word	0x08010f85
 8010e64:	08010f17 	.word	0x08010f17
 8010e68:	08010ed7 	.word	0x08010ed7
 8010e6c:	08010e1b 	.word	0x08010e1b
 8010e70:	08010e1b 	.word	0x08010e1b
 8010e74:	08010e1b 	.word	0x08010e1b
 8010e78:	08010e7d 	.word	0x08010e7d
 8010e7c:	a910      	add	r1, sp, #64	@ 0x40
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f002 f908 	bl	8013094 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010e84:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8010e88:	f1b8 0f00 	cmp.w	r8, #0
 8010e8c:	f000 811a 	beq.w	80110c4 <read_submessage_list+0x2b8>
 8010e90:	f001 f832 	bl	8011ef8 <uxr_nanos>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010ea0:	9006      	str	r0, [sp, #24]
 8010ea2:	468c      	mov	ip, r1
 8010ea4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010ea6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010eaa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010eac:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010eb0:	468c      	mov	ip, r1
 8010eb2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010eb4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010eb8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8010ebc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8010ec0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8010ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8010ec8:	4620      	mov	r0, r4
 8010eca:	47c0      	blx	r8
 8010ecc:	f04f 0301 	mov.w	r3, #1
 8010ed0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010ed4:	e7a1      	b.n	8010e1a <read_submessage_list+0xe>
 8010ed6:	a910      	add	r1, sp, #64	@ 0x40
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f002 f8b9 	bl	8013050 <uxr_deserialize_HEARTBEAT_Payload>
 8010ede:	2100      	movs	r1, #0
 8010ee0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010ee4:	f000 fe96 	bl	8011c14 <uxr_stream_id_from_raw>
 8010ee8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8010eec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010eee:	f104 0008 	add.w	r0, r4, #8
 8010ef2:	4641      	mov	r1, r8
 8010ef4:	f000 ff7c 	bl	8011df0 <uxr_get_input_reliable_stream>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d08e      	beq.n	8010e1a <read_submessage_list+0xe>
 8010efc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010f00:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010f04:	f004 fe16 	bl	8015b34 <uxr_process_heartbeat>
 8010f08:	4642      	mov	r2, r8
 8010f0a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7ff fdf8 	bl	8010b04 <write_submessage_acknack.isra.0>
 8010f14:	e781      	b.n	8010e1a <read_submessage_list+0xe>
 8010f16:	a910      	add	r1, sp, #64	@ 0x40
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f002 f871 	bl	8013000 <uxr_deserialize_ACKNACK_Payload>
 8010f1e:	2100      	movs	r1, #0
 8010f20:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010f24:	f000 fe76 	bl	8011c14 <uxr_stream_id_from_raw>
 8010f28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010f2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8010f2e:	f104 0008 	add.w	r0, r4, #8
 8010f32:	f000 ff47 	bl	8011dc4 <uxr_get_output_reliable_stream>
 8010f36:	4680      	mov	r8, r0
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	f43f af6e 	beq.w	8010e1a <read_submessage_list+0xe>
 8010f3e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010f42:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010f46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010f4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010f4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010f52:	b289      	uxth	r1, r1
 8010f54:	f005 f950 	bl	80161f8 <uxr_process_acknack>
 8010f58:	4640      	mov	r0, r8
 8010f5a:	f005 f911 	bl	8016180 <uxr_begin_output_nack_buffer_it>
 8010f5e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010f62:	e005      	b.n	8010f70 <read_submessage_list+0x164>
 8010f64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f66:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8010f6a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8010f6e:	47c8      	blx	r9
 8010f70:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010f74:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010f76:	4651      	mov	r1, sl
 8010f78:	4640      	mov	r0, r8
 8010f7a:	f005 f903 	bl	8016184 <uxr_next_reliable_nack_buffer_to_send>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d1f0      	bne.n	8010f64 <read_submessage_list+0x158>
 8010f82:	e74a      	b.n	8010e1a <read_submessage_list+0xe>
 8010f84:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010f88:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010f8c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8010f90:	4628      	mov	r0, r5
 8010f92:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010f96:	4651      	mov	r1, sl
 8010f98:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010f9c:	f1a8 0804 	sub.w	r8, r8, #4
 8010fa0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010fa4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010fa8:	fa1f f888 	uxth.w	r8, r8
 8010fac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010fb0:	f009 090e 	and.w	r9, r9, #14
 8010fb4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010fb8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010fbc:	f001 fd82 	bl	8012ac4 <uxr_deserialize_BaseObjectRequest>
 8010fc0:	4650      	mov	r0, sl
 8010fc2:	a90f      	add	r1, sp, #60	@ 0x3c
 8010fc4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010fc8:	f000 fde4 	bl	8011b94 <uxr_parse_base_object_request>
 8010fcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010fce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010fd2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010fd6:	9110      	str	r1, [sp, #64]	@ 0x40
 8010fd8:	f1bb 0f00 	cmp.w	fp, #0
 8010fdc:	d006      	beq.n	8010fec <read_submessage_list+0x1e0>
 8010fde:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010fe2:	4652      	mov	r2, sl
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	2300      	movs	r3, #0
 8010fea:	47d8      	blx	fp
 8010fec:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010fee:	b182      	cbz	r2, 8011012 <read_submessage_list+0x206>
 8010ff0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010ff2:	f04f 0c00 	mov.w	ip, #0
 8010ff6:	3902      	subs	r1, #2
 8010ff8:	e003      	b.n	8011002 <read_submessage_list+0x1f6>
 8010ffa:	f10c 0c01 	add.w	ip, ip, #1
 8010ffe:	4594      	cmp	ip, r2
 8011000:	d007      	beq.n	8011012 <read_submessage_list+0x206>
 8011002:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8011006:	4553      	cmp	r3, sl
 8011008:	d1f7      	bne.n	8010ffa <read_submessage_list+0x1ee>
 801100a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801100c:	2200      	movs	r2, #0
 801100e:	f803 200c 	strb.w	r2, [r3, ip]
 8011012:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011016:	464b      	mov	r3, r9
 8011018:	4642      	mov	r2, r8
 801101a:	4620      	mov	r0, r4
 801101c:	9102      	str	r1, [sp, #8]
 801101e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011020:	9101      	str	r1, [sp, #4]
 8011022:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011024:	9100      	str	r1, [sp, #0]
 8011026:	4629      	mov	r1, r5
 8011028:	f005 f96e 	bl	8016308 <read_submessage_format>
 801102c:	e6f5      	b.n	8010e1a <read_submessage_list+0xe>
 801102e:	4629      	mov	r1, r5
 8011030:	4620      	mov	r0, r4
 8011032:	f7ff fea3 	bl	8010d7c <read_submessage_info>
 8011036:	e6f0      	b.n	8010e1a <read_submessage_list+0xe>
 8011038:	2a00      	cmp	r2, #0
 801103a:	d03e      	beq.n	80110ba <read_submessage_list+0x2ae>
 801103c:	a910      	add	r1, sp, #64	@ 0x40
 801103e:	4628      	mov	r0, r5
 8011040:	f001 ff36 	bl	8012eb0 <uxr_deserialize_STATUS_Payload>
 8011044:	a90e      	add	r1, sp, #56	@ 0x38
 8011046:	aa0d      	add	r2, sp, #52	@ 0x34
 8011048:	a810      	add	r0, sp, #64	@ 0x40
 801104a:	f000 fda3 	bl	8011b94 <uxr_parse_base_object_request>
 801104e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011050:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011054:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011058:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801105c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801105e:	f1ba 0f00 	cmp.w	sl, #0
 8011062:	d006      	beq.n	8011072 <read_submessage_list+0x266>
 8011064:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011068:	4642      	mov	r2, r8
 801106a:	4620      	mov	r0, r4
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	464b      	mov	r3, r9
 8011070:	47d0      	blx	sl
 8011072:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011074:	2a00      	cmp	r2, #0
 8011076:	f43f aed0 	beq.w	8010e1a <read_submessage_list+0xe>
 801107a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801107c:	2100      	movs	r1, #0
 801107e:	3802      	subs	r0, #2
 8011080:	e003      	b.n	801108a <read_submessage_list+0x27e>
 8011082:	3101      	adds	r1, #1
 8011084:	4291      	cmp	r1, r2
 8011086:	f43f aec8 	beq.w	8010e1a <read_submessage_list+0xe>
 801108a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801108e:	4543      	cmp	r3, r8
 8011090:	d1f7      	bne.n	8011082 <read_submessage_list+0x276>
 8011092:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011094:	f803 9001 	strb.w	r9, [r3, r1]
 8011098:	e6bf      	b.n	8010e1a <read_submessage_list+0xe>
 801109a:	2a00      	cmp	r2, #0
 801109c:	f47f aebd 	bne.w	8010e1a <read_submessage_list+0xe>
 80110a0:	4629      	mov	r1, r5
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 fcba 	bl	8011a1c <uxr_read_create_session_status>
 80110a8:	e6b7      	b.n	8010e1a <read_submessage_list+0xe>
 80110aa:	4629      	mov	r1, r5
 80110ac:	4620      	mov	r0, r4
 80110ae:	f7ff fcf3 	bl	8010a98 <read_submessage_get_info>
 80110b2:	e6b2      	b.n	8010e1a <read_submessage_list+0xe>
 80110b4:	b017      	add	sp, #92	@ 0x5c
 80110b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ba:	4629      	mov	r1, r5
 80110bc:	4620      	mov	r0, r4
 80110be:	f000 fcbb 	bl	8011a38 <uxr_read_delete_session_status>
 80110c2:	e6aa      	b.n	8010e1a <read_submessage_list+0xe>
 80110c4:	f000 ff18 	bl	8011ef8 <uxr_nanos>
 80110c8:	4642      	mov	r2, r8
 80110ca:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80110cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80110ce:	fbc7 3206 	smlal	r3, r2, r7, r6
 80110d2:	1818      	adds	r0, r3, r0
 80110d4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80110d6:	eb42 0101 	adc.w	r1, r2, r1
 80110da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110dc:	4642      	mov	r2, r8
 80110de:	fbc7 3206 	smlal	r3, r2, r7, r6
 80110e2:	469c      	mov	ip, r3
 80110e4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80110e8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80110ec:	4643      	mov	r3, r8
 80110ee:	eb1c 0c07 	adds.w	ip, ip, r7
 80110f2:	eb42 0203 	adc.w	r2, r2, r3
 80110f6:	ebb0 030c 	subs.w	r3, r0, ip
 80110fa:	eb61 0202 	sbc.w	r2, r1, r2
 80110fe:	2a00      	cmp	r2, #0
 8011100:	db08      	blt.n	8011114 <read_submessage_list+0x308>
 8011102:	085b      	lsrs	r3, r3, #1
 8011104:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011108:	1052      	asrs	r2, r2, #1
 801110a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801110e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8011112:	e6db      	b.n	8010ecc <read_submessage_list+0xc0>
 8011114:	3301      	adds	r3, #1
 8011116:	f142 0200 	adc.w	r2, r2, #0
 801111a:	e7f2      	b.n	8011102 <read_submessage_list+0x2f6>
 801111c:	3b9aca00 	.word	0x3b9aca00

08011120 <listen_message_reliably>:
 8011120:	1e0b      	subs	r3, r1, #0
 8011122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011126:	bfb8      	it	lt
 8011128:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801112c:	b09d      	sub	sp, #116	@ 0x74
 801112e:	4680      	mov	r8, r0
 8011130:	9305      	str	r3, [sp, #20]
 8011132:	f000 fec5 	bl	8011ec0 <uxr_millis>
 8011136:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801113a:	4681      	mov	r9, r0
 801113c:	2a00      	cmp	r2, #0
 801113e:	f000 809a 	beq.w	8011276 <listen_message_reliably+0x156>
 8011142:	2600      	movs	r6, #0
 8011144:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011148:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801114c:	460f      	mov	r7, r1
 801114e:	4630      	mov	r0, r6
 8011150:	9303      	str	r3, [sp, #12]
 8011152:	e00e      	b.n	8011172 <listen_message_reliably+0x52>
 8011154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011156:	3601      	adds	r6, #1
 8011158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801115a:	455a      	cmp	r2, fp
 801115c:	9903      	ldr	r1, [sp, #12]
 801115e:	b2f0      	uxtb	r0, r6
 8011160:	eb73 0101 	sbcs.w	r1, r3, r1
 8011164:	da01      	bge.n	801116a <listen_message_reliably+0x4a>
 8011166:	4693      	mov	fp, r2
 8011168:	9303      	str	r3, [sp, #12]
 801116a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801116e:	4283      	cmp	r3, r0
 8011170:	d95f      	bls.n	8011232 <listen_message_reliably+0x112>
 8011172:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011176:	2102      	movs	r1, #2
 8011178:	2201      	movs	r2, #1
 801117a:	00e4      	lsls	r4, r4, #3
 801117c:	f000 fd1c 	bl	8011bb8 <uxr_stream_id>
 8011180:	4601      	mov	r1, r0
 8011182:	f104 0520 	add.w	r5, r4, #32
 8011186:	463b      	mov	r3, r7
 8011188:	464a      	mov	r2, r9
 801118a:	9109      	str	r1, [sp, #36]	@ 0x24
 801118c:	4445      	add	r5, r8
 801118e:	4628      	mov	r0, r5
 8011190:	f004 ffca 	bl	8016128 <uxr_update_output_stream_heartbeat_timestamp>
 8011194:	eb08 0304 	add.w	r3, r8, r4
 8011198:	2800      	cmp	r0, #0
 801119a:	d0db      	beq.n	8011154 <listen_message_reliably+0x34>
 801119c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80111a0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80111a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80111a8:	4640      	mov	r0, r8
 80111aa:	3501      	adds	r5, #1
 80111ac:	4444      	add	r4, r8
 80111ae:	9304      	str	r3, [sp, #16]
 80111b0:	f000 fcc8 	bl	8011b44 <uxr_session_header_offset>
 80111b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80111b8:	2300      	movs	r3, #0
 80111ba:	2211      	movs	r2, #17
 80111bc:	a90c      	add	r1, sp, #48	@ 0x30
 80111be:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80111c2:	9000      	str	r0, [sp, #0]
 80111c4:	4650      	mov	r0, sl
 80111c6:	3601      	adds	r6, #1
 80111c8:	f7ff fa34 	bl	8010634 <ucdr_init_buffer_origin_offset>
 80111cc:	2300      	movs	r3, #0
 80111ce:	2205      	movs	r2, #5
 80111d0:	210b      	movs	r1, #11
 80111d2:	4650      	mov	r0, sl
 80111d4:	f000 fe2e 	bl	8011e34 <uxr_buffer_submessage_header>
 80111d8:	2101      	movs	r1, #1
 80111da:	8968      	ldrh	r0, [r5, #10]
 80111dc:	f005 f95e 	bl	801649c <uxr_seq_num_add>
 80111e0:	892b      	ldrh	r3, [r5, #8]
 80111e2:	4602      	mov	r2, r0
 80111e4:	a90a      	add	r1, sp, #40	@ 0x28
 80111e6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80111ea:	4650      	mov	r0, sl
 80111ec:	9b04      	ldr	r3, [sp, #16]
 80111ee:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80111f2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80111f6:	f001 ff17 	bl	8013028 <uxr_serialize_HEARTBEAT_Payload>
 80111fa:	2200      	movs	r2, #0
 80111fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111fe:	4640      	mov	r0, r8
 8011200:	4611      	mov	r1, r2
 8011202:	f000 fc4b 	bl	8011a9c <uxr_stamp_session_header>
 8011206:	4650      	mov	r0, sl
 8011208:	f7ff fa54 	bl	80106b4 <ucdr_buffer_length>
 801120c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011210:	4602      	mov	r2, r0
 8011212:	a90c      	add	r1, sp, #48	@ 0x30
 8011214:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011218:	47a8      	blx	r5
 801121a:	9903      	ldr	r1, [sp, #12]
 801121c:	b2f0      	uxtb	r0, r6
 801121e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011222:	455a      	cmp	r2, fp
 8011224:	eb73 0101 	sbcs.w	r1, r3, r1
 8011228:	db9d      	blt.n	8011166 <listen_message_reliably+0x46>
 801122a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801122e:	4283      	cmp	r3, r0
 8011230:	d89f      	bhi.n	8011172 <listen_message_reliably+0x52>
 8011232:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011236:	9a03      	ldr	r2, [sp, #12]
 8011238:	429a      	cmp	r2, r3
 801123a:	bf08      	it	eq
 801123c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011240:	d019      	beq.n	8011276 <listen_message_reliably+0x156>
 8011242:	ebab 0309 	sub.w	r3, fp, r9
 8011246:	2b00      	cmp	r3, #0
 8011248:	9d05      	ldr	r5, [sp, #20]
 801124a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801124e:	aa08      	add	r2, sp, #32
 8011250:	bf08      	it	eq
 8011252:	2301      	moveq	r3, #1
 8011254:	a907      	add	r1, sp, #28
 8011256:	6884      	ldr	r4, [r0, #8]
 8011258:	429d      	cmp	r5, r3
 801125a:	6800      	ldr	r0, [r0, #0]
 801125c:	bfa8      	it	ge
 801125e:	461d      	movge	r5, r3
 8011260:	462b      	mov	r3, r5
 8011262:	47a0      	blx	r4
 8011264:	b948      	cbnz	r0, 801127a <listen_message_reliably+0x15a>
 8011266:	9b05      	ldr	r3, [sp, #20]
 8011268:	1b5b      	subs	r3, r3, r5
 801126a:	2b00      	cmp	r3, #0
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	f73f af60 	bgt.w	8011132 <listen_message_reliably+0x12>
 8011272:	4604      	mov	r4, r0
 8011274:	e012      	b.n	801129c <listen_message_reliably+0x17c>
 8011276:	9b05      	ldr	r3, [sp, #20]
 8011278:	e7e5      	b.n	8011246 <listen_message_reliably+0x126>
 801127a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801127e:	4604      	mov	r4, r0
 8011280:	2500      	movs	r5, #0
 8011282:	a80c      	add	r0, sp, #48	@ 0x30
 8011284:	f7ff f9e8 	bl	8010658 <ucdr_init_buffer>
 8011288:	f10d 031a 	add.w	r3, sp, #26
 801128c:	aa06      	add	r2, sp, #24
 801128e:	a90c      	add	r1, sp, #48	@ 0x30
 8011290:	4640      	mov	r0, r8
 8011292:	f88d 5018 	strb.w	r5, [sp, #24]
 8011296:	f000 fc15 	bl	8011ac4 <uxr_read_session_header>
 801129a:	b918      	cbnz	r0, 80112a4 <listen_message_reliably+0x184>
 801129c:	4620      	mov	r0, r4
 801129e:	b01d      	add	sp, #116	@ 0x74
 80112a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a4:	4629      	mov	r1, r5
 80112a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80112aa:	f000 fcb3 	bl	8011c14 <uxr_stream_id_from_raw>
 80112ae:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80112b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80112b6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80112ba:	2e01      	cmp	r6, #1
 80112bc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80112c0:	d04b      	beq.n	801135a <listen_message_reliably+0x23a>
 80112c2:	2e02      	cmp	r6, #2
 80112c4:	d00f      	beq.n	80112e6 <listen_message_reliably+0x1c6>
 80112c6:	2e00      	cmp	r6, #0
 80112c8:	d1e8      	bne.n	801129c <listen_message_reliably+0x17c>
 80112ca:	4631      	mov	r1, r6
 80112cc:	4630      	mov	r0, r6
 80112ce:	f000 fca1 	bl	8011c14 <uxr_stream_id_from_raw>
 80112d2:	4602      	mov	r2, r0
 80112d4:	a90c      	add	r1, sp, #48	@ 0x30
 80112d6:	4640      	mov	r0, r8
 80112d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80112da:	f7ff fd97 	bl	8010e0c <read_submessage_list>
 80112de:	4620      	mov	r0, r4
 80112e0:	b01d      	add	sp, #116	@ 0x74
 80112e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e6:	4629      	mov	r1, r5
 80112e8:	f108 0008 	add.w	r0, r8, #8
 80112ec:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80112f0:	f000 fd7e 	bl	8011df0 <uxr_get_input_reliable_stream>
 80112f4:	4607      	mov	r7, r0
 80112f6:	b338      	cbz	r0, 8011348 <listen_message_reliably+0x228>
 80112f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112fa:	a80c      	add	r0, sp, #48	@ 0x30
 80112fc:	9203      	str	r2, [sp, #12]
 80112fe:	f7ff f9dd 	bl	80106bc <ucdr_buffer_remaining>
 8011302:	4603      	mov	r3, r0
 8011304:	f10d 0019 	add.w	r0, sp, #25
 8011308:	9a03      	ldr	r2, [sp, #12]
 801130a:	4651      	mov	r1, sl
 801130c:	9000      	str	r0, [sp, #0]
 801130e:	4638      	mov	r0, r7
 8011310:	f004 fb14 	bl	801593c <uxr_receive_reliable_message>
 8011314:	b1c0      	cbz	r0, 8011348 <listen_message_reliably+0x228>
 8011316:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801131a:	b393      	cbz	r3, 8011382 <listen_message_reliably+0x262>
 801131c:	ae14      	add	r6, sp, #80	@ 0x50
 801131e:	f04f 0a02 	mov.w	sl, #2
 8011322:	e00a      	b.n	801133a <listen_message_reliably+0x21a>
 8011324:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011328:	4631      	mov	r1, r6
 801132a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801132e:	4640      	mov	r0, r8
 8011330:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011336:	f7ff fd69 	bl	8010e0c <read_submessage_list>
 801133a:	2204      	movs	r2, #4
 801133c:	4631      	mov	r1, r6
 801133e:	4638      	mov	r0, r7
 8011340:	f004 fb7e 	bl	8015a40 <uxr_next_input_reliable_buffer_available>
 8011344:	2800      	cmp	r0, #0
 8011346:	d1ed      	bne.n	8011324 <listen_message_reliably+0x204>
 8011348:	4640      	mov	r0, r8
 801134a:	462a      	mov	r2, r5
 801134c:	4649      	mov	r1, r9
 801134e:	f7ff fbd9 	bl	8010b04 <write_submessage_acknack.isra.0>
 8011352:	4620      	mov	r0, r4
 8011354:	b01d      	add	sp, #116	@ 0x74
 8011356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135a:	4629      	mov	r1, r5
 801135c:	f108 0008 	add.w	r0, r8, #8
 8011360:	f000 fd3c 	bl	8011ddc <uxr_get_input_best_effort_stream>
 8011364:	2800      	cmp	r0, #0
 8011366:	d099      	beq.n	801129c <listen_message_reliably+0x17c>
 8011368:	4651      	mov	r1, sl
 801136a:	f004 fa5d 	bl	8015828 <uxr_receive_best_effort_message>
 801136e:	2800      	cmp	r0, #0
 8011370:	d094      	beq.n	801129c <listen_message_reliably+0x17c>
 8011372:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011376:	a90c      	add	r1, sp, #48	@ 0x30
 8011378:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801137a:	4640      	mov	r0, r8
 801137c:	f7ff fd46 	bl	8010e0c <read_submessage_list>
 8011380:	e78c      	b.n	801129c <listen_message_reliably+0x17c>
 8011382:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011386:	a90c      	add	r1, sp, #48	@ 0x30
 8011388:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801138a:	4640      	mov	r0, r8
 801138c:	f7ff fd3e 	bl	8010e0c <read_submessage_list>
 8011390:	e7c4      	b.n	801131c <listen_message_reliably+0x1fc>
 8011392:	bf00      	nop

08011394 <uxr_run_session_until_confirm_delivery>:
 8011394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011398:	4606      	mov	r6, r0
 801139a:	460d      	mov	r5, r1
 801139c:	f000 fd90 	bl	8011ec0 <uxr_millis>
 80113a0:	4607      	mov	r7, r0
 80113a2:	4630      	mov	r0, r6
 80113a4:	f106 0808 	add.w	r8, r6, #8
 80113a8:	f7ff fc74 	bl	8010c94 <uxr_flash_output_streams>
 80113ac:	2d00      	cmp	r5, #0
 80113ae:	db10      	blt.n	80113d2 <uxr_run_session_until_confirm_delivery+0x3e>
 80113b0:	462c      	mov	r4, r5
 80113b2:	e006      	b.n	80113c2 <uxr_run_session_until_confirm_delivery+0x2e>
 80113b4:	f7ff feb4 	bl	8011120 <listen_message_reliably>
 80113b8:	f000 fd82 	bl	8011ec0 <uxr_millis>
 80113bc:	1bc3      	subs	r3, r0, r7
 80113be:	1aec      	subs	r4, r5, r3
 80113c0:	d407      	bmi.n	80113d2 <uxr_run_session_until_confirm_delivery+0x3e>
 80113c2:	4640      	mov	r0, r8
 80113c4:	f000 fd20 	bl	8011e08 <uxr_output_streams_confirmed>
 80113c8:	4603      	mov	r3, r0
 80113ca:	4621      	mov	r1, r4
 80113cc:	4630      	mov	r0, r6
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0f0      	beq.n	80113b4 <uxr_run_session_until_confirm_delivery+0x20>
 80113d2:	4640      	mov	r0, r8
 80113d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113d8:	f000 bd16 	b.w	8011e08 <uxr_output_streams_confirmed>

080113dc <uxr_run_session_until_all_status>:
 80113dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80113e4:	4606      	mov	r6, r0
 80113e6:	4688      	mov	r8, r1
 80113e8:	4692      	mov	sl, r2
 80113ea:	461f      	mov	r7, r3
 80113ec:	f7ff fc52 	bl	8010c94 <uxr_flash_output_streams>
 80113f0:	f1bb 0f00 	cmp.w	fp, #0
 80113f4:	d004      	beq.n	8011400 <uxr_run_session_until_all_status+0x24>
 80113f6:	465a      	mov	r2, fp
 80113f8:	21ff      	movs	r1, #255	@ 0xff
 80113fa:	4638      	mov	r0, r7
 80113fc:	f006 fcf4 	bl	8017de8 <memset>
 8011400:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011404:	1e7d      	subs	r5, r7, #1
 8011406:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801140a:	f000 fd59 	bl	8011ec0 <uxr_millis>
 801140e:	4641      	mov	r1, r8
 8011410:	4681      	mov	r9, r0
 8011412:	4630      	mov	r0, r6
 8011414:	f7ff fe84 	bl	8011120 <listen_message_reliably>
 8011418:	f000 fd52 	bl	8011ec0 <uxr_millis>
 801141c:	eba0 0009 	sub.w	r0, r0, r9
 8011420:	eba8 0100 	sub.w	r1, r8, r0
 8011424:	f1bb 0f00 	cmp.w	fp, #0
 8011428:	d029      	beq.n	801147e <uxr_run_session_until_all_status+0xa2>
 801142a:	46ae      	mov	lr, r5
 801142c:	f04f 0c00 	mov.w	ip, #0
 8011430:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011434:	2cff      	cmp	r4, #255	@ 0xff
 8011436:	d015      	beq.n	8011464 <uxr_run_session_until_all_status+0x88>
 8011438:	f10c 0c01 	add.w	ip, ip, #1
 801143c:	45e3      	cmp	fp, ip
 801143e:	d8f7      	bhi.n	8011430 <uxr_run_session_until_all_status+0x54>
 8011440:	2300      	movs	r3, #0
 8011442:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011444:	e000      	b.n	8011448 <uxr_run_session_until_all_status+0x6c>
 8011446:	b158      	cbz	r0, 8011460 <uxr_run_session_until_all_status+0x84>
 8011448:	462b      	mov	r3, r5
 801144a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801144e:	3302      	adds	r3, #2
 8011450:	2801      	cmp	r0, #1
 8011452:	eba3 0307 	sub.w	r3, r3, r7
 8011456:	bf8c      	ite	hi
 8011458:	2000      	movhi	r0, #0
 801145a:	2001      	movls	r0, #1
 801145c:	459b      	cmp	fp, r3
 801145e:	d8f2      	bhi.n	8011446 <uxr_run_session_until_all_status+0x6a>
 8011460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011464:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011468:	f10c 0c01 	add.w	ip, ip, #1
 801146c:	45dc      	cmp	ip, fp
 801146e:	d201      	bcs.n	8011474 <uxr_run_session_until_all_status+0x98>
 8011470:	2b00      	cmp	r3, #0
 8011472:	d0dd      	beq.n	8011430 <uxr_run_session_until_all_status+0x54>
 8011474:	2900      	cmp	r1, #0
 8011476:	dde3      	ble.n	8011440 <uxr_run_session_until_all_status+0x64>
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1ca      	bne.n	8011412 <uxr_run_session_until_all_status+0x36>
 801147c:	e7e0      	b.n	8011440 <uxr_run_session_until_all_status+0x64>
 801147e:	2001      	movs	r0, #1
 8011480:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011488 <uxr_sync_session>:
 8011488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801148a:	b093      	sub	sp, #76	@ 0x4c
 801148c:	4604      	mov	r4, r0
 801148e:	460d      	mov	r5, r1
 8011490:	f000 fb58 	bl	8011b44 <uxr_session_header_offset>
 8011494:	2214      	movs	r2, #20
 8011496:	2300      	movs	r3, #0
 8011498:	9000      	str	r0, [sp, #0]
 801149a:	a80a      	add	r0, sp, #40	@ 0x28
 801149c:	eb0d 0102 	add.w	r1, sp, r2
 80114a0:	f7ff f8c8 	bl	8010634 <ucdr_init_buffer_origin_offset>
 80114a4:	2300      	movs	r3, #0
 80114a6:	2208      	movs	r2, #8
 80114a8:	210e      	movs	r1, #14
 80114aa:	a80a      	add	r0, sp, #40	@ 0x28
 80114ac:	f000 fcc2 	bl	8011e34 <uxr_buffer_submessage_header>
 80114b0:	f000 fd22 	bl	8011ef8 <uxr_nanos>
 80114b4:	460e      	mov	r6, r1
 80114b6:	4607      	mov	r7, r0
 80114b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8011528 <uxr_sync_session+0xa0>)
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	f7ee ff77 	bl	80003b0 <__aeabi_ldivmod>
 80114c2:	4631      	mov	r1, r6
 80114c4:	9003      	str	r0, [sp, #12]
 80114c6:	4638      	mov	r0, r7
 80114c8:	a317      	add	r3, pc, #92	@ (adr r3, 8011528 <uxr_sync_session+0xa0>)
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	f7ee ff6f 	bl	80003b0 <__aeabi_ldivmod>
 80114d2:	a903      	add	r1, sp, #12
 80114d4:	a80a      	add	r0, sp, #40	@ 0x28
 80114d6:	9204      	str	r2, [sp, #16]
 80114d8:	f001 fdce 	bl	8013078 <uxr_serialize_TIMESTAMP_Payload>
 80114dc:	2200      	movs	r2, #0
 80114de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114e0:	4620      	mov	r0, r4
 80114e2:	4611      	mov	r1, r2
 80114e4:	f000 fada 	bl	8011a9c <uxr_stamp_session_header>
 80114e8:	a80a      	add	r0, sp, #40	@ 0x28
 80114ea:	f7ff f8e3 	bl	80106b4 <ucdr_buffer_length>
 80114ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114f0:	4602      	mov	r2, r0
 80114f2:	a905      	add	r1, sp, #20
 80114f4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80114f8:	47b0      	blx	r6
 80114fa:	f000 fce1 	bl	8011ec0 <uxr_millis>
 80114fe:	2300      	movs	r3, #0
 8011500:	4606      	mov	r6, r0
 8011502:	4629      	mov	r1, r5
 8011504:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011508:	e000      	b.n	801150c <uxr_sync_session+0x84>
 801150a:	b950      	cbnz	r0, 8011522 <uxr_sync_session+0x9a>
 801150c:	4620      	mov	r0, r4
 801150e:	f7ff fe07 	bl	8011120 <listen_message_reliably>
 8011512:	f000 fcd5 	bl	8011ec0 <uxr_millis>
 8011516:	1b83      	subs	r3, r0, r6
 8011518:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801151c:	1ae9      	subs	r1, r5, r3
 801151e:	2900      	cmp	r1, #0
 8011520:	dcf3      	bgt.n	801150a <uxr_sync_session+0x82>
 8011522:	b013      	add	sp, #76	@ 0x4c
 8011524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011526:	bf00      	nop
 8011528:	3b9aca00 	.word	0x3b9aca00
 801152c:	00000000 	.word	0x00000000

08011530 <wait_session_status>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	b09d      	sub	sp, #116	@ 0x74
 8011538:	20ff      	movs	r0, #255	@ 0xff
 801153a:	9303      	str	r3, [sp, #12]
 801153c:	7160      	strb	r0, [r4, #5]
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 80b6 	beq.w	80116b0 <wait_session_status+0x180>
 8011544:	4689      	mov	r9, r1
 8011546:	4692      	mov	sl, r2
 8011548:	f04f 0b00 	mov.w	fp, #0
 801154c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801154e:	4652      	mov	r2, sl
 8011550:	4649      	mov	r1, r9
 8011552:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011556:	47a8      	blx	r5
 8011558:	f000 fcb2 	bl	8011ec0 <uxr_millis>
 801155c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011560:	4605      	mov	r5, r0
 8011562:	e009      	b.n	8011578 <wait_session_status+0x48>
 8011564:	f000 fcac 	bl	8011ec0 <uxr_millis>
 8011568:	1b40      	subs	r0, r0, r5
 801156a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801156e:	2b00      	cmp	r3, #0
 8011570:	dd40      	ble.n	80115f4 <wait_session_status+0xc4>
 8011572:	7960      	ldrb	r0, [r4, #5]
 8011574:	28ff      	cmp	r0, #255	@ 0xff
 8011576:	d145      	bne.n	8011604 <wait_session_status+0xd4>
 8011578:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801157a:	a908      	add	r1, sp, #32
 801157c:	6896      	ldr	r6, [r2, #8]
 801157e:	6810      	ldr	r0, [r2, #0]
 8011580:	aa09      	add	r2, sp, #36	@ 0x24
 8011582:	47b0      	blx	r6
 8011584:	2800      	cmp	r0, #0
 8011586:	d0ed      	beq.n	8011564 <wait_session_status+0x34>
 8011588:	a80c      	add	r0, sp, #48	@ 0x30
 801158a:	2600      	movs	r6, #0
 801158c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011590:	f7ff f862 	bl	8010658 <ucdr_init_buffer>
 8011594:	f10d 031e 	add.w	r3, sp, #30
 8011598:	aa07      	add	r2, sp, #28
 801159a:	a90c      	add	r1, sp, #48	@ 0x30
 801159c:	4620      	mov	r0, r4
 801159e:	f88d 601c 	strb.w	r6, [sp, #28]
 80115a2:	f000 fa8f 	bl	8011ac4 <uxr_read_session_header>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d0dc      	beq.n	8011564 <wait_session_status+0x34>
 80115aa:	4631      	mov	r1, r6
 80115ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80115b0:	f000 fb30 	bl	8011c14 <uxr_stream_id_from_raw>
 80115b4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80115b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80115bc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80115c0:	2f01      	cmp	r7, #1
 80115c2:	9302      	str	r3, [sp, #8]
 80115c4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80115c8:	d05c      	beq.n	8011684 <wait_session_status+0x154>
 80115ca:	2f02      	cmp	r7, #2
 80115cc:	d020      	beq.n	8011610 <wait_session_status+0xe0>
 80115ce:	2f00      	cmp	r7, #0
 80115d0:	d1c8      	bne.n	8011564 <wait_session_status+0x34>
 80115d2:	4639      	mov	r1, r7
 80115d4:	4638      	mov	r0, r7
 80115d6:	f000 fb1d 	bl	8011c14 <uxr_stream_id_from_raw>
 80115da:	a90c      	add	r1, sp, #48	@ 0x30
 80115dc:	4602      	mov	r2, r0
 80115de:	900b      	str	r0, [sp, #44]	@ 0x2c
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff fc13 	bl	8010e0c <read_submessage_list>
 80115e6:	f000 fc6b 	bl	8011ec0 <uxr_millis>
 80115ea:	1b40      	subs	r0, r0, r5
 80115ec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	dcbe      	bgt.n	8011572 <wait_session_status+0x42>
 80115f4:	f10b 0b01 	add.w	fp, fp, #1
 80115f8:	9b03      	ldr	r3, [sp, #12]
 80115fa:	7960      	ldrb	r0, [r4, #5]
 80115fc:	455b      	cmp	r3, fp
 80115fe:	d001      	beq.n	8011604 <wait_session_status+0xd4>
 8011600:	28ff      	cmp	r0, #255	@ 0xff
 8011602:	d0a3      	beq.n	801154c <wait_session_status+0x1c>
 8011604:	38ff      	subs	r0, #255	@ 0xff
 8011606:	bf18      	it	ne
 8011608:	2001      	movne	r0, #1
 801160a:	b01d      	add	sp, #116	@ 0x74
 801160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011610:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011614:	4631      	mov	r1, r6
 8011616:	f104 0008 	add.w	r0, r4, #8
 801161a:	9304      	str	r3, [sp, #16]
 801161c:	f000 fbe8 	bl	8011df0 <uxr_get_input_reliable_stream>
 8011620:	4680      	mov	r8, r0
 8011622:	b348      	cbz	r0, 8011678 <wait_session_status+0x148>
 8011624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011626:	a80c      	add	r0, sp, #48	@ 0x30
 8011628:	9205      	str	r2, [sp, #20]
 801162a:	f7ff f847 	bl	80106bc <ucdr_buffer_remaining>
 801162e:	4603      	mov	r3, r0
 8011630:	f10d 001d 	add.w	r0, sp, #29
 8011634:	9a05      	ldr	r2, [sp, #20]
 8011636:	9000      	str	r0, [sp, #0]
 8011638:	4640      	mov	r0, r8
 801163a:	9902      	ldr	r1, [sp, #8]
 801163c:	f004 f97e 	bl	801593c <uxr_receive_reliable_message>
 8011640:	b1d0      	cbz	r0, 8011678 <wait_session_status+0x148>
 8011642:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d03a      	beq.n	80116c0 <wait_session_status+0x190>
 801164a:	9f04      	ldr	r7, [sp, #16]
 801164c:	e00a      	b.n	8011664 <wait_session_status+0x134>
 801164e:	f04f 0302 	mov.w	r3, #2
 8011652:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011656:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801165a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801165e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011660:	f7ff fbd4 	bl	8010e0c <read_submessage_list>
 8011664:	a914      	add	r1, sp, #80	@ 0x50
 8011666:	2204      	movs	r2, #4
 8011668:	4640      	mov	r0, r8
 801166a:	f004 f9e9 	bl	8015a40 <uxr_next_input_reliable_buffer_available>
 801166e:	4603      	mov	r3, r0
 8011670:	a914      	add	r1, sp, #80	@ 0x50
 8011672:	4620      	mov	r0, r4
 8011674:	2b00      	cmp	r3, #0
 8011676:	d1ea      	bne.n	801164e <wait_session_status+0x11e>
 8011678:	4632      	mov	r2, r6
 801167a:	9904      	ldr	r1, [sp, #16]
 801167c:	4620      	mov	r0, r4
 801167e:	f7ff fa41 	bl	8010b04 <write_submessage_acknack.isra.0>
 8011682:	e76f      	b.n	8011564 <wait_session_status+0x34>
 8011684:	4631      	mov	r1, r6
 8011686:	f104 0008 	add.w	r0, r4, #8
 801168a:	f000 fba7 	bl	8011ddc <uxr_get_input_best_effort_stream>
 801168e:	2800      	cmp	r0, #0
 8011690:	f43f af68 	beq.w	8011564 <wait_session_status+0x34>
 8011694:	9902      	ldr	r1, [sp, #8]
 8011696:	f004 f8c7 	bl	8015828 <uxr_receive_best_effort_message>
 801169a:	2800      	cmp	r0, #0
 801169c:	f43f af62 	beq.w	8011564 <wait_session_status+0x34>
 80116a0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80116a4:	a90c      	add	r1, sp, #48	@ 0x30
 80116a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7ff fbaf 	bl	8010e0c <read_submessage_list>
 80116ae:	e759      	b.n	8011564 <wait_session_status+0x34>
 80116b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80116b6:	47a0      	blx	r4
 80116b8:	2001      	movs	r0, #1
 80116ba:	b01d      	add	sp, #116	@ 0x74
 80116bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80116c4:	a90c      	add	r1, sp, #48	@ 0x30
 80116c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80116c8:	4620      	mov	r0, r4
 80116ca:	f7ff fb9f 	bl	8010e0c <read_submessage_list>
 80116ce:	e7bc      	b.n	801164a <wait_session_status+0x11a>

080116d0 <uxr_delete_session_retries>:
 80116d0:	b530      	push	{r4, r5, lr}
 80116d2:	b08f      	sub	sp, #60	@ 0x3c
 80116d4:	4604      	mov	r4, r0
 80116d6:	460d      	mov	r5, r1
 80116d8:	f000 fa34 	bl	8011b44 <uxr_session_header_offset>
 80116dc:	2300      	movs	r3, #0
 80116de:	2210      	movs	r2, #16
 80116e0:	a902      	add	r1, sp, #8
 80116e2:	9000      	str	r0, [sp, #0]
 80116e4:	a806      	add	r0, sp, #24
 80116e6:	f7fe ffa5 	bl	8010634 <ucdr_init_buffer_origin_offset>
 80116ea:	a906      	add	r1, sp, #24
 80116ec:	4620      	mov	r0, r4
 80116ee:	f000 f979 	bl	80119e4 <uxr_buffer_delete_session>
 80116f2:	2200      	movs	r2, #0
 80116f4:	9b06      	ldr	r3, [sp, #24]
 80116f6:	4620      	mov	r0, r4
 80116f8:	4611      	mov	r1, r2
 80116fa:	f000 f9cf 	bl	8011a9c <uxr_stamp_session_header>
 80116fe:	a806      	add	r0, sp, #24
 8011700:	f7fe ffd8 	bl	80106b4 <ucdr_buffer_length>
 8011704:	462b      	mov	r3, r5
 8011706:	4602      	mov	r2, r0
 8011708:	a902      	add	r1, sp, #8
 801170a:	4620      	mov	r0, r4
 801170c:	f7ff ff10 	bl	8011530 <wait_session_status>
 8011710:	b118      	cbz	r0, 801171a <uxr_delete_session_retries+0x4a>
 8011712:	7960      	ldrb	r0, [r4, #5]
 8011714:	fab0 f080 	clz	r0, r0
 8011718:	0940      	lsrs	r0, r0, #5
 801171a:	b00f      	add	sp, #60	@ 0x3c
 801171c:	bd30      	pop	{r4, r5, pc}
 801171e:	bf00      	nop

08011720 <uxr_create_session>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	f100 0b08 	add.w	fp, r0, #8
 8011728:	4604      	mov	r4, r0
 801172a:	b0ab      	sub	sp, #172	@ 0xac
 801172c:	4658      	mov	r0, fp
 801172e:	465e      	mov	r6, fp
 8011730:	f000 faa6 	bl	8011c80 <uxr_reset_stream_storage>
 8011734:	4620      	mov	r0, r4
 8011736:	f000 fa05 	bl	8011b44 <uxr_session_header_offset>
 801173a:	2300      	movs	r3, #0
 801173c:	221c      	movs	r2, #28
 801173e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011740:	9000      	str	r0, [sp, #0]
 8011742:	a812      	add	r0, sp, #72	@ 0x48
 8011744:	f7fe ff76 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8011748:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801174a:	a912      	add	r1, sp, #72	@ 0x48
 801174c:	4620      	mov	r0, r4
 801174e:	8a1a      	ldrh	r2, [r3, #16]
 8011750:	3a04      	subs	r2, #4
 8011752:	b292      	uxth	r2, r2
 8011754:	f000 f91c 	bl	8011990 <uxr_buffer_create_session>
 8011758:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801175a:	4620      	mov	r0, r4
 801175c:	f000 f98a 	bl	8011a74 <uxr_stamp_create_session_header>
 8011760:	a812      	add	r0, sp, #72	@ 0x48
 8011762:	f7fe ffa7 	bl	80106b4 <ucdr_buffer_length>
 8011766:	23ff      	movs	r3, #255	@ 0xff
 8011768:	4681      	mov	r9, r0
 801176a:	7163      	strb	r3, [r4, #5]
 801176c:	230a      	movs	r3, #10
 801176e:	9303      	str	r3, [sp, #12]
 8011770:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011772:	464a      	mov	r2, r9
 8011774:	a90b      	add	r1, sp, #44	@ 0x2c
 8011776:	e9d3 0500 	ldrd	r0, r5, [r3]
 801177a:	47a8      	blx	r5
 801177c:	f000 fba0 	bl	8011ec0 <uxr_millis>
 8011780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011784:	4605      	mov	r5, r0
 8011786:	e009      	b.n	801179c <uxr_create_session+0x7c>
 8011788:	f000 fb9a 	bl	8011ec0 <uxr_millis>
 801178c:	1b40      	subs	r0, r0, r5
 801178e:	7962      	ldrb	r2, [r4, #5]
 8011790:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011794:	2b00      	cmp	r3, #0
 8011796:	dd38      	ble.n	801180a <uxr_create_session+0xea>
 8011798:	2aff      	cmp	r2, #255	@ 0xff
 801179a:	d13c      	bne.n	8011816 <uxr_create_session+0xf6>
 801179c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801179e:	a907      	add	r1, sp, #28
 80117a0:	6897      	ldr	r7, [r2, #8]
 80117a2:	6810      	ldr	r0, [r2, #0]
 80117a4:	aa08      	add	r2, sp, #32
 80117a6:	47b8      	blx	r7
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d0ed      	beq.n	8011788 <uxr_create_session+0x68>
 80117ac:	a81a      	add	r0, sp, #104	@ 0x68
 80117ae:	2700      	movs	r7, #0
 80117b0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80117b4:	f7fe ff50 	bl	8010658 <ucdr_init_buffer>
 80117b8:	f10d 031a 	add.w	r3, sp, #26
 80117bc:	aa06      	add	r2, sp, #24
 80117be:	a91a      	add	r1, sp, #104	@ 0x68
 80117c0:	4620      	mov	r0, r4
 80117c2:	f88d 7018 	strb.w	r7, [sp, #24]
 80117c6:	f000 f97d 	bl	8011ac4 <uxr_read_session_header>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d0dc      	beq.n	8011788 <uxr_create_session+0x68>
 80117ce:	4639      	mov	r1, r7
 80117d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80117d4:	f000 fa1e 	bl	8011c14 <uxr_stream_id_from_raw>
 80117d8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80117dc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80117e0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80117e4:	2f01      	cmp	r7, #1
 80117e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80117ea:	d053      	beq.n	8011894 <uxr_create_session+0x174>
 80117ec:	2f02      	cmp	r7, #2
 80117ee:	d018      	beq.n	8011822 <uxr_create_session+0x102>
 80117f0:	2f00      	cmp	r7, #0
 80117f2:	d1c9      	bne.n	8011788 <uxr_create_session+0x68>
 80117f4:	4639      	mov	r1, r7
 80117f6:	4638      	mov	r0, r7
 80117f8:	f000 fa0c 	bl	8011c14 <uxr_stream_id_from_raw>
 80117fc:	a91a      	add	r1, sp, #104	@ 0x68
 80117fe:	4602      	mov	r2, r0
 8011800:	900a      	str	r0, [sp, #40]	@ 0x28
 8011802:	4620      	mov	r0, r4
 8011804:	f7ff fb02 	bl	8010e0c <read_submessage_list>
 8011808:	e7be      	b.n	8011788 <uxr_create_session+0x68>
 801180a:	9b03      	ldr	r3, [sp, #12]
 801180c:	3b01      	subs	r3, #1
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	d001      	beq.n	8011816 <uxr_create_session+0xf6>
 8011812:	2aff      	cmp	r2, #255	@ 0xff
 8011814:	d0ac      	beq.n	8011770 <uxr_create_session+0x50>
 8011816:	2a00      	cmp	r2, #0
 8011818:	d051      	beq.n	80118be <uxr_create_session+0x19e>
 801181a:	2000      	movs	r0, #0
 801181c:	b02b      	add	sp, #172	@ 0xac
 801181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011822:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011826:	4641      	mov	r1, r8
 8011828:	4630      	mov	r0, r6
 801182a:	9304      	str	r3, [sp, #16]
 801182c:	f000 fae0 	bl	8011df0 <uxr_get_input_reliable_stream>
 8011830:	4682      	mov	sl, r0
 8011832:	b348      	cbz	r0, 8011888 <uxr_create_session+0x168>
 8011834:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011836:	a81a      	add	r0, sp, #104	@ 0x68
 8011838:	9205      	str	r2, [sp, #20]
 801183a:	f7fe ff3f 	bl	80106bc <ucdr_buffer_remaining>
 801183e:	4603      	mov	r3, r0
 8011840:	f10d 0019 	add.w	r0, sp, #25
 8011844:	9a05      	ldr	r2, [sp, #20]
 8011846:	4659      	mov	r1, fp
 8011848:	9000      	str	r0, [sp, #0]
 801184a:	4650      	mov	r0, sl
 801184c:	f004 f876 	bl	801593c <uxr_receive_reliable_message>
 8011850:	b1d0      	cbz	r0, 8011888 <uxr_create_session+0x168>
 8011852:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d038      	beq.n	80118cc <uxr_create_session+0x1ac>
 801185a:	9f04      	ldr	r7, [sp, #16]
 801185c:	e00a      	b.n	8011874 <uxr_create_session+0x154>
 801185e:	f04f 0302 	mov.w	r3, #2
 8011862:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8011866:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801186a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801186e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011870:	f7ff facc 	bl	8010e0c <read_submessage_list>
 8011874:	a922      	add	r1, sp, #136	@ 0x88
 8011876:	2204      	movs	r2, #4
 8011878:	4650      	mov	r0, sl
 801187a:	f004 f8e1 	bl	8015a40 <uxr_next_input_reliable_buffer_available>
 801187e:	4603      	mov	r3, r0
 8011880:	a922      	add	r1, sp, #136	@ 0x88
 8011882:	4620      	mov	r0, r4
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1ea      	bne.n	801185e <uxr_create_session+0x13e>
 8011888:	4642      	mov	r2, r8
 801188a:	9904      	ldr	r1, [sp, #16]
 801188c:	4620      	mov	r0, r4
 801188e:	f7ff f939 	bl	8010b04 <write_submessage_acknack.isra.0>
 8011892:	e779      	b.n	8011788 <uxr_create_session+0x68>
 8011894:	4641      	mov	r1, r8
 8011896:	4630      	mov	r0, r6
 8011898:	f000 faa0 	bl	8011ddc <uxr_get_input_best_effort_stream>
 801189c:	2800      	cmp	r0, #0
 801189e:	f43f af73 	beq.w	8011788 <uxr_create_session+0x68>
 80118a2:	4659      	mov	r1, fp
 80118a4:	f003 ffc0 	bl	8015828 <uxr_receive_best_effort_message>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f43f af6d 	beq.w	8011788 <uxr_create_session+0x68>
 80118ae:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80118b2:	a91a      	add	r1, sp, #104	@ 0x68
 80118b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118b6:	4620      	mov	r0, r4
 80118b8:	f7ff faa8 	bl	8010e0c <read_submessage_list>
 80118bc:	e764      	b.n	8011788 <uxr_create_session+0x68>
 80118be:	4630      	mov	r0, r6
 80118c0:	f000 f9de 	bl	8011c80 <uxr_reset_stream_storage>
 80118c4:	2001      	movs	r0, #1
 80118c6:	b02b      	add	sp, #172	@ 0xac
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80118d0:	a91a      	add	r1, sp, #104	@ 0x68
 80118d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118d4:	4620      	mov	r0, r4
 80118d6:	f7ff fa99 	bl	8010e0c <read_submessage_list>
 80118da:	e7be      	b.n	801185a <uxr_create_session+0x13a>

080118dc <uxr_prepare_stream_to_write_submessage>:
 80118dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	4604      	mov	r4, r0
 80118e4:	4610      	mov	r0, r2
 80118e6:	4615      	mov	r5, r2
 80118e8:	461e      	mov	r6, r3
 80118ea:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80118ee:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80118f2:	f105 0904 	add.w	r9, r5, #4
 80118f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80118fa:	9101      	str	r1, [sp, #4]
 80118fc:	f000 fada 	bl	8011eb4 <uxr_submessage_padding>
 8011900:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011904:	4481      	add	r9, r0
 8011906:	2b01      	cmp	r3, #1
 8011908:	d01d      	beq.n	8011946 <uxr_prepare_stream_to_write_submessage+0x6a>
 801190a:	2b02      	cmp	r3, #2
 801190c:	d116      	bne.n	801193c <uxr_prepare_stream_to_write_submessage+0x60>
 801190e:	f104 0008 	add.w	r0, r4, #8
 8011912:	4651      	mov	r1, sl
 8011914:	f000 fa56 	bl	8011dc4 <uxr_get_output_reliable_stream>
 8011918:	4604      	mov	r4, r0
 801191a:	b158      	cbz	r0, 8011934 <uxr_prepare_stream_to_write_submessage+0x58>
 801191c:	4649      	mov	r1, r9
 801191e:	4632      	mov	r2, r6
 8011920:	f004 fa54 	bl	8015dcc <uxr_prepare_reliable_buffer_to_write>
 8011924:	4604      	mov	r4, r0
 8011926:	b12c      	cbz	r4, 8011934 <uxr_prepare_stream_to_write_submessage+0x58>
 8011928:	4643      	mov	r3, r8
 801192a:	b2aa      	uxth	r2, r5
 801192c:	4639      	mov	r1, r7
 801192e:	4630      	mov	r0, r6
 8011930:	f000 fa80 	bl	8011e34 <uxr_buffer_submessage_header>
 8011934:	4620      	mov	r0, r4
 8011936:	b002      	add	sp, #8
 8011938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193c:	2400      	movs	r4, #0
 801193e:	4620      	mov	r0, r4
 8011940:	b002      	add	sp, #8
 8011942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011946:	f104 0008 	add.w	r0, r4, #8
 801194a:	4651      	mov	r1, sl
 801194c:	f000 fa32 	bl	8011db4 <uxr_get_output_best_effort_stream>
 8011950:	4604      	mov	r4, r0
 8011952:	2800      	cmp	r0, #0
 8011954:	d0ee      	beq.n	8011934 <uxr_prepare_stream_to_write_submessage+0x58>
 8011956:	4649      	mov	r1, r9
 8011958:	4632      	mov	r2, r6
 801195a:	f004 f961 	bl	8015c20 <uxr_prepare_best_effort_buffer_to_write>
 801195e:	4604      	mov	r4, r0
 8011960:	e7e1      	b.n	8011926 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011962:	bf00      	nop

08011964 <uxr_init_session_info>:
 8011964:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011968:	23ff      	movs	r3, #255	@ 0xff
 801196a:	7102      	strb	r2, [r0, #4]
 801196c:	f880 c001 	strb.w	ip, [r0, #1]
 8011970:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011974:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011978:	7001      	strb	r1, [r0, #0]
 801197a:	f880 c002 	strb.w	ip, [r0, #2]
 801197e:	7143      	strb	r3, [r0, #5]
 8011980:	70c2      	strb	r2, [r0, #3]
 8011982:	b500      	push	{lr}
 8011984:	f04f 0e09 	mov.w	lr, #9
 8011988:	f8a0 e006 	strh.w	lr, [r0, #6]
 801198c:	f85d fb04 	ldr.w	pc, [sp], #4

08011990 <uxr_buffer_create_session>:
 8011990:	b530      	push	{r4, r5, lr}
 8011992:	2300      	movs	r3, #0
 8011994:	b089      	sub	sp, #36	@ 0x24
 8011996:	4d12      	ldr	r5, [pc, #72]	@ (80119e0 <uxr_buffer_create_session+0x50>)
 8011998:	460c      	mov	r4, r1
 801199a:	9307      	str	r3, [sp, #28]
 801199c:	4619      	mov	r1, r3
 801199e:	f8ad 201c 	strh.w	r2, [sp, #28]
 80119a2:	2201      	movs	r2, #1
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	80c2      	strh	r2, [r0, #6]
 80119a8:	f88d 2004 	strb.w	r2, [sp, #4]
 80119ac:	682a      	ldr	r2, [r5, #0]
 80119ae:	9303      	str	r3, [sp, #12]
 80119b0:	9200      	str	r2, [sp, #0]
 80119b2:	88aa      	ldrh	r2, [r5, #4]
 80119b4:	9306      	str	r3, [sp, #24]
 80119b6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80119ba:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80119be:	9202      	str	r2, [sp, #8]
 80119c0:	7802      	ldrb	r2, [r0, #0]
 80119c2:	4620      	mov	r0, r4
 80119c4:	f88d 200c 	strb.w	r2, [sp, #12]
 80119c8:	2210      	movs	r2, #16
 80119ca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80119ce:	f000 fa31 	bl	8011e34 <uxr_buffer_submessage_header>
 80119d2:	4669      	mov	r1, sp
 80119d4:	4620      	mov	r0, r4
 80119d6:	f001 f983 	bl	8012ce0 <uxr_serialize_CREATE_CLIENT_Payload>
 80119da:	b009      	add	sp, #36	@ 0x24
 80119dc:	bd30      	pop	{r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	08018e68 	.word	0x08018e68

080119e4 <uxr_buffer_delete_session>:
 80119e4:	4a0c      	ldr	r2, [pc, #48]	@ (8011a18 <uxr_buffer_delete_session+0x34>)
 80119e6:	2302      	movs	r3, #2
 80119e8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80119ec:	b510      	push	{r4, lr}
 80119ee:	460c      	mov	r4, r1
 80119f0:	b082      	sub	sp, #8
 80119f2:	8911      	ldrh	r1, [r2, #8]
 80119f4:	2204      	movs	r2, #4
 80119f6:	80c3      	strh	r3, [r0, #6]
 80119f8:	2300      	movs	r3, #0
 80119fa:	f8ad 1006 	strh.w	r1, [sp, #6]
 80119fe:	4620      	mov	r0, r4
 8011a00:	2103      	movs	r1, #3
 8011a02:	f8ad c004 	strh.w	ip, [sp, #4]
 8011a06:	f000 fa15 	bl	8011e34 <uxr_buffer_submessage_header>
 8011a0a:	a901      	add	r1, sp, #4
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f001 fa0f 	bl	8012e30 <uxr_serialize_DELETE_Payload>
 8011a12:	b002      	add	sp, #8
 8011a14:	bd10      	pop	{r4, pc}
 8011a16:	bf00      	nop
 8011a18:	08018e68 	.word	0x08018e68

08011a1c <uxr_read_create_session_status>:
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	460b      	mov	r3, r1
 8011a20:	b088      	sub	sp, #32
 8011a22:	4604      	mov	r4, r0
 8011a24:	a901      	add	r1, sp, #4
 8011a26:	4618      	mov	r0, r3
 8011a28:	f001 fa12 	bl	8012e50 <uxr_deserialize_STATUS_AGENT_Payload>
 8011a2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a30:	7163      	strb	r3, [r4, #5]
 8011a32:	b008      	add	sp, #32
 8011a34:	bd10      	pop	{r4, pc}
 8011a36:	bf00      	nop

08011a38 <uxr_read_delete_session_status>:
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	4608      	mov	r0, r1
 8011a40:	a902      	add	r1, sp, #8
 8011a42:	f001 fa35 	bl	8012eb0 <uxr_deserialize_STATUS_Payload>
 8011a46:	88e3      	ldrh	r3, [r4, #6]
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d001      	beq.n	8011a50 <uxr_read_delete_session_status+0x18>
 8011a4c:	b004      	add	sp, #16
 8011a4e:	bd10      	pop	{r4, pc}
 8011a50:	f10d 000a 	add.w	r0, sp, #10
 8011a54:	f7fe ffdc 	bl	8010a10 <uxr_object_id_from_raw>
 8011a58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011a5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011a60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d1f0      	bne.n	8011a4c <uxr_read_delete_session_status+0x14>
 8011a6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011a6e:	7163      	strb	r3, [r4, #5]
 8011a70:	e7ec      	b.n	8011a4c <uxr_read_delete_session_status+0x14>
 8011a72:	bf00      	nop

08011a74 <uxr_stamp_create_session_header>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	2208      	movs	r2, #8
 8011a78:	b08a      	sub	sp, #40	@ 0x28
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	eb0d 0002 	add.w	r0, sp, r2
 8011a80:	f7fe fdea 	bl	8010658 <ucdr_init_buffer>
 8011a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a88:	2300      	movs	r3, #0
 8011a8a:	a802      	add	r0, sp, #8
 8011a8c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011a90:	9400      	str	r4, [sp, #0]
 8011a92:	461a      	mov	r2, r3
 8011a94:	f000 fbca 	bl	801222c <uxr_serialize_message_header>
 8011a98:	b00a      	add	sp, #40	@ 0x28
 8011a9a:	bd10      	pop	{r4, pc}

08011a9c <uxr_stamp_session_header>:
 8011a9c:	b530      	push	{r4, r5, lr}
 8011a9e:	b08d      	sub	sp, #52	@ 0x34
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	460d      	mov	r5, r1
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	a804      	add	r0, sp, #16
 8011aa8:	9203      	str	r2, [sp, #12]
 8011aaa:	2208      	movs	r2, #8
 8011aac:	f7fe fdd4 	bl	8010658 <ucdr_init_buffer>
 8011ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab4:	9b03      	ldr	r3, [sp, #12]
 8011ab6:	462a      	mov	r2, r5
 8011ab8:	a804      	add	r0, sp, #16
 8011aba:	9400      	str	r4, [sp, #0]
 8011abc:	f000 fbb6 	bl	801222c <uxr_serialize_message_header>
 8011ac0:	b00d      	add	sp, #52	@ 0x34
 8011ac2:	bd30      	pop	{r4, r5, pc}

08011ac4 <uxr_read_session_header>:
 8011ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac8:	4607      	mov	r7, r0
 8011aca:	b084      	sub	sp, #16
 8011acc:	4608      	mov	r0, r1
 8011ace:	460c      	mov	r4, r1
 8011ad0:	4615      	mov	r5, r2
 8011ad2:	461e      	mov	r6, r3
 8011ad4:	f7fe fdf2 	bl	80106bc <ucdr_buffer_remaining>
 8011ad8:	2808      	cmp	r0, #8
 8011ada:	d803      	bhi.n	8011ae4 <uxr_read_session_header+0x20>
 8011adc:	2000      	movs	r0, #0
 8011ade:	b004      	add	sp, #16
 8011ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae4:	f10d 080c 	add.w	r8, sp, #12
 8011ae8:	4633      	mov	r3, r6
 8011aea:	462a      	mov	r2, r5
 8011aec:	4620      	mov	r0, r4
 8011aee:	f10d 010b 	add.w	r1, sp, #11
 8011af2:	f8cd 8000 	str.w	r8, [sp]
 8011af6:	f000 fbb7 	bl	8012268 <uxr_deserialize_message_header>
 8011afa:	783a      	ldrb	r2, [r7, #0]
 8011afc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d1eb      	bne.n	8011adc <uxr_read_session_header+0x18>
 8011b04:	061b      	lsls	r3, r3, #24
 8011b06:	d41b      	bmi.n	8011b40 <uxr_read_session_header+0x7c>
 8011b08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011b0c:	787b      	ldrb	r3, [r7, #1]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d003      	beq.n	8011b1a <uxr_read_session_header+0x56>
 8011b12:	2001      	movs	r0, #1
 8011b14:	f080 0001 	eor.w	r0, r0, #1
 8011b18:	e7e1      	b.n	8011ade <uxr_read_session_header+0x1a>
 8011b1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011b1e:	1cb8      	adds	r0, r7, #2
 8011b20:	78bb      	ldrb	r3, [r7, #2]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d1f5      	bne.n	8011b12 <uxr_read_session_header+0x4e>
 8011b26:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011b2a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d1ef      	bne.n	8011b12 <uxr_read_session_header+0x4e>
 8011b32:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011b36:	7843      	ldrb	r3, [r0, #1]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d1ea      	bne.n	8011b12 <uxr_read_session_header+0x4e>
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	e7e9      	b.n	8011b14 <uxr_read_session_header+0x50>
 8011b40:	2001      	movs	r0, #1
 8011b42:	e7cc      	b.n	8011ade <uxr_read_session_header+0x1a>

08011b44 <uxr_session_header_offset>:
 8011b44:	f990 3000 	ldrsb.w	r3, [r0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	bfac      	ite	ge
 8011b4c:	2008      	movge	r0, #8
 8011b4e:	2004      	movlt	r0, #4
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop

08011b54 <uxr_init_base_object_request>:
 8011b54:	b510      	push	{r4, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011b5c:	9101      	str	r1, [sp, #4]
 8011b5e:	88c3      	ldrh	r3, [r0, #6]
 8011b60:	f1a3 010a 	sub.w	r1, r3, #10
 8011b64:	b289      	uxth	r1, r1
 8011b66:	42a1      	cmp	r1, r4
 8011b68:	d80f      	bhi.n	8011b8a <uxr_init_base_object_request+0x36>
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	b29c      	uxth	r4, r3
 8011b6e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	80c4      	strh	r4, [r0, #6]
 8011b76:	1c91      	adds	r1, r2, #2
 8011b78:	9801      	ldr	r0, [sp, #4]
 8011b7a:	f882 c000 	strb.w	ip, [r2]
 8011b7e:	7053      	strb	r3, [r2, #1]
 8011b80:	f7fe ff5a 	bl	8010a38 <uxr_object_id_to_raw>
 8011b84:	4620      	mov	r0, r4
 8011b86:	b002      	add	sp, #8
 8011b88:	bd10      	pop	{r4, pc}
 8011b8a:	230a      	movs	r3, #10
 8011b8c:	f04f 0c00 	mov.w	ip, #0
 8011b90:	461c      	mov	r4, r3
 8011b92:	e7ef      	b.n	8011b74 <uxr_init_base_object_request+0x20>

08011b94 <uxr_parse_base_object_request>:
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	4604      	mov	r4, r0
 8011b98:	3002      	adds	r0, #2
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	4616      	mov	r6, r2
 8011b9e:	f7fe ff37 	bl	8010a10 <uxr_object_id_from_raw>
 8011ba2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011ba6:	8028      	strh	r0, [r5, #0]
 8011ba8:	806b      	strh	r3, [r5, #2]
 8011baa:	7822      	ldrb	r2, [r4, #0]
 8011bac:	7863      	ldrb	r3, [r4, #1]
 8011bae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011bb2:	8033      	strh	r3, [r6, #0]
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
 8011bb6:	bf00      	nop

08011bb8 <uxr_stream_id>:
 8011bb8:	2901      	cmp	r1, #1
 8011bba:	4684      	mov	ip, r0
 8011bbc:	b500      	push	{lr}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	d01f      	beq.n	8011c02 <uxr_stream_id+0x4a>
 8011bc2:	2902      	cmp	r1, #2
 8011bc4:	f04f 0e00 	mov.w	lr, #0
 8011bc8:	d020      	beq.n	8011c0c <uxr_stream_id+0x54>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f36e 0307 	bfi	r3, lr, #0, #8
 8011bd2:	f36c 230f 	bfi	r3, ip, #8, #8
 8011bd6:	f361 4317 	bfi	r3, r1, #16, #8
 8011bda:	f362 631f 	bfi	r3, r2, #24, #8
 8011bde:	fa5f fc83 	uxtb.w	ip, r3
 8011be2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011be6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011bea:	0e1b      	lsrs	r3, r3, #24
 8011bec:	f36c 0007 	bfi	r0, ip, #0, #8
 8011bf0:	f361 200f 	bfi	r0, r1, #8, #8
 8011bf4:	f362 4017 	bfi	r0, r2, #16, #8
 8011bf8:	f363 601f 	bfi	r0, r3, #24, #8
 8011bfc:	b003      	add	sp, #12
 8011bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c02:	f100 0e01 	add.w	lr, r0, #1
 8011c06:	fa5f fe8e 	uxtb.w	lr, lr
 8011c0a:	e7de      	b.n	8011bca <uxr_stream_id+0x12>
 8011c0c:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8011c10:	e7db      	b.n	8011bca <uxr_stream_id+0x12>
 8011c12:	bf00      	nop

08011c14 <uxr_stream_id_from_raw>:
 8011c14:	b082      	sub	sp, #8
 8011c16:	b130      	cbz	r0, 8011c26 <uxr_stream_id_from_raw+0x12>
 8011c18:	0603      	lsls	r3, r0, #24
 8011c1a:	d421      	bmi.n	8011c60 <uxr_stream_id_from_raw+0x4c>
 8011c1c:	1e42      	subs	r2, r0, #1
 8011c1e:	f04f 0c01 	mov.w	ip, #1
 8011c22:	b2d2      	uxtb	r2, r2
 8011c24:	e001      	b.n	8011c2a <uxr_stream_id_from_raw+0x16>
 8011c26:	4684      	mov	ip, r0
 8011c28:	4602      	mov	r2, r0
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f360 0307 	bfi	r3, r0, #0, #8
 8011c30:	2000      	movs	r0, #0
 8011c32:	f362 230f 	bfi	r3, r2, #8, #8
 8011c36:	f36c 4317 	bfi	r3, ip, #16, #8
 8011c3a:	f361 631f 	bfi	r3, r1, #24, #8
 8011c3e:	fa5f fc83 	uxtb.w	ip, r3
 8011c42:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011c46:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011c4a:	0e1b      	lsrs	r3, r3, #24
 8011c4c:	f36c 0007 	bfi	r0, ip, #0, #8
 8011c50:	f361 200f 	bfi	r0, r1, #8, #8
 8011c54:	f362 4017 	bfi	r0, r2, #16, #8
 8011c58:	f363 601f 	bfi	r0, r3, #24, #8
 8011c5c:	b002      	add	sp, #8
 8011c5e:	4770      	bx	lr
 8011c60:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011c64:	f04f 0c02 	mov.w	ip, #2
 8011c68:	e7df      	b.n	8011c2a <uxr_stream_id_from_raw+0x16>
 8011c6a:	bf00      	nop

08011c6c <uxr_init_stream_storage>:
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	7403      	strb	r3, [r0, #16]
 8011c70:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011c74:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011c78:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop

08011c80 <uxr_reset_stream_storage>:
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	7c03      	ldrb	r3, [r0, #16]
 8011c84:	4604      	mov	r4, r0
 8011c86:	b14b      	cbz	r3, 8011c9c <uxr_reset_stream_storage+0x1c>
 8011c88:	4606      	mov	r6, r0
 8011c8a:	2500      	movs	r5, #0
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	3501      	adds	r5, #1
 8011c90:	f003 ffc0 	bl	8015c14 <uxr_reset_output_best_effort_stream>
 8011c94:	7c23      	ldrb	r3, [r4, #16]
 8011c96:	3610      	adds	r6, #16
 8011c98:	42ab      	cmp	r3, r5
 8011c9a:	d8f7      	bhi.n	8011c8c <uxr_reset_stream_storage+0xc>
 8011c9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011ca0:	b15b      	cbz	r3, 8011cba <uxr_reset_stream_storage+0x3a>
 8011ca2:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ca6:	2500      	movs	r5, #0
 8011ca8:	4630      	mov	r0, r6
 8011caa:	3501      	adds	r5, #1
 8011cac:	f003 fdb8 	bl	8015820 <uxr_reset_input_best_effort_stream>
 8011cb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011cb4:	3602      	adds	r6, #2
 8011cb6:	42ab      	cmp	r3, r5
 8011cb8:	d8f6      	bhi.n	8011ca8 <uxr_reset_stream_storage+0x28>
 8011cba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011cbe:	b15b      	cbz	r3, 8011cd8 <uxr_reset_stream_storage+0x58>
 8011cc0:	f104 0618 	add.w	r6, r4, #24
 8011cc4:	2500      	movs	r5, #0
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	3501      	adds	r5, #1
 8011cca:	f004 f851 	bl	8015d70 <uxr_reset_output_reliable_stream>
 8011cce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011cd2:	3628      	adds	r6, #40	@ 0x28
 8011cd4:	42ab      	cmp	r3, r5
 8011cd6:	d8f6      	bhi.n	8011cc6 <uxr_reset_stream_storage+0x46>
 8011cd8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011cdc:	b15b      	cbz	r3, 8011cf6 <uxr_reset_stream_storage+0x76>
 8011cde:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	3501      	adds	r5, #1
 8011ce8:	f003 fe06 	bl	80158f8 <uxr_reset_input_reliable_stream>
 8011cec:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011cf0:	3618      	adds	r6, #24
 8011cf2:	42ab      	cmp	r3, r5
 8011cf4:	d8f6      	bhi.n	8011ce4 <uxr_reset_stream_storage+0x64>
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}

08011cf8 <uxr_add_output_best_effort_buffer>:
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	7c04      	ldrb	r4, [r0, #16]
 8011cfc:	b082      	sub	sp, #8
 8011cfe:	f104 0c01 	add.w	ip, r4, #1
 8011d02:	f880 c010 	strb.w	ip, [r0, #16]
 8011d06:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011d0a:	f003 ff79 	bl	8015c00 <uxr_init_output_best_effort_stream>
 8011d0e:	2201      	movs	r2, #1
 8011d10:	4620      	mov	r0, r4
 8011d12:	4611      	mov	r1, r2
 8011d14:	b002      	add	sp, #8
 8011d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d1a:	f7ff bf4d 	b.w	8011bb8 <uxr_stream_id>
 8011d1e:	bf00      	nop

08011d20 <uxr_add_output_reliable_buffer>:
 8011d20:	b510      	push	{r4, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	4684      	mov	ip, r0
 8011d26:	2028      	movs	r0, #40	@ 0x28
 8011d28:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011d2c:	9400      	str	r4, [sp, #0]
 8011d2e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011d32:	fb00 c004 	mla	r0, r0, r4, ip
 8011d36:	f104 0e01 	add.w	lr, r4, #1
 8011d3a:	3018      	adds	r0, #24
 8011d3c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011d40:	f003 ffde 	bl	8015d00 <uxr_init_output_reliable_stream>
 8011d44:	2201      	movs	r2, #1
 8011d46:	2102      	movs	r1, #2
 8011d48:	4620      	mov	r0, r4
 8011d4a:	b004      	add	sp, #16
 8011d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d50:	f7ff bf32 	b.w	8011bb8 <uxr_stream_id>

08011d54 <uxr_add_input_best_effort_buffer>:
 8011d54:	b510      	push	{r4, lr}
 8011d56:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	1c62      	adds	r2, r4, #1
 8011d5e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011d62:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011d66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011d6a:	f003 fd55 	bl	8015818 <uxr_init_input_best_effort_stream>
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2101      	movs	r1, #1
 8011d72:	4620      	mov	r0, r4
 8011d74:	b002      	add	sp, #8
 8011d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d7a:	f7ff bf1d 	b.w	8011bb8 <uxr_stream_id>
 8011d7e:	bf00      	nop

08011d80 <uxr_add_input_reliable_buffer>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	4684      	mov	ip, r0
 8011d86:	2018      	movs	r0, #24
 8011d88:	9c06      	ldr	r4, [sp, #24]
 8011d8a:	9400      	str	r4, [sp, #0]
 8011d8c:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011d90:	fb00 c004 	mla	r0, r0, r4, ip
 8011d94:	f104 0e01 	add.w	lr, r4, #1
 8011d98:	3048      	adds	r0, #72	@ 0x48
 8011d9a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011d9e:	f003 fd85 	bl	80158ac <uxr_init_input_reliable_stream>
 8011da2:	2200      	movs	r2, #0
 8011da4:	2102      	movs	r1, #2
 8011da6:	4620      	mov	r0, r4
 8011da8:	b004      	add	sp, #16
 8011daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dae:	f7ff bf03 	b.w	8011bb8 <uxr_stream_id>
 8011db2:	bf00      	nop

08011db4 <uxr_get_output_best_effort_stream>:
 8011db4:	7c03      	ldrb	r3, [r0, #16]
 8011db6:	428b      	cmp	r3, r1
 8011db8:	bf8c      	ite	hi
 8011dba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011dbe:	2000      	movls	r0, #0
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop

08011dc4 <uxr_get_output_reliable_stream>:
 8011dc4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011dc8:	428b      	cmp	r3, r1
 8011dca:	d904      	bls.n	8011dd6 <uxr_get_output_reliable_stream+0x12>
 8011dcc:	2328      	movs	r3, #40	@ 0x28
 8011dce:	fb03 0001 	mla	r0, r3, r1, r0
 8011dd2:	3018      	adds	r0, #24
 8011dd4:	4770      	bx	lr
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop

08011ddc <uxr_get_input_best_effort_stream>:
 8011ddc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011de0:	428b      	cmp	r3, r1
 8011de2:	d903      	bls.n	8011dec <uxr_get_input_best_effort_stream+0x10>
 8011de4:	3121      	adds	r1, #33	@ 0x21
 8011de6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011dea:	4770      	bx	lr
 8011dec:	2000      	movs	r0, #0
 8011dee:	4770      	bx	lr

08011df0 <uxr_get_input_reliable_stream>:
 8011df0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011df4:	428b      	cmp	r3, r1
 8011df6:	d904      	bls.n	8011e02 <uxr_get_input_reliable_stream+0x12>
 8011df8:	2318      	movs	r3, #24
 8011dfa:	fb03 0001 	mla	r0, r3, r1, r0
 8011dfe:	3048      	adds	r0, #72	@ 0x48
 8011e00:	4770      	bx	lr
 8011e02:	2000      	movs	r0, #0
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop

08011e08 <uxr_output_streams_confirmed>:
 8011e08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011e0c:	b183      	cbz	r3, 8011e30 <uxr_output_streams_confirmed+0x28>
 8011e0e:	b570      	push	{r4, r5, r6, lr}
 8011e10:	4606      	mov	r6, r0
 8011e12:	f100 0518 	add.w	r5, r0, #24
 8011e16:	2400      	movs	r4, #0
 8011e18:	e000      	b.n	8011e1c <uxr_output_streams_confirmed+0x14>
 8011e1a:	b140      	cbz	r0, 8011e2e <uxr_output_streams_confirmed+0x26>
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	3401      	adds	r4, #1
 8011e20:	f004 fa1a 	bl	8016258 <uxr_is_output_up_to_date>
 8011e24:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011e28:	3528      	adds	r5, #40	@ 0x28
 8011e2a:	42a3      	cmp	r3, r4
 8011e2c:	d8f5      	bhi.n	8011e1a <uxr_output_streams_confirmed+0x12>
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
 8011e30:	2001      	movs	r0, #1
 8011e32:	4770      	bx	lr

08011e34 <uxr_buffer_submessage_header>:
 8011e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e36:	460e      	mov	r6, r1
 8011e38:	2104      	movs	r1, #4
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	4615      	mov	r5, r2
 8011e3e:	461f      	mov	r7, r3
 8011e40:	f7fe fc26 	bl	8010690 <ucdr_align_to>
 8011e44:	2301      	movs	r3, #1
 8011e46:	4631      	mov	r1, r6
 8011e48:	4620      	mov	r0, r4
 8011e4a:	ea47 0203 	orr.w	r2, r7, r3
 8011e4e:	7523      	strb	r3, [r4, #20]
 8011e50:	462b      	mov	r3, r5
 8011e52:	f000 fa29 	bl	80122a8 <uxr_serialize_submessage_header>
 8011e56:	4620      	mov	r0, r4
 8011e58:	f7fe fc30 	bl	80106bc <ucdr_buffer_remaining>
 8011e5c:	42a8      	cmp	r0, r5
 8011e5e:	bf34      	ite	cc
 8011e60:	2000      	movcc	r0, #0
 8011e62:	2001      	movcs	r0, #1
 8011e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e66:	bf00      	nop

08011e68 <uxr_read_submessage_header>:
 8011e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	460d      	mov	r5, r1
 8011e70:	2104      	movs	r1, #4
 8011e72:	4616      	mov	r6, r2
 8011e74:	4698      	mov	r8, r3
 8011e76:	f7fe fc0b 	bl	8010690 <ucdr_align_to>
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f7fe fc1e 	bl	80106bc <ucdr_buffer_remaining>
 8011e80:	2803      	cmp	r0, #3
 8011e82:	bf8c      	ite	hi
 8011e84:	2701      	movhi	r7, #1
 8011e86:	2700      	movls	r7, #0
 8011e88:	d802      	bhi.n	8011e90 <uxr_read_submessage_header+0x28>
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e90:	4633      	mov	r3, r6
 8011e92:	4642      	mov	r2, r8
 8011e94:	4620      	mov	r0, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	f000 fa1a 	bl	80122d0 <uxr_deserialize_submessage_header>
 8011e9c:	f898 3000 	ldrb.w	r3, [r8]
 8011ea0:	4638      	mov	r0, r7
 8011ea2:	f003 0201 	and.w	r2, r3, #1
 8011ea6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011eaa:	f888 3000 	strb.w	r3, [r8]
 8011eae:	7522      	strb	r2, [r4, #20]
 8011eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011eb4 <uxr_submessage_padding>:
 8011eb4:	f010 0003 	ands.w	r0, r0, #3
 8011eb8:	bf18      	it	ne
 8011eba:	f1c0 0004 	rsbne	r0, r0, #4
 8011ebe:	4770      	bx	lr

08011ec0 <uxr_millis>:
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	2001      	movs	r0, #1
 8011ec6:	4669      	mov	r1, sp
 8011ec8:	f7ef fc66 	bl	8001798 <clock_gettime>
 8011ecc:	4908      	ldr	r1, [pc, #32]	@ (8011ef0 <uxr_millis+0x30>)
 8011ece:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011ed2:	fba0 0301 	umull	r0, r3, r0, r1
 8011ed6:	1900      	adds	r0, r0, r4
 8011ed8:	fb01 3102 	mla	r1, r1, r2, r3
 8011edc:	4a05      	ldr	r2, [pc, #20]	@ (8011ef4 <uxr_millis+0x34>)
 8011ede:	f04f 0300 	mov.w	r3, #0
 8011ee2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011ee6:	f7ee fa63 	bl	80003b0 <__aeabi_ldivmod>
 8011eea:	b004      	add	sp, #16
 8011eec:	bd10      	pop	{r4, pc}
 8011eee:	bf00      	nop
 8011ef0:	3b9aca00 	.word	0x3b9aca00
 8011ef4:	000f4240 	.word	0x000f4240

08011ef8 <uxr_nanos>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	2001      	movs	r0, #1
 8011efe:	4669      	mov	r1, sp
 8011f00:	f7ef fc4a 	bl	8001798 <clock_gettime>
 8011f04:	4a06      	ldr	r2, [pc, #24]	@ (8011f20 <uxr_nanos+0x28>)
 8011f06:	9800      	ldr	r0, [sp, #0]
 8011f08:	9902      	ldr	r1, [sp, #8]
 8011f0a:	fba0 0302 	umull	r0, r3, r0, r2
 8011f0e:	9c01      	ldr	r4, [sp, #4]
 8011f10:	1840      	adds	r0, r0, r1
 8011f12:	fb02 3304 	mla	r3, r2, r4, r3
 8011f16:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011f1a:	b004      	add	sp, #16
 8011f1c:	bd10      	pop	{r4, pc}
 8011f1e:	bf00      	nop
 8011f20:	3b9aca00 	.word	0x3b9aca00

08011f24 <on_full_output_buffer_fragmented>:
 8011f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f28:	460c      	mov	r4, r1
 8011f2a:	b08a      	sub	sp, #40	@ 0x28
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011f32:	f104 0008 	add.w	r0, r4, #8
 8011f36:	f7ff ff45 	bl	8011dc4 <uxr_get_output_reliable_stream>
 8011f3a:	4605      	mov	r5, r0
 8011f3c:	f004 f996 	bl	801626c <get_available_free_slots>
 8011f40:	b968      	cbnz	r0, 8011f5e <on_full_output_buffer_fragmented+0x3a>
 8011f42:	4620      	mov	r0, r4
 8011f44:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011f48:	4798      	blx	r3
 8011f4a:	b918      	cbnz	r0, 8011f54 <on_full_output_buffer_fragmented+0x30>
 8011f4c:	2001      	movs	r0, #1
 8011f4e:	b00a      	add	sp, #40	@ 0x28
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	4628      	mov	r0, r5
 8011f56:	f004 f989 	bl	801626c <get_available_free_slots>
 8011f5a:	2800      	cmp	r0, #0
 8011f5c:	d0f6      	beq.n	8011f4c <on_full_output_buffer_fragmented+0x28>
 8011f5e:	8929      	ldrh	r1, [r5, #8]
 8011f60:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8011f64:	89eb      	ldrh	r3, [r5, #14]
 8011f66:	7b28      	ldrb	r0, [r5, #12]
 8011f68:	686f      	ldr	r7, [r5, #4]
 8011f6a:	1a12      	subs	r2, r2, r0
 8011f6c:	fbb3 f0f1 	udiv	r0, r3, r1
 8011f70:	fbb7 f7f1 	udiv	r7, r7, r1
 8011f74:	fb01 3110 	mls	r1, r1, r0, r3
 8011f78:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011f7c:	b289      	uxth	r1, r1
 8011f7e:	fb07 f101 	mul.w	r1, r7, r1
 8011f82:	3f04      	subs	r7, #4
 8011f84:	443a      	add	r2, r7
 8011f86:	3104      	adds	r1, #4
 8011f88:	fa1f f882 	uxth.w	r8, r2
 8011f8c:	463a      	mov	r2, r7
 8011f8e:	eba3 0308 	sub.w	r3, r3, r8
 8011f92:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011f96:	682b      	ldr	r3, [r5, #0]
 8011f98:	4419      	add	r1, r3
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011fa0:	9000      	str	r0, [sp, #0]
 8011fa2:	a802      	add	r0, sp, #8
 8011fa4:	f7fe fb46 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8011fa8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011fac:	f102 0308 	add.w	r3, r2, #8
 8011fb0:	42bb      	cmp	r3, r7
 8011fb2:	d927      	bls.n	8012004 <on_full_output_buffer_fragmented+0xe0>
 8011fb4:	4642      	mov	r2, r8
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	210d      	movs	r1, #13
 8011fba:	a802      	add	r0, sp, #8
 8011fbc:	f7ff ff3a 	bl	8011e34 <uxr_buffer_submessage_header>
 8011fc0:	8929      	ldrh	r1, [r5, #8]
 8011fc2:	89eb      	ldrh	r3, [r5, #14]
 8011fc4:	686a      	ldr	r2, [r5, #4]
 8011fc6:	fbb3 f0f1 	udiv	r0, r3, r1
 8011fca:	fbb2 f2f1 	udiv	r2, r2, r1
 8011fce:	fb01 3310 	mls	r3, r1, r0, r3
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	fb02 f303 	mul.w	r3, r2, r3
 8011fd8:	682a      	ldr	r2, [r5, #0]
 8011fda:	50d7      	str	r7, [r2, r3]
 8011fdc:	2101      	movs	r1, #1
 8011fde:	89e8      	ldrh	r0, [r5, #14]
 8011fe0:	f004 fa5c 	bl	801649c <uxr_seq_num_add>
 8011fe4:	9904      	ldr	r1, [sp, #16]
 8011fe6:	9a03      	ldr	r2, [sp, #12]
 8011fe8:	81e8      	strh	r0, [r5, #14]
 8011fea:	4630      	mov	r0, r6
 8011fec:	1a52      	subs	r2, r2, r1
 8011fee:	f7fe fb33 	bl	8010658 <ucdr_init_buffer>
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	4622      	mov	r2, r4
 8011ff6:	490f      	ldr	r1, [pc, #60]	@ (8012034 <on_full_output_buffer_fragmented+0x110>)
 8011ff8:	f7fe fb02 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	b00a      	add	sp, #40	@ 0x28
 8012000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012004:	b292      	uxth	r2, r2
 8012006:	2302      	movs	r3, #2
 8012008:	210d      	movs	r1, #13
 801200a:	a802      	add	r0, sp, #8
 801200c:	f7ff ff12 	bl	8011e34 <uxr_buffer_submessage_header>
 8012010:	8928      	ldrh	r0, [r5, #8]
 8012012:	89eb      	ldrh	r3, [r5, #14]
 8012014:	6869      	ldr	r1, [r5, #4]
 8012016:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801201a:	fbb3 f7f0 	udiv	r7, r3, r0
 801201e:	fbb1 f1f0 	udiv	r1, r1, r0
 8012022:	fb00 3317 	mls	r3, r0, r7, r3
 8012026:	3208      	adds	r2, #8
 8012028:	b29b      	uxth	r3, r3
 801202a:	fb01 f303 	mul.w	r3, r1, r3
 801202e:	6829      	ldr	r1, [r5, #0]
 8012030:	50ca      	str	r2, [r1, r3]
 8012032:	e7d3      	b.n	8011fdc <on_full_output_buffer_fragmented+0xb8>
 8012034:	08011f25 	.word	0x08011f25

08012038 <uxr_prepare_output_stream>:
 8012038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801203a:	b087      	sub	sp, #28
 801203c:	2707      	movs	r7, #7
 801203e:	2500      	movs	r5, #0
 8012040:	461c      	mov	r4, r3
 8012042:	4606      	mov	r6, r0
 8012044:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012048:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801204a:	e9cd 7500 	strd	r7, r5, [sp]
 801204e:	3204      	adds	r2, #4
 8012050:	f7ff fc44 	bl	80118dc <uxr_prepare_stream_to_write_submessage>
 8012054:	f080 0201 	eor.w	r2, r0, #1
 8012058:	b2d2      	uxtb	r2, r2
 801205a:	75a2      	strb	r2, [r4, #22]
 801205c:	b112      	cbz	r2, 8012064 <uxr_prepare_output_stream+0x2c>
 801205e:	4628      	mov	r0, r5
 8012060:	b007      	add	sp, #28
 8012062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012064:	aa05      	add	r2, sp, #20
 8012066:	9902      	ldr	r1, [sp, #8]
 8012068:	4630      	mov	r0, r6
 801206a:	f7ff fd73 	bl	8011b54 <uxr_init_base_object_request>
 801206e:	a905      	add	r1, sp, #20
 8012070:	4605      	mov	r5, r0
 8012072:	4620      	mov	r0, r4
 8012074:	f000 ff9c 	bl	8012fb0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012078:	69a6      	ldr	r6, [r4, #24]
 801207a:	69e7      	ldr	r7, [r4, #28]
 801207c:	4620      	mov	r0, r4
 801207e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012082:	1a52      	subs	r2, r2, r1
 8012084:	f7fe fae8 	bl	8010658 <ucdr_init_buffer>
 8012088:	4620      	mov	r0, r4
 801208a:	463a      	mov	r2, r7
 801208c:	4631      	mov	r1, r6
 801208e:	f7fe fab7 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8012092:	4628      	mov	r0, r5
 8012094:	b007      	add	sp, #28
 8012096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012098 <uxr_prepare_output_stream_fragmented>:
 8012098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209c:	b091      	sub	sp, #68	@ 0x44
 801209e:	4605      	mov	r5, r0
 80120a0:	3008      	adds	r0, #8
 80120a2:	461e      	mov	r6, r3
 80120a4:	9105      	str	r1, [sp, #20]
 80120a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80120aa:	9204      	str	r2, [sp, #16]
 80120ac:	f7ff fe8a 	bl	8011dc4 <uxr_get_output_reliable_stream>
 80120b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	f000 8093 	beq.w	80121e0 <uxr_prepare_output_stream_fragmented+0x148>
 80120ba:	4604      	mov	r4, r0
 80120bc:	2800      	cmp	r0, #0
 80120be:	f000 808f 	beq.w	80121e0 <uxr_prepare_output_stream_fragmented+0x148>
 80120c2:	f004 f8d3 	bl	801626c <get_available_free_slots>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	f000 8085 	beq.w	80121d6 <uxr_prepare_output_stream_fragmented+0x13e>
 80120cc:	8923      	ldrh	r3, [r4, #8]
 80120ce:	89e7      	ldrh	r7, [r4, #14]
 80120d0:	6862      	ldr	r2, [r4, #4]
 80120d2:	fbb7 f9f3 	udiv	r9, r7, r3
 80120d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80120da:	fb03 7919 	mls	r9, r3, r9, r7
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	f1a2 0b04 	sub.w	fp, r2, #4
 80120e4:	9203      	str	r2, [sp, #12]
 80120e6:	fa1f f989 	uxth.w	r9, r9
 80120ea:	fb02 f909 	mul.w	r9, r2, r9
 80120ee:	f109 0904 	add.w	r9, r9, #4
 80120f2:	4499      	add	r9, r3
 80120f4:	7b23      	ldrb	r3, [r4, #12]
 80120f6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80120fa:	4543      	cmp	r3, r8
 80120fc:	d37c      	bcc.n	80121f8 <uxr_prepare_output_stream_fragmented+0x160>
 80120fe:	f1ab 0a04 	sub.w	sl, fp, #4
 8012102:	465a      	mov	r2, fp
 8012104:	4649      	mov	r1, r9
 8012106:	a808      	add	r0, sp, #32
 8012108:	ebaa 0a03 	sub.w	sl, sl, r3
 801210c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801210e:	f8cd 8000 	str.w	r8, [sp]
 8012112:	3308      	adds	r3, #8
 8012114:	fa1f fa8a 	uxth.w	sl, sl
 8012118:	9302      	str	r3, [sp, #8]
 801211a:	2300      	movs	r3, #0
 801211c:	f7fe fa8a 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8012120:	9b02      	ldr	r3, [sp, #8]
 8012122:	4652      	mov	r2, sl
 8012124:	210d      	movs	r1, #13
 8012126:	455b      	cmp	r3, fp
 8012128:	bf34      	ite	cc
 801212a:	2302      	movcc	r3, #2
 801212c:	2300      	movcs	r3, #0
 801212e:	a808      	add	r0, sp, #32
 8012130:	f7ff fe80 	bl	8011e34 <uxr_buffer_submessage_header>
 8012134:	8921      	ldrh	r1, [r4, #8]
 8012136:	6863      	ldr	r3, [r4, #4]
 8012138:	4638      	mov	r0, r7
 801213a:	fbb7 f2f1 	udiv	r2, r7, r1
 801213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012142:	fb01 7212 	mls	r2, r1, r2, r7
 8012146:	2101      	movs	r1, #1
 8012148:	b292      	uxth	r2, r2
 801214a:	fb02 f303 	mul.w	r3, r2, r3
 801214e:	6822      	ldr	r2, [r4, #0]
 8012150:	f842 b003 	str.w	fp, [r2, r3]
 8012154:	f004 f9a2 	bl	801649c <uxr_seq_num_add>
 8012158:	9b03      	ldr	r3, [sp, #12]
 801215a:	f108 0104 	add.w	r1, r8, #4
 801215e:	4607      	mov	r7, r0
 8012160:	f1a3 0208 	sub.w	r2, r3, #8
 8012164:	4630      	mov	r0, r6
 8012166:	4449      	add	r1, r9
 8012168:	eba2 0208 	sub.w	r2, r2, r8
 801216c:	f7fe fa74 	bl	8010658 <ucdr_init_buffer>
 8012170:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012172:	2107      	movs	r1, #7
 8012174:	81e7      	strh	r7, [r4, #14]
 8012176:	1d1a      	adds	r2, r3, #4
 8012178:	2300      	movs	r3, #0
 801217a:	4630      	mov	r0, r6
 801217c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012180:	bf28      	it	cs
 8012182:	461a      	movcs	r2, r3
 8012184:	b292      	uxth	r2, r2
 8012186:	f7ff fe55 	bl	8011e34 <uxr_buffer_submessage_header>
 801218a:	aa07      	add	r2, sp, #28
 801218c:	9904      	ldr	r1, [sp, #16]
 801218e:	4628      	mov	r0, r5
 8012190:	f7ff fce0 	bl	8011b54 <uxr_init_base_object_request>
 8012194:	4604      	mov	r4, r0
 8012196:	b320      	cbz	r0, 80121e2 <uxr_prepare_output_stream_fragmented+0x14a>
 8012198:	a907      	add	r1, sp, #28
 801219a:	4630      	mov	r0, r6
 801219c:	f000 ff08 	bl	8012fb0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80121a0:	4630      	mov	r0, r6
 80121a2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80121a6:	1a52      	subs	r2, r2, r1
 80121a8:	f7fe fa56 	bl	8010658 <ucdr_init_buffer>
 80121ac:	9b05      	ldr	r3, [sp, #20]
 80121ae:	9a02      	ldr	r2, [sp, #8]
 80121b0:	4630      	mov	r0, r6
 80121b2:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80121b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80121b8:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80121bc:	462a      	mov	r2, r5
 80121be:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80121c2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80121c4:	4918      	ldr	r1, [pc, #96]	@ (8012228 <uxr_prepare_output_stream_fragmented+0x190>)
 80121c6:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80121ca:	f7fe fa19 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 80121ce:	4620      	mov	r0, r4
 80121d0:	b011      	add	sp, #68	@ 0x44
 80121d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80121d8:	4628      	mov	r0, r5
 80121da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80121dc:	4798      	blx	r3
 80121de:	b920      	cbnz	r0, 80121ea <uxr_prepare_output_stream_fragmented+0x152>
 80121e0:	2400      	movs	r4, #0
 80121e2:	4620      	mov	r0, r4
 80121e4:	b011      	add	sp, #68	@ 0x44
 80121e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ea:	4620      	mov	r0, r4
 80121ec:	f004 f83e 	bl	801626c <get_available_free_slots>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	f47f af6b 	bne.w	80120cc <uxr_prepare_output_stream_fragmented+0x34>
 80121f6:	e7f3      	b.n	80121e0 <uxr_prepare_output_stream_fragmented+0x148>
 80121f8:	4638      	mov	r0, r7
 80121fa:	2101      	movs	r1, #1
 80121fc:	f004 f94e 	bl	801649c <uxr_seq_num_add>
 8012200:	8922      	ldrh	r2, [r4, #8]
 8012202:	6863      	ldr	r3, [r4, #4]
 8012204:	4607      	mov	r7, r0
 8012206:	fbb3 f9f2 	udiv	r9, r3, r2
 801220a:	fbb0 f3f2 	udiv	r3, r0, r2
 801220e:	fb02 0313 	mls	r3, r2, r3, r0
 8012212:	b29b      	uxth	r3, r3
 8012214:	fb03 f909 	mul.w	r9, r3, r9
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	f109 0904 	add.w	r9, r9, #4
 801221e:	4499      	add	r9, r3
 8012220:	7b23      	ldrb	r3, [r4, #12]
 8012222:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012226:	e76a      	b.n	80120fe <uxr_prepare_output_stream_fragmented+0x66>
 8012228:	08011f25 	.word	0x08011f25

0801222c <uxr_serialize_message_header>:
 801222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801222e:	4616      	mov	r6, r2
 8012230:	b083      	sub	sp, #12
 8012232:	4604      	mov	r4, r0
 8012234:	460d      	mov	r5, r1
 8012236:	9301      	str	r3, [sp, #4]
 8012238:	9f08      	ldr	r7, [sp, #32]
 801223a:	f7fd fa61 	bl	800f700 <ucdr_serialize_uint8_t>
 801223e:	4631      	mov	r1, r6
 8012240:	4620      	mov	r0, r4
 8012242:	f7fd fa5d 	bl	800f700 <ucdr_serialize_uint8_t>
 8012246:	9a01      	ldr	r2, [sp, #4]
 8012248:	2101      	movs	r1, #1
 801224a:	4620      	mov	r0, r4
 801224c:	f7fd fb04 	bl	800f858 <ucdr_serialize_endian_uint16_t>
 8012250:	062b      	lsls	r3, r5, #24
 8012252:	d501      	bpl.n	8012258 <uxr_serialize_message_header+0x2c>
 8012254:	b003      	add	sp, #12
 8012256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012258:	2204      	movs	r2, #4
 801225a:	4639      	mov	r1, r7
 801225c:	4620      	mov	r0, r4
 801225e:	b003      	add	sp, #12
 8012260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012264:	f003 b8de 	b.w	8015424 <ucdr_serialize_array_uint8_t>

08012268 <uxr_deserialize_message_header>:
 8012268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801226a:	4616      	mov	r6, r2
 801226c:	b083      	sub	sp, #12
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	9301      	str	r3, [sp, #4]
 8012274:	9f08      	ldr	r7, [sp, #32]
 8012276:	f7fd fa59 	bl	800f72c <ucdr_deserialize_uint8_t>
 801227a:	4631      	mov	r1, r6
 801227c:	4620      	mov	r0, r4
 801227e:	f7fd fa55 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012282:	9a01      	ldr	r2, [sp, #4]
 8012284:	2101      	movs	r1, #1
 8012286:	4620      	mov	r0, r4
 8012288:	f7fd fbda 	bl	800fa40 <ucdr_deserialize_endian_uint16_t>
 801228c:	f995 3000 	ldrsb.w	r3, [r5]
 8012290:	2b00      	cmp	r3, #0
 8012292:	da01      	bge.n	8012298 <uxr_deserialize_message_header+0x30>
 8012294:	b003      	add	sp, #12
 8012296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012298:	2204      	movs	r2, #4
 801229a:	4639      	mov	r1, r7
 801229c:	4620      	mov	r0, r4
 801229e:	b003      	add	sp, #12
 80122a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80122a4:	f003 b922 	b.w	80154ec <ucdr_deserialize_array_uint8_t>

080122a8 <uxr_serialize_submessage_header>:
 80122a8:	b530      	push	{r4, r5, lr}
 80122aa:	4615      	mov	r5, r2
 80122ac:	b083      	sub	sp, #12
 80122ae:	4604      	mov	r4, r0
 80122b0:	9301      	str	r3, [sp, #4]
 80122b2:	f7fd fa25 	bl	800f700 <ucdr_serialize_uint8_t>
 80122b6:	4629      	mov	r1, r5
 80122b8:	4620      	mov	r0, r4
 80122ba:	f7fd fa21 	bl	800f700 <ucdr_serialize_uint8_t>
 80122be:	9a01      	ldr	r2, [sp, #4]
 80122c0:	2101      	movs	r1, #1
 80122c2:	4620      	mov	r0, r4
 80122c4:	b003      	add	sp, #12
 80122c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122ca:	f7fd bac5 	b.w	800f858 <ucdr_serialize_endian_uint16_t>
 80122ce:	bf00      	nop

080122d0 <uxr_deserialize_submessage_header>:
 80122d0:	b530      	push	{r4, r5, lr}
 80122d2:	4615      	mov	r5, r2
 80122d4:	b083      	sub	sp, #12
 80122d6:	4604      	mov	r4, r0
 80122d8:	9301      	str	r3, [sp, #4]
 80122da:	f7fd fa27 	bl	800f72c <ucdr_deserialize_uint8_t>
 80122de:	4629      	mov	r1, r5
 80122e0:	4620      	mov	r0, r4
 80122e2:	f7fd fa23 	bl	800f72c <ucdr_deserialize_uint8_t>
 80122e6:	9a01      	ldr	r2, [sp, #4]
 80122e8:	2101      	movs	r1, #1
 80122ea:	4620      	mov	r0, r4
 80122ec:	b003      	add	sp, #12
 80122ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122f2:	f7fd bba5 	b.w	800fa40 <ucdr_deserialize_endian_uint16_t>
 80122f6:	bf00      	nop

080122f8 <uxr_serialize_CLIENT_Representation>:
 80122f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122fc:	2204      	movs	r2, #4
 80122fe:	460e      	mov	r6, r1
 8012300:	4605      	mov	r5, r0
 8012302:	f003 f88f 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012306:	4607      	mov	r7, r0
 8012308:	2202      	movs	r2, #2
 801230a:	1d31      	adds	r1, r6, #4
 801230c:	4628      	mov	r0, r5
 801230e:	f003 f889 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012312:	4038      	ands	r0, r7
 8012314:	2202      	movs	r2, #2
 8012316:	1db1      	adds	r1, r6, #6
 8012318:	b2c7      	uxtb	r7, r0
 801231a:	4628      	mov	r0, r5
 801231c:	f003 f882 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012320:	2204      	movs	r2, #4
 8012322:	4007      	ands	r7, r0
 8012324:	f106 0108 	add.w	r1, r6, #8
 8012328:	4628      	mov	r0, r5
 801232a:	f003 f87b 	bl	8015424 <ucdr_serialize_array_uint8_t>
 801232e:	4007      	ands	r7, r0
 8012330:	7b31      	ldrb	r1, [r6, #12]
 8012332:	4628      	mov	r0, r5
 8012334:	f7fd f9e4 	bl	800f700 <ucdr_serialize_uint8_t>
 8012338:	7b71      	ldrb	r1, [r6, #13]
 801233a:	4007      	ands	r7, r0
 801233c:	4628      	mov	r0, r5
 801233e:	f7fd f9b1 	bl	800f6a4 <ucdr_serialize_bool>
 8012342:	7b73      	ldrb	r3, [r6, #13]
 8012344:	ea07 0800 	and.w	r8, r7, r0
 8012348:	b93b      	cbnz	r3, 801235a <uxr_serialize_CLIENT_Representation+0x62>
 801234a:	8bb1      	ldrh	r1, [r6, #28]
 801234c:	4628      	mov	r0, r5
 801234e:	f7fd fa03 	bl	800f758 <ucdr_serialize_uint16_t>
 8012352:	ea08 0000 	and.w	r0, r8, r0
 8012356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235a:	6931      	ldr	r1, [r6, #16]
 801235c:	4628      	mov	r0, r5
 801235e:	f7fd fbe5 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012362:	6933      	ldr	r3, [r6, #16]
 8012364:	b1e3      	cbz	r3, 80123a0 <uxr_serialize_CLIENT_Representation+0xa8>
 8012366:	b1c0      	cbz	r0, 801239a <uxr_serialize_CLIENT_Representation+0xa2>
 8012368:	4637      	mov	r7, r6
 801236a:	f04f 0900 	mov.w	r9, #0
 801236e:	e000      	b.n	8012372 <uxr_serialize_CLIENT_Representation+0x7a>
 8012370:	b19c      	cbz	r4, 801239a <uxr_serialize_CLIENT_Representation+0xa2>
 8012372:	6979      	ldr	r1, [r7, #20]
 8012374:	4628      	mov	r0, r5
 8012376:	f003 f979 	bl	801566c <ucdr_serialize_string>
 801237a:	69b9      	ldr	r1, [r7, #24]
 801237c:	4604      	mov	r4, r0
 801237e:	4628      	mov	r0, r5
 8012380:	f003 f974 	bl	801566c <ucdr_serialize_string>
 8012384:	f109 0901 	add.w	r9, r9, #1
 8012388:	6933      	ldr	r3, [r6, #16]
 801238a:	4004      	ands	r4, r0
 801238c:	3708      	adds	r7, #8
 801238e:	4599      	cmp	r9, r3
 8012390:	b2e4      	uxtb	r4, r4
 8012392:	d3ed      	bcc.n	8012370 <uxr_serialize_CLIENT_Representation+0x78>
 8012394:	ea08 0804 	and.w	r8, r8, r4
 8012398:	e7d7      	b.n	801234a <uxr_serialize_CLIENT_Representation+0x52>
 801239a:	f04f 0800 	mov.w	r8, #0
 801239e:	e7d4      	b.n	801234a <uxr_serialize_CLIENT_Representation+0x52>
 80123a0:	ea08 0800 	and.w	r8, r8, r0
 80123a4:	e7d1      	b.n	801234a <uxr_serialize_CLIENT_Representation+0x52>
 80123a6:	bf00      	nop

080123a8 <uxr_deserialize_CLIENT_Representation>:
 80123a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123ac:	2204      	movs	r2, #4
 80123ae:	460c      	mov	r4, r1
 80123b0:	4605      	mov	r5, r0
 80123b2:	f003 f89b 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80123b6:	4607      	mov	r7, r0
 80123b8:	2202      	movs	r2, #2
 80123ba:	1d21      	adds	r1, r4, #4
 80123bc:	4628      	mov	r0, r5
 80123be:	f003 f895 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80123c2:	4038      	ands	r0, r7
 80123c4:	2202      	movs	r2, #2
 80123c6:	1da1      	adds	r1, r4, #6
 80123c8:	b2c6      	uxtb	r6, r0
 80123ca:	4628      	mov	r0, r5
 80123cc:	f003 f88e 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80123d0:	2204      	movs	r2, #4
 80123d2:	4006      	ands	r6, r0
 80123d4:	f104 0108 	add.w	r1, r4, #8
 80123d8:	4628      	mov	r0, r5
 80123da:	f003 f887 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80123de:	4006      	ands	r6, r0
 80123e0:	f104 010c 	add.w	r1, r4, #12
 80123e4:	4628      	mov	r0, r5
 80123e6:	f7fd f9a1 	bl	800f72c <ucdr_deserialize_uint8_t>
 80123ea:	f104 010d 	add.w	r1, r4, #13
 80123ee:	ea06 0700 	and.w	r7, r6, r0
 80123f2:	4628      	mov	r0, r5
 80123f4:	f7fd f96c 	bl	800f6d0 <ucdr_deserialize_bool>
 80123f8:	7b63      	ldrb	r3, [r4, #13]
 80123fa:	4007      	ands	r7, r0
 80123fc:	b93b      	cbnz	r3, 801240e <uxr_deserialize_CLIENT_Representation+0x66>
 80123fe:	f104 011c 	add.w	r1, r4, #28
 8012402:	4628      	mov	r0, r5
 8012404:	f7fd faa8 	bl	800f958 <ucdr_deserialize_uint16_t>
 8012408:	4038      	ands	r0, r7
 801240a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801240e:	f104 0110 	add.w	r1, r4, #16
 8012412:	4628      	mov	r0, r5
 8012414:	f7fd fcba 	bl	800fd8c <ucdr_deserialize_uint32_t>
 8012418:	6923      	ldr	r3, [r4, #16]
 801241a:	2b01      	cmp	r3, #1
 801241c:	d903      	bls.n	8012426 <uxr_deserialize_CLIENT_Representation+0x7e>
 801241e:	2301      	movs	r3, #1
 8012420:	2700      	movs	r7, #0
 8012422:	75ab      	strb	r3, [r5, #22]
 8012424:	e7eb      	b.n	80123fe <uxr_deserialize_CLIENT_Representation+0x56>
 8012426:	b30b      	cbz	r3, 801246c <uxr_deserialize_CLIENT_Representation+0xc4>
 8012428:	b1f0      	cbz	r0, 8012468 <uxr_deserialize_CLIENT_Representation+0xc0>
 801242a:	46a0      	mov	r8, r4
 801242c:	f04f 0900 	mov.w	r9, #0
 8012430:	e000      	b.n	8012434 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012432:	b1ce      	cbz	r6, 8012468 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012434:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012438:	f108 0808 	add.w	r8, r8, #8
 801243c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012440:	4628      	mov	r0, r5
 8012442:	f003 f923 	bl	801568c <ucdr_deserialize_string>
 8012446:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801244a:	4606      	mov	r6, r0
 801244c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012450:	4628      	mov	r0, r5
 8012452:	f109 0901 	add.w	r9, r9, #1
 8012456:	f003 f919 	bl	801568c <ucdr_deserialize_string>
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	4006      	ands	r6, r0
 801245e:	4599      	cmp	r9, r3
 8012460:	b2f6      	uxtb	r6, r6
 8012462:	d3e6      	bcc.n	8012432 <uxr_deserialize_CLIENT_Representation+0x8a>
 8012464:	4037      	ands	r7, r6
 8012466:	e7ca      	b.n	80123fe <uxr_deserialize_CLIENT_Representation+0x56>
 8012468:	2700      	movs	r7, #0
 801246a:	e7c8      	b.n	80123fe <uxr_deserialize_CLIENT_Representation+0x56>
 801246c:	4007      	ands	r7, r0
 801246e:	e7c6      	b.n	80123fe <uxr_deserialize_CLIENT_Representation+0x56>

08012470 <uxr_serialize_AGENT_Representation>:
 8012470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012474:	2204      	movs	r2, #4
 8012476:	460f      	mov	r7, r1
 8012478:	4605      	mov	r5, r0
 801247a:	f002 ffd3 	bl	8015424 <ucdr_serialize_array_uint8_t>
 801247e:	4604      	mov	r4, r0
 8012480:	2202      	movs	r2, #2
 8012482:	1d39      	adds	r1, r7, #4
 8012484:	4628      	mov	r0, r5
 8012486:	f002 ffcd 	bl	8015424 <ucdr_serialize_array_uint8_t>
 801248a:	4020      	ands	r0, r4
 801248c:	2202      	movs	r2, #2
 801248e:	1db9      	adds	r1, r7, #6
 8012490:	b2c4      	uxtb	r4, r0
 8012492:	4628      	mov	r0, r5
 8012494:	f002 ffc6 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012498:	7a39      	ldrb	r1, [r7, #8]
 801249a:	4004      	ands	r4, r0
 801249c:	4628      	mov	r0, r5
 801249e:	f7fd f901 	bl	800f6a4 <ucdr_serialize_bool>
 80124a2:	7a3b      	ldrb	r3, [r7, #8]
 80124a4:	ea00 0804 	and.w	r8, r0, r4
 80124a8:	b913      	cbnz	r3, 80124b0 <uxr_serialize_AGENT_Representation+0x40>
 80124aa:	4640      	mov	r0, r8
 80124ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b0:	68f9      	ldr	r1, [r7, #12]
 80124b2:	4628      	mov	r0, r5
 80124b4:	f7fd fb3a 	bl	800fb2c <ucdr_serialize_uint32_t>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	b303      	cbz	r3, 80124fe <uxr_serialize_AGENT_Representation+0x8e>
 80124bc:	b1d0      	cbz	r0, 80124f4 <uxr_serialize_AGENT_Representation+0x84>
 80124be:	463e      	mov	r6, r7
 80124c0:	f04f 0900 	mov.w	r9, #0
 80124c4:	e000      	b.n	80124c8 <uxr_serialize_AGENT_Representation+0x58>
 80124c6:	b1ac      	cbz	r4, 80124f4 <uxr_serialize_AGENT_Representation+0x84>
 80124c8:	6931      	ldr	r1, [r6, #16]
 80124ca:	4628      	mov	r0, r5
 80124cc:	f003 f8ce 	bl	801566c <ucdr_serialize_string>
 80124d0:	6971      	ldr	r1, [r6, #20]
 80124d2:	4604      	mov	r4, r0
 80124d4:	4628      	mov	r0, r5
 80124d6:	f003 f8c9 	bl	801566c <ucdr_serialize_string>
 80124da:	f109 0901 	add.w	r9, r9, #1
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	4004      	ands	r4, r0
 80124e2:	3608      	adds	r6, #8
 80124e4:	4599      	cmp	r9, r3
 80124e6:	b2e4      	uxtb	r4, r4
 80124e8:	d3ed      	bcc.n	80124c6 <uxr_serialize_AGENT_Representation+0x56>
 80124ea:	ea08 0804 	and.w	r8, r8, r4
 80124ee:	4640      	mov	r0, r8
 80124f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f4:	f04f 0800 	mov.w	r8, #0
 80124f8:	4640      	mov	r0, r8
 80124fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124fe:	ea08 0800 	and.w	r8, r8, r0
 8012502:	e7d2      	b.n	80124aa <uxr_serialize_AGENT_Representation+0x3a>

08012504 <uxr_serialize_DATAWRITER_Representation>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	460d      	mov	r5, r1
 8012508:	7809      	ldrb	r1, [r1, #0]
 801250a:	4606      	mov	r6, r0
 801250c:	f7fd f8f8 	bl	800f700 <ucdr_serialize_uint8_t>
 8012510:	4604      	mov	r4, r0
 8012512:	b130      	cbz	r0, 8012522 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012514:	782b      	ldrb	r3, [r5, #0]
 8012516:	2b02      	cmp	r3, #2
 8012518:	d00c      	beq.n	8012534 <uxr_serialize_DATAWRITER_Representation+0x30>
 801251a:	2b03      	cmp	r3, #3
 801251c:	d010      	beq.n	8012540 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801251e:	2b01      	cmp	r3, #1
 8012520:	d008      	beq.n	8012534 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012522:	2202      	movs	r2, #2
 8012524:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012528:	4630      	mov	r0, r6
 801252a:	f002 ff7b 	bl	8015424 <ucdr_serialize_array_uint8_t>
 801252e:	4020      	ands	r0, r4
 8012530:	b2c0      	uxtb	r0, r0
 8012532:	bd70      	pop	{r4, r5, r6, pc}
 8012534:	6869      	ldr	r1, [r5, #4]
 8012536:	4630      	mov	r0, r6
 8012538:	f003 f898 	bl	801566c <ucdr_serialize_string>
 801253c:	4604      	mov	r4, r0
 801253e:	e7f0      	b.n	8012522 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012540:	4629      	mov	r1, r5
 8012542:	4630      	mov	r0, r6
 8012544:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012548:	3104      	adds	r1, #4
 801254a:	f003 f863 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 801254e:	4604      	mov	r4, r0
 8012550:	e7e7      	b.n	8012522 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012552:	bf00      	nop

08012554 <uxr_serialize_ObjectVariant.part.0>:
 8012554:	b570      	push	{r4, r5, r6, lr}
 8012556:	780b      	ldrb	r3, [r1, #0]
 8012558:	460c      	mov	r4, r1
 801255a:	4605      	mov	r5, r0
 801255c:	3b01      	subs	r3, #1
 801255e:	2b0d      	cmp	r3, #13
 8012560:	d854      	bhi.n	801260c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012562:	e8df f003 	tbb	[pc, r3]
 8012566:	0730      	.short	0x0730
 8012568:	07071b1b 	.word	0x07071b1b
 801256c:	0c530707 	.word	0x0c530707
 8012570:	494e0c0c 	.word	0x494e0c0c
 8012574:	3104      	adds	r1, #4
 8012576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801257a:	f7ff bfc3 	b.w	8012504 <uxr_serialize_DATAWRITER_Representation>
 801257e:	7909      	ldrb	r1, [r1, #4]
 8012580:	f7fd f8be 	bl	800f700 <ucdr_serialize_uint8_t>
 8012584:	b1e8      	cbz	r0, 80125c2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012586:	7923      	ldrb	r3, [r4, #4]
 8012588:	2b01      	cmp	r3, #1
 801258a:	d001      	beq.n	8012590 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801258c:	2b02      	cmp	r3, #2
 801258e:	d13d      	bne.n	801260c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012590:	68a1      	ldr	r1, [r4, #8]
 8012592:	4628      	mov	r0, r5
 8012594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012598:	f003 b868 	b.w	801566c <ucdr_serialize_string>
 801259c:	7909      	ldrb	r1, [r1, #4]
 801259e:	f7fd f8af 	bl	800f700 <ucdr_serialize_uint8_t>
 80125a2:	4606      	mov	r6, r0
 80125a4:	b120      	cbz	r0, 80125b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80125a6:	7923      	ldrb	r3, [r4, #4]
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d039      	beq.n	8012620 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d02f      	beq.n	8012610 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80125b0:	2202      	movs	r2, #2
 80125b2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80125b6:	4628      	mov	r0, r5
 80125b8:	f002 ff34 	bl	8015424 <ucdr_serialize_array_uint8_t>
 80125bc:	4030      	ands	r0, r6
 80125be:	b2c0      	uxtb	r0, r0
 80125c0:	bd70      	pop	{r4, r5, r6, pc}
 80125c2:	2000      	movs	r0, #0
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	7909      	ldrb	r1, [r1, #4]
 80125c8:	f7fd f89a 	bl	800f700 <ucdr_serialize_uint8_t>
 80125cc:	4606      	mov	r6, r0
 80125ce:	b158      	cbz	r0, 80125e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80125d0:	7923      	ldrb	r3, [r4, #4]
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d003      	beq.n	80125de <uxr_serialize_ObjectVariant.part.0+0x8a>
 80125d6:	2b03      	cmp	r3, #3
 80125d8:	d028      	beq.n	801262c <uxr_serialize_ObjectVariant.part.0+0xd8>
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d104      	bne.n	80125e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80125de:	68a1      	ldr	r1, [r4, #8]
 80125e0:	4628      	mov	r0, r5
 80125e2:	f003 f843 	bl	801566c <ucdr_serialize_string>
 80125e6:	4606      	mov	r6, r0
 80125e8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80125ec:	4628      	mov	r0, r5
 80125ee:	f7fd fdc3 	bl	8010178 <ucdr_serialize_int16_t>
 80125f2:	4030      	ands	r0, r6
 80125f4:	b2c0      	uxtb	r0, r0
 80125f6:	bd70      	pop	{r4, r5, r6, pc}
 80125f8:	3104      	adds	r1, #4
 80125fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125fe:	f7ff be7b 	b.w	80122f8 <uxr_serialize_CLIENT_Representation>
 8012602:	3104      	adds	r1, #4
 8012604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012608:	f7ff bf32 	b.w	8012470 <uxr_serialize_AGENT_Representation>
 801260c:	2001      	movs	r0, #1
 801260e:	bd70      	pop	{r4, r5, r6, pc}
 8012610:	68a2      	ldr	r2, [r4, #8]
 8012612:	f104 010c 	add.w	r1, r4, #12
 8012616:	4628      	mov	r0, r5
 8012618:	f002 fffc 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 801261c:	4606      	mov	r6, r0
 801261e:	e7c7      	b.n	80125b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012620:	68a1      	ldr	r1, [r4, #8]
 8012622:	4628      	mov	r0, r5
 8012624:	f003 f822 	bl	801566c <ucdr_serialize_string>
 8012628:	4606      	mov	r6, r0
 801262a:	e7c1      	b.n	80125b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801262c:	68a2      	ldr	r2, [r4, #8]
 801262e:	f104 010c 	add.w	r1, r4, #12
 8012632:	4628      	mov	r0, r5
 8012634:	f002 ffee 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 8012638:	4606      	mov	r6, r0
 801263a:	e7d5      	b.n	80125e8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801263c <uxr_deserialize_DATAWRITER_Representation>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	4606      	mov	r6, r0
 8012640:	460d      	mov	r5, r1
 8012642:	f7fd f873 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012646:	4604      	mov	r4, r0
 8012648:	b130      	cbz	r0, 8012658 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801264a:	782b      	ldrb	r3, [r5, #0]
 801264c:	2b02      	cmp	r3, #2
 801264e:	d00c      	beq.n	801266a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012650:	2b03      	cmp	r3, #3
 8012652:	d012      	beq.n	801267a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012654:	2b01      	cmp	r3, #1
 8012656:	d008      	beq.n	801266a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012658:	2202      	movs	r2, #2
 801265a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801265e:	4630      	mov	r0, r6
 8012660:	f002 ff44 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012664:	4020      	ands	r0, r4
 8012666:	b2c0      	uxtb	r0, r0
 8012668:	bd70      	pop	{r4, r5, r6, pc}
 801266a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801266e:	6869      	ldr	r1, [r5, #4]
 8012670:	4630      	mov	r0, r6
 8012672:	f003 f80b 	bl	801568c <ucdr_deserialize_string>
 8012676:	4604      	mov	r4, r0
 8012678:	e7ee      	b.n	8012658 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801267a:	1d2b      	adds	r3, r5, #4
 801267c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012680:	f105 0108 	add.w	r1, r5, #8
 8012684:	4630      	mov	r0, r6
 8012686:	f002 ffd7 	bl	8015638 <ucdr_deserialize_sequence_uint8_t>
 801268a:	4604      	mov	r4, r0
 801268c:	e7e4      	b.n	8012658 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801268e:	bf00      	nop

08012690 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012690:	b570      	push	{r4, r5, r6, lr}
 8012692:	460d      	mov	r5, r1
 8012694:	7809      	ldrb	r1, [r1, #0]
 8012696:	4606      	mov	r6, r0
 8012698:	f7fd f804 	bl	800f6a4 <ucdr_serialize_bool>
 801269c:	782b      	ldrb	r3, [r5, #0]
 801269e:	4604      	mov	r4, r0
 80126a0:	b94b      	cbnz	r3, 80126b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80126a2:	7a29      	ldrb	r1, [r5, #8]
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc fffd 	bl	800f6a4 <ucdr_serialize_bool>
 80126aa:	7a2b      	ldrb	r3, [r5, #8]
 80126ac:	4004      	ands	r4, r0
 80126ae:	b2e4      	uxtb	r4, r4
 80126b0:	b943      	cbnz	r3, 80126c4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80126b2:	4620      	mov	r0, r4
 80126b4:	bd70      	pop	{r4, r5, r6, pc}
 80126b6:	6869      	ldr	r1, [r5, #4]
 80126b8:	4630      	mov	r0, r6
 80126ba:	f002 ffd7 	bl	801566c <ucdr_serialize_string>
 80126be:	4004      	ands	r4, r0
 80126c0:	b2e4      	uxtb	r4, r4
 80126c2:	e7ee      	b.n	80126a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80126c4:	68e9      	ldr	r1, [r5, #12]
 80126c6:	4630      	mov	r0, r6
 80126c8:	f002 ffd0 	bl	801566c <ucdr_serialize_string>
 80126cc:	4004      	ands	r4, r0
 80126ce:	4620      	mov	r0, r4
 80126d0:	bd70      	pop	{r4, r5, r6, pc}
 80126d2:	bf00      	nop

080126d4 <uxr_serialize_OBJK_Topic_Binary>:
 80126d4:	b570      	push	{r4, r5, r6, lr}
 80126d6:	460d      	mov	r5, r1
 80126d8:	4606      	mov	r6, r0
 80126da:	6809      	ldr	r1, [r1, #0]
 80126dc:	f002 ffc6 	bl	801566c <ucdr_serialize_string>
 80126e0:	4604      	mov	r4, r0
 80126e2:	7929      	ldrb	r1, [r5, #4]
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7fc ffdd 	bl	800f6a4 <ucdr_serialize_bool>
 80126ea:	792b      	ldrb	r3, [r5, #4]
 80126ec:	4004      	ands	r4, r0
 80126ee:	b2e4      	uxtb	r4, r4
 80126f0:	b943      	cbnz	r3, 8012704 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80126f2:	7b29      	ldrb	r1, [r5, #12]
 80126f4:	4630      	mov	r0, r6
 80126f6:	f7fc ffd5 	bl	800f6a4 <ucdr_serialize_bool>
 80126fa:	7b2b      	ldrb	r3, [r5, #12]
 80126fc:	4004      	ands	r4, r0
 80126fe:	b93b      	cbnz	r3, 8012710 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012700:	4620      	mov	r0, r4
 8012702:	bd70      	pop	{r4, r5, r6, pc}
 8012704:	68a9      	ldr	r1, [r5, #8]
 8012706:	4630      	mov	r0, r6
 8012708:	f002 ffb0 	bl	801566c <ucdr_serialize_string>
 801270c:	4004      	ands	r4, r0
 801270e:	e7f0      	b.n	80126f2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012710:	6929      	ldr	r1, [r5, #16]
 8012712:	4630      	mov	r0, r6
 8012714:	f002 ffaa 	bl	801566c <ucdr_serialize_string>
 8012718:	4004      	ands	r4, r0
 801271a:	b2e4      	uxtb	r4, r4
 801271c:	4620      	mov	r0, r4
 801271e:	bd70      	pop	{r4, r5, r6, pc}

08012720 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012724:	460c      	mov	r4, r1
 8012726:	7809      	ldrb	r1, [r1, #0]
 8012728:	4606      	mov	r6, r0
 801272a:	f7fc ffbb 	bl	800f6a4 <ucdr_serialize_bool>
 801272e:	7823      	ldrb	r3, [r4, #0]
 8012730:	4605      	mov	r5, r0
 8012732:	b96b      	cbnz	r3, 8012750 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012734:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012738:	4630      	mov	r0, r6
 801273a:	f7fc ffb3 	bl	800f6a4 <ucdr_serialize_bool>
 801273e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012742:	4005      	ands	r5, r0
 8012744:	b2ed      	uxtb	r5, r5
 8012746:	2b00      	cmp	r3, #0
 8012748:	d169      	bne.n	801281e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801274a:	4628      	mov	r0, r5
 801274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012750:	6861      	ldr	r1, [r4, #4]
 8012752:	4630      	mov	r0, r6
 8012754:	f7fd f9ea 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012758:	6863      	ldr	r3, [r4, #4]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d06b      	beq.n	8012836 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801275e:	2800      	cmp	r0, #0
 8012760:	d067      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012762:	68a1      	ldr	r1, [r4, #8]
 8012764:	4630      	mov	r0, r6
 8012766:	f002 ff81 	bl	801566c <ucdr_serialize_string>
 801276a:	6863      	ldr	r3, [r4, #4]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d953      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012770:	2800      	cmp	r0, #0
 8012772:	d05e      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012774:	68e1      	ldr	r1, [r4, #12]
 8012776:	4630      	mov	r0, r6
 8012778:	f002 ff78 	bl	801566c <ucdr_serialize_string>
 801277c:	6863      	ldr	r3, [r4, #4]
 801277e:	2b02      	cmp	r3, #2
 8012780:	d94a      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012782:	2800      	cmp	r0, #0
 8012784:	d055      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012786:	6921      	ldr	r1, [r4, #16]
 8012788:	4630      	mov	r0, r6
 801278a:	f002 ff6f 	bl	801566c <ucdr_serialize_string>
 801278e:	6863      	ldr	r3, [r4, #4]
 8012790:	2b03      	cmp	r3, #3
 8012792:	d941      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012794:	2800      	cmp	r0, #0
 8012796:	d04c      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012798:	6961      	ldr	r1, [r4, #20]
 801279a:	4630      	mov	r0, r6
 801279c:	f002 ff66 	bl	801566c <ucdr_serialize_string>
 80127a0:	6863      	ldr	r3, [r4, #4]
 80127a2:	2b04      	cmp	r3, #4
 80127a4:	d938      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127a6:	2800      	cmp	r0, #0
 80127a8:	d043      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127aa:	69a1      	ldr	r1, [r4, #24]
 80127ac:	4630      	mov	r0, r6
 80127ae:	f002 ff5d 	bl	801566c <ucdr_serialize_string>
 80127b2:	6863      	ldr	r3, [r4, #4]
 80127b4:	2b05      	cmp	r3, #5
 80127b6:	d92f      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d03a      	beq.n	8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127bc:	69e1      	ldr	r1, [r4, #28]
 80127be:	4630      	mov	r0, r6
 80127c0:	f002 ff54 	bl	801566c <ucdr_serialize_string>
 80127c4:	6863      	ldr	r3, [r4, #4]
 80127c6:	2b06      	cmp	r3, #6
 80127c8:	d926      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127ca:	b390      	cbz	r0, 8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127cc:	6a21      	ldr	r1, [r4, #32]
 80127ce:	4630      	mov	r0, r6
 80127d0:	f002 ff4c 	bl	801566c <ucdr_serialize_string>
 80127d4:	6863      	ldr	r3, [r4, #4]
 80127d6:	2b07      	cmp	r3, #7
 80127d8:	d91e      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127da:	b350      	cbz	r0, 8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80127de:	4630      	mov	r0, r6
 80127e0:	f002 ff44 	bl	801566c <ucdr_serialize_string>
 80127e4:	6863      	ldr	r3, [r4, #4]
 80127e6:	2b08      	cmp	r3, #8
 80127e8:	d916      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127ea:	b310      	cbz	r0, 8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80127ee:	4630      	mov	r0, r6
 80127f0:	f002 ff3c 	bl	801566c <ucdr_serialize_string>
 80127f4:	6863      	ldr	r3, [r4, #4]
 80127f6:	2b09      	cmp	r3, #9
 80127f8:	d90e      	bls.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80127fa:	b1d0      	cbz	r0, 8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80127fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012800:	2709      	movs	r7, #9
 8012802:	e000      	b.n	8012806 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012804:	b1a8      	cbz	r0, 8012832 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012806:	f858 1b04 	ldr.w	r1, [r8], #4
 801280a:	4630      	mov	r0, r6
 801280c:	f002 ff2e 	bl	801566c <ucdr_serialize_string>
 8012810:	3701      	adds	r7, #1
 8012812:	6862      	ldr	r2, [r4, #4]
 8012814:	4297      	cmp	r7, r2
 8012816:	d3f5      	bcc.n	8012804 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012818:	4005      	ands	r5, r0
 801281a:	b2ed      	uxtb	r5, r5
 801281c:	e78a      	b.n	8012734 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801281e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012820:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012824:	4630      	mov	r0, r6
 8012826:	f002 fef5 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 801282a:	4005      	ands	r5, r0
 801282c:	4628      	mov	r0, r5
 801282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012832:	2500      	movs	r5, #0
 8012834:	e77e      	b.n	8012734 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012836:	4028      	ands	r0, r5
 8012838:	b2c5      	uxtb	r5, r0
 801283a:	e77b      	b.n	8012734 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801283c <uxr_serialize_OBJK_Publisher_Binary>:
 801283c:	b570      	push	{r4, r5, r6, lr}
 801283e:	460d      	mov	r5, r1
 8012840:	7809      	ldrb	r1, [r1, #0]
 8012842:	4606      	mov	r6, r0
 8012844:	f7fc ff2e 	bl	800f6a4 <ucdr_serialize_bool>
 8012848:	782b      	ldrb	r3, [r5, #0]
 801284a:	4604      	mov	r4, r0
 801284c:	b94b      	cbnz	r3, 8012862 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801284e:	7a29      	ldrb	r1, [r5, #8]
 8012850:	4630      	mov	r0, r6
 8012852:	f7fc ff27 	bl	800f6a4 <ucdr_serialize_bool>
 8012856:	7a2b      	ldrb	r3, [r5, #8]
 8012858:	4004      	ands	r4, r0
 801285a:	b2e4      	uxtb	r4, r4
 801285c:	b943      	cbnz	r3, 8012870 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801285e:	4620      	mov	r0, r4
 8012860:	bd70      	pop	{r4, r5, r6, pc}
 8012862:	6869      	ldr	r1, [r5, #4]
 8012864:	4630      	mov	r0, r6
 8012866:	f002 ff01 	bl	801566c <ucdr_serialize_string>
 801286a:	4004      	ands	r4, r0
 801286c:	b2e4      	uxtb	r4, r4
 801286e:	e7ee      	b.n	801284e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012870:	f105 010c 	add.w	r1, r5, #12
 8012874:	4630      	mov	r0, r6
 8012876:	f7ff ff53 	bl	8012720 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801287a:	4004      	ands	r4, r0
 801287c:	4620      	mov	r0, r4
 801287e:	bd70      	pop	{r4, r5, r6, pc}

08012880 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012880:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012884:	4688      	mov	r8, r1
 8012886:	4681      	mov	r9, r0
 8012888:	8809      	ldrh	r1, [r1, #0]
 801288a:	f7fc ff65 	bl	800f758 <ucdr_serialize_uint16_t>
 801288e:	4606      	mov	r6, r0
 8012890:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012894:	4648      	mov	r0, r9
 8012896:	f7fc ff05 	bl	800f6a4 <ucdr_serialize_bool>
 801289a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801289e:	4006      	ands	r6, r0
 80128a0:	b2f5      	uxtb	r5, r6
 80128a2:	b9eb      	cbnz	r3, 80128e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80128a4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80128a8:	4648      	mov	r0, r9
 80128aa:	f7fc fefb 	bl	800f6a4 <ucdr_serialize_bool>
 80128ae:	f898 3006 	ldrb.w	r3, [r8, #6]
 80128b2:	4005      	ands	r5, r0
 80128b4:	bb7b      	cbnz	r3, 8012916 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80128b6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80128ba:	4648      	mov	r0, r9
 80128bc:	f7fc fef2 	bl	800f6a4 <ucdr_serialize_bool>
 80128c0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80128c4:	4005      	ands	r5, r0
 80128c6:	b9f3      	cbnz	r3, 8012906 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80128c8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80128cc:	4648      	mov	r0, r9
 80128ce:	f7fc fee9 	bl	800f6a4 <ucdr_serialize_bool>
 80128d2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80128d6:	4005      	ands	r5, r0
 80128d8:	b94b      	cbnz	r3, 80128ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80128da:	4628      	mov	r0, r5
 80128dc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80128e0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80128e4:	4648      	mov	r0, r9
 80128e6:	f7fc ff37 	bl	800f758 <ucdr_serialize_uint16_t>
 80128ea:	4005      	ands	r5, r0
 80128ec:	e7da      	b.n	80128a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80128ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80128f2:	f108 011c 	add.w	r1, r8, #28
 80128f6:	4648      	mov	r0, r9
 80128f8:	f002 fe8c 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 80128fc:	4028      	ands	r0, r5
 80128fe:	b2c5      	uxtb	r5, r0
 8012900:	4628      	mov	r0, r5
 8012902:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012906:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801290a:	4648      	mov	r0, r9
 801290c:	f7fd f90e 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012910:	4028      	ands	r0, r5
 8012912:	b2c5      	uxtb	r5, r0
 8012914:	e7d8      	b.n	80128c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012916:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801291a:	4648      	mov	r0, r9
 801291c:	f7fd f906 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012920:	4028      	ands	r0, r5
 8012922:	b2c5      	uxtb	r5, r0
 8012924:	e7c7      	b.n	80128b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012926:	bf00      	nop

08012928 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292a:	2202      	movs	r2, #2
 801292c:	460d      	mov	r5, r1
 801292e:	4606      	mov	r6, r0
 8012930:	f002 fd78 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012934:	4604      	mov	r4, r0
 8012936:	78a9      	ldrb	r1, [r5, #2]
 8012938:	4630      	mov	r0, r6
 801293a:	f7fc feb3 	bl	800f6a4 <ucdr_serialize_bool>
 801293e:	78ab      	ldrb	r3, [r5, #2]
 8012940:	4004      	ands	r4, r0
 8012942:	b2e4      	uxtb	r4, r4
 8012944:	b90b      	cbnz	r3, 801294a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012946:	4620      	mov	r0, r4
 8012948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801294a:	f105 0108 	add.w	r1, r5, #8
 801294e:	4630      	mov	r0, r6
 8012950:	f7ff ff96 	bl	8012880 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012954:	4607      	mov	r7, r0
 8012956:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801295a:	4630      	mov	r0, r6
 801295c:	f7fc fea2 	bl	800f6a4 <ucdr_serialize_bool>
 8012960:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012964:	4038      	ands	r0, r7
 8012966:	b2c7      	uxtb	r7, r0
 8012968:	b913      	cbnz	r3, 8012970 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801296a:	403c      	ands	r4, r7
 801296c:	4620      	mov	r0, r4
 801296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012970:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012974:	4630      	mov	r0, r6
 8012976:	f7fd fb2f 	bl	800ffd8 <ucdr_serialize_uint64_t>
 801297a:	4007      	ands	r7, r0
 801297c:	e7f5      	b.n	801296a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801297e:	bf00      	nop

08012980 <uxr_deserialize_ObjectVariant>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4605      	mov	r5, r0
 8012984:	460e      	mov	r6, r1
 8012986:	f7fc fed1 	bl	800f72c <ucdr_deserialize_uint8_t>
 801298a:	b168      	cbz	r0, 80129a8 <uxr_deserialize_ObjectVariant+0x28>
 801298c:	7833      	ldrb	r3, [r6, #0]
 801298e:	4604      	mov	r4, r0
 8012990:	3b01      	subs	r3, #1
 8012992:	2b0d      	cmp	r3, #13
 8012994:	d809      	bhi.n	80129aa <uxr_deserialize_ObjectVariant+0x2a>
 8012996:	e8df f003 	tbb	[pc, r3]
 801299a:	0a41      	.short	0x0a41
 801299c:	0a0a2323 	.word	0x0a0a2323
 80129a0:	10080a0a 	.word	0x10080a0a
 80129a4:	565c1010 	.word	0x565c1010
 80129a8:	2400      	movs	r4, #0
 80129aa:	4620      	mov	r0, r4
 80129ac:	bd70      	pop	{r4, r5, r6, pc}
 80129ae:	1d31      	adds	r1, r6, #4
 80129b0:	4628      	mov	r0, r5
 80129b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129b6:	f7ff be41 	b.w	801263c <uxr_deserialize_DATAWRITER_Representation>
 80129ba:	1d31      	adds	r1, r6, #4
 80129bc:	4628      	mov	r0, r5
 80129be:	f7fc feb5 	bl	800f72c <ucdr_deserialize_uint8_t>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d0f0      	beq.n	80129a8 <uxr_deserialize_ObjectVariant+0x28>
 80129c6:	7933      	ldrb	r3, [r6, #4]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d001      	beq.n	80129d0 <uxr_deserialize_ObjectVariant+0x50>
 80129cc:	2b02      	cmp	r3, #2
 80129ce:	d1ec      	bne.n	80129aa <uxr_deserialize_ObjectVariant+0x2a>
 80129d0:	68b1      	ldr	r1, [r6, #8]
 80129d2:	4628      	mov	r0, r5
 80129d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129dc:	f002 be56 	b.w	801568c <ucdr_deserialize_string>
 80129e0:	1d31      	adds	r1, r6, #4
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7fc fea2 	bl	800f72c <ucdr_deserialize_uint8_t>
 80129e8:	4604      	mov	r4, r0
 80129ea:	b170      	cbz	r0, 8012a0a <uxr_deserialize_ObjectVariant+0x8a>
 80129ec:	7933      	ldrb	r3, [r6, #4]
 80129ee:	2b02      	cmp	r3, #2
 80129f0:	d04c      	beq.n	8012a8c <uxr_deserialize_ObjectVariant+0x10c>
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d109      	bne.n	8012a0a <uxr_deserialize_ObjectVariant+0x8a>
 80129f6:	f106 0308 	add.w	r3, r6, #8
 80129fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129fe:	f106 010c 	add.w	r1, r6, #12
 8012a02:	4628      	mov	r0, r5
 8012a04:	f002 fe18 	bl	8015638 <ucdr_deserialize_sequence_uint8_t>
 8012a08:	4604      	mov	r4, r0
 8012a0a:	2202      	movs	r2, #2
 8012a0c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012a10:	4628      	mov	r0, r5
 8012a12:	f002 fd6b 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012a16:	4020      	ands	r0, r4
 8012a18:	b2c4      	uxtb	r4, r0
 8012a1a:	e7c6      	b.n	80129aa <uxr_deserialize_ObjectVariant+0x2a>
 8012a1c:	1d31      	adds	r1, r6, #4
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f7fc fe84 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012a24:	4604      	mov	r4, r0
 8012a26:	b130      	cbz	r0, 8012a36 <uxr_deserialize_ObjectVariant+0xb6>
 8012a28:	7933      	ldrb	r3, [r6, #4]
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d036      	beq.n	8012a9c <uxr_deserialize_ObjectVariant+0x11c>
 8012a2e:	2b03      	cmp	r3, #3
 8012a30:	d03c      	beq.n	8012aac <uxr_deserialize_ObjectVariant+0x12c>
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d032      	beq.n	8012a9c <uxr_deserialize_ObjectVariant+0x11c>
 8012a36:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	f7fd fc1c 	bl	8010278 <ucdr_deserialize_int16_t>
 8012a40:	4020      	ands	r0, r4
 8012a42:	b2c4      	uxtb	r4, r0
 8012a44:	e7b1      	b.n	80129aa <uxr_deserialize_ObjectVariant+0x2a>
 8012a46:	1d31      	adds	r1, r6, #4
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a4e:	f7ff bcab 	b.w	80123a8 <uxr_deserialize_CLIENT_Representation>
 8012a52:	2204      	movs	r2, #4
 8012a54:	4628      	mov	r0, r5
 8012a56:	18b1      	adds	r1, r6, r2
 8012a58:	f002 fd48 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	2202      	movs	r2, #2
 8012a60:	f106 0108 	add.w	r1, r6, #8
 8012a64:	4628      	mov	r0, r5
 8012a66:	f002 fd41 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012a6a:	4004      	ands	r4, r0
 8012a6c:	2202      	movs	r2, #2
 8012a6e:	f106 010a 	add.w	r1, r6, #10
 8012a72:	4628      	mov	r0, r5
 8012a74:	b2e4      	uxtb	r4, r4
 8012a76:	f002 fd39 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	f106 010c 	add.w	r1, r6, #12
 8012a80:	4628      	mov	r0, r5
 8012a82:	401c      	ands	r4, r3
 8012a84:	f7fc fe24 	bl	800f6d0 <ucdr_deserialize_bool>
 8012a88:	4004      	ands	r4, r0
 8012a8a:	e78e      	b.n	80129aa <uxr_deserialize_ObjectVariant+0x2a>
 8012a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a90:	68b1      	ldr	r1, [r6, #8]
 8012a92:	4628      	mov	r0, r5
 8012a94:	f002 fdfa 	bl	801568c <ucdr_deserialize_string>
 8012a98:	4604      	mov	r4, r0
 8012a9a:	e7b6      	b.n	8012a0a <uxr_deserialize_ObjectVariant+0x8a>
 8012a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012aa0:	68b1      	ldr	r1, [r6, #8]
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f002 fdf2 	bl	801568c <ucdr_deserialize_string>
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	e7c4      	b.n	8012a36 <uxr_deserialize_ObjectVariant+0xb6>
 8012aac:	f106 0308 	add.w	r3, r6, #8
 8012ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ab4:	f106 010c 	add.w	r1, r6, #12
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f002 fdbd 	bl	8015638 <ucdr_deserialize_sequence_uint8_t>
 8012abe:	4604      	mov	r4, r0
 8012ac0:	e7b9      	b.n	8012a36 <uxr_deserialize_ObjectVariant+0xb6>
 8012ac2:	bf00      	nop

08012ac4 <uxr_deserialize_BaseObjectRequest>:
 8012ac4:	b570      	push	{r4, r5, r6, lr}
 8012ac6:	2202      	movs	r2, #2
 8012ac8:	4605      	mov	r5, r0
 8012aca:	460e      	mov	r6, r1
 8012acc:	f002 fd0e 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012ad0:	2202      	movs	r2, #2
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	18b1      	adds	r1, r6, r2
 8012ad8:	f002 fd08 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012adc:	4020      	ands	r0, r4
 8012ade:	b2c0      	uxtb	r0, r0
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	bf00      	nop

08012ae4 <uxr_serialize_ActivityInfoVariant>:
 8012ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ae8:	460e      	mov	r6, r1
 8012aea:	7809      	ldrb	r1, [r1, #0]
 8012aec:	4680      	mov	r8, r0
 8012aee:	f7fc fe07 	bl	800f700 <ucdr_serialize_uint8_t>
 8012af2:	4607      	mov	r7, r0
 8012af4:	b138      	cbz	r0, 8012b06 <uxr_serialize_ActivityInfoVariant+0x22>
 8012af6:	7833      	ldrb	r3, [r6, #0]
 8012af8:	2b06      	cmp	r3, #6
 8012afa:	f000 8081 	beq.w	8012c00 <uxr_serialize_ActivityInfoVariant+0x11c>
 8012afe:	2b0d      	cmp	r3, #13
 8012b00:	d014      	beq.n	8012b2c <uxr_serialize_ActivityInfoVariant+0x48>
 8012b02:	2b05      	cmp	r3, #5
 8012b04:	d002      	beq.n	8012b0c <uxr_serialize_ActivityInfoVariant+0x28>
 8012b06:	4638      	mov	r0, r7
 8012b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b0c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012b10:	4640      	mov	r0, r8
 8012b12:	f7fd fb31 	bl	8010178 <ucdr_serialize_int16_t>
 8012b16:	4607      	mov	r7, r0
 8012b18:	4640      	mov	r0, r8
 8012b1a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8012b1e:	f7fd fa5b 	bl	800ffd8 <ucdr_serialize_uint64_t>
 8012b22:	4038      	ands	r0, r7
 8012b24:	b2c7      	uxtb	r7, r0
 8012b26:	4638      	mov	r0, r7
 8012b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b2c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012b30:	4640      	mov	r0, r8
 8012b32:	f7fd fb21 	bl	8010178 <ucdr_serialize_int16_t>
 8012b36:	68f1      	ldr	r1, [r6, #12]
 8012b38:	4607      	mov	r7, r0
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	f7fc fff6 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012b40:	68f3      	ldr	r3, [r6, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d0ed      	beq.n	8012b22 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012b46:	b318      	cbz	r0, 8012b90 <uxr_serialize_ActivityInfoVariant+0xac>
 8012b48:	f106 090c 	add.w	r9, r6, #12
 8012b4c:	2400      	movs	r4, #0
 8012b4e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012b52:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8012b56:	7c29      	ldrb	r1, [r5, #16]
 8012b58:	4640      	mov	r0, r8
 8012b5a:	f7fc fdd1 	bl	800f700 <ucdr_serialize_uint8_t>
 8012b5e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8012b62:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d051      	beq.n	8012c0e <uxr_serialize_ActivityInfoVariant+0x12a>
 8012b6a:	7c2b      	ldrb	r3, [r5, #16]
 8012b6c:	00c9      	lsls	r1, r1, #3
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d854      	bhi.n	8012c1c <uxr_serialize_ActivityInfoVariant+0x138>
 8012b72:	e8df f003 	tbb	[pc, r3]
 8012b76:	2133      	.short	0x2133
 8012b78:	020f      	.short	0x020f
 8012b7a:	4449      	add	r1, r9
 8012b7c:	4640      	mov	r0, r8
 8012b7e:	6889      	ldr	r1, [r1, #8]
 8012b80:	f002 fd74 	bl	801566c <ucdr_serialize_string>
 8012b84:	3401      	adds	r4, #1
 8012b86:	68f2      	ldr	r2, [r6, #12]
 8012b88:	4294      	cmp	r4, r2
 8012b8a:	d244      	bcs.n	8012c16 <uxr_serialize_ActivityInfoVariant+0x132>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d1de      	bne.n	8012b4e <uxr_serialize_ActivityInfoVariant+0x6a>
 8012b90:	2700      	movs	r7, #0
 8012b92:	e7b8      	b.n	8012b06 <uxr_serialize_ActivityInfoVariant+0x22>
 8012b94:	3108      	adds	r1, #8
 8012b96:	44a2      	add	sl, r4
 8012b98:	2210      	movs	r2, #16
 8012b9a:	4640      	mov	r0, r8
 8012b9c:	4449      	add	r1, r9
 8012b9e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012ba2:	f002 fc3f 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8012bac:	4640      	mov	r0, r8
 8012bae:	f7fc ffbd 	bl	800fb2c <ucdr_serialize_uint32_t>
 8012bb2:	4028      	ands	r0, r5
 8012bb4:	b2c0      	uxtb	r0, r0
 8012bb6:	e7e5      	b.n	8012b84 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012bb8:	3108      	adds	r1, #8
 8012bba:	44a2      	add	sl, r4
 8012bbc:	2204      	movs	r2, #4
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	4449      	add	r1, r9
 8012bc2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012bc6:	f002 fc2d 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012bca:	4605      	mov	r5, r0
 8012bcc:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f7fc fdc1 	bl	800f758 <ucdr_serialize_uint16_t>
 8012bd6:	4028      	ands	r0, r5
 8012bd8:	b2c0      	uxtb	r0, r0
 8012bda:	e7d3      	b.n	8012b84 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012bdc:	3108      	adds	r1, #8
 8012bde:	44a2      	add	sl, r4
 8012be0:	2202      	movs	r2, #2
 8012be2:	4640      	mov	r0, r8
 8012be4:	4449      	add	r1, r9
 8012be6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012bea:	f002 fc1b 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012bee:	4605      	mov	r5, r0
 8012bf0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	f7fc fd83 	bl	800f700 <ucdr_serialize_uint8_t>
 8012bfa:	4028      	ands	r0, r5
 8012bfc:	b2c0      	uxtb	r0, r0
 8012bfe:	e7c1      	b.n	8012b84 <uxr_serialize_ActivityInfoVariant+0xa0>
 8012c00:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012c04:	4640      	mov	r0, r8
 8012c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c0a:	f7fd bab5 	b.w	8010178 <ucdr_serialize_int16_t>
 8012c0e:	3401      	adds	r4, #1
 8012c10:	68f2      	ldr	r2, [r6, #12]
 8012c12:	42a2      	cmp	r2, r4
 8012c14:	d8bc      	bhi.n	8012b90 <uxr_serialize_ActivityInfoVariant+0xac>
 8012c16:	4007      	ands	r7, r0
 8012c18:	b2ff      	uxtb	r7, r7
 8012c1a:	e774      	b.n	8012b06 <uxr_serialize_ActivityInfoVariant+0x22>
 8012c1c:	3401      	adds	r4, #1
 8012c1e:	68f3      	ldr	r3, [r6, #12]
 8012c20:	3518      	adds	r5, #24
 8012c22:	429c      	cmp	r4, r3
 8012c24:	d397      	bcc.n	8012b56 <uxr_serialize_ActivityInfoVariant+0x72>
 8012c26:	e76e      	b.n	8012b06 <uxr_serialize_ActivityInfoVariant+0x22>

08012c28 <uxr_deserialize_BaseObjectReply>:
 8012c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	4606      	mov	r6, r0
 8012c30:	460f      	mov	r7, r1
 8012c32:	f002 fc5b 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012c36:	2202      	movs	r2, #2
 8012c38:	4605      	mov	r5, r0
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	18b9      	adds	r1, r7, r2
 8012c3e:	f002 fc55 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012c42:	4680      	mov	r8, r0
 8012c44:	1d39      	adds	r1, r7, #4
 8012c46:	4630      	mov	r0, r6
 8012c48:	f7fc fd70 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012c4c:	ea05 0508 	and.w	r5, r5, r8
 8012c50:	4604      	mov	r4, r0
 8012c52:	1d79      	adds	r1, r7, #5
 8012c54:	4630      	mov	r0, r6
 8012c56:	402c      	ands	r4, r5
 8012c58:	f7fc fd68 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012c5c:	4020      	ands	r0, r4
 8012c5e:	b2c0      	uxtb	r0, r0
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c64 <uxr_serialize_ReadSpecification>:
 8012c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c66:	460e      	mov	r6, r1
 8012c68:	4607      	mov	r7, r0
 8012c6a:	7809      	ldrb	r1, [r1, #0]
 8012c6c:	f7fc fd48 	bl	800f700 <ucdr_serialize_uint8_t>
 8012c70:	4604      	mov	r4, r0
 8012c72:	7871      	ldrb	r1, [r6, #1]
 8012c74:	4638      	mov	r0, r7
 8012c76:	f7fc fd43 	bl	800f700 <ucdr_serialize_uint8_t>
 8012c7a:	4004      	ands	r4, r0
 8012c7c:	78b1      	ldrb	r1, [r6, #2]
 8012c7e:	4638      	mov	r0, r7
 8012c80:	f7fc fd10 	bl	800f6a4 <ucdr_serialize_bool>
 8012c84:	78b3      	ldrb	r3, [r6, #2]
 8012c86:	b2e4      	uxtb	r4, r4
 8012c88:	4004      	ands	r4, r0
 8012c8a:	b943      	cbnz	r3, 8012c9e <uxr_serialize_ReadSpecification+0x3a>
 8012c8c:	7a31      	ldrb	r1, [r6, #8]
 8012c8e:	4638      	mov	r0, r7
 8012c90:	f7fc fd08 	bl	800f6a4 <ucdr_serialize_bool>
 8012c94:	7a33      	ldrb	r3, [r6, #8]
 8012c96:	4004      	ands	r4, r0
 8012c98:	b93b      	cbnz	r3, 8012caa <uxr_serialize_ReadSpecification+0x46>
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c9e:	6871      	ldr	r1, [r6, #4]
 8012ca0:	4638      	mov	r0, r7
 8012ca2:	f002 fce3 	bl	801566c <ucdr_serialize_string>
 8012ca6:	4004      	ands	r4, r0
 8012ca8:	e7f0      	b.n	8012c8c <uxr_serialize_ReadSpecification+0x28>
 8012caa:	8971      	ldrh	r1, [r6, #10]
 8012cac:	4638      	mov	r0, r7
 8012cae:	f7fc fd53 	bl	800f758 <ucdr_serialize_uint16_t>
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	89b1      	ldrh	r1, [r6, #12]
 8012cb6:	4638      	mov	r0, r7
 8012cb8:	f7fc fd4e 	bl	800f758 <ucdr_serialize_uint16_t>
 8012cbc:	4005      	ands	r5, r0
 8012cbe:	89f1      	ldrh	r1, [r6, #14]
 8012cc0:	4638      	mov	r0, r7
 8012cc2:	b2ed      	uxtb	r5, r5
 8012cc4:	f7fc fd48 	bl	800f758 <ucdr_serialize_uint16_t>
 8012cc8:	8a31      	ldrh	r1, [r6, #16]
 8012cca:	4025      	ands	r5, r4
 8012ccc:	4604      	mov	r4, r0
 8012cce:	4638      	mov	r0, r7
 8012cd0:	4025      	ands	r5, r4
 8012cd2:	f7fc fd41 	bl	800f758 <ucdr_serialize_uint16_t>
 8012cd6:	ea00 0405 	and.w	r4, r0, r5
 8012cda:	4620      	mov	r0, r4
 8012cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cde:	bf00      	nop

08012ce0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012ce0:	f7ff bb0a 	b.w	80122f8 <uxr_serialize_CLIENT_Representation>

08012ce4 <uxr_serialize_CREATE_Payload>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	2202      	movs	r2, #2
 8012ce8:	4607      	mov	r7, r0
 8012cea:	460e      	mov	r6, r1
 8012cec:	f002 fb9a 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012cf0:	2202      	movs	r2, #2
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	4638      	mov	r0, r7
 8012cf6:	18b1      	adds	r1, r6, r2
 8012cf8:	f002 fb94 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012cfc:	7931      	ldrb	r1, [r6, #4]
 8012cfe:	4604      	mov	r4, r0
 8012d00:	4638      	mov	r0, r7
 8012d02:	f7fc fcfd 	bl	800f700 <ucdr_serialize_uint8_t>
 8012d06:	b170      	cbz	r0, 8012d26 <uxr_serialize_CREATE_Payload+0x42>
 8012d08:	7933      	ldrb	r3, [r6, #4]
 8012d0a:	402c      	ands	r4, r5
 8012d0c:	3b01      	subs	r3, #1
 8012d0e:	b2e4      	uxtb	r4, r4
 8012d10:	2b0d      	cmp	r3, #13
 8012d12:	d809      	bhi.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012d14:	e8df f003 	tbb	[pc, r3]
 8012d18:	23230a4c 	.word	0x23230a4c
 8012d1c:	0a0a0a0a 	.word	0x0a0a0a0a
 8012d20:	12121208 	.word	0x12121208
 8012d24:	3e45      	.short	0x3e45
 8012d26:	2400      	movs	r4, #0
 8012d28:	4620      	mov	r0, r4
 8012d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d2c:	f106 0108 	add.w	r1, r6, #8
 8012d30:	4638      	mov	r0, r7
 8012d32:	f7ff fbe7 	bl	8012504 <uxr_serialize_DATAWRITER_Representation>
 8012d36:	4004      	ands	r4, r0
 8012d38:	4620      	mov	r0, r4
 8012d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3c:	7a31      	ldrb	r1, [r6, #8]
 8012d3e:	4638      	mov	r0, r7
 8012d40:	f7fc fcde 	bl	800f700 <ucdr_serialize_uint8_t>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d0ee      	beq.n	8012d26 <uxr_serialize_CREATE_Payload+0x42>
 8012d48:	7a33      	ldrb	r3, [r6, #8]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d001      	beq.n	8012d52 <uxr_serialize_CREATE_Payload+0x6e>
 8012d4e:	2b02      	cmp	r3, #2
 8012d50:	d1ea      	bne.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012d52:	68f1      	ldr	r1, [r6, #12]
 8012d54:	4638      	mov	r0, r7
 8012d56:	f002 fc89 	bl	801566c <ucdr_serialize_string>
 8012d5a:	4004      	ands	r4, r0
 8012d5c:	e7e4      	b.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012d5e:	7a31      	ldrb	r1, [r6, #8]
 8012d60:	4638      	mov	r0, r7
 8012d62:	f7fc fccd 	bl	800f700 <ucdr_serialize_uint8_t>
 8012d66:	4605      	mov	r5, r0
 8012d68:	b158      	cbz	r0, 8012d82 <uxr_serialize_CREATE_Payload+0x9e>
 8012d6a:	7a33      	ldrb	r3, [r6, #8]
 8012d6c:	2b02      	cmp	r3, #2
 8012d6e:	d034      	beq.n	8012dda <uxr_serialize_CREATE_Payload+0xf6>
 8012d70:	2b03      	cmp	r3, #3
 8012d72:	d106      	bne.n	8012d82 <uxr_serialize_CREATE_Payload+0x9e>
 8012d74:	68f2      	ldr	r2, [r6, #12]
 8012d76:	f106 0110 	add.w	r1, r6, #16
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	f002 fc4a 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 8012d80:	4605      	mov	r5, r0
 8012d82:	2202      	movs	r2, #2
 8012d84:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012d88:	4638      	mov	r0, r7
 8012d8a:	f002 fb4b 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012d8e:	4028      	ands	r0, r5
 8012d90:	4004      	ands	r4, r0
 8012d92:	e7c9      	b.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012d94:	f106 0108 	add.w	r1, r6, #8
 8012d98:	4638      	mov	r0, r7
 8012d9a:	f7ff faad 	bl	80122f8 <uxr_serialize_CLIENT_Representation>
 8012d9e:	4004      	ands	r4, r0
 8012da0:	e7c2      	b.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012da2:	f106 0108 	add.w	r1, r6, #8
 8012da6:	4638      	mov	r0, r7
 8012da8:	f7ff fb62 	bl	8012470 <uxr_serialize_AGENT_Representation>
 8012dac:	4004      	ands	r4, r0
 8012dae:	e7bb      	b.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012db0:	7a31      	ldrb	r1, [r6, #8]
 8012db2:	4638      	mov	r0, r7
 8012db4:	f7fc fca4 	bl	800f700 <ucdr_serialize_uint8_t>
 8012db8:	4605      	mov	r5, r0
 8012dba:	b130      	cbz	r0, 8012dca <uxr_serialize_CREATE_Payload+0xe6>
 8012dbc:	7a33      	ldrb	r3, [r6, #8]
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d011      	beq.n	8012de6 <uxr_serialize_CREATE_Payload+0x102>
 8012dc2:	2b03      	cmp	r3, #3
 8012dc4:	d015      	beq.n	8012df2 <uxr_serialize_CREATE_Payload+0x10e>
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d00d      	beq.n	8012de6 <uxr_serialize_CREATE_Payload+0x102>
 8012dca:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012dce:	4638      	mov	r0, r7
 8012dd0:	f7fd f9d2 	bl	8010178 <ucdr_serialize_int16_t>
 8012dd4:	4028      	ands	r0, r5
 8012dd6:	4004      	ands	r4, r0
 8012dd8:	e7a6      	b.n	8012d28 <uxr_serialize_CREATE_Payload+0x44>
 8012dda:	68f1      	ldr	r1, [r6, #12]
 8012ddc:	4638      	mov	r0, r7
 8012dde:	f002 fc45 	bl	801566c <ucdr_serialize_string>
 8012de2:	4605      	mov	r5, r0
 8012de4:	e7cd      	b.n	8012d82 <uxr_serialize_CREATE_Payload+0x9e>
 8012de6:	68f1      	ldr	r1, [r6, #12]
 8012de8:	4638      	mov	r0, r7
 8012dea:	f002 fc3f 	bl	801566c <ucdr_serialize_string>
 8012dee:	4605      	mov	r5, r0
 8012df0:	e7eb      	b.n	8012dca <uxr_serialize_CREATE_Payload+0xe6>
 8012df2:	68f2      	ldr	r2, [r6, #12]
 8012df4:	f106 0110 	add.w	r1, r6, #16
 8012df8:	4638      	mov	r0, r7
 8012dfa:	f002 fc0b 	bl	8015614 <ucdr_serialize_sequence_uint8_t>
 8012dfe:	4605      	mov	r5, r0
 8012e00:	e7e3      	b.n	8012dca <uxr_serialize_CREATE_Payload+0xe6>
 8012e02:	bf00      	nop

08012e04 <uxr_deserialize_GET_INFO_Payload>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	2202      	movs	r2, #2
 8012e08:	4605      	mov	r5, r0
 8012e0a:	460e      	mov	r6, r1
 8012e0c:	f002 fb6e 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012e10:	2202      	movs	r2, #2
 8012e12:	4604      	mov	r4, r0
 8012e14:	4628      	mov	r0, r5
 8012e16:	18b1      	adds	r1, r6, r2
 8012e18:	f002 fb68 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	1d31      	adds	r1, r6, #4
 8012e20:	4628      	mov	r0, r5
 8012e22:	401c      	ands	r4, r3
 8012e24:	f7fc ffb2 	bl	800fd8c <ucdr_deserialize_uint32_t>
 8012e28:	b2e4      	uxtb	r4, r4
 8012e2a:	4020      	ands	r0, r4
 8012e2c:	bd70      	pop	{r4, r5, r6, pc}
 8012e2e:	bf00      	nop

08012e30 <uxr_serialize_DELETE_Payload>:
 8012e30:	b570      	push	{r4, r5, r6, lr}
 8012e32:	2202      	movs	r2, #2
 8012e34:	4605      	mov	r5, r0
 8012e36:	460e      	mov	r6, r1
 8012e38:	f002 faf4 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012e3c:	2202      	movs	r2, #2
 8012e3e:	4604      	mov	r4, r0
 8012e40:	4628      	mov	r0, r5
 8012e42:	18b1      	adds	r1, r6, r2
 8012e44:	f002 faee 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012e48:	4020      	ands	r0, r4
 8012e4a:	b2c0      	uxtb	r0, r0
 8012e4c:	bd70      	pop	{r4, r5, r6, pc}
 8012e4e:	bf00      	nop

08012e50 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e54:	460e      	mov	r6, r1
 8012e56:	4605      	mov	r5, r0
 8012e58:	f7fc fc68 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	1c71      	adds	r1, r6, #1
 8012e60:	4628      	mov	r0, r5
 8012e62:	f7fc fc63 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012e66:	2204      	movs	r2, #4
 8012e68:	4681      	mov	r9, r0
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	18b1      	adds	r1, r6, r2
 8012e6e:	f002 fb3d 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012e72:	f106 0108 	add.w	r1, r6, #8
 8012e76:	4680      	mov	r8, r0
 8012e78:	2202      	movs	r2, #2
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f002 fb36 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012e80:	ea04 0309 	and.w	r3, r4, r9
 8012e84:	4607      	mov	r7, r0
 8012e86:	2202      	movs	r2, #2
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	f106 010a 	add.w	r1, r6, #10
 8012e8e:	4628      	mov	r0, r5
 8012e90:	ea03 0408 	and.w	r4, r3, r8
 8012e94:	f002 fb2a 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	403c      	ands	r4, r7
 8012e9e:	f106 010c 	add.w	r1, r6, #12
 8012ea2:	461d      	mov	r5, r3
 8012ea4:	f7fc fc14 	bl	800f6d0 <ucdr_deserialize_bool>
 8012ea8:	4025      	ands	r5, r4
 8012eaa:	4028      	ands	r0, r5
 8012eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012eb0 <uxr_deserialize_STATUS_Payload>:
 8012eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	2202      	movs	r2, #2
 8012eb6:	4606      	mov	r6, r0
 8012eb8:	460f      	mov	r7, r1
 8012eba:	f002 fb17 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012ebe:	2202      	movs	r2, #2
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	18b9      	adds	r1, r7, r2
 8012ec6:	f002 fb11 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8012eca:	4680      	mov	r8, r0
 8012ecc:	1d39      	adds	r1, r7, #4
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f7fc fc2c 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012ed4:	ea05 0508 	and.w	r5, r5, r8
 8012ed8:	4604      	mov	r4, r0
 8012eda:	1d79      	adds	r1, r7, #5
 8012edc:	4630      	mov	r0, r6
 8012ede:	402c      	ands	r4, r5
 8012ee0:	f7fc fc24 	bl	800f72c <ucdr_deserialize_uint8_t>
 8012ee4:	4020      	ands	r0, r4
 8012ee6:	b2c0      	uxtb	r0, r0
 8012ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012eec <uxr_serialize_INFO_Payload>:
 8012eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef0:	2202      	movs	r2, #2
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	f002 fa95 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012efa:	2202      	movs	r2, #2
 8012efc:	4680      	mov	r8, r0
 8012efe:	4628      	mov	r0, r5
 8012f00:	18a1      	adds	r1, r4, r2
 8012f02:	f002 fa8f 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012f06:	4607      	mov	r7, r0
 8012f08:	7921      	ldrb	r1, [r4, #4]
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f7fc fbf8 	bl	800f700 <ucdr_serialize_uint8_t>
 8012f10:	ea08 0807 	and.w	r8, r8, r7
 8012f14:	4606      	mov	r6, r0
 8012f16:	7961      	ldrb	r1, [r4, #5]
 8012f18:	4628      	mov	r0, r5
 8012f1a:	ea06 0608 	and.w	r6, r6, r8
 8012f1e:	f7fc fbef 	bl	800f700 <ucdr_serialize_uint8_t>
 8012f22:	7a21      	ldrb	r1, [r4, #8]
 8012f24:	4030      	ands	r0, r6
 8012f26:	b2c7      	uxtb	r7, r0
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7fc fbbb 	bl	800f6a4 <ucdr_serialize_bool>
 8012f2e:	7a23      	ldrb	r3, [r4, #8]
 8012f30:	4606      	mov	r6, r0
 8012f32:	b96b      	cbnz	r3, 8012f50 <uxr_serialize_INFO_Payload+0x64>
 8012f34:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f7fc fbb3 	bl	800f6a4 <ucdr_serialize_bool>
 8012f3e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012f42:	4030      	ands	r0, r6
 8012f44:	b2c6      	uxtb	r6, r0
 8012f46:	b983      	cbnz	r3, 8012f6a <uxr_serialize_INFO_Payload+0x7e>
 8012f48:	ea06 0007 	and.w	r0, r6, r7
 8012f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f50:	7b21      	ldrb	r1, [r4, #12]
 8012f52:	4628      	mov	r0, r5
 8012f54:	f7fc fbd4 	bl	800f700 <ucdr_serialize_uint8_t>
 8012f58:	b188      	cbz	r0, 8012f7e <uxr_serialize_INFO_Payload+0x92>
 8012f5a:	f104 010c 	add.w	r1, r4, #12
 8012f5e:	4628      	mov	r0, r5
 8012f60:	f7ff faf8 	bl	8012554 <uxr_serialize_ObjectVariant.part.0>
 8012f64:	4030      	ands	r0, r6
 8012f66:	b2c6      	uxtb	r6, r0
 8012f68:	e7e4      	b.n	8012f34 <uxr_serialize_INFO_Payload+0x48>
 8012f6a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ff fdb8 	bl	8012ae4 <uxr_serialize_ActivityInfoVariant>
 8012f74:	4006      	ands	r6, r0
 8012f76:	ea06 0007 	and.w	r0, r6, r7
 8012f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f7e:	4606      	mov	r6, r0
 8012f80:	e7d8      	b.n	8012f34 <uxr_serialize_INFO_Payload+0x48>
 8012f82:	bf00      	nop

08012f84 <uxr_serialize_READ_DATA_Payload>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	2202      	movs	r2, #2
 8012f88:	4605      	mov	r5, r0
 8012f8a:	460e      	mov	r6, r1
 8012f8c:	f002 fa4a 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012f90:	2202      	movs	r2, #2
 8012f92:	4604      	mov	r4, r0
 8012f94:	4628      	mov	r0, r5
 8012f96:	18b1      	adds	r1, r6, r2
 8012f98:	f002 fa44 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	1d31      	adds	r1, r6, #4
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	401c      	ands	r4, r3
 8012fa4:	f7ff fe5e 	bl	8012c64 <uxr_serialize_ReadSpecification>
 8012fa8:	b2e4      	uxtb	r4, r4
 8012faa:	4020      	ands	r0, r4
 8012fac:	bd70      	pop	{r4, r5, r6, pc}
 8012fae:	bf00      	nop

08012fb0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	2202      	movs	r2, #2
 8012fb4:	4605      	mov	r5, r0
 8012fb6:	460e      	mov	r6, r1
 8012fb8:	f002 fa34 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012fbc:	2202      	movs	r2, #2
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	18b1      	adds	r1, r6, r2
 8012fc4:	f002 fa2e 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012fc8:	4020      	ands	r0, r4
 8012fca:	b2c0      	uxtb	r0, r0
 8012fcc:	bd70      	pop	{r4, r5, r6, pc}
 8012fce:	bf00      	nop

08012fd0 <uxr_serialize_ACKNACK_Payload>:
 8012fd0:	b570      	push	{r4, r5, r6, lr}
 8012fd2:	460c      	mov	r4, r1
 8012fd4:	4605      	mov	r5, r0
 8012fd6:	460e      	mov	r6, r1
 8012fd8:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012fdc:	f7fc fbbc 	bl	800f758 <ucdr_serialize_uint16_t>
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	4621      	mov	r1, r4
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f002 fa1c 	bl	8015424 <ucdr_serialize_array_uint8_t>
 8012fec:	4603      	mov	r3, r0
 8012fee:	7931      	ldrb	r1, [r6, #4]
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	401c      	ands	r4, r3
 8012ff4:	f7fc fb84 	bl	800f700 <ucdr_serialize_uint8_t>
 8012ff8:	b2e4      	uxtb	r4, r4
 8012ffa:	4020      	ands	r0, r4
 8012ffc:	bd70      	pop	{r4, r5, r6, pc}
 8012ffe:	bf00      	nop

08013000 <uxr_deserialize_ACKNACK_Payload>:
 8013000:	b570      	push	{r4, r5, r6, lr}
 8013002:	460e      	mov	r6, r1
 8013004:	4605      	mov	r5, r0
 8013006:	f7fc fca7 	bl	800f958 <ucdr_deserialize_uint16_t>
 801300a:	2202      	movs	r2, #2
 801300c:	4604      	mov	r4, r0
 801300e:	4628      	mov	r0, r5
 8013010:	18b1      	adds	r1, r6, r2
 8013012:	f002 fa6b 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8013016:	4603      	mov	r3, r0
 8013018:	1d31      	adds	r1, r6, #4
 801301a:	4628      	mov	r0, r5
 801301c:	401c      	ands	r4, r3
 801301e:	f7fc fb85 	bl	800f72c <ucdr_deserialize_uint8_t>
 8013022:	b2e4      	uxtb	r4, r4
 8013024:	4020      	ands	r0, r4
 8013026:	bd70      	pop	{r4, r5, r6, pc}

08013028 <uxr_serialize_HEARTBEAT_Payload>:
 8013028:	b570      	push	{r4, r5, r6, lr}
 801302a:	460d      	mov	r5, r1
 801302c:	4606      	mov	r6, r0
 801302e:	8809      	ldrh	r1, [r1, #0]
 8013030:	f7fc fb92 	bl	800f758 <ucdr_serialize_uint16_t>
 8013034:	8869      	ldrh	r1, [r5, #2]
 8013036:	4604      	mov	r4, r0
 8013038:	4630      	mov	r0, r6
 801303a:	f7fc fb8d 	bl	800f758 <ucdr_serialize_uint16_t>
 801303e:	4603      	mov	r3, r0
 8013040:	7929      	ldrb	r1, [r5, #4]
 8013042:	4630      	mov	r0, r6
 8013044:	401c      	ands	r4, r3
 8013046:	f7fc fb5b 	bl	800f700 <ucdr_serialize_uint8_t>
 801304a:	b2e4      	uxtb	r4, r4
 801304c:	4020      	ands	r0, r4
 801304e:	bd70      	pop	{r4, r5, r6, pc}

08013050 <uxr_deserialize_HEARTBEAT_Payload>:
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	460e      	mov	r6, r1
 8013054:	4605      	mov	r5, r0
 8013056:	f7fc fc7f 	bl	800f958 <ucdr_deserialize_uint16_t>
 801305a:	4604      	mov	r4, r0
 801305c:	1cb1      	adds	r1, r6, #2
 801305e:	4628      	mov	r0, r5
 8013060:	f7fc fc7a 	bl	800f958 <ucdr_deserialize_uint16_t>
 8013064:	4603      	mov	r3, r0
 8013066:	1d31      	adds	r1, r6, #4
 8013068:	4628      	mov	r0, r5
 801306a:	401c      	ands	r4, r3
 801306c:	f7fc fb5e 	bl	800f72c <ucdr_deserialize_uint8_t>
 8013070:	b2e4      	uxtb	r4, r4
 8013072:	4020      	ands	r0, r4
 8013074:	bd70      	pop	{r4, r5, r6, pc}
 8013076:	bf00      	nop

08013078 <uxr_serialize_TIMESTAMP_Payload>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	460d      	mov	r5, r1
 801307c:	4606      	mov	r6, r0
 801307e:	6809      	ldr	r1, [r1, #0]
 8013080:	f7fd f96e 	bl	8010360 <ucdr_serialize_int32_t>
 8013084:	4604      	mov	r4, r0
 8013086:	6869      	ldr	r1, [r5, #4]
 8013088:	4630      	mov	r0, r6
 801308a:	f7fc fd4f 	bl	800fb2c <ucdr_serialize_uint32_t>
 801308e:	4020      	ands	r0, r4
 8013090:	b2c0      	uxtb	r0, r0
 8013092:	bd70      	pop	{r4, r5, r6, pc}

08013094 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013098:	460e      	mov	r6, r1
 801309a:	4605      	mov	r5, r0
 801309c:	f7fd f9f8 	bl	8010490 <ucdr_deserialize_int32_t>
 80130a0:	4607      	mov	r7, r0
 80130a2:	1d31      	adds	r1, r6, #4
 80130a4:	4628      	mov	r0, r5
 80130a6:	f7fc fe71 	bl	800fd8c <ucdr_deserialize_uint32_t>
 80130aa:	4680      	mov	r8, r0
 80130ac:	f106 0108 	add.w	r1, r6, #8
 80130b0:	4628      	mov	r0, r5
 80130b2:	f7fd f9ed 	bl	8010490 <ucdr_deserialize_int32_t>
 80130b6:	ea07 0708 	and.w	r7, r7, r8
 80130ba:	4604      	mov	r4, r0
 80130bc:	f106 010c 	add.w	r1, r6, #12
 80130c0:	4628      	mov	r0, r5
 80130c2:	403c      	ands	r4, r7
 80130c4:	f7fc fe62 	bl	800fd8c <ucdr_deserialize_uint32_t>
 80130c8:	f106 0110 	add.w	r1, r6, #16
 80130cc:	4004      	ands	r4, r0
 80130ce:	4628      	mov	r0, r5
 80130d0:	f7fd f9de 	bl	8010490 <ucdr_deserialize_int32_t>
 80130d4:	4603      	mov	r3, r0
 80130d6:	b2e4      	uxtb	r4, r4
 80130d8:	4628      	mov	r0, r5
 80130da:	461d      	mov	r5, r3
 80130dc:	f106 0114 	add.w	r1, r6, #20
 80130e0:	f7fc fe54 	bl	800fd8c <ucdr_deserialize_uint32_t>
 80130e4:	402c      	ands	r4, r5
 80130e6:	4020      	ands	r0, r4
 80130e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130ec <uxr_deserialize_SampleIdentity>:
 80130ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f0:	4604      	mov	r4, r0
 80130f2:	460d      	mov	r5, r1
 80130f4:	220c      	movs	r2, #12
 80130f6:	f002 f9f9 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80130fa:	2203      	movs	r2, #3
 80130fc:	f105 010c 	add.w	r1, r5, #12
 8013100:	4607      	mov	r7, r0
 8013102:	4620      	mov	r0, r4
 8013104:	f002 f9f2 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8013108:	f105 010f 	add.w	r1, r5, #15
 801310c:	4680      	mov	r8, r0
 801310e:	4620      	mov	r0, r4
 8013110:	f7fc fb0c 	bl	800f72c <ucdr_deserialize_uint8_t>
 8013114:	f105 0110 	add.w	r1, r5, #16
 8013118:	4606      	mov	r6, r0
 801311a:	4620      	mov	r0, r4
 801311c:	f7fd f9b8 	bl	8010490 <ucdr_deserialize_int32_t>
 8013120:	ea07 0708 	and.w	r7, r7, r8
 8013124:	4603      	mov	r3, r0
 8013126:	4620      	mov	r0, r4
 8013128:	403e      	ands	r6, r7
 801312a:	f105 0114 	add.w	r1, r5, #20
 801312e:	461c      	mov	r4, r3
 8013130:	f7fc fe2c 	bl	800fd8c <ucdr_deserialize_uint32_t>
 8013134:	4034      	ands	r4, r6
 8013136:	4020      	ands	r0, r4
 8013138:	b2c0      	uxtb	r0, r0
 801313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801313e:	bf00      	nop

08013140 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013140:	280b      	cmp	r0, #11
 8013142:	dc0d      	bgt.n	8013160 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013144:	2800      	cmp	r0, #0
 8013146:	db09      	blt.n	801315c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013148:	280b      	cmp	r0, #11
 801314a:	d807      	bhi.n	801315c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801314c:	e8df f000 	tbb	[pc, r0]
 8013150:	07060607 	.word	0x07060607
 8013154:	06060606 	.word	0x06060606
 8013158:	07070606 	.word	0x07070606
 801315c:	2001      	movs	r0, #1
 801315e:	4770      	bx	lr
 8013160:	28cb      	cmp	r0, #203	@ 0xcb
 8013162:	bf18      	it	ne
 8013164:	2001      	movne	r0, #1
 8013166:	4770      	bx	lr

08013168 <rcl_get_zero_initialized_context>:
 8013168:	4a03      	ldr	r2, [pc, #12]	@ (8013178 <rcl_get_zero_initialized_context+0x10>)
 801316a:	4603      	mov	r3, r0
 801316c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013170:	e883 0003 	stmia.w	r3, {r0, r1}
 8013174:	4618      	mov	r0, r3
 8013176:	4770      	bx	lr
 8013178:	08019134 	.word	0x08019134

0801317c <rcl_context_is_valid>:
 801317c:	b118      	cbz	r0, 8013186 <rcl_context_is_valid+0xa>
 801317e:	6840      	ldr	r0, [r0, #4]
 8013180:	3800      	subs	r0, #0
 8013182:	bf18      	it	ne
 8013184:	2001      	movne	r0, #1
 8013186:	4770      	bx	lr

08013188 <__cleanup_context>:
 8013188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801318c:	4606      	mov	r6, r0
 801318e:	2300      	movs	r3, #0
 8013190:	6800      	ldr	r0, [r0, #0]
 8013192:	6073      	str	r3, [r6, #4]
 8013194:	2800      	cmp	r0, #0
 8013196:	d049      	beq.n	801322c <__cleanup_context+0xa4>
 8013198:	6947      	ldr	r7, [r0, #20]
 801319a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801319e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80131a2:	b137      	cbz	r7, 80131b2 <__cleanup_context+0x2a>
 80131a4:	3014      	adds	r0, #20
 80131a6:	f000 f9bd 	bl	8013524 <rcl_init_options_fini>
 80131aa:	4607      	mov	r7, r0
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d144      	bne.n	801323a <__cleanup_context+0xb2>
 80131b0:	6830      	ldr	r0, [r6, #0]
 80131b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80131b4:	b143      	cbz	r3, 80131c8 <__cleanup_context+0x40>
 80131b6:	3028      	adds	r0, #40	@ 0x28
 80131b8:	f001 fe22 	bl	8014e00 <rmw_context_fini>
 80131bc:	b118      	cbz	r0, 80131c6 <__cleanup_context+0x3e>
 80131be:	2f00      	cmp	r7, #0
 80131c0:	d03e      	beq.n	8013240 <__cleanup_context+0xb8>
 80131c2:	f7fb fd41 	bl	800ec48 <rcutils_reset_error>
 80131c6:	6830      	ldr	r0, [r6, #0]
 80131c8:	6a03      	ldr	r3, [r0, #32]
 80131ca:	b1db      	cbz	r3, 8013204 <__cleanup_context+0x7c>
 80131cc:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80131d0:	2a01      	cmp	r2, #1
 80131d2:	f17c 0100 	sbcs.w	r1, ip, #0
 80131d6:	db11      	blt.n	80131fc <__cleanup_context+0x74>
 80131d8:	2400      	movs	r4, #0
 80131da:	4625      	mov	r5, r4
 80131dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80131e0:	4649      	mov	r1, r9
 80131e2:	b1b8      	cbz	r0, 8013214 <__cleanup_context+0x8c>
 80131e4:	47c0      	blx	r8
 80131e6:	6833      	ldr	r3, [r6, #0]
 80131e8:	3401      	adds	r4, #1
 80131ea:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80131ee:	f145 0500 	adc.w	r5, r5, #0
 80131f2:	6a1b      	ldr	r3, [r3, #32]
 80131f4:	4294      	cmp	r4, r2
 80131f6:	eb75 010c 	sbcs.w	r1, r5, ip
 80131fa:	dbef      	blt.n	80131dc <__cleanup_context+0x54>
 80131fc:	4618      	mov	r0, r3
 80131fe:	4649      	mov	r1, r9
 8013200:	47c0      	blx	r8
 8013202:	6830      	ldr	r0, [r6, #0]
 8013204:	4649      	mov	r1, r9
 8013206:	47c0      	blx	r8
 8013208:	2300      	movs	r3, #0
 801320a:	4638      	mov	r0, r7
 801320c:	e9c6 3300 	strd	r3, r3, [r6]
 8013210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013214:	3401      	adds	r4, #1
 8013216:	f145 0500 	adc.w	r5, r5, #0
 801321a:	4294      	cmp	r4, r2
 801321c:	eb75 010c 	sbcs.w	r1, r5, ip
 8013220:	dbdc      	blt.n	80131dc <__cleanup_context+0x54>
 8013222:	4618      	mov	r0, r3
 8013224:	4649      	mov	r1, r9
 8013226:	47c0      	blx	r8
 8013228:	6830      	ldr	r0, [r6, #0]
 801322a:	e7eb      	b.n	8013204 <__cleanup_context+0x7c>
 801322c:	4607      	mov	r7, r0
 801322e:	2300      	movs	r3, #0
 8013230:	4638      	mov	r0, r7
 8013232:	e9c6 3300 	strd	r3, r3, [r6]
 8013236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323a:	f7fb fd05 	bl	800ec48 <rcutils_reset_error>
 801323e:	e7b7      	b.n	80131b0 <__cleanup_context+0x28>
 8013240:	f7ff ff7e 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8013244:	4607      	mov	r7, r0
 8013246:	e7bc      	b.n	80131c2 <__cleanup_context+0x3a>

08013248 <rcl_init>:
 8013248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801324c:	1e05      	subs	r5, r0, #0
 801324e:	b09e      	sub	sp, #120	@ 0x78
 8013250:	460e      	mov	r6, r1
 8013252:	4690      	mov	r8, r2
 8013254:	461f      	mov	r7, r3
 8013256:	f340 809f 	ble.w	8013398 <rcl_init+0x150>
 801325a:	2900      	cmp	r1, #0
 801325c:	f000 809f 	beq.w	801339e <rcl_init+0x156>
 8013260:	f1a1 0e04 	sub.w	lr, r1, #4
 8013264:	f04f 0c00 	mov.w	ip, #0
 8013268:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801326c:	f10c 0c01 	add.w	ip, ip, #1
 8013270:	2c00      	cmp	r4, #0
 8013272:	f000 8094 	beq.w	801339e <rcl_init+0x156>
 8013276:	4565      	cmp	r5, ip
 8013278:	d1f6      	bne.n	8013268 <rcl_init+0x20>
 801327a:	f1b8 0f00 	cmp.w	r8, #0
 801327e:	f000 808e 	beq.w	801339e <rcl_init+0x156>
 8013282:	f8d8 4000 	ldr.w	r4, [r8]
 8013286:	2c00      	cmp	r4, #0
 8013288:	f000 8089 	beq.w	801339e <rcl_init+0x156>
 801328c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013296:	6823      	ldr	r3, [r4, #0]
 8013298:	a819      	add	r0, sp, #100	@ 0x64
 801329a:	f8cc 3000 	str.w	r3, [ip]
 801329e:	f7fb fcaf 	bl	800ec00 <rcutils_allocator_is_valid>
 80132a2:	f080 0001 	eor.w	r0, r0, #1
 80132a6:	b2c0      	uxtb	r0, r0
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d178      	bne.n	801339e <rcl_init+0x156>
 80132ac:	2f00      	cmp	r7, #0
 80132ae:	d076      	beq.n	801339e <rcl_init+0x156>
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d178      	bne.n	80133a8 <rcl_init+0x160>
 80132b6:	2178      	movs	r1, #120	@ 0x78
 80132b8:	2001      	movs	r0, #1
 80132ba:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80132be:	4798      	blx	r3
 80132c0:	4604      	mov	r4, r0
 80132c2:	6038      	str	r0, [r7, #0]
 80132c4:	2800      	cmp	r0, #0
 80132c6:	f000 80b6 	beq.w	8013436 <rcl_init+0x1ee>
 80132ca:	a802      	add	r0, sp, #8
 80132cc:	f001 f9c4 	bl	8014658 <rmw_get_zero_initialized_context>
 80132d0:	a902      	add	r1, sp, #8
 80132d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80132d6:	2250      	movs	r2, #80	@ 0x50
 80132d8:	f004 fea5 	bl	8018026 <memcpy>
 80132dc:	ac19      	add	r4, sp, #100	@ 0x64
 80132de:	f8d7 e000 	ldr.w	lr, [r7]
 80132e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132e4:	46f4      	mov	ip, lr
 80132e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132ea:	6823      	ldr	r3, [r4, #0]
 80132ec:	f10e 0114 	add.w	r1, lr, #20
 80132f0:	4640      	mov	r0, r8
 80132f2:	f8cc 3000 	str.w	r3, [ip]
 80132f6:	f000 f93f 	bl	8013578 <rcl_init_options_copy>
 80132fa:	4604      	mov	r4, r0
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d144      	bne.n	801338a <rcl_init+0x142>
 8013300:	f8d7 9000 	ldr.w	r9, [r7]
 8013304:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013308:	f8c9 0020 	str.w	r0, [r9, #32]
 801330c:	f8c9 5018 	str.w	r5, [r9, #24]
 8013310:	f8c9 801c 	str.w	r8, [r9, #28]
 8013314:	2d00      	cmp	r5, #0
 8013316:	d04e      	beq.n	80133b6 <rcl_init+0x16e>
 8013318:	2e00      	cmp	r6, #0
 801331a:	d04c      	beq.n	80133b6 <rcl_init+0x16e>
 801331c:	2104      	movs	r1, #4
 801331e:	4628      	mov	r0, r5
 8013320:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013324:	4798      	blx	r3
 8013326:	f8c9 0020 	str.w	r0, [r9, #32]
 801332a:	f8d7 9000 	ldr.w	r9, [r7]
 801332e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013332:	46ca      	mov	sl, r9
 8013334:	b343      	cbz	r3, 8013388 <rcl_init+0x140>
 8013336:	2d01      	cmp	r5, #1
 8013338:	f178 0300 	sbcs.w	r3, r8, #0
 801333c:	db3b      	blt.n	80133b6 <rcl_init+0x16e>
 801333e:	2400      	movs	r4, #0
 8013340:	3e04      	subs	r6, #4
 8013342:	46a1      	mov	r9, r4
 8013344:	e00b      	b.n	801335e <rcl_init+0x116>
 8013346:	6831      	ldr	r1, [r6, #0]
 8013348:	f004 fe6d 	bl	8018026 <memcpy>
 801334c:	3401      	adds	r4, #1
 801334e:	f149 0900 	adc.w	r9, r9, #0
 8013352:	45c8      	cmp	r8, r9
 8013354:	bf08      	it	eq
 8013356:	42a5      	cmpeq	r5, r4
 8013358:	d02b      	beq.n	80133b2 <rcl_init+0x16a>
 801335a:	f8d7 a000 	ldr.w	sl, [r7]
 801335e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013362:	f7ec ffc7 	bl	80002f4 <strlen>
 8013366:	1c42      	adds	r2, r0, #1
 8013368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801336a:	4610      	mov	r0, r2
 801336c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801336e:	f8da a020 	ldr.w	sl, [sl, #32]
 8013372:	9201      	str	r2, [sp, #4]
 8013374:	4798      	blx	r3
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801337c:	6a1b      	ldr	r3, [r3, #32]
 801337e:	9a01      	ldr	r2, [sp, #4]
 8013380:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013384:	2800      	cmp	r0, #0
 8013386:	d1de      	bne.n	8013346 <rcl_init+0xfe>
 8013388:	240a      	movs	r4, #10
 801338a:	4638      	mov	r0, r7
 801338c:	f7ff fefc 	bl	8013188 <__cleanup_context>
 8013390:	4620      	mov	r0, r4
 8013392:	b01e      	add	sp, #120	@ 0x78
 8013394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013398:	2900      	cmp	r1, #0
 801339a:	f43f af6e 	beq.w	801327a <rcl_init+0x32>
 801339e:	240b      	movs	r4, #11
 80133a0:	4620      	mov	r0, r4
 80133a2:	b01e      	add	sp, #120	@ 0x78
 80133a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133a8:	2464      	movs	r4, #100	@ 0x64
 80133aa:	4620      	mov	r0, r4
 80133ac:	b01e      	add	sp, #120	@ 0x78
 80133ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133b2:	f8d7 9000 	ldr.w	r9, [r7]
 80133b6:	4926      	ldr	r1, [pc, #152]	@ (8013450 <rcl_init+0x208>)
 80133b8:	680b      	ldr	r3, [r1, #0]
 80133ba:	3301      	adds	r3, #1
 80133bc:	d036      	beq.n	801342c <rcl_init+0x1e4>
 80133be:	461a      	mov	r2, r3
 80133c0:	2400      	movs	r4, #0
 80133c2:	600b      	str	r3, [r1, #0]
 80133c4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80133c8:	607b      	str	r3, [r7, #4]
 80133ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80133cc:	3301      	adds	r3, #1
 80133ce:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80133d2:	d034      	beq.n	801343e <rcl_init+0x1f6>
 80133d4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80133d8:	b93b      	cbnz	r3, 80133ea <rcl_init+0x1a2>
 80133da:	3030      	adds	r0, #48	@ 0x30
 80133dc:	f000 f93a 	bl	8013654 <rcl_get_localhost_only>
 80133e0:	4604      	mov	r4, r0
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d1d1      	bne.n	801338a <rcl_init+0x142>
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	6958      	ldr	r0, [r3, #20]
 80133ea:	aa18      	add	r2, sp, #96	@ 0x60
 80133ec:	a917      	add	r1, sp, #92	@ 0x5c
 80133ee:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80133f0:	f000 fdce 	bl	8013f90 <rcl_validate_enclave_name>
 80133f4:	4604      	mov	r4, r0
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d1c7      	bne.n	801338a <rcl_init+0x142>
 80133fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80133fc:	b9eb      	cbnz	r3, 801343a <rcl_init+0x1f2>
 80133fe:	6839      	ldr	r1, [r7, #0]
 8013400:	694b      	ldr	r3, [r1, #20]
 8013402:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013406:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013408:	f000 fc72 	bl	8013cf0 <rcl_get_security_options_from_environment>
 801340c:	4604      	mov	r4, r0
 801340e:	2800      	cmp	r0, #0
 8013410:	d1bb      	bne.n	801338a <rcl_init+0x142>
 8013412:	6839      	ldr	r1, [r7, #0]
 8013414:	6948      	ldr	r0, [r1, #20]
 8013416:	3128      	adds	r1, #40	@ 0x28
 8013418:	3018      	adds	r0, #24
 801341a:	f001 fbbb 	bl	8014b94 <rmw_init>
 801341e:	4604      	mov	r4, r0
 8013420:	2800      	cmp	r0, #0
 8013422:	d0bd      	beq.n	80133a0 <rcl_init+0x158>
 8013424:	f7ff fe8c 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8013428:	4604      	mov	r4, r0
 801342a:	e7ae      	b.n	801338a <rcl_init+0x142>
 801342c:	2201      	movs	r2, #1
 801342e:	461c      	mov	r4, r3
 8013430:	600a      	str	r2, [r1, #0]
 8013432:	4613      	mov	r3, r2
 8013434:	e7c6      	b.n	80133c4 <rcl_init+0x17c>
 8013436:	240a      	movs	r4, #10
 8013438:	e7b2      	b.n	80133a0 <rcl_init+0x158>
 801343a:	2401      	movs	r4, #1
 801343c:	e7a5      	b.n	801338a <rcl_init+0x142>
 801343e:	3024      	adds	r0, #36	@ 0x24
 8013440:	f003 fcc8 	bl	8016dd4 <rcl_get_default_domain_id>
 8013444:	4604      	mov	r4, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d19f      	bne.n	801338a <rcl_init+0x142>
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	6958      	ldr	r0, [r3, #20]
 801344e:	e7c1      	b.n	80133d4 <rcl_init+0x18c>
 8013450:	240685b4 	.word	0x240685b4

08013454 <rcl_get_zero_initialized_init_options>:
 8013454:	2000      	movs	r0, #0
 8013456:	4770      	bx	lr

08013458 <rcl_init_options_init>:
 8013458:	b084      	sub	sp, #16
 801345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801345c:	b097      	sub	sp, #92	@ 0x5c
 801345e:	ae1d      	add	r6, sp, #116	@ 0x74
 8013460:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013464:	2800      	cmp	r0, #0
 8013466:	d058      	beq.n	801351a <rcl_init_options_init+0xc2>
 8013468:	6803      	ldr	r3, [r0, #0]
 801346a:	4605      	mov	r5, r0
 801346c:	b133      	cbz	r3, 801347c <rcl_init_options_init+0x24>
 801346e:	2464      	movs	r4, #100	@ 0x64
 8013470:	4620      	mov	r0, r4
 8013472:	b017      	add	sp, #92	@ 0x5c
 8013474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013478:	b004      	add	sp, #16
 801347a:	4770      	bx	lr
 801347c:	4630      	mov	r0, r6
 801347e:	f7fb fbbf 	bl	800ec00 <rcutils_allocator_is_valid>
 8013482:	2800      	cmp	r0, #0
 8013484:	d049      	beq.n	801351a <rcl_init_options_init+0xc2>
 8013486:	46b4      	mov	ip, r6
 8013488:	ac11      	add	r4, sp, #68	@ 0x44
 801348a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013490:	f8dc 3000 	ldr.w	r3, [ip]
 8013494:	2050      	movs	r0, #80	@ 0x50
 8013496:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801349c:	4798      	blx	r3
 801349e:	4604      	mov	r4, r0
 80134a0:	6028      	str	r0, [r5, #0]
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d03b      	beq.n	801351e <rcl_init_options_init+0xc6>
 80134a6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80134aa:	4686      	mov	lr, r0
 80134ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134b4:	f8dc 3000 	ldr.w	r3, [ip]
 80134b8:	a802      	add	r0, sp, #8
 80134ba:	f8ce 3000 	str.w	r3, [lr]
 80134be:	f001 f8df 	bl	8014680 <rmw_get_zero_initialized_init_options>
 80134c2:	f10d 0e08 	add.w	lr, sp, #8
 80134c6:	f104 0c18 	add.w	ip, r4, #24
 80134ca:	682f      	ldr	r7, [r5, #0]
 80134cc:	ac20      	add	r4, sp, #128	@ 0x80
 80134ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134e6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80134ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80134ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80134f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80134fa:	f107 0018 	add.w	r0, r7, #24
 80134fe:	f001 fa4b 	bl	8014998 <rmw_init_options_init>
 8013502:	4604      	mov	r4, r0
 8013504:	2800      	cmp	r0, #0
 8013506:	d0b3      	beq.n	8013470 <rcl_init_options_init+0x18>
 8013508:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801350a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801350c:	6828      	ldr	r0, [r5, #0]
 801350e:	4798      	blx	r3
 8013510:	4620      	mov	r0, r4
 8013512:	f7ff fe15 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8013516:	4604      	mov	r4, r0
 8013518:	e7aa      	b.n	8013470 <rcl_init_options_init+0x18>
 801351a:	240b      	movs	r4, #11
 801351c:	e7a8      	b.n	8013470 <rcl_init_options_init+0x18>
 801351e:	240a      	movs	r4, #10
 8013520:	e7a6      	b.n	8013470 <rcl_init_options_init+0x18>
 8013522:	bf00      	nop

08013524 <rcl_init_options_fini>:
 8013524:	b530      	push	{r4, r5, lr}
 8013526:	b087      	sub	sp, #28
 8013528:	b1f0      	cbz	r0, 8013568 <rcl_init_options_fini+0x44>
 801352a:	6803      	ldr	r3, [r0, #0]
 801352c:	4604      	mov	r4, r0
 801352e:	b1db      	cbz	r3, 8013568 <rcl_init_options_fini+0x44>
 8013530:	469c      	mov	ip, r3
 8013532:	f10d 0e04 	add.w	lr, sp, #4
 8013536:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801353a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801353e:	f8dc 3000 	ldr.w	r3, [ip]
 8013542:	a801      	add	r0, sp, #4
 8013544:	f8ce 3000 	str.w	r3, [lr]
 8013548:	f7fb fb5a 	bl	800ec00 <rcutils_allocator_is_valid>
 801354c:	b160      	cbz	r0, 8013568 <rcl_init_options_fini+0x44>
 801354e:	6820      	ldr	r0, [r4, #0]
 8013550:	3018      	adds	r0, #24
 8013552:	f001 fadb 	bl	8014b0c <rmw_init_options_fini>
 8013556:	4605      	mov	r5, r0
 8013558:	b950      	cbnz	r0, 8013570 <rcl_init_options_fini+0x4c>
 801355a:	6820      	ldr	r0, [r4, #0]
 801355c:	9b02      	ldr	r3, [sp, #8]
 801355e:	9905      	ldr	r1, [sp, #20]
 8013560:	4798      	blx	r3
 8013562:	4628      	mov	r0, r5
 8013564:	b007      	add	sp, #28
 8013566:	bd30      	pop	{r4, r5, pc}
 8013568:	250b      	movs	r5, #11
 801356a:	4628      	mov	r0, r5
 801356c:	b007      	add	sp, #28
 801356e:	bd30      	pop	{r4, r5, pc}
 8013570:	f7ff fde6 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8013574:	4605      	mov	r5, r0
 8013576:	e7f8      	b.n	801356a <rcl_init_options_fini+0x46>

08013578 <rcl_init_options_copy>:
 8013578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801357c:	b094      	sub	sp, #80	@ 0x50
 801357e:	2800      	cmp	r0, #0
 8013580:	d05b      	beq.n	801363a <rcl_init_options_copy+0xc2>
 8013582:	4604      	mov	r4, r0
 8013584:	6800      	ldr	r0, [r0, #0]
 8013586:	2800      	cmp	r0, #0
 8013588:	d057      	beq.n	801363a <rcl_init_options_copy+0xc2>
 801358a:	460e      	mov	r6, r1
 801358c:	f7fb fb38 	bl	800ec00 <rcutils_allocator_is_valid>
 8013590:	2e00      	cmp	r6, #0
 8013592:	d052      	beq.n	801363a <rcl_init_options_copy+0xc2>
 8013594:	f080 0001 	eor.w	r0, r0, #1
 8013598:	b2c0      	uxtb	r0, r0
 801359a:	2800      	cmp	r0, #0
 801359c:	d14d      	bne.n	801363a <rcl_init_options_copy+0xc2>
 801359e:	6833      	ldr	r3, [r6, #0]
 80135a0:	b123      	cbz	r3, 80135ac <rcl_init_options_copy+0x34>
 80135a2:	2464      	movs	r4, #100	@ 0x64
 80135a4:	4620      	mov	r0, r4
 80135a6:	b014      	add	sp, #80	@ 0x50
 80135a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ac:	6827      	ldr	r7, [r4, #0]
 80135ae:	ad0f      	add	r5, sp, #60	@ 0x3c
 80135b0:	46bc      	mov	ip, r7
 80135b2:	f8d7 8000 	ldr.w	r8, [r7]
 80135b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135bc:	f8dc 3000 	ldr.w	r3, [ip]
 80135c0:	2050      	movs	r0, #80	@ 0x50
 80135c2:	4619      	mov	r1, r3
 80135c4:	602b      	str	r3, [r5, #0]
 80135c6:	47c0      	blx	r8
 80135c8:	4605      	mov	r5, r0
 80135ca:	6030      	str	r0, [r6, #0]
 80135cc:	b3d0      	cbz	r0, 8013644 <rcl_init_options_copy+0xcc>
 80135ce:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80135d2:	4686      	mov	lr, r0
 80135d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135dc:	f8dc 3000 	ldr.w	r3, [ip]
 80135e0:	4668      	mov	r0, sp
 80135e2:	f8ce 3000 	str.w	r3, [lr]
 80135e6:	f001 f84b 	bl	8014680 <rmw_get_zero_initialized_init_options>
 80135ea:	46ee      	mov	lr, sp
 80135ec:	f105 0c18 	add.w	ip, r5, #24
 80135f0:	6824      	ldr	r4, [r4, #0]
 80135f2:	6835      	ldr	r5, [r6, #0]
 80135f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013600:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013604:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801360c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013610:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013614:	f104 0018 	add.w	r0, r4, #24
 8013618:	f105 0118 	add.w	r1, r5, #24
 801361c:	f001 fa24 	bl	8014a68 <rmw_init_options_copy>
 8013620:	4604      	mov	r4, r0
 8013622:	2800      	cmp	r0, #0
 8013624:	d0be      	beq.n	80135a4 <rcl_init_options_copy+0x2c>
 8013626:	f7fb faf9 	bl	800ec1c <rcutils_get_error_string>
 801362a:	f7fb fb0d 	bl	800ec48 <rcutils_reset_error>
 801362e:	4630      	mov	r0, r6
 8013630:	f7ff ff78 	bl	8013524 <rcl_init_options_fini>
 8013634:	b140      	cbz	r0, 8013648 <rcl_init_options_copy+0xd0>
 8013636:	4604      	mov	r4, r0
 8013638:	e7b4      	b.n	80135a4 <rcl_init_options_copy+0x2c>
 801363a:	240b      	movs	r4, #11
 801363c:	4620      	mov	r0, r4
 801363e:	b014      	add	sp, #80	@ 0x50
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	240a      	movs	r4, #10
 8013646:	e7ad      	b.n	80135a4 <rcl_init_options_copy+0x2c>
 8013648:	4620      	mov	r0, r4
 801364a:	b014      	add	sp, #80	@ 0x50
 801364c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	f7ff bd76 	b.w	8013140 <rcl_convert_rmw_ret_to_rcl_ret>

08013654 <rcl_get_localhost_only>:
 8013654:	b510      	push	{r4, lr}
 8013656:	2300      	movs	r3, #0
 8013658:	b082      	sub	sp, #8
 801365a:	9301      	str	r3, [sp, #4]
 801365c:	b1b8      	cbz	r0, 801368e <rcl_get_localhost_only+0x3a>
 801365e:	4604      	mov	r4, r0
 8013660:	a901      	add	r1, sp, #4
 8013662:	480c      	ldr	r0, [pc, #48]	@ (8013694 <rcl_get_localhost_only+0x40>)
 8013664:	f000 fcdc 	bl	8014020 <rcutils_get_env>
 8013668:	b110      	cbz	r0, 8013670 <rcl_get_localhost_only+0x1c>
 801366a:	2001      	movs	r0, #1
 801366c:	b002      	add	sp, #8
 801366e:	bd10      	pop	{r4, pc}
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	b113      	cbz	r3, 801367a <rcl_get_localhost_only+0x26>
 8013674:	781a      	ldrb	r2, [r3, #0]
 8013676:	2a31      	cmp	r2, #49	@ 0x31
 8013678:	d004      	beq.n	8013684 <rcl_get_localhost_only+0x30>
 801367a:	2302      	movs	r3, #2
 801367c:	2000      	movs	r0, #0
 801367e:	7023      	strb	r3, [r4, #0]
 8013680:	b002      	add	sp, #8
 8013682:	bd10      	pop	{r4, pc}
 8013684:	785b      	ldrb	r3, [r3, #1]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d1f7      	bne.n	801367a <rcl_get_localhost_only+0x26>
 801368a:	2301      	movs	r3, #1
 801368c:	e7f6      	b.n	801367c <rcl_get_localhost_only+0x28>
 801368e:	200b      	movs	r0, #11
 8013690:	b002      	add	sp, #8
 8013692:	bd10      	pop	{r4, pc}
 8013694:	0801913c 	.word	0x0801913c

08013698 <rcl_get_zero_initialized_node>:
 8013698:	4a03      	ldr	r2, [pc, #12]	@ (80136a8 <rcl_get_zero_initialized_node+0x10>)
 801369a:	4603      	mov	r3, r0
 801369c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80136a4:	4618      	mov	r0, r3
 80136a6:	4770      	bx	lr
 80136a8:	08019164 	.word	0x08019164

080136ac <rcl_node_init>:
 80136ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	b0a9      	sub	sp, #164	@ 0xa4
 80136b2:	4604      	mov	r4, r0
 80136b4:	460e      	mov	r6, r1
 80136b6:	4615      	mov	r5, r2
 80136b8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80136bc:	a823      	add	r0, sp, #140	@ 0x8c
 80136be:	461f      	mov	r7, r3
 80136c0:	f003 fdae 	bl	8017220 <rcl_guard_condition_get_default_options>
 80136c4:	f1b8 0f00 	cmp.w	r8, #0
 80136c8:	f000 80f3 	beq.w	80138b2 <rcl_node_init+0x206>
 80136cc:	4640      	mov	r0, r8
 80136ce:	f7fb fa97 	bl	800ec00 <rcutils_allocator_is_valid>
 80136d2:	2d00      	cmp	r5, #0
 80136d4:	bf18      	it	ne
 80136d6:	2c00      	cmpne	r4, #0
 80136d8:	f080 0001 	eor.w	r0, r0, #1
 80136dc:	bf0c      	ite	eq
 80136de:	f04f 0c01 	moveq.w	ip, #1
 80136e2:	f04f 0c00 	movne.w	ip, #0
 80136e6:	2e00      	cmp	r6, #0
 80136e8:	bf08      	it	eq
 80136ea:	f04c 0c01 	orreq.w	ip, ip, #1
 80136ee:	ea4c 0c00 	orr.w	ip, ip, r0
 80136f2:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80136f6:	f040 80dc 	bne.w	80138b2 <rcl_node_init+0x206>
 80136fa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80136fe:	f1ba 0f00 	cmp.w	sl, #0
 8013702:	f040 80fc 	bne.w	80138fe <rcl_node_init+0x252>
 8013706:	2f00      	cmp	r7, #0
 8013708:	f000 80d3 	beq.w	80138b2 <rcl_node_init+0x206>
 801370c:	4638      	mov	r0, r7
 801370e:	f7ff fd35 	bl	801317c <rcl_context_is_valid>
 8013712:	4683      	mov	fp, r0
 8013714:	2800      	cmp	r0, #0
 8013716:	f000 80d2 	beq.w	80138be <rcl_node_init+0x212>
 801371a:	4652      	mov	r2, sl
 801371c:	4630      	mov	r0, r6
 801371e:	a922      	add	r1, sp, #136	@ 0x88
 8013720:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8013724:	f001 f8ae 	bl	8014884 <rmw_validate_node_name>
 8013728:	4682      	mov	sl, r0
 801372a:	2800      	cmp	r0, #0
 801372c:	f040 80c3 	bne.w	80138b6 <rcl_node_init+0x20a>
 8013730:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013732:	2800      	cmp	r0, #0
 8013734:	f040 80f1 	bne.w	801391a <rcl_node_init+0x26e>
 8013738:	4628      	mov	r0, r5
 801373a:	f7ec fddb 	bl	80002f4 <strlen>
 801373e:	2800      	cmp	r0, #0
 8013740:	f040 80c0 	bne.w	80138c4 <rcl_node_init+0x218>
 8013744:	4d79      	ldr	r5, [pc, #484]	@ (801392c <rcl_node_init+0x280>)
 8013746:	a922      	add	r1, sp, #136	@ 0x88
 8013748:	2200      	movs	r2, #0
 801374a:	4628      	mov	r0, r5
 801374c:	f001 f87c 	bl	8014848 <rmw_validate_namespace>
 8013750:	4682      	mov	sl, r0
 8013752:	2800      	cmp	r0, #0
 8013754:	f040 80af 	bne.w	80138b6 <rcl_node_init+0x20a>
 8013758:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801375a:	2800      	cmp	r0, #0
 801375c:	f040 80d5 	bne.w	801390a <rcl_node_init+0x25e>
 8013760:	f8d8 3000 	ldr.w	r3, [r8]
 8013764:	2078      	movs	r0, #120	@ 0x78
 8013766:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801376a:	4798      	blx	r3
 801376c:	4682      	mov	sl, r0
 801376e:	6060      	str	r0, [r4, #4]
 8013770:	2800      	cmp	r0, #0
 8013772:	f000 80cf 	beq.w	8013914 <rcl_node_init+0x268>
 8013776:	2200      	movs	r2, #0
 8013778:	2300      	movs	r3, #0
 801377a:	a808      	add	r0, sp, #32
 801377c:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8013780:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8013784:	f000 f902 	bl	801398c <rcl_node_get_default_options>
 8013788:	a908      	add	r1, sp, #32
 801378a:	4650      	mov	r0, sl
 801378c:	2268      	movs	r2, #104	@ 0x68
 801378e:	f004 fc4a 	bl	8018026 <memcpy>
 8013792:	6861      	ldr	r1, [r4, #4]
 8013794:	4640      	mov	r0, r8
 8013796:	6027      	str	r7, [r4, #0]
 8013798:	f000 f906 	bl	80139a8 <rcl_node_options_copy>
 801379c:	2800      	cmp	r0, #0
 801379e:	d158      	bne.n	8013852 <rcl_node_init+0x1a6>
 80137a0:	4628      	mov	r0, r5
 80137a2:	f7ec fda7 	bl	80002f4 <strlen>
 80137a6:	4428      	add	r0, r5
 80137a8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80137ac:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80137b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80137b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	bf0c      	ite	eq
 80137ba:	4b5d      	ldreq	r3, [pc, #372]	@ (8013930 <rcl_node_init+0x284>)
 80137bc:	4b5d      	ldrne	r3, [pc, #372]	@ (8013934 <rcl_node_init+0x288>)
 80137be:	9302      	str	r3, [sp, #8]
 80137c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80137c4:	9301      	str	r3, [sp, #4]
 80137c6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80137ca:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80137ce:	f000 fc4f 	bl	8014070 <rcutils_format_string_limit>
 80137d2:	6823      	ldr	r3, [r4, #0]
 80137d4:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80137d8:	4631      	mov	r1, r6
 80137da:	6818      	ldr	r0, [r3, #0]
 80137dc:	462a      	mov	r2, r5
 80137de:	6866      	ldr	r6, [r4, #4]
 80137e0:	3028      	adds	r0, #40	@ 0x28
 80137e2:	f001 fc31 	bl	8015048 <rmw_create_node>
 80137e6:	6863      	ldr	r3, [r4, #4]
 80137e8:	66b0      	str	r0, [r6, #104]	@ 0x68
 80137ea:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80137ec:	2800      	cmp	r0, #0
 80137ee:	d032      	beq.n	8013856 <rcl_node_init+0x1aa>
 80137f0:	f001 fcba 	bl	8015168 <rmw_node_get_graph_guard_condition>
 80137f4:	4682      	mov	sl, r0
 80137f6:	b360      	cbz	r0, 8013852 <rcl_node_init+0x1a6>
 80137f8:	f8d8 3000 	ldr.w	r3, [r8]
 80137fc:	2008      	movs	r0, #8
 80137fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013802:	6866      	ldr	r6, [r4, #4]
 8013804:	4798      	blx	r3
 8013806:	6863      	ldr	r3, [r4, #4]
 8013808:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801380a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801380e:	f1bb 0f00 	cmp.w	fp, #0
 8013812:	d020      	beq.n	8013856 <rcl_node_init+0x1aa>
 8013814:	a806      	add	r0, sp, #24
 8013816:	ae23      	add	r6, sp, #140	@ 0x8c
 8013818:	f003 fc76 	bl	8017108 <rcl_get_zero_initialized_guard_condition>
 801381c:	a806      	add	r0, sp, #24
 801381e:	6863      	ldr	r3, [r4, #4]
 8013820:	46c4      	mov	ip, r8
 8013822:	c803      	ldmia	r0, {r0, r1}
 8013824:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013828:	e88b 0003 	stmia.w	fp, {r0, r1}
 801382c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013830:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013832:	f8dc 3000 	ldr.w	r3, [ip]
 8013836:	6033      	str	r3, [r6, #0]
 8013838:	ab28      	add	r3, sp, #160	@ 0xa0
 801383a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801383e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013842:	4651      	mov	r1, sl
 8013844:	463a      	mov	r2, r7
 8013846:	4670      	mov	r0, lr
 8013848:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801384a:	f003 fc67 	bl	801711c <rcl_guard_condition_init_from_rmw>
 801384e:	4682      	mov	sl, r0
 8013850:	b328      	cbz	r0, 801389e <rcl_node_init+0x1f2>
 8013852:	6863      	ldr	r3, [r4, #4]
 8013854:	b1f3      	cbz	r3, 8013894 <rcl_node_init+0x1e8>
 8013856:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013858:	b128      	cbz	r0, 8013866 <rcl_node_init+0x1ba>
 801385a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801385e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013862:	4798      	blx	r3
 8013864:	6863      	ldr	r3, [r4, #4]
 8013866:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013868:	b110      	cbz	r0, 8013870 <rcl_node_init+0x1c4>
 801386a:	f001 fbff 	bl	801506c <rmw_destroy_node>
 801386e:	6863      	ldr	r3, [r4, #4]
 8013870:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013872:	b148      	cbz	r0, 8013888 <rcl_node_init+0x1dc>
 8013874:	f003 fcae 	bl	80171d4 <rcl_guard_condition_fini>
 8013878:	6863      	ldr	r3, [r4, #4]
 801387a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801387e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013884:	4798      	blx	r3
 8013886:	6863      	ldr	r3, [r4, #4]
 8013888:	4618      	mov	r0, r3
 801388a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801388e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013892:	4798      	blx	r3
 8013894:	2300      	movs	r3, #0
 8013896:	f04f 0a01 	mov.w	sl, #1
 801389a:	e9c4 3300 	strd	r3, r3, [r4]
 801389e:	f1b9 0f00 	cmp.w	r9, #0
 80138a2:	d008      	beq.n	80138b6 <rcl_node_init+0x20a>
 80138a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80138a8:	4628      	mov	r0, r5
 80138aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138ae:	4798      	blx	r3
 80138b0:	e001      	b.n	80138b6 <rcl_node_init+0x20a>
 80138b2:	f04f 0a0b 	mov.w	sl, #11
 80138b6:	4650      	mov	r0, sl
 80138b8:	b029      	add	sp, #164	@ 0xa4
 80138ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138be:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 80138c2:	e7f8      	b.n	80138b6 <rcl_node_init+0x20a>
 80138c4:	782b      	ldrb	r3, [r5, #0]
 80138c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80138c8:	f43f af3d 	beq.w	8013746 <rcl_node_init+0x9a>
 80138cc:	9503      	str	r5, [sp, #12]
 80138ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	4b18      	ldr	r3, [pc, #96]	@ (8013938 <rcl_node_init+0x28c>)
 80138d6:	9302      	str	r3, [sp, #8]
 80138d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80138e2:	f000 fbc5 	bl	8014070 <rcutils_format_string_limit>
 80138e6:	4605      	mov	r5, r0
 80138e8:	b1e0      	cbz	r0, 8013924 <rcl_node_init+0x278>
 80138ea:	2200      	movs	r2, #0
 80138ec:	a922      	add	r1, sp, #136	@ 0x88
 80138ee:	9222      	str	r2, [sp, #136]	@ 0x88
 80138f0:	f000 ffaa 	bl	8014848 <rmw_validate_namespace>
 80138f4:	4682      	mov	sl, r0
 80138f6:	2800      	cmp	r0, #0
 80138f8:	d1d4      	bne.n	80138a4 <rcl_node_init+0x1f8>
 80138fa:	46d9      	mov	r9, fp
 80138fc:	e72c      	b.n	8013758 <rcl_node_init+0xac>
 80138fe:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8013902:	4650      	mov	r0, sl
 8013904:	b029      	add	sp, #164	@ 0xa4
 8013906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390a:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801390e:	f000 ffad 	bl	801486c <rmw_namespace_validation_result_string>
 8013912:	e7c4      	b.n	801389e <rcl_node_init+0x1f2>
 8013914:	f04f 0a0a 	mov.w	sl, #10
 8013918:	e7c1      	b.n	801389e <rcl_node_init+0x1f2>
 801391a:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801391e:	f001 f805 	bl	801492c <rmw_node_name_validation_result_string>
 8013922:	e7c8      	b.n	80138b6 <rcl_node_init+0x20a>
 8013924:	f04f 0a0a 	mov.w	sl, #10
 8013928:	e7c5      	b.n	80138b6 <rcl_node_init+0x20a>
 801392a:	bf00      	nop
 801392c:	08019154 	.word	0x08019154
 8013930:	08018fd8 	.word	0x08018fd8
 8013934:	0801915c 	.word	0x0801915c
 8013938:	08019158 	.word	0x08019158

0801393c <rcl_node_is_valid>:
 801393c:	b130      	cbz	r0, 801394c <rcl_node_is_valid+0x10>
 801393e:	6843      	ldr	r3, [r0, #4]
 8013940:	b123      	cbz	r3, 801394c <rcl_node_is_valid+0x10>
 8013942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013944:	b113      	cbz	r3, 801394c <rcl_node_is_valid+0x10>
 8013946:	6800      	ldr	r0, [r0, #0]
 8013948:	f7ff bc18 	b.w	801317c <rcl_context_is_valid>
 801394c:	2000      	movs	r0, #0
 801394e:	4770      	bx	lr

08013950 <rcl_node_get_name>:
 8013950:	b120      	cbz	r0, 801395c <rcl_node_get_name+0xc>
 8013952:	6840      	ldr	r0, [r0, #4]
 8013954:	b110      	cbz	r0, 801395c <rcl_node_get_name+0xc>
 8013956:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013958:	b100      	cbz	r0, 801395c <rcl_node_get_name+0xc>
 801395a:	6880      	ldr	r0, [r0, #8]
 801395c:	4770      	bx	lr
 801395e:	bf00      	nop

08013960 <rcl_node_get_namespace>:
 8013960:	b120      	cbz	r0, 801396c <rcl_node_get_namespace+0xc>
 8013962:	6840      	ldr	r0, [r0, #4]
 8013964:	b110      	cbz	r0, 801396c <rcl_node_get_namespace+0xc>
 8013966:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013968:	b100      	cbz	r0, 801396c <rcl_node_get_namespace+0xc>
 801396a:	68c0      	ldr	r0, [r0, #12]
 801396c:	4770      	bx	lr
 801396e:	bf00      	nop

08013970 <rcl_node_get_options>:
 8013970:	b128      	cbz	r0, 801397e <rcl_node_get_options+0xe>
 8013972:	6840      	ldr	r0, [r0, #4]
 8013974:	b118      	cbz	r0, 801397e <rcl_node_get_options+0xe>
 8013976:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013978:	2b00      	cmp	r3, #0
 801397a:	bf08      	it	eq
 801397c:	2000      	moveq	r0, #0
 801397e:	4770      	bx	lr

08013980 <rcl_node_get_rmw_handle>:
 8013980:	b110      	cbz	r0, 8013988 <rcl_node_get_rmw_handle+0x8>
 8013982:	6840      	ldr	r0, [r0, #4]
 8013984:	b100      	cbz	r0, 8013988 <rcl_node_get_rmw_handle+0x8>
 8013986:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop

0801398c <rcl_node_get_default_options>:
 801398c:	b510      	push	{r4, lr}
 801398e:	4604      	mov	r4, r0
 8013990:	2268      	movs	r2, #104	@ 0x68
 8013992:	2100      	movs	r1, #0
 8013994:	f004 fa28 	bl	8017de8 <memset>
 8013998:	4620      	mov	r0, r4
 801399a:	f7fb f923 	bl	800ebe4 <rcutils_get_default_allocator>
 801399e:	2301      	movs	r3, #1
 80139a0:	4620      	mov	r0, r4
 80139a2:	7523      	strb	r3, [r4, #20]
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	bf00      	nop

080139a8 <rcl_node_options_copy>:
 80139a8:	2800      	cmp	r0, #0
 80139aa:	bf18      	it	ne
 80139ac:	4288      	cmpne	r0, r1
 80139ae:	d01b      	beq.n	80139e8 <rcl_node_options_copy+0x40>
 80139b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139b2:	fab1 f681 	clz	r6, r1
 80139b6:	460c      	mov	r4, r1
 80139b8:	0976      	lsrs	r6, r6, #5
 80139ba:	b199      	cbz	r1, 80139e4 <rcl_node_options_copy+0x3c>
 80139bc:	4605      	mov	r5, r0
 80139be:	8a87      	ldrh	r7, [r0, #20]
 80139c0:	4684      	mov	ip, r0
 80139c2:	468e      	mov	lr, r1
 80139c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139ca:	682b      	ldr	r3, [r5, #0]
 80139cc:	2250      	movs	r2, #80	@ 0x50
 80139ce:	f10c 0118 	add.w	r1, ip, #24
 80139d2:	f104 0018 	add.w	r0, r4, #24
 80139d6:	f8ce 3000 	str.w	r3, [lr]
 80139da:	82a7      	strh	r7, [r4, #20]
 80139dc:	f004 fb23 	bl	8018026 <memcpy>
 80139e0:	4630      	mov	r0, r6
 80139e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e4:	200b      	movs	r0, #11
 80139e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e8:	200b      	movs	r0, #11
 80139ea:	4770      	bx	lr

080139ec <rcl_node_resolve_name>:
 80139ec:	b082      	sub	sp, #8
 80139ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f2:	b091      	sub	sp, #68	@ 0x44
 80139f4:	ac1a      	add	r4, sp, #104	@ 0x68
 80139f6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80139fa:	e884 000c 	stmia.w	r4, {r2, r3}
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d03d      	beq.n	8013a7e <rcl_node_resolve_name+0x92>
 8013a02:	460c      	mov	r4, r1
 8013a04:	4605      	mov	r5, r0
 8013a06:	f7ff ffb3 	bl	8013970 <rcl_node_get_options>
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	d03a      	beq.n	8013a84 <rcl_node_resolve_name+0x98>
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f7ff ff9e 	bl	8013950 <rcl_node_get_name>
 8013a14:	4606      	mov	r6, r0
 8013a16:	4628      	mov	r0, r5
 8013a18:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013a1a:	f7ff ffa1 	bl	8013960 <rcl_node_get_namespace>
 8013a1e:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013a22:	4607      	mov	r7, r0
 8013a24:	46ac      	mov	ip, r5
 8013a26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a2e:	f8de 3000 	ldr.w	r3, [lr]
 8013a32:	f8cc 3000 	str.w	r3, [ip]
 8013a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013a38:	b30b      	cbz	r3, 8013a7e <rcl_node_resolve_name+0x92>
 8013a3a:	4689      	mov	r9, r1
 8013a3c:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8013a40:	f000 fc8e 	bl	8014360 <rcutils_get_zero_initialized_string_map>
 8013a44:	ab10      	add	r3, sp, #64	@ 0x40
 8013a46:	9008      	str	r0, [sp, #32]
 8013a48:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013a4c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a50:	2100      	movs	r1, #0
 8013a52:	a808      	add	r0, sp, #32
 8013a54:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a58:	f000 fcf8 	bl	801444c <rcutils_string_map_init>
 8013a5c:	4683      	mov	fp, r0
 8013a5e:	b1a0      	cbz	r0, 8013a8a <rcl_node_resolve_name+0x9e>
 8013a60:	f7fb f8dc 	bl	800ec1c <rcutils_get_error_string>
 8013a64:	f7fb f8f0 	bl	800ec48 <rcutils_reset_error>
 8013a68:	f1bb 0f0a 	cmp.w	fp, #10
 8013a6c:	bf18      	it	ne
 8013a6e:	f04f 0b01 	movne.w	fp, #1
 8013a72:	4658      	mov	r0, fp
 8013a74:	b011      	add	sp, #68	@ 0x44
 8013a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7a:	b002      	add	sp, #8
 8013a7c:	4770      	bx	lr
 8013a7e:	f04f 0b0b 	mov.w	fp, #11
 8013a82:	e7f6      	b.n	8013a72 <rcl_node_resolve_name+0x86>
 8013a84:	f04f 0b01 	mov.w	fp, #1
 8013a88:	e7f3      	b.n	8013a72 <rcl_node_resolve_name+0x86>
 8013a8a:	9009      	str	r0, [sp, #36]	@ 0x24
 8013a8c:	9007      	str	r0, [sp, #28]
 8013a8e:	a808      	add	r0, sp, #32
 8013a90:	f003 fb34 	bl	80170fc <rcl_get_default_topic_name_substitutions>
 8013a94:	4683      	mov	fp, r0
 8013a96:	b180      	cbz	r0, 8013aba <rcl_node_resolve_name+0xce>
 8013a98:	280a      	cmp	r0, #10
 8013a9a:	a808      	add	r0, sp, #32
 8013a9c:	bf18      	it	ne
 8013a9e:	f04f 0b01 	movne.w	fp, #1
 8013aa2:	f000 fd13 	bl	80144cc <rcutils_string_map_fini>
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	d15b      	bne.n	8013b64 <rcl_node_resolve_name+0x178>
 8013aac:	4651      	mov	r1, sl
 8013aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ab0:	47c8      	blx	r9
 8013ab2:	4651      	mov	r1, sl
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	47c8      	blx	r9
 8013ab8:	e7db      	b.n	8013a72 <rcl_node_resolve_name+0x86>
 8013aba:	ab09      	add	r3, sp, #36	@ 0x24
 8013abc:	46ec      	mov	ip, sp
 8013abe:	9305      	str	r3, [sp, #20]
 8013ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ac2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ac6:	682b      	ldr	r3, [r5, #0]
 8013ac8:	463a      	mov	r2, r7
 8013aca:	4631      	mov	r1, r6
 8013acc:	4620      	mov	r0, r4
 8013ace:	f8cc 3000 	str.w	r3, [ip]
 8013ad2:	ab08      	add	r3, sp, #32
 8013ad4:	f003 f9b2 	bl	8016e3c <rcl_expand_topic_name>
 8013ad8:	4683      	mov	fp, r0
 8013ada:	b9d8      	cbnz	r0, 8013b14 <rcl_node_resolve_name+0x128>
 8013adc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013ade:	4602      	mov	r2, r0
 8013ae0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ae2:	a90a      	add	r1, sp, #40	@ 0x28
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f000 fddf 	bl	80146a8 <rmw_validate_full_topic_name>
 8013aea:	bb50      	cbnz	r0, 8013b42 <rcl_node_resolve_name+0x156>
 8013aec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013aee:	2d00      	cmp	r5, #0
 8013af0:	d140      	bne.n	8013b74 <rcl_node_resolve_name+0x188>
 8013af2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013af4:	a808      	add	r0, sp, #32
 8013af6:	601c      	str	r4, [r3, #0]
 8013af8:	f000 fce8 	bl	80144cc <rcutils_string_map_fini>
 8013afc:	4683      	mov	fp, r0
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d043      	beq.n	8013b8a <rcl_node_resolve_name+0x19e>
 8013b02:	f7fb f88b 	bl	800ec1c <rcutils_get_error_string>
 8013b06:	46a8      	mov	r8, r5
 8013b08:	f04f 0b01 	mov.w	fp, #1
 8013b0c:	462c      	mov	r4, r5
 8013b0e:	f7fb f89b 	bl	800ec48 <rcutils_reset_error>
 8013b12:	e00a      	b.n	8013b2a <rcl_node_resolve_name+0x13e>
 8013b14:	2867      	cmp	r0, #103	@ 0x67
 8013b16:	bf14      	ite	ne
 8013b18:	f04f 0800 	movne.w	r8, #0
 8013b1c:	f008 0801 	andeq.w	r8, r8, #1
 8013b20:	9c07      	ldr	r4, [sp, #28]
 8013b22:	a808      	add	r0, sp, #32
 8013b24:	f000 fcd2 	bl	80144cc <rcutils_string_map_fini>
 8013b28:	bb50      	cbnz	r0, 8013b80 <rcl_node_resolve_name+0x194>
 8013b2a:	4651      	mov	r1, sl
 8013b2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b2e:	47c8      	blx	r9
 8013b30:	4651      	mov	r1, sl
 8013b32:	4620      	mov	r0, r4
 8013b34:	47c8      	blx	r9
 8013b36:	f1b8 0f00 	cmp.w	r8, #0
 8013b3a:	bf18      	it	ne
 8013b3c:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8013b40:	e797      	b.n	8013a72 <rcl_node_resolve_name+0x86>
 8013b42:	f7fb f86b 	bl	800ec1c <rcutils_get_error_string>
 8013b46:	f7fb f87f 	bl	800ec48 <rcutils_reset_error>
 8013b4a:	a808      	add	r0, sp, #32
 8013b4c:	f000 fcbe 	bl	80144cc <rcutils_string_map_fini>
 8013b50:	b998      	cbnz	r0, 8013b7a <rcl_node_resolve_name+0x18e>
 8013b52:	4651      	mov	r1, sl
 8013b54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b56:	47c8      	blx	r9
 8013b58:	4651      	mov	r1, sl
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	f04f 0b01 	mov.w	fp, #1
 8013b60:	47c8      	blx	r9
 8013b62:	e786      	b.n	8013a72 <rcl_node_resolve_name+0x86>
 8013b64:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013b68:	f7fb f858 	bl	800ec1c <rcutils_get_error_string>
 8013b6c:	f7fb f86c 	bl	800ec48 <rcutils_reset_error>
 8013b70:	4644      	mov	r4, r8
 8013b72:	e7da      	b.n	8013b2a <rcl_node_resolve_name+0x13e>
 8013b74:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8013b78:	e7d3      	b.n	8013b22 <rcl_node_resolve_name+0x136>
 8013b7a:	46d8      	mov	r8, fp
 8013b7c:	f04f 0b01 	mov.w	fp, #1
 8013b80:	f7fb f84c 	bl	800ec1c <rcutils_get_error_string>
 8013b84:	f7fb f860 	bl	800ec48 <rcutils_reset_error>
 8013b88:	e7cf      	b.n	8013b2a <rcl_node_resolve_name+0x13e>
 8013b8a:	4651      	mov	r1, sl
 8013b8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b8e:	47c8      	blx	r9
 8013b90:	4651      	mov	r1, sl
 8013b92:	4658      	mov	r0, fp
 8013b94:	47c8      	blx	r9
 8013b96:	e76c      	b.n	8013a72 <rcl_node_resolve_name+0x86>

08013b98 <exact_match_lookup>:
 8013b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9a:	f102 0708 	add.w	r7, r2, #8
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	b085      	sub	sp, #20
 8013ba2:	4614      	mov	r4, r2
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013baa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	4919      	ldr	r1, [pc, #100]	@ (8013c18 <exact_match_lookup+0x80>)
 8013bb2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013bb6:	f000 fa4d 	bl	8014054 <rcutils_join_path>
 8013bba:	7833      	ldrb	r3, [r6, #0]
 8013bbc:	4605      	mov	r5, r0
 8013bbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8013bc0:	d023      	beq.n	8013c0a <exact_match_lookup+0x72>
 8013bc2:	f104 030c 	add.w	r3, r4, #12
 8013bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013bca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013bce:	1c70      	adds	r0, r6, #1
 8013bd0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013bd4:	f000 fa44 	bl	8014060 <rcutils_to_native_path>
 8013bd8:	4606      	mov	r6, r0
 8013bda:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013bde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013be2:	4631      	mov	r1, r6
 8013be4:	4628      	mov	r0, r5
 8013be6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013bea:	f000 fa33 	bl	8014054 <rcutils_join_path>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	6862      	ldr	r2, [r4, #4]
 8013bf4:	461e      	mov	r6, r3
 8013bf6:	6921      	ldr	r1, [r4, #16]
 8013bf8:	4790      	blx	r2
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	4635      	mov	r5, r6
 8013bfe:	6863      	ldr	r3, [r4, #4]
 8013c00:	6921      	ldr	r1, [r4, #16]
 8013c02:	4798      	blx	r3
 8013c04:	4628      	mov	r0, r5
 8013c06:	b005      	add	sp, #20
 8013c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c0a:	7873      	ldrb	r3, [r6, #1]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d1d8      	bne.n	8013bc2 <exact_match_lookup+0x2a>
 8013c10:	4628      	mov	r0, r5
 8013c12:	b005      	add	sp, #20
 8013c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c16:	bf00      	nop
 8013c18:	080191a8 	.word	0x080191a8

08013c1c <rcl_get_secure_root>:
 8013c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c20:	b085      	sub	sp, #20
 8013c22:	b168      	cbz	r0, 8013c40 <rcl_get_secure_root+0x24>
 8013c24:	4607      	mov	r7, r0
 8013c26:	4608      	mov	r0, r1
 8013c28:	460c      	mov	r4, r1
 8013c2a:	f7fa ffe9 	bl	800ec00 <rcutils_allocator_is_valid>
 8013c2e:	b138      	cbz	r0, 8013c40 <rcl_get_secure_root+0x24>
 8013c30:	2300      	movs	r3, #0
 8013c32:	482d      	ldr	r0, [pc, #180]	@ (8013ce8 <rcl_get_secure_root+0xcc>)
 8013c34:	a903      	add	r1, sp, #12
 8013c36:	9303      	str	r3, [sp, #12]
 8013c38:	f000 f9f2 	bl	8014020 <rcutils_get_env>
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	b120      	cbz	r0, 8013c4a <rcl_get_secure_root+0x2e>
 8013c40:	2500      	movs	r5, #0
 8013c42:	4628      	mov	r0, r5
 8013c44:	b005      	add	sp, #20
 8013c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c4a:	9b03      	ldr	r3, [sp, #12]
 8013c4c:	781a      	ldrb	r2, [r3, #0]
 8013c4e:	2a00      	cmp	r2, #0
 8013c50:	d0f6      	beq.n	8013c40 <rcl_get_secure_root+0x24>
 8013c52:	f104 090c 	add.w	r9, r4, #12
 8013c56:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013c5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013c64:	f000 fb3e 	bl	80142e4 <rcutils_strdup>
 8013c68:	4680      	mov	r8, r0
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	d0e8      	beq.n	8013c40 <rcl_get_secure_root+0x24>
 8013c6e:	a903      	add	r1, sp, #12
 8013c70:	481e      	ldr	r0, [pc, #120]	@ (8013cec <rcl_get_secure_root+0xd0>)
 8013c72:	9503      	str	r5, [sp, #12]
 8013c74:	f000 f9d4 	bl	8014020 <rcutils_get_env>
 8013c78:	b160      	cbz	r0, 8013c94 <rcl_get_secure_root+0x78>
 8013c7a:	2600      	movs	r6, #0
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	6863      	ldr	r3, [r4, #4]
 8013c80:	6921      	ldr	r1, [r4, #16]
 8013c82:	4798      	blx	r3
 8013c84:	4640      	mov	r0, r8
 8013c86:	6863      	ldr	r3, [r4, #4]
 8013c88:	6921      	ldr	r1, [r4, #16]
 8013c8a:	4798      	blx	r3
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	b005      	add	sp, #20
 8013c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c94:	9b03      	ldr	r3, [sp, #12]
 8013c96:	781e      	ldrb	r6, [r3, #0]
 8013c98:	b1f6      	cbz	r6, 8013cd8 <rcl_get_secure_root+0xbc>
 8013c9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013c9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013ca8:	f000 fb1c 	bl	80142e4 <rcutils_strdup>
 8013cac:	4606      	mov	r6, r0
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d0e3      	beq.n	8013c7a <rcl_get_secure_root+0x5e>
 8013cb2:	4622      	mov	r2, r4
 8013cb4:	4641      	mov	r1, r8
 8013cb6:	f7ff ff6f 	bl	8013b98 <exact_match_lookup>
 8013cba:	4605      	mov	r5, r0
 8013cbc:	2d00      	cmp	r5, #0
 8013cbe:	d0dd      	beq.n	8013c7c <rcl_get_secure_root+0x60>
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f000 f9c5 	bl	8014050 <rcutils_is_directory>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	d1d7      	bne.n	8013c7c <rcl_get_secure_root+0x60>
 8013ccc:	4628      	mov	r0, r5
 8013cce:	6921      	ldr	r1, [r4, #16]
 8013cd0:	461d      	mov	r5, r3
 8013cd2:	6863      	ldr	r3, [r4, #4]
 8013cd4:	4798      	blx	r3
 8013cd6:	e7d1      	b.n	8013c7c <rcl_get_secure_root+0x60>
 8013cd8:	4622      	mov	r2, r4
 8013cda:	4638      	mov	r0, r7
 8013cdc:	4641      	mov	r1, r8
 8013cde:	f7ff ff5b 	bl	8013b98 <exact_match_lookup>
 8013ce2:	4605      	mov	r5, r0
 8013ce4:	e7ea      	b.n	8013cbc <rcl_get_secure_root+0xa0>
 8013ce6:	bf00      	nop
 8013ce8:	080191b4 	.word	0x080191b4
 8013cec:	080191cc 	.word	0x080191cc

08013cf0 <rcl_get_security_options_from_environment>:
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	b082      	sub	sp, #8
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	4606      	mov	r6, r0
 8013cfa:	460f      	mov	r7, r1
 8013cfc:	4821      	ldr	r0, [pc, #132]	@ (8013d84 <rcl_get_security_options_from_environment+0x94>)
 8013cfe:	a901      	add	r1, sp, #4
 8013d00:	4690      	mov	r8, r2
 8013d02:	9301      	str	r3, [sp, #4]
 8013d04:	f000 f98c 	bl	8014020 <rcutils_get_env>
 8013d08:	b120      	cbz	r0, 8013d14 <rcl_get_security_options_from_environment+0x24>
 8013d0a:	2501      	movs	r5, #1
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	b002      	add	sp, #8
 8013d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d14:	4604      	mov	r4, r0
 8013d16:	491c      	ldr	r1, [pc, #112]	@ (8013d88 <rcl_get_security_options_from_environment+0x98>)
 8013d18:	9801      	ldr	r0, [sp, #4]
 8013d1a:	f7ec fae1 	bl	80002e0 <strcmp>
 8013d1e:	4605      	mov	r5, r0
 8013d20:	b9f0      	cbnz	r0, 8013d60 <rcl_get_security_options_from_environment+0x70>
 8013d22:	9001      	str	r0, [sp, #4]
 8013d24:	f1b8 0f00 	cmp.w	r8, #0
 8013d28:	d021      	beq.n	8013d6e <rcl_get_security_options_from_environment+0x7e>
 8013d2a:	a901      	add	r1, sp, #4
 8013d2c:	4817      	ldr	r0, [pc, #92]	@ (8013d8c <rcl_get_security_options_from_environment+0x9c>)
 8013d2e:	f000 f977 	bl	8014020 <rcutils_get_env>
 8013d32:	2800      	cmp	r0, #0
 8013d34:	d1e9      	bne.n	8013d0a <rcl_get_security_options_from_environment+0x1a>
 8013d36:	4916      	ldr	r1, [pc, #88]	@ (8013d90 <rcl_get_security_options_from_environment+0xa0>)
 8013d38:	9801      	ldr	r0, [sp, #4]
 8013d3a:	f7ec fad1 	bl	80002e0 <strcmp>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	4639      	mov	r1, r7
 8013d42:	4630      	mov	r0, r6
 8013d44:	fab3 f383 	clz	r3, r3
 8013d48:	095b      	lsrs	r3, r3, #5
 8013d4a:	f888 3000 	strb.w	r3, [r8]
 8013d4e:	f7ff ff65 	bl	8013c1c <rcl_get_secure_root>
 8013d52:	b170      	cbz	r0, 8013d72 <rcl_get_security_options_from_environment+0x82>
 8013d54:	f8c8 0004 	str.w	r0, [r8, #4]
 8013d58:	4628      	mov	r0, r5
 8013d5a:	b002      	add	sp, #8
 8013d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d60:	4625      	mov	r5, r4
 8013d62:	f888 4000 	strb.w	r4, [r8]
 8013d66:	4628      	mov	r0, r5
 8013d68:	b002      	add	sp, #8
 8013d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d6e:	250b      	movs	r5, #11
 8013d70:	e7cc      	b.n	8013d0c <rcl_get_security_options_from_environment+0x1c>
 8013d72:	f898 5000 	ldrb.w	r5, [r8]
 8013d76:	f1a5 0501 	sub.w	r5, r5, #1
 8013d7a:	fab5 f585 	clz	r5, r5
 8013d7e:	096d      	lsrs	r5, r5, #5
 8013d80:	e7c4      	b.n	8013d0c <rcl_get_security_options_from_environment+0x1c>
 8013d82:	bf00      	nop
 8013d84:	0801916c 	.word	0x0801916c
 8013d88:	08019180 	.word	0x08019180
 8013d8c:	08019188 	.word	0x08019188
 8013d90:	080191a0 	.word	0x080191a0

08013d94 <rcl_get_system_time>:
 8013d94:	4608      	mov	r0, r1
 8013d96:	f000 bc11 	b.w	80145bc <rcutils_system_time_now>
 8013d9a:	bf00      	nop

08013d9c <rcl_get_steady_time>:
 8013d9c:	4608      	mov	r0, r1
 8013d9e:	f000 bc33 	b.w	8014608 <rcutils_steady_time_now>
 8013da2:	bf00      	nop

08013da4 <rcl_get_ros_time>:
 8013da4:	7a03      	ldrb	r3, [r0, #8]
 8013da6:	b510      	push	{r4, lr}
 8013da8:	460c      	mov	r4, r1
 8013daa:	b143      	cbz	r3, 8013dbe <rcl_get_ros_time+0x1a>
 8013dac:	2105      	movs	r1, #5
 8013dae:	f000 f901 	bl	8013fb4 <__atomic_load_8>
 8013db2:	4602      	mov	r2, r0
 8013db4:	460b      	mov	r3, r1
 8013db6:	2000      	movs	r0, #0
 8013db8:	e9c4 2300 	strd	r2, r3, [r4]
 8013dbc:	bd10      	pop	{r4, pc}
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc4:	f000 bbfa 	b.w	80145bc <rcutils_system_time_now>

08013dc8 <rcl_clock_init>:
 8013dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dca:	4605      	mov	r5, r0
 8013dcc:	4610      	mov	r0, r2
 8013dce:	4614      	mov	r4, r2
 8013dd0:	460e      	mov	r6, r1
 8013dd2:	f7fa ff15 	bl	800ec00 <rcutils_allocator_is_valid>
 8013dd6:	b128      	cbz	r0, 8013de4 <rcl_clock_init+0x1c>
 8013dd8:	2d03      	cmp	r5, #3
 8013dda:	d803      	bhi.n	8013de4 <rcl_clock_init+0x1c>
 8013ddc:	e8df f005 	tbb	[pc, r5]
 8013de0:	0659301f 	.word	0x0659301f
 8013de4:	f04f 0c0b 	mov.w	ip, #11
 8013de8:	4660      	mov	r0, ip
 8013dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dec:	2c00      	cmp	r4, #0
 8013dee:	d0f9      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013df0:	fab6 f386 	clz	r3, r6
 8013df4:	095b      	lsrs	r3, r3, #5
 8013df6:	2e00      	cmp	r6, #0
 8013df8:	d0f4      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013dfa:	6133      	str	r3, [r6, #16]
 8013dfc:	469c      	mov	ip, r3
 8013dfe:	f106 0514 	add.w	r5, r6, #20
 8013e02:	4f32      	ldr	r7, [pc, #200]	@ (8013ecc <rcl_clock_init+0x104>)
 8013e04:	f04f 0e03 	mov.w	lr, #3
 8013e08:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013e10:	6823      	ldr	r3, [r4, #0]
 8013e12:	4660      	mov	r0, ip
 8013e14:	602b      	str	r3, [r5, #0]
 8013e16:	60f7      	str	r7, [r6, #12]
 8013e18:	f886 e000 	strb.w	lr, [r6]
 8013e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e1e:	2e00      	cmp	r6, #0
 8013e20:	d0e0      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013e22:	2300      	movs	r3, #0
 8013e24:	f106 0514 	add.w	r5, r6, #20
 8013e28:	7033      	strb	r3, [r6, #0]
 8013e2a:	469c      	mov	ip, r3
 8013e2c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013e30:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013e38:	6823      	ldr	r3, [r4, #0]
 8013e3a:	4660      	mov	r0, ip
 8013e3c:	602b      	str	r3, [r5, #0]
 8013e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e40:	2c00      	cmp	r4, #0
 8013e42:	d0cf      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013e44:	fab6 f586 	clz	r5, r6
 8013e48:	096d      	lsrs	r5, r5, #5
 8013e4a:	2e00      	cmp	r6, #0
 8013e4c:	d0ca      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013e4e:	46a6      	mov	lr, r4
 8013e50:	7035      	strb	r5, [r6, #0]
 8013e52:	f106 0c14 	add.w	ip, r6, #20
 8013e56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e5a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013e5e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8013e62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e66:	f8de 3000 	ldr.w	r3, [lr]
 8013e6a:	2010      	movs	r0, #16
 8013e6c:	f8cc 3000 	str.w	r3, [ip]
 8013e70:	6823      	ldr	r3, [r4, #0]
 8013e72:	6921      	ldr	r1, [r4, #16]
 8013e74:	4798      	blx	r3
 8013e76:	6130      	str	r0, [r6, #16]
 8013e78:	b320      	cbz	r0, 8013ec4 <rcl_clock_init+0xfc>
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	46ac      	mov	ip, r5
 8013e80:	7205      	strb	r5, [r0, #8]
 8013e82:	e9c0 2300 	strd	r2, r3, [r0]
 8013e86:	4a12      	ldr	r2, [pc, #72]	@ (8013ed0 <rcl_clock_init+0x108>)
 8013e88:	2301      	movs	r3, #1
 8013e8a:	4660      	mov	r0, ip
 8013e8c:	60f2      	str	r2, [r6, #12]
 8013e8e:	7033      	strb	r3, [r6, #0]
 8013e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e92:	2c00      	cmp	r4, #0
 8013e94:	d0a6      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013e96:	fab6 f386 	clz	r3, r6
 8013e9a:	095b      	lsrs	r3, r3, #5
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	d0a1      	beq.n	8013de4 <rcl_clock_init+0x1c>
 8013ea0:	6133      	str	r3, [r6, #16]
 8013ea2:	469c      	mov	ip, r3
 8013ea4:	f106 0514 	add.w	r5, r6, #20
 8013ea8:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8013ed4 <rcl_clock_init+0x10c>
 8013eac:	2702      	movs	r7, #2
 8013eae:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	4660      	mov	r0, ip
 8013eba:	602b      	str	r3, [r5, #0]
 8013ebc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013ec0:	7037      	strb	r7, [r6, #0]
 8013ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec4:	f04f 0c0a 	mov.w	ip, #10
 8013ec8:	e78e      	b.n	8013de8 <rcl_clock_init+0x20>
 8013eca:	bf00      	nop
 8013ecc:	08013d9d 	.word	0x08013d9d
 8013ed0:	08013da5 	.word	0x08013da5
 8013ed4:	08013d95 	.word	0x08013d95

08013ed8 <rcl_validate_enclave_name_with_size>:
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	d049      	beq.n	8013f70 <rcl_validate_enclave_name_with_size+0x98>
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	4615      	mov	r5, r2
 8013ee0:	b0c2      	sub	sp, #264	@ 0x108
 8013ee2:	b19a      	cbz	r2, 8013f0c <rcl_validate_enclave_name_with_size+0x34>
 8013ee4:	461e      	mov	r6, r3
 8013ee6:	466a      	mov	r2, sp
 8013ee8:	ab01      	add	r3, sp, #4
 8013eea:	460c      	mov	r4, r1
 8013eec:	f000 fc58 	bl	80147a0 <rmw_validate_namespace_with_size>
 8013ef0:	4684      	mov	ip, r0
 8013ef2:	b9b8      	cbnz	r0, 8013f24 <rcl_validate_enclave_name_with_size+0x4c>
 8013ef4:	9900      	ldr	r1, [sp, #0]
 8013ef6:	b171      	cbz	r1, 8013f16 <rcl_validate_enclave_name_with_size+0x3e>
 8013ef8:	2907      	cmp	r1, #7
 8013efa:	d019      	beq.n	8013f30 <rcl_validate_enclave_name_with_size+0x58>
 8013efc:	1e4b      	subs	r3, r1, #1
 8013efe:	2b05      	cmp	r3, #5
 8013f00:	d83a      	bhi.n	8013f78 <rcl_validate_enclave_name_with_size+0xa0>
 8013f02:	e8df f003 	tbb	[pc, r3]
 8013f06:	2926      	.short	0x2926
 8013f08:	1d322f2c 	.word	0x1d322f2c
 8013f0c:	f04f 0c0b 	mov.w	ip, #11
 8013f10:	4660      	mov	r0, ip
 8013f12:	b042      	add	sp, #264	@ 0x108
 8013f14:	bd70      	pop	{r4, r5, r6, pc}
 8013f16:	2907      	cmp	r1, #7
 8013f18:	d00a      	beq.n	8013f30 <rcl_validate_enclave_name_with_size+0x58>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	4660      	mov	r0, ip
 8013f1e:	602b      	str	r3, [r5, #0]
 8013f20:	b042      	add	sp, #264	@ 0x108
 8013f22:	bd70      	pop	{r4, r5, r6, pc}
 8013f24:	f7ff f90c 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f28:	4684      	mov	ip, r0
 8013f2a:	4660      	mov	r0, ip
 8013f2c:	b042      	add	sp, #264	@ 0x108
 8013f2e:	bd70      	pop	{r4, r5, r6, pc}
 8013f30:	2cff      	cmp	r4, #255	@ 0xff
 8013f32:	d9f2      	bls.n	8013f1a <rcl_validate_enclave_name_with_size+0x42>
 8013f34:	6029      	str	r1, [r5, #0]
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	d0ea      	beq.n	8013f10 <rcl_validate_enclave_name_with_size+0x38>
 8013f3a:	23fe      	movs	r3, #254	@ 0xfe
 8013f3c:	6033      	str	r3, [r6, #0]
 8013f3e:	e7e7      	b.n	8013f10 <rcl_validate_enclave_name_with_size+0x38>
 8013f40:	2306      	movs	r3, #6
 8013f42:	602b      	str	r3, [r5, #0]
 8013f44:	2e00      	cmp	r6, #0
 8013f46:	d0e3      	beq.n	8013f10 <rcl_validate_enclave_name_with_size+0x38>
 8013f48:	9b01      	ldr	r3, [sp, #4]
 8013f4a:	4660      	mov	r0, ip
 8013f4c:	6033      	str	r3, [r6, #0]
 8013f4e:	b042      	add	sp, #264	@ 0x108
 8013f50:	bd70      	pop	{r4, r5, r6, pc}
 8013f52:	2301      	movs	r3, #1
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	e7f5      	b.n	8013f44 <rcl_validate_enclave_name_with_size+0x6c>
 8013f58:	2302      	movs	r3, #2
 8013f5a:	602b      	str	r3, [r5, #0]
 8013f5c:	e7f2      	b.n	8013f44 <rcl_validate_enclave_name_with_size+0x6c>
 8013f5e:	2303      	movs	r3, #3
 8013f60:	602b      	str	r3, [r5, #0]
 8013f62:	e7ef      	b.n	8013f44 <rcl_validate_enclave_name_with_size+0x6c>
 8013f64:	2304      	movs	r3, #4
 8013f66:	602b      	str	r3, [r5, #0]
 8013f68:	e7ec      	b.n	8013f44 <rcl_validate_enclave_name_with_size+0x6c>
 8013f6a:	2305      	movs	r3, #5
 8013f6c:	602b      	str	r3, [r5, #0]
 8013f6e:	e7e9      	b.n	8013f44 <rcl_validate_enclave_name_with_size+0x6c>
 8013f70:	f04f 0c0b 	mov.w	ip, #11
 8013f74:	4660      	mov	r0, ip
 8013f76:	4770      	bx	lr
 8013f78:	460b      	mov	r3, r1
 8013f7a:	4a04      	ldr	r2, [pc, #16]	@ (8013f8c <rcl_validate_enclave_name_with_size+0xb4>)
 8013f7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013f80:	a802      	add	r0, sp, #8
 8013f82:	f000 f961 	bl	8014248 <rcutils_snprintf>
 8013f86:	f04f 0c01 	mov.w	ip, #1
 8013f8a:	e7c1      	b.n	8013f10 <rcl_validate_enclave_name_with_size+0x38>
 8013f8c:	080191ec 	.word	0x080191ec

08013f90 <rcl_validate_enclave_name>:
 8013f90:	b168      	cbz	r0, 8013fae <rcl_validate_enclave_name+0x1e>
 8013f92:	b570      	push	{r4, r5, r6, lr}
 8013f94:	460d      	mov	r5, r1
 8013f96:	4616      	mov	r6, r2
 8013f98:	4604      	mov	r4, r0
 8013f9a:	f7ec f9ab 	bl	80002f4 <strlen>
 8013f9e:	4633      	mov	r3, r6
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	462a      	mov	r2, r5
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013faa:	f7ff bf95 	b.w	8013ed8 <rcl_validate_enclave_name_with_size>
 8013fae:	200b      	movs	r0, #11
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop

08013fb4 <__atomic_load_8>:
 8013fb4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013fb8:	4a16      	ldr	r2, [pc, #88]	@ (8014014 <__atomic_load_8+0x60>)
 8013fba:	4b17      	ldr	r3, [pc, #92]	@ (8014018 <__atomic_load_8+0x64>)
 8013fbc:	f04f 0c01 	mov.w	ip, #1
 8013fc0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013fc4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013fc8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013fcc:	fb02 f101 	mul.w	r1, r2, r1
 8013fd0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013fd4:	fba3 2301 	umull	r2, r3, r3, r1
 8013fd8:	091b      	lsrs	r3, r3, #4
 8013fda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013fde:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013fe2:	b4d0      	push	{r4, r6, r7}
 8013fe4:	1ac9      	subs	r1, r1, r3
 8013fe6:	4c0d      	ldr	r4, [pc, #52]	@ (801401c <__atomic_load_8+0x68>)
 8013fe8:	1862      	adds	r2, r4, r1
 8013fea:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013fee:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013ff2:	2e00      	cmp	r6, #0
 8013ff4:	d1f9      	bne.n	8013fea <__atomic_load_8+0x36>
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	f3bf 8f5b 	dmb	ish
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d1f4      	bne.n	8013fea <__atomic_load_8+0x36>
 8014000:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014004:	f3bf 8f5b 	dmb	ish
 8014008:	5463      	strb	r3, [r4, r1]
 801400a:	4630      	mov	r0, r6
 801400c:	4639      	mov	r1, r7
 801400e:	bcd0      	pop	{r4, r6, r7}
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	27d4eb2d 	.word	0x27d4eb2d
 8014018:	b21642c9 	.word	0xb21642c9
 801401c:	240685b8 	.word	0x240685b8

08014020 <rcutils_get_env>:
 8014020:	b168      	cbz	r0, 801403e <rcutils_get_env+0x1e>
 8014022:	b510      	push	{r4, lr}
 8014024:	460c      	mov	r4, r1
 8014026:	b129      	cbz	r1, 8014034 <rcutils_get_env+0x14>
 8014028:	f003 fb4c 	bl	80176c4 <getenv>
 801402c:	b120      	cbz	r0, 8014038 <rcutils_get_env+0x18>
 801402e:	6020      	str	r0, [r4, #0]
 8014030:	2000      	movs	r0, #0
 8014032:	bd10      	pop	{r4, pc}
 8014034:	4803      	ldr	r0, [pc, #12]	@ (8014044 <rcutils_get_env+0x24>)
 8014036:	bd10      	pop	{r4, pc}
 8014038:	4b03      	ldr	r3, [pc, #12]	@ (8014048 <rcutils_get_env+0x28>)
 801403a:	6023      	str	r3, [r4, #0]
 801403c:	bd10      	pop	{r4, pc}
 801403e:	4803      	ldr	r0, [pc, #12]	@ (801404c <rcutils_get_env+0x2c>)
 8014040:	4770      	bx	lr
 8014042:	bf00      	nop
 8014044:	08019268 	.word	0x08019268
 8014048:	0801938c 	.word	0x0801938c
 801404c:	0801924c 	.word	0x0801924c

08014050 <rcutils_is_directory>:
 8014050:	2000      	movs	r0, #0
 8014052:	4770      	bx	lr

08014054 <rcutils_join_path>:
 8014054:	b082      	sub	sp, #8
 8014056:	2000      	movs	r0, #0
 8014058:	e88d 000c 	stmia.w	sp, {r2, r3}
 801405c:	b002      	add	sp, #8
 801405e:	4770      	bx	lr

08014060 <rcutils_to_native_path>:
 8014060:	b084      	sub	sp, #16
 8014062:	2000      	movs	r0, #0
 8014064:	f10d 0c04 	add.w	ip, sp, #4
 8014068:	b004      	add	sp, #16
 801406a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801406e:	4770      	bx	lr

08014070 <rcutils_format_string_limit>:
 8014070:	b40f      	push	{r0, r1, r2, r3}
 8014072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014074:	b083      	sub	sp, #12
 8014076:	ac08      	add	r4, sp, #32
 8014078:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801407a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801407e:	b326      	cbz	r6, 80140ca <rcutils_format_string_limit+0x5a>
 8014080:	a808      	add	r0, sp, #32
 8014082:	f7fa fdbd 	bl	800ec00 <rcutils_allocator_is_valid>
 8014086:	b300      	cbz	r0, 80140ca <rcutils_format_string_limit+0x5a>
 8014088:	2100      	movs	r1, #0
 801408a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801408c:	4632      	mov	r2, r6
 801408e:	4608      	mov	r0, r1
 8014090:	e9cd 3300 	strd	r3, r3, [sp]
 8014094:	f000 f906 	bl	80142a4 <rcutils_vsnprintf>
 8014098:	1c43      	adds	r3, r0, #1
 801409a:	4605      	mov	r5, r0
 801409c:	d015      	beq.n	80140ca <rcutils_format_string_limit+0x5a>
 801409e:	1c47      	adds	r7, r0, #1
 80140a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140a2:	429f      	cmp	r7, r3
 80140a4:	d901      	bls.n	80140aa <rcutils_format_string_limit+0x3a>
 80140a6:	1e5d      	subs	r5, r3, #1
 80140a8:	461f      	mov	r7, r3
 80140aa:	9b08      	ldr	r3, [sp, #32]
 80140ac:	4638      	mov	r0, r7
 80140ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80140b0:	4798      	blx	r3
 80140b2:	4604      	mov	r4, r0
 80140b4:	b148      	cbz	r0, 80140ca <rcutils_format_string_limit+0x5a>
 80140b6:	4632      	mov	r2, r6
 80140b8:	4639      	mov	r1, r7
 80140ba:	9b01      	ldr	r3, [sp, #4]
 80140bc:	f000 f8f2 	bl	80142a4 <rcutils_vsnprintf>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	db09      	blt.n	80140d8 <rcutils_format_string_limit+0x68>
 80140c4:	2300      	movs	r3, #0
 80140c6:	5563      	strb	r3, [r4, r5]
 80140c8:	e000      	b.n	80140cc <rcutils_format_string_limit+0x5c>
 80140ca:	2400      	movs	r4, #0
 80140cc:	4620      	mov	r0, r4
 80140ce:	b003      	add	sp, #12
 80140d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80140d4:	b004      	add	sp, #16
 80140d6:	4770      	bx	lr
 80140d8:	4620      	mov	r0, r4
 80140da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80140de:	2400      	movs	r4, #0
 80140e0:	4798      	blx	r3
 80140e2:	e7f3      	b.n	80140cc <rcutils_format_string_limit+0x5c>

080140e4 <rcutils_repl_str>:
 80140e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e8:	ed2d 8b02 	vpush	{d8}
 80140ec:	b087      	sub	sp, #28
 80140ee:	2600      	movs	r6, #0
 80140f0:	4680      	mov	r8, r0
 80140f2:	468a      	mov	sl, r1
 80140f4:	9000      	str	r0, [sp, #0]
 80140f6:	4608      	mov	r0, r1
 80140f8:	ee08 2a10 	vmov	s16, r2
 80140fc:	4699      	mov	r9, r3
 80140fe:	2510      	movs	r5, #16
 8014100:	f7ec f8f8 	bl	80002f4 <strlen>
 8014104:	4637      	mov	r7, r6
 8014106:	46b3      	mov	fp, r6
 8014108:	9001      	str	r0, [sp, #4]
 801410a:	e01e      	b.n	801414a <rcutils_repl_str+0x66>
 801410c:	f10b 0b01 	add.w	fp, fp, #1
 8014110:	9b01      	ldr	r3, [sp, #4]
 8014112:	455e      	cmp	r6, fp
 8014114:	eb04 0803 	add.w	r8, r4, r3
 8014118:	d211      	bcs.n	801413e <rcutils_repl_str+0x5a>
 801411a:	442e      	add	r6, r5
 801411c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014120:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014128:	00b1      	lsls	r1, r6, #2
 801412a:	4798      	blx	r3
 801412c:	2800      	cmp	r0, #0
 801412e:	f000 8088 	beq.w	8014242 <rcutils_repl_str+0x15e>
 8014132:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014136:	4607      	mov	r7, r0
 8014138:	bf28      	it	cs
 801413a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801413e:	9a00      	ldr	r2, [sp, #0]
 8014140:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014144:	1aa4      	subs	r4, r4, r2
 8014146:	f843 4c04 	str.w	r4, [r3, #-4]
 801414a:	4651      	mov	r1, sl
 801414c:	4640      	mov	r0, r8
 801414e:	f003 fe72 	bl	8017e36 <strstr>
 8014152:	4604      	mov	r4, r0
 8014154:	4638      	mov	r0, r7
 8014156:	2c00      	cmp	r4, #0
 8014158:	d1d8      	bne.n	801410c <rcutils_repl_str+0x28>
 801415a:	4640      	mov	r0, r8
 801415c:	f7ec f8ca 	bl	80002f4 <strlen>
 8014160:	9b00      	ldr	r3, [sp, #0]
 8014162:	eba8 0803 	sub.w	r8, r8, r3
 8014166:	eb08 0400 	add.w	r4, r8, r0
 801416a:	9402      	str	r4, [sp, #8]
 801416c:	f1bb 0f00 	cmp.w	fp, #0
 8014170:	d045      	beq.n	80141fe <rcutils_repl_str+0x11a>
 8014172:	ee18 0a10 	vmov	r0, s16
 8014176:	f7ec f8bd 	bl	80002f4 <strlen>
 801417a:	9a01      	ldr	r2, [sp, #4]
 801417c:	4606      	mov	r6, r0
 801417e:	f8d9 3000 	ldr.w	r3, [r9]
 8014182:	1a82      	subs	r2, r0, r2
 8014184:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014188:	fb0b 4202 	mla	r2, fp, r2, r4
 801418c:	1c50      	adds	r0, r2, #1
 801418e:	9205      	str	r2, [sp, #20]
 8014190:	4798      	blx	r3
 8014192:	4682      	mov	sl, r0
 8014194:	2800      	cmp	r0, #0
 8014196:	d054      	beq.n	8014242 <rcutils_repl_str+0x15e>
 8014198:	683a      	ldr	r2, [r7, #0]
 801419a:	463d      	mov	r5, r7
 801419c:	9900      	ldr	r1, [sp, #0]
 801419e:	2401      	movs	r4, #1
 80141a0:	f003 ff41 	bl	8018026 <memcpy>
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80141aa:	eb0a 0803 	add.w	r8, sl, r3
 80141ae:	ee18 7a10 	vmov	r7, s16
 80141b2:	f8dd a000 	ldr.w	sl, [sp]
 80141b6:	f8cd 9000 	str.w	r9, [sp]
 80141ba:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80141be:	4632      	mov	r2, r6
 80141c0:	4639      	mov	r1, r7
 80141c2:	4640      	mov	r0, r8
 80141c4:	44b0      	add	r8, r6
 80141c6:	f003 ff2e 	bl	8018026 <memcpy>
 80141ca:	f855 2b04 	ldr.w	r2, [r5], #4
 80141ce:	45a3      	cmp	fp, r4
 80141d0:	444a      	add	r2, r9
 80141d2:	eb0a 0102 	add.w	r1, sl, r2
 80141d6:	d02a      	beq.n	801422e <rcutils_repl_str+0x14a>
 80141d8:	6828      	ldr	r0, [r5, #0]
 80141da:	1a82      	subs	r2, r0, r2
 80141dc:	4640      	mov	r0, r8
 80141de:	4490      	add	r8, r2
 80141e0:	f003 ff21 	bl	8018026 <memcpy>
 80141e4:	1c62      	adds	r2, r4, #1
 80141e6:	45a3      	cmp	fp, r4
 80141e8:	4614      	mov	r4, r2
 80141ea:	d8e8      	bhi.n	80141be <rcutils_repl_str+0xda>
 80141ec:	f8dd 9000 	ldr.w	r9, [sp]
 80141f0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80141f4:	2300      	movs	r3, #0
 80141f6:	9a05      	ldr	r2, [sp, #20]
 80141f8:	f80a 3002 	strb.w	r3, [sl, r2]
 80141fc:	e00b      	b.n	8014216 <rcutils_repl_str+0x132>
 80141fe:	4620      	mov	r0, r4
 8014200:	f8d9 3000 	ldr.w	r3, [r9]
 8014204:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014208:	3001      	adds	r0, #1
 801420a:	4798      	blx	r3
 801420c:	4682      	mov	sl, r0
 801420e:	b110      	cbz	r0, 8014216 <rcutils_repl_str+0x132>
 8014210:	9900      	ldr	r1, [sp, #0]
 8014212:	f003 ff00 	bl	8018016 <strcpy>
 8014216:	4638      	mov	r0, r7
 8014218:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801421c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014220:	4798      	blx	r3
 8014222:	4650      	mov	r0, sl
 8014224:	b007      	add	sp, #28
 8014226:	ecbd 8b02 	vpop	{d8}
 801422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801422e:	9b02      	ldr	r3, [sp, #8]
 8014230:	4640      	mov	r0, r8
 8014232:	f8dd 9000 	ldr.w	r9, [sp]
 8014236:	1a9a      	subs	r2, r3, r2
 8014238:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801423c:	f003 fef3 	bl	8018026 <memcpy>
 8014240:	e7d8      	b.n	80141f4 <rcutils_repl_str+0x110>
 8014242:	f04f 0a00 	mov.w	sl, #0
 8014246:	e7e6      	b.n	8014216 <rcutils_repl_str+0x132>

08014248 <rcutils_snprintf>:
 8014248:	b40c      	push	{r2, r3}
 801424a:	b530      	push	{r4, r5, lr}
 801424c:	b083      	sub	sp, #12
 801424e:	ab06      	add	r3, sp, #24
 8014250:	f853 2b04 	ldr.w	r2, [r3], #4
 8014254:	9301      	str	r3, [sp, #4]
 8014256:	b1e2      	cbz	r2, 8014292 <rcutils_snprintf+0x4a>
 8014258:	fab0 f480 	clz	r4, r0
 801425c:	fab1 f581 	clz	r5, r1
 8014260:	ea50 0c01 	orrs.w	ip, r0, r1
 8014264:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014268:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801426c:	d008      	beq.n	8014280 <rcutils_snprintf+0x38>
 801426e:	b984      	cbnz	r4, 8014292 <rcutils_snprintf+0x4a>
 8014270:	b97d      	cbnz	r5, 8014292 <rcutils_snprintf+0x4a>
 8014272:	f003 fdab 	bl	8017dcc <vsniprintf>
 8014276:	b003      	add	sp, #12
 8014278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801427c:	b002      	add	sp, #8
 801427e:	4770      	bx	lr
 8014280:	4661      	mov	r1, ip
 8014282:	4660      	mov	r0, ip
 8014284:	f003 fda2 	bl	8017dcc <vsniprintf>
 8014288:	b003      	add	sp, #12
 801428a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801428e:	b002      	add	sp, #8
 8014290:	4770      	bx	lr
 8014292:	f003 fe93 	bl	8017fbc <__errno>
 8014296:	2216      	movs	r2, #22
 8014298:	4603      	mov	r3, r0
 801429a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801429e:	601a      	str	r2, [r3, #0]
 80142a0:	e7e9      	b.n	8014276 <rcutils_snprintf+0x2e>
 80142a2:	bf00      	nop

080142a4 <rcutils_vsnprintf>:
 80142a4:	b570      	push	{r4, r5, r6, lr}
 80142a6:	b1b2      	cbz	r2, 80142d6 <rcutils_vsnprintf+0x32>
 80142a8:	fab0 f480 	clz	r4, r0
 80142ac:	fab1 f581 	clz	r5, r1
 80142b0:	ea50 0c01 	orrs.w	ip, r0, r1
 80142b4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80142b8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80142bc:	d005      	beq.n	80142ca <rcutils_vsnprintf+0x26>
 80142be:	b954      	cbnz	r4, 80142d6 <rcutils_vsnprintf+0x32>
 80142c0:	b94d      	cbnz	r5, 80142d6 <rcutils_vsnprintf+0x32>
 80142c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142c6:	f003 bd81 	b.w	8017dcc <vsniprintf>
 80142ca:	4661      	mov	r1, ip
 80142cc:	4660      	mov	r0, ip
 80142ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142d2:	f003 bd7b 	b.w	8017dcc <vsniprintf>
 80142d6:	f003 fe71 	bl	8017fbc <__errno>
 80142da:	2316      	movs	r3, #22
 80142dc:	6003      	str	r3, [r0, #0]
 80142de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142e2:	bd70      	pop	{r4, r5, r6, pc}

080142e4 <rcutils_strdup>:
 80142e4:	b084      	sub	sp, #16
 80142e6:	b570      	push	{r4, r5, r6, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	4605      	mov	r5, r0
 80142ec:	ac07      	add	r4, sp, #28
 80142ee:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80142f2:	b1b0      	cbz	r0, 8014322 <rcutils_strdup+0x3e>
 80142f4:	f7eb fffe 	bl	80002f4 <strlen>
 80142f8:	1c42      	adds	r2, r0, #1
 80142fa:	9b07      	ldr	r3, [sp, #28]
 80142fc:	4606      	mov	r6, r0
 80142fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014300:	4610      	mov	r0, r2
 8014302:	9201      	str	r2, [sp, #4]
 8014304:	4798      	blx	r3
 8014306:	4604      	mov	r4, r0
 8014308:	b128      	cbz	r0, 8014316 <rcutils_strdup+0x32>
 801430a:	9a01      	ldr	r2, [sp, #4]
 801430c:	4629      	mov	r1, r5
 801430e:	f003 fe8a 	bl	8018026 <memcpy>
 8014312:	2300      	movs	r3, #0
 8014314:	55a3      	strb	r3, [r4, r6]
 8014316:	4620      	mov	r0, r4
 8014318:	b002      	add	sp, #8
 801431a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801431e:	b004      	add	sp, #16
 8014320:	4770      	bx	lr
 8014322:	4604      	mov	r4, r0
 8014324:	e7f7      	b.n	8014316 <rcutils_strdup+0x32>
 8014326:	bf00      	nop

08014328 <rcutils_strndup>:
 8014328:	b082      	sub	sp, #8
 801432a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432c:	ac06      	add	r4, sp, #24
 801432e:	4605      	mov	r5, r0
 8014330:	e884 000c 	stmia.w	r4, {r2, r3}
 8014334:	b188      	cbz	r0, 801435a <rcutils_strndup+0x32>
 8014336:	1c4f      	adds	r7, r1, #1
 8014338:	460e      	mov	r6, r1
 801433a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801433c:	4638      	mov	r0, r7
 801433e:	4790      	blx	r2
 8014340:	4604      	mov	r4, r0
 8014342:	b128      	cbz	r0, 8014350 <rcutils_strndup+0x28>
 8014344:	463a      	mov	r2, r7
 8014346:	4629      	mov	r1, r5
 8014348:	f003 fe6d 	bl	8018026 <memcpy>
 801434c:	2300      	movs	r3, #0
 801434e:	55a3      	strb	r3, [r4, r6]
 8014350:	4620      	mov	r0, r4
 8014352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014356:	b002      	add	sp, #8
 8014358:	4770      	bx	lr
 801435a:	4604      	mov	r4, r0
 801435c:	e7f8      	b.n	8014350 <rcutils_strndup+0x28>
 801435e:	bf00      	nop

08014360 <rcutils_get_zero_initialized_string_map>:
 8014360:	2000      	movs	r0, #0
 8014362:	4b01      	ldr	r3, [pc, #4]	@ (8014368 <rcutils_get_zero_initialized_string_map+0x8>)
 8014364:	6018      	str	r0, [r3, #0]
 8014366:	4770      	bx	lr
 8014368:	240685d0 	.word	0x240685d0

0801436c <rcutils_string_map_reserve>:
 801436c:	2800      	cmp	r0, #0
 801436e:	d05e      	beq.n	801442e <rcutils_string_map_reserve+0xc2>
 8014370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014374:	460c      	mov	r4, r1
 8014376:	6801      	ldr	r1, [r0, #0]
 8014378:	b082      	sub	sp, #8
 801437a:	4605      	mov	r5, r0
 801437c:	b129      	cbz	r1, 801438a <rcutils_string_map_reserve+0x1e>
 801437e:	68cb      	ldr	r3, [r1, #12]
 8014380:	42a3      	cmp	r3, r4
 8014382:	d906      	bls.n	8014392 <rcutils_string_map_reserve+0x26>
 8014384:	461c      	mov	r4, r3
 8014386:	2900      	cmp	r1, #0
 8014388:	d1f9      	bne.n	801437e <rcutils_string_map_reserve+0x12>
 801438a:	201f      	movs	r0, #31
 801438c:	b002      	add	sp, #8
 801438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014392:	688b      	ldr	r3, [r1, #8]
 8014394:	42a3      	cmp	r3, r4
 8014396:	d046      	beq.n	8014426 <rcutils_string_map_reserve+0xba>
 8014398:	6a0e      	ldr	r6, [r1, #32]
 801439a:	2c00      	cmp	r4, #0
 801439c:	d033      	beq.n	8014406 <rcutils_string_map_reserve+0x9a>
 801439e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80143a2:	d242      	bcs.n	801442a <rcutils_string_map_reserve+0xbe>
 80143a4:	00a7      	lsls	r7, r4, #2
 80143a6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80143aa:	6808      	ldr	r0, [r1, #0]
 80143ac:	4632      	mov	r2, r6
 80143ae:	4639      	mov	r1, r7
 80143b0:	47c0      	blx	r8
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d039      	beq.n	801442a <rcutils_string_map_reserve+0xbe>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	4632      	mov	r2, r6
 80143ba:	4639      	mov	r1, r7
 80143bc:	6018      	str	r0, [r3, #0]
 80143be:	6858      	ldr	r0, [r3, #4]
 80143c0:	47c0      	blx	r8
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d031      	beq.n	801442a <rcutils_string_map_reserve+0xbe>
 80143c6:	682d      	ldr	r5, [r5, #0]
 80143c8:	68ab      	ldr	r3, [r5, #8]
 80143ca:	6068      	str	r0, [r5, #4]
 80143cc:	42a3      	cmp	r3, r4
 80143ce:	d225      	bcs.n	801441c <rcutils_string_map_reserve+0xb0>
 80143d0:	682a      	ldr	r2, [r5, #0]
 80143d2:	eb00 0c07 	add.w	ip, r0, r7
 80143d6:	0099      	lsls	r1, r3, #2
 80143d8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80143dc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80143e0:	45e6      	cmp	lr, ip
 80143e2:	d203      	bcs.n	80143ec <rcutils_string_map_reserve+0x80>
 80143e4:	eb02 0c07 	add.w	ip, r2, r7
 80143e8:	4566      	cmp	r6, ip
 80143ea:	d322      	bcc.n	8014432 <rcutils_string_map_reserve+0xc6>
 80143ec:	1ae3      	subs	r3, r4, r3
 80143ee:	4670      	mov	r0, lr
 80143f0:	2100      	movs	r1, #0
 80143f2:	009a      	lsls	r2, r3, #2
 80143f4:	9201      	str	r2, [sp, #4]
 80143f6:	f003 fcf7 	bl	8017de8 <memset>
 80143fa:	9a01      	ldr	r2, [sp, #4]
 80143fc:	2100      	movs	r1, #0
 80143fe:	4630      	mov	r0, r6
 8014400:	f003 fcf2 	bl	8017de8 <memset>
 8014404:	e00a      	b.n	801441c <rcutils_string_map_reserve+0xb0>
 8014406:	694f      	ldr	r7, [r1, #20]
 8014408:	6808      	ldr	r0, [r1, #0]
 801440a:	4631      	mov	r1, r6
 801440c:	47b8      	blx	r7
 801440e:	682b      	ldr	r3, [r5, #0]
 8014410:	4631      	mov	r1, r6
 8014412:	6858      	ldr	r0, [r3, #4]
 8014414:	601c      	str	r4, [r3, #0]
 8014416:	47b8      	blx	r7
 8014418:	682d      	ldr	r5, [r5, #0]
 801441a:	606c      	str	r4, [r5, #4]
 801441c:	2000      	movs	r0, #0
 801441e:	60ac      	str	r4, [r5, #8]
 8014420:	b002      	add	sp, #8
 8014422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014426:	2000      	movs	r0, #0
 8014428:	e7b0      	b.n	801438c <rcutils_string_map_reserve+0x20>
 801442a:	200a      	movs	r0, #10
 801442c:	e7ae      	b.n	801438c <rcutils_string_map_reserve+0x20>
 801442e:	200b      	movs	r0, #11
 8014430:	4770      	bx	lr
 8014432:	1f0b      	subs	r3, r1, #4
 8014434:	4418      	add	r0, r3
 8014436:	4413      	add	r3, r2
 8014438:	3a04      	subs	r2, #4
 801443a:	4417      	add	r7, r2
 801443c:	2200      	movs	r2, #0
 801443e:	f843 2f04 	str.w	r2, [r3, #4]!
 8014442:	42bb      	cmp	r3, r7
 8014444:	f840 2f04 	str.w	r2, [r0, #4]!
 8014448:	d1f9      	bne.n	801443e <rcutils_string_map_reserve+0xd2>
 801444a:	e7e7      	b.n	801441c <rcutils_string_map_reserve+0xb0>

0801444c <rcutils_string_map_init>:
 801444c:	b082      	sub	sp, #8
 801444e:	b570      	push	{r4, r5, r6, lr}
 8014450:	ac04      	add	r4, sp, #16
 8014452:	e884 000c 	stmia.w	r4, {r2, r3}
 8014456:	b380      	cbz	r0, 80144ba <rcutils_string_map_init+0x6e>
 8014458:	6806      	ldr	r6, [r0, #0]
 801445a:	4604      	mov	r4, r0
 801445c:	b12e      	cbz	r6, 801446a <rcutils_string_map_init+0x1e>
 801445e:	251e      	movs	r5, #30
 8014460:	4628      	mov	r0, r5
 8014462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014466:	b002      	add	sp, #8
 8014468:	4770      	bx	lr
 801446a:	a804      	add	r0, sp, #16
 801446c:	460d      	mov	r5, r1
 801446e:	f7fa fbc7 	bl	800ec00 <rcutils_allocator_is_valid>
 8014472:	b310      	cbz	r0, 80144ba <rcutils_string_map_init+0x6e>
 8014474:	9b04      	ldr	r3, [sp, #16]
 8014476:	2024      	movs	r0, #36	@ 0x24
 8014478:	9908      	ldr	r1, [sp, #32]
 801447a:	4798      	blx	r3
 801447c:	6020      	str	r0, [r4, #0]
 801447e:	b310      	cbz	r0, 80144c6 <rcutils_string_map_init+0x7a>
 8014480:	f10d 0e10 	add.w	lr, sp, #16
 8014484:	f100 0c10 	add.w	ip, r0, #16
 8014488:	e9c0 6600 	strd	r6, r6, [r0]
 801448c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014490:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014498:	f8de 3000 	ldr.w	r3, [lr]
 801449c:	4629      	mov	r1, r5
 801449e:	4620      	mov	r0, r4
 80144a0:	f8cc 3000 	str.w	r3, [ip]
 80144a4:	f7ff ff62 	bl	801436c <rcutils_string_map_reserve>
 80144a8:	4605      	mov	r5, r0
 80144aa:	2800      	cmp	r0, #0
 80144ac:	d0d8      	beq.n	8014460 <rcutils_string_map_init+0x14>
 80144ae:	9b05      	ldr	r3, [sp, #20]
 80144b0:	9908      	ldr	r1, [sp, #32]
 80144b2:	6820      	ldr	r0, [r4, #0]
 80144b4:	4798      	blx	r3
 80144b6:	6026      	str	r6, [r4, #0]
 80144b8:	e7d2      	b.n	8014460 <rcutils_string_map_init+0x14>
 80144ba:	250b      	movs	r5, #11
 80144bc:	4628      	mov	r0, r5
 80144be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144c2:	b002      	add	sp, #8
 80144c4:	4770      	bx	lr
 80144c6:	250a      	movs	r5, #10
 80144c8:	e7ca      	b.n	8014460 <rcutils_string_map_init+0x14>
 80144ca:	bf00      	nop

080144cc <rcutils_string_map_fini>:
 80144cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d0:	b082      	sub	sp, #8
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d03a      	beq.n	801454c <rcutils_string_map_fini+0x80>
 80144d6:	6804      	ldr	r4, [r0, #0]
 80144d8:	4606      	mov	r6, r0
 80144da:	2c00      	cmp	r4, #0
 80144dc:	d032      	beq.n	8014544 <rcutils_string_map_fini+0x78>
 80144de:	68a3      	ldr	r3, [r4, #8]
 80144e0:	b32b      	cbz	r3, 801452e <rcutils_string_map_fini+0x62>
 80144e2:	2500      	movs	r5, #0
 80144e4:	6822      	ldr	r2, [r4, #0]
 80144e6:	462f      	mov	r7, r5
 80144e8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80144ec:	b1e0      	cbz	r0, 8014528 <rcutils_string_map_fini+0x5c>
 80144ee:	6a21      	ldr	r1, [r4, #32]
 80144f0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80144f4:	9101      	str	r1, [sp, #4]
 80144f6:	47c0      	blx	r8
 80144f8:	9901      	ldr	r1, [sp, #4]
 80144fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80144fe:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8014502:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014506:	47c0      	blx	r8
 8014508:	68e3      	ldr	r3, [r4, #12]
 801450a:	6862      	ldr	r2, [r4, #4]
 801450c:	3b01      	subs	r3, #1
 801450e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014512:	3501      	adds	r5, #1
 8014514:	60e3      	str	r3, [r4, #12]
 8014516:	6834      	ldr	r4, [r6, #0]
 8014518:	68a3      	ldr	r3, [r4, #8]
 801451a:	429d      	cmp	r5, r3
 801451c:	d207      	bcs.n	801452e <rcutils_string_map_fini+0x62>
 801451e:	6822      	ldr	r2, [r4, #0]
 8014520:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014524:	2800      	cmp	r0, #0
 8014526:	d1e2      	bne.n	80144ee <rcutils_string_map_fini+0x22>
 8014528:	3501      	adds	r5, #1
 801452a:	429d      	cmp	r5, r3
 801452c:	d3dc      	bcc.n	80144e8 <rcutils_string_map_fini+0x1c>
 801452e:	2100      	movs	r1, #0
 8014530:	4630      	mov	r0, r6
 8014532:	f7ff ff1b 	bl	801436c <rcutils_string_map_reserve>
 8014536:	4604      	mov	r4, r0
 8014538:	b920      	cbnz	r0, 8014544 <rcutils_string_map_fini+0x78>
 801453a:	6830      	ldr	r0, [r6, #0]
 801453c:	6943      	ldr	r3, [r0, #20]
 801453e:	6a01      	ldr	r1, [r0, #32]
 8014540:	4798      	blx	r3
 8014542:	6034      	str	r4, [r6, #0]
 8014544:	4620      	mov	r0, r4
 8014546:	b002      	add	sp, #8
 8014548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454c:	240b      	movs	r4, #11
 801454e:	4620      	mov	r0, r4
 8014550:	b002      	add	sp, #8
 8014552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014556:	bf00      	nop

08014558 <rcutils_string_map_getn>:
 8014558:	b378      	cbz	r0, 80145ba <rcutils_string_map_getn+0x62>
 801455a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801455e:	f8d0 b000 	ldr.w	fp, [r0]
 8014562:	f1bb 0f00 	cmp.w	fp, #0
 8014566:	d01f      	beq.n	80145a8 <rcutils_string_map_getn+0x50>
 8014568:	fab1 f481 	clz	r4, r1
 801456c:	4688      	mov	r8, r1
 801456e:	0964      	lsrs	r4, r4, #5
 8014570:	b1d1      	cbz	r1, 80145a8 <rcutils_string_map_getn+0x50>
 8014572:	f8db 7008 	ldr.w	r7, [fp, #8]
 8014576:	f8db 6000 	ldr.w	r6, [fp]
 801457a:	b1af      	cbz	r7, 80145a8 <rcutils_string_map_getn+0x50>
 801457c:	4691      	mov	r9, r2
 801457e:	3e04      	subs	r6, #4
 8014580:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014584:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8014588:	3401      	adds	r4, #1
 801458a:	4628      	mov	r0, r5
 801458c:	b155      	cbz	r5, 80145a4 <rcutils_string_map_getn+0x4c>
 801458e:	f7eb feb1 	bl	80002f4 <strlen>
 8014592:	4602      	mov	r2, r0
 8014594:	4629      	mov	r1, r5
 8014596:	4640      	mov	r0, r8
 8014598:	454a      	cmp	r2, r9
 801459a:	bf38      	it	cc
 801459c:	464a      	movcc	r2, r9
 801459e:	f003 fc38 	bl	8017e12 <strncmp>
 80145a2:	b120      	cbz	r0, 80145ae <rcutils_string_map_getn+0x56>
 80145a4:	42a7      	cmp	r7, r4
 80145a6:	d1eb      	bne.n	8014580 <rcutils_string_map_getn+0x28>
 80145a8:	2000      	movs	r0, #0
 80145aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 80145b2:	f853 000a 	ldr.w	r0, [r3, sl]
 80145b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ba:	4770      	bx	lr

080145bc <rcutils_system_time_now>:
 80145bc:	b300      	cbz	r0, 8014600 <rcutils_system_time_now+0x44>
 80145be:	b570      	push	{r4, r5, r6, lr}
 80145c0:	b084      	sub	sp, #16
 80145c2:	4604      	mov	r4, r0
 80145c4:	2001      	movs	r0, #1
 80145c6:	4669      	mov	r1, sp
 80145c8:	f7ed f8e6 	bl	8001798 <clock_gettime>
 80145cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80145d0:	2900      	cmp	r1, #0
 80145d2:	db12      	blt.n	80145fa <rcutils_system_time_now+0x3e>
 80145d4:	ea53 0201 	orrs.w	r2, r3, r1
 80145d8:	9d02      	ldr	r5, [sp, #8]
 80145da:	d101      	bne.n	80145e0 <rcutils_system_time_now+0x24>
 80145dc:	2d00      	cmp	r5, #0
 80145de:	db0c      	blt.n	80145fa <rcutils_system_time_now+0x3e>
 80145e0:	4e08      	ldr	r6, [pc, #32]	@ (8014604 <rcutils_system_time_now+0x48>)
 80145e2:	2000      	movs	r0, #0
 80145e4:	fba3 3206 	umull	r3, r2, r3, r6
 80145e8:	195b      	adds	r3, r3, r5
 80145ea:	fb06 2201 	mla	r2, r6, r1, r2
 80145ee:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80145f2:	e9c4 3200 	strd	r3, r2, [r4]
 80145f6:	b004      	add	sp, #16
 80145f8:	bd70      	pop	{r4, r5, r6, pc}
 80145fa:	2002      	movs	r0, #2
 80145fc:	b004      	add	sp, #16
 80145fe:	bd70      	pop	{r4, r5, r6, pc}
 8014600:	200b      	movs	r0, #11
 8014602:	4770      	bx	lr
 8014604:	3b9aca00 	.word	0x3b9aca00

08014608 <rcutils_steady_time_now>:
 8014608:	b300      	cbz	r0, 801464c <rcutils_steady_time_now+0x44>
 801460a:	b570      	push	{r4, r5, r6, lr}
 801460c:	b084      	sub	sp, #16
 801460e:	4604      	mov	r4, r0
 8014610:	2000      	movs	r0, #0
 8014612:	4669      	mov	r1, sp
 8014614:	f7ed f8c0 	bl	8001798 <clock_gettime>
 8014618:	e9dd 3100 	ldrd	r3, r1, [sp]
 801461c:	2900      	cmp	r1, #0
 801461e:	db12      	blt.n	8014646 <rcutils_steady_time_now+0x3e>
 8014620:	ea53 0201 	orrs.w	r2, r3, r1
 8014624:	9d02      	ldr	r5, [sp, #8]
 8014626:	d101      	bne.n	801462c <rcutils_steady_time_now+0x24>
 8014628:	2d00      	cmp	r5, #0
 801462a:	db0c      	blt.n	8014646 <rcutils_steady_time_now+0x3e>
 801462c:	4e08      	ldr	r6, [pc, #32]	@ (8014650 <rcutils_steady_time_now+0x48>)
 801462e:	2000      	movs	r0, #0
 8014630:	fba3 3206 	umull	r3, r2, r3, r6
 8014634:	195b      	adds	r3, r3, r5
 8014636:	fb06 2201 	mla	r2, r6, r1, r2
 801463a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801463e:	e9c4 3200 	strd	r3, r2, [r4]
 8014642:	b004      	add	sp, #16
 8014644:	bd70      	pop	{r4, r5, r6, pc}
 8014646:	2002      	movs	r0, #2
 8014648:	b004      	add	sp, #16
 801464a:	bd70      	pop	{r4, r5, r6, pc}
 801464c:	200b      	movs	r0, #11
 801464e:	4770      	bx	lr
 8014650:	3b9aca00 	.word	0x3b9aca00
 8014654:	00000000 	.word	0x00000000

08014658 <rmw_get_zero_initialized_context>:
 8014658:	b510      	push	{r4, lr}
 801465a:	4604      	mov	r4, r0
 801465c:	3010      	adds	r0, #16
 801465e:	f000 f80f 	bl	8014680 <rmw_get_zero_initialized_init_options>
 8014662:	2300      	movs	r3, #0
 8014664:	4620      	mov	r0, r4
 8014666:	60a3      	str	r3, [r4, #8]
 8014668:	64a3      	str	r3, [r4, #72]	@ 0x48
 801466a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801466c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8014678 <rmw_get_zero_initialized_context+0x20>
 8014670:	ed84 7b00 	vstr	d7, [r4]
 8014674:	bd10      	pop	{r4, pc}
 8014676:	bf00      	nop
	...

08014680 <rmw_get_zero_initialized_init_options>:
 8014680:	b510      	push	{r4, lr}
 8014682:	4604      	mov	r4, r0
 8014684:	2238      	movs	r2, #56	@ 0x38
 8014686:	2100      	movs	r1, #0
 8014688:	f003 fbae 	bl	8017de8 <memset>
 801468c:	f104 0010 	add.w	r0, r4, #16
 8014690:	f000 f806 	bl	80146a0 <rmw_get_default_security_options>
 8014694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014698:	4620      	mov	r0, r4
 801469a:	60e3      	str	r3, [r4, #12]
 801469c:	bd10      	pop	{r4, pc}
 801469e:	bf00      	nop

080146a0 <rmw_get_default_security_options>:
 80146a0:	2200      	movs	r2, #0
 80146a2:	7002      	strb	r2, [r0, #0]
 80146a4:	6042      	str	r2, [r0, #4]
 80146a6:	4770      	bx	lr

080146a8 <rmw_validate_full_topic_name>:
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d05d      	beq.n	8014768 <rmw_validate_full_topic_name+0xc0>
 80146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b0:	460d      	mov	r5, r1
 80146b2:	2900      	cmp	r1, #0
 80146b4:	d05a      	beq.n	801476c <rmw_validate_full_topic_name+0xc4>
 80146b6:	4604      	mov	r4, r0
 80146b8:	4616      	mov	r6, r2
 80146ba:	f7eb fe1b 	bl	80002f4 <strlen>
 80146be:	b150      	cbz	r0, 80146d6 <rmw_validate_full_topic_name+0x2e>
 80146c0:	7823      	ldrb	r3, [r4, #0]
 80146c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80146c4:	d00e      	beq.n	80146e4 <rmw_validate_full_topic_name+0x3c>
 80146c6:	2302      	movs	r3, #2
 80146c8:	602b      	str	r3, [r5, #0]
 80146ca:	b146      	cbz	r6, 80146de <rmw_validate_full_topic_name+0x36>
 80146cc:	2300      	movs	r3, #0
 80146ce:	4618      	mov	r0, r3
 80146d0:	6033      	str	r3, [r6, #0]
 80146d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d6:	2301      	movs	r3, #1
 80146d8:	602b      	str	r3, [r5, #0]
 80146da:	2e00      	cmp	r6, #0
 80146dc:	d1f6      	bne.n	80146cc <rmw_validate_full_topic_name+0x24>
 80146de:	2000      	movs	r0, #0
 80146e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e4:	1e43      	subs	r3, r0, #1
 80146e6:	5ce2      	ldrb	r2, [r4, r3]
 80146e8:	2a2f      	cmp	r2, #47	@ 0x2f
 80146ea:	d041      	beq.n	8014770 <rmw_validate_full_topic_name+0xc8>
 80146ec:	1e62      	subs	r2, r4, #1
 80146ee:	f1c4 0e01 	rsb	lr, r4, #1
 80146f2:	eb02 0800 	add.w	r8, r2, r0
 80146f6:	eb0e 0702 	add.w	r7, lr, r2
 80146fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80146fe:	f023 0120 	bic.w	r1, r3, #32
 8014702:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8014706:	3941      	subs	r1, #65	@ 0x41
 8014708:	2919      	cmp	r1, #25
 801470a:	d90f      	bls.n	801472c <rmw_validate_full_topic_name+0x84>
 801470c:	f1bc 0f0a 	cmp.w	ip, #10
 8014710:	d90c      	bls.n	801472c <rmw_validate_full_topic_name+0x84>
 8014712:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8014716:	fab3 f383 	clz	r3, r3
 801471a:	095b      	lsrs	r3, r3, #5
 801471c:	b933      	cbnz	r3, 801472c <rmw_validate_full_topic_name+0x84>
 801471e:	2204      	movs	r2, #4
 8014720:	602a      	str	r2, [r5, #0]
 8014722:	2e00      	cmp	r6, #0
 8014724:	d0db      	beq.n	80146de <rmw_validate_full_topic_name+0x36>
 8014726:	4618      	mov	r0, r3
 8014728:	6037      	str	r7, [r6, #0]
 801472a:	e7d2      	b.n	80146d2 <rmw_validate_full_topic_name+0x2a>
 801472c:	4542      	cmp	r2, r8
 801472e:	d1e2      	bne.n	80146f6 <rmw_validate_full_topic_name+0x4e>
 8014730:	2301      	movs	r3, #1
 8014732:	4f1a      	ldr	r7, [pc, #104]	@ (801479c <rmw_validate_full_topic_name+0xf4>)
 8014734:	e004      	b.n	8014740 <rmw_validate_full_topic_name+0x98>
 8014736:	4298      	cmp	r0, r3
 8014738:	f104 0401 	add.w	r4, r4, #1
 801473c:	4613      	mov	r3, r2
 801473e:	d91c      	bls.n	801477a <rmw_validate_full_topic_name+0xd2>
 8014740:	4298      	cmp	r0, r3
 8014742:	f103 0201 	add.w	r2, r3, #1
 8014746:	d0f6      	beq.n	8014736 <rmw_validate_full_topic_name+0x8e>
 8014748:	7821      	ldrb	r1, [r4, #0]
 801474a:	292f      	cmp	r1, #47	@ 0x2f
 801474c:	d1f3      	bne.n	8014736 <rmw_validate_full_topic_name+0x8e>
 801474e:	7861      	ldrb	r1, [r4, #1]
 8014750:	292f      	cmp	r1, #47	@ 0x2f
 8014752:	d01e      	beq.n	8014792 <rmw_validate_full_topic_name+0xea>
 8014754:	5dc9      	ldrb	r1, [r1, r7]
 8014756:	0749      	lsls	r1, r1, #29
 8014758:	d5ed      	bpl.n	8014736 <rmw_validate_full_topic_name+0x8e>
 801475a:	2206      	movs	r2, #6
 801475c:	602a      	str	r2, [r5, #0]
 801475e:	2e00      	cmp	r6, #0
 8014760:	d0bd      	beq.n	80146de <rmw_validate_full_topic_name+0x36>
 8014762:	2000      	movs	r0, #0
 8014764:	6033      	str	r3, [r6, #0]
 8014766:	e7b4      	b.n	80146d2 <rmw_validate_full_topic_name+0x2a>
 8014768:	200b      	movs	r0, #11
 801476a:	4770      	bx	lr
 801476c:	200b      	movs	r0, #11
 801476e:	e7b0      	b.n	80146d2 <rmw_validate_full_topic_name+0x2a>
 8014770:	2203      	movs	r2, #3
 8014772:	602a      	str	r2, [r5, #0]
 8014774:	2e00      	cmp	r6, #0
 8014776:	d1f4      	bne.n	8014762 <rmw_validate_full_topic_name+0xba>
 8014778:	e7b1      	b.n	80146de <rmw_validate_full_topic_name+0x36>
 801477a:	28f7      	cmp	r0, #247	@ 0xf7
 801477c:	d803      	bhi.n	8014786 <rmw_validate_full_topic_name+0xde>
 801477e:	2300      	movs	r3, #0
 8014780:	4618      	mov	r0, r3
 8014782:	602b      	str	r3, [r5, #0]
 8014784:	e7a5      	b.n	80146d2 <rmw_validate_full_topic_name+0x2a>
 8014786:	2307      	movs	r3, #7
 8014788:	602b      	str	r3, [r5, #0]
 801478a:	2e00      	cmp	r6, #0
 801478c:	d0a7      	beq.n	80146de <rmw_validate_full_topic_name+0x36>
 801478e:	23f6      	movs	r3, #246	@ 0xf6
 8014790:	e7e7      	b.n	8014762 <rmw_validate_full_topic_name+0xba>
 8014792:	2205      	movs	r2, #5
 8014794:	602a      	str	r2, [r5, #0]
 8014796:	2e00      	cmp	r6, #0
 8014798:	d1e3      	bne.n	8014762 <rmw_validate_full_topic_name+0xba>
 801479a:	e7a0      	b.n	80146de <rmw_validate_full_topic_name+0x36>
 801479c:	0801987c 	.word	0x0801987c

080147a0 <rmw_validate_namespace_with_size>:
 80147a0:	2800      	cmp	r0, #0
 80147a2:	d043      	beq.n	801482c <rmw_validate_namespace_with_size+0x8c>
 80147a4:	b570      	push	{r4, r5, r6, lr}
 80147a6:	4614      	mov	r4, r2
 80147a8:	b0c2      	sub	sp, #264	@ 0x108
 80147aa:	b32a      	cbz	r2, 80147f8 <rmw_validate_namespace_with_size+0x58>
 80147ac:	2901      	cmp	r1, #1
 80147ae:	460d      	mov	r5, r1
 80147b0:	461e      	mov	r6, r3
 80147b2:	d102      	bne.n	80147ba <rmw_validate_namespace_with_size+0x1a>
 80147b4:	7803      	ldrb	r3, [r0, #0]
 80147b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80147b8:	d012      	beq.n	80147e0 <rmw_validate_namespace_with_size+0x40>
 80147ba:	aa01      	add	r2, sp, #4
 80147bc:	4669      	mov	r1, sp
 80147be:	f7ff ff73 	bl	80146a8 <rmw_validate_full_topic_name>
 80147c2:	b980      	cbnz	r0, 80147e6 <rmw_validate_namespace_with_size+0x46>
 80147c4:	9a00      	ldr	r2, [sp, #0]
 80147c6:	b14a      	cbz	r2, 80147dc <rmw_validate_namespace_with_size+0x3c>
 80147c8:	2a07      	cmp	r2, #7
 80147ca:	d007      	beq.n	80147dc <rmw_validate_namespace_with_size+0x3c>
 80147cc:	1e53      	subs	r3, r2, #1
 80147ce:	2b05      	cmp	r3, #5
 80147d0:	d82e      	bhi.n	8014830 <rmw_validate_namespace_with_size+0x90>
 80147d2:	e8df f003 	tbb	[pc, r3]
 80147d6:	1f1c      	.short	0x1f1c
 80147d8:	14282522 	.word	0x14282522
 80147dc:	2df5      	cmp	r5, #245	@ 0xf5
 80147de:	d804      	bhi.n	80147ea <rmw_validate_namespace_with_size+0x4a>
 80147e0:	2300      	movs	r3, #0
 80147e2:	4618      	mov	r0, r3
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	b042      	add	sp, #264	@ 0x108
 80147e8:	bd70      	pop	{r4, r5, r6, pc}
 80147ea:	2307      	movs	r3, #7
 80147ec:	6023      	str	r3, [r4, #0]
 80147ee:	2e00      	cmp	r6, #0
 80147f0:	d0f9      	beq.n	80147e6 <rmw_validate_namespace_with_size+0x46>
 80147f2:	23f4      	movs	r3, #244	@ 0xf4
 80147f4:	6033      	str	r3, [r6, #0]
 80147f6:	e7f6      	b.n	80147e6 <rmw_validate_namespace_with_size+0x46>
 80147f8:	200b      	movs	r0, #11
 80147fa:	b042      	add	sp, #264	@ 0x108
 80147fc:	bd70      	pop	{r4, r5, r6, pc}
 80147fe:	2306      	movs	r3, #6
 8014800:	6023      	str	r3, [r4, #0]
 8014802:	2e00      	cmp	r6, #0
 8014804:	d0ef      	beq.n	80147e6 <rmw_validate_namespace_with_size+0x46>
 8014806:	9b01      	ldr	r3, [sp, #4]
 8014808:	6033      	str	r3, [r6, #0]
 801480a:	b042      	add	sp, #264	@ 0x108
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	2301      	movs	r3, #1
 8014810:	6023      	str	r3, [r4, #0]
 8014812:	e7f6      	b.n	8014802 <rmw_validate_namespace_with_size+0x62>
 8014814:	2302      	movs	r3, #2
 8014816:	6023      	str	r3, [r4, #0]
 8014818:	e7f3      	b.n	8014802 <rmw_validate_namespace_with_size+0x62>
 801481a:	2303      	movs	r3, #3
 801481c:	6023      	str	r3, [r4, #0]
 801481e:	e7f0      	b.n	8014802 <rmw_validate_namespace_with_size+0x62>
 8014820:	2304      	movs	r3, #4
 8014822:	6023      	str	r3, [r4, #0]
 8014824:	e7ed      	b.n	8014802 <rmw_validate_namespace_with_size+0x62>
 8014826:	2305      	movs	r3, #5
 8014828:	6023      	str	r3, [r4, #0]
 801482a:	e7ea      	b.n	8014802 <rmw_validate_namespace_with_size+0x62>
 801482c:	200b      	movs	r0, #11
 801482e:	4770      	bx	lr
 8014830:	4613      	mov	r3, r2
 8014832:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014836:	4a03      	ldr	r2, [pc, #12]	@ (8014844 <rmw_validate_namespace_with_size+0xa4>)
 8014838:	a802      	add	r0, sp, #8
 801483a:	f7ff fd05 	bl	8014248 <rcutils_snprintf>
 801483e:	2001      	movs	r0, #1
 8014840:	e7d1      	b.n	80147e6 <rmw_validate_namespace_with_size+0x46>
 8014842:	bf00      	nop
 8014844:	08019284 	.word	0x08019284

08014848 <rmw_validate_namespace>:
 8014848:	b168      	cbz	r0, 8014866 <rmw_validate_namespace+0x1e>
 801484a:	b570      	push	{r4, r5, r6, lr}
 801484c:	460d      	mov	r5, r1
 801484e:	4616      	mov	r6, r2
 8014850:	4604      	mov	r4, r0
 8014852:	f7eb fd4f 	bl	80002f4 <strlen>
 8014856:	4633      	mov	r3, r6
 8014858:	4601      	mov	r1, r0
 801485a:	462a      	mov	r2, r5
 801485c:	4620      	mov	r0, r4
 801485e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014862:	f7ff bf9d 	b.w	80147a0 <rmw_validate_namespace_with_size>
 8014866:	200b      	movs	r0, #11
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop

0801486c <rmw_namespace_validation_result_string>:
 801486c:	2807      	cmp	r0, #7
 801486e:	d803      	bhi.n	8014878 <rmw_namespace_validation_result_string+0xc>
 8014870:	4b02      	ldr	r3, [pc, #8]	@ (801487c <rmw_namespace_validation_result_string+0x10>)
 8014872:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014876:	4770      	bx	lr
 8014878:	4801      	ldr	r0, [pc, #4]	@ (8014880 <rmw_namespace_validation_result_string+0x14>)
 801487a:	4770      	bx	lr
 801487c:	0801947c 	.word	0x0801947c
 8014880:	080192d4 	.word	0x080192d4

08014884 <rmw_validate_node_name>:
 8014884:	2800      	cmp	r0, #0
 8014886:	d042      	beq.n	801490e <rmw_validate_node_name+0x8a>
 8014888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801488c:	460d      	mov	r5, r1
 801488e:	2900      	cmp	r1, #0
 8014890:	d03f      	beq.n	8014912 <rmw_validate_node_name+0x8e>
 8014892:	4604      	mov	r4, r0
 8014894:	4616      	mov	r6, r2
 8014896:	f7eb fd2d 	bl	80002f4 <strlen>
 801489a:	b310      	cbz	r0, 80148e2 <rmw_validate_node_name+0x5e>
 801489c:	1e63      	subs	r3, r4, #1
 801489e:	f1c4 0101 	rsb	r1, r4, #1
 80148a2:	eb03 0800 	add.w	r8, r3, r0
 80148a6:	18cf      	adds	r7, r1, r3
 80148a8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80148ac:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80148b0:	f02e 0c20 	bic.w	ip, lr, #32
 80148b4:	2a09      	cmp	r2, #9
 80148b6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80148ba:	d905      	bls.n	80148c8 <rmw_validate_node_name+0x44>
 80148bc:	f1bc 0f19 	cmp.w	ip, #25
 80148c0:	d902      	bls.n	80148c8 <rmw_validate_node_name+0x44>
 80148c2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80148c6:	d114      	bne.n	80148f2 <rmw_validate_node_name+0x6e>
 80148c8:	4598      	cmp	r8, r3
 80148ca:	d1ec      	bne.n	80148a6 <rmw_validate_node_name+0x22>
 80148cc:	7822      	ldrb	r2, [r4, #0]
 80148ce:	4b16      	ldr	r3, [pc, #88]	@ (8014928 <rmw_validate_node_name+0xa4>)
 80148d0:	5cd3      	ldrb	r3, [r2, r3]
 80148d2:	f013 0304 	ands.w	r3, r3, #4
 80148d6:	d113      	bne.n	8014900 <rmw_validate_node_name+0x7c>
 80148d8:	28ff      	cmp	r0, #255	@ 0xff
 80148da:	d81c      	bhi.n	8014916 <rmw_validate_node_name+0x92>
 80148dc:	4618      	mov	r0, r3
 80148de:	602b      	str	r3, [r5, #0]
 80148e0:	e00c      	b.n	80148fc <rmw_validate_node_name+0x78>
 80148e2:	2301      	movs	r3, #1
 80148e4:	602b      	str	r3, [r5, #0]
 80148e6:	b17e      	cbz	r6, 8014908 <rmw_validate_node_name+0x84>
 80148e8:	2300      	movs	r3, #0
 80148ea:	4618      	mov	r0, r3
 80148ec:	6033      	str	r3, [r6, #0]
 80148ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f2:	2302      	movs	r3, #2
 80148f4:	602b      	str	r3, [r5, #0]
 80148f6:	b13e      	cbz	r6, 8014908 <rmw_validate_node_name+0x84>
 80148f8:	2000      	movs	r0, #0
 80148fa:	6037      	str	r7, [r6, #0]
 80148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014900:	2303      	movs	r3, #3
 8014902:	602b      	str	r3, [r5, #0]
 8014904:	2e00      	cmp	r6, #0
 8014906:	d1ef      	bne.n	80148e8 <rmw_validate_node_name+0x64>
 8014908:	2000      	movs	r0, #0
 801490a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801490e:	200b      	movs	r0, #11
 8014910:	4770      	bx	lr
 8014912:	200b      	movs	r0, #11
 8014914:	e7f2      	b.n	80148fc <rmw_validate_node_name+0x78>
 8014916:	2204      	movs	r2, #4
 8014918:	602a      	str	r2, [r5, #0]
 801491a:	2e00      	cmp	r6, #0
 801491c:	d0f4      	beq.n	8014908 <rmw_validate_node_name+0x84>
 801491e:	22fe      	movs	r2, #254	@ 0xfe
 8014920:	4618      	mov	r0, r3
 8014922:	6032      	str	r2, [r6, #0]
 8014924:	e7ea      	b.n	80148fc <rmw_validate_node_name+0x78>
 8014926:	bf00      	nop
 8014928:	0801987c 	.word	0x0801987c

0801492c <rmw_node_name_validation_result_string>:
 801492c:	2804      	cmp	r0, #4
 801492e:	d803      	bhi.n	8014938 <rmw_node_name_validation_result_string+0xc>
 8014930:	4b02      	ldr	r3, [pc, #8]	@ (801493c <rmw_node_name_validation_result_string+0x10>)
 8014932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014936:	4770      	bx	lr
 8014938:	4801      	ldr	r0, [pc, #4]	@ (8014940 <rmw_node_name_validation_result_string+0x14>)
 801493a:	4770      	bx	lr
 801493c:	08019588 	.word	0x08019588
 8014940:	0801949c 	.word	0x0801949c

08014944 <get_memory>:
 8014944:	4603      	mov	r3, r0
 8014946:	6840      	ldr	r0, [r0, #4]
 8014948:	b158      	cbz	r0, 8014962 <get_memory+0x1e>
 801494a:	6842      	ldr	r2, [r0, #4]
 801494c:	605a      	str	r2, [r3, #4]
 801494e:	b10a      	cbz	r2, 8014954 <get_memory+0x10>
 8014950:	2100      	movs	r1, #0
 8014952:	6011      	str	r1, [r2, #0]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	6042      	str	r2, [r0, #4]
 8014958:	b102      	cbz	r2, 801495c <get_memory+0x18>
 801495a:	6010      	str	r0, [r2, #0]
 801495c:	2200      	movs	r2, #0
 801495e:	6002      	str	r2, [r0, #0]
 8014960:	6018      	str	r0, [r3, #0]
 8014962:	4770      	bx	lr

08014964 <put_memory>:
 8014964:	680b      	ldr	r3, [r1, #0]
 8014966:	b10b      	cbz	r3, 801496c <put_memory+0x8>
 8014968:	684a      	ldr	r2, [r1, #4]
 801496a:	605a      	str	r2, [r3, #4]
 801496c:	684a      	ldr	r2, [r1, #4]
 801496e:	b102      	cbz	r2, 8014972 <put_memory+0xe>
 8014970:	6013      	str	r3, [r2, #0]
 8014972:	6803      	ldr	r3, [r0, #0]
 8014974:	428b      	cmp	r3, r1
 8014976:	6843      	ldr	r3, [r0, #4]
 8014978:	bf08      	it	eq
 801497a:	6002      	streq	r2, [r0, #0]
 801497c:	604b      	str	r3, [r1, #4]
 801497e:	b103      	cbz	r3, 8014982 <put_memory+0x1e>
 8014980:	6019      	str	r1, [r3, #0]
 8014982:	2300      	movs	r3, #0
 8014984:	600b      	str	r3, [r1, #0]
 8014986:	6041      	str	r1, [r0, #4]
 8014988:	4770      	bx	lr
 801498a:	bf00      	nop

0801498c <rmw_get_implementation_identifier>:
 801498c:	4b01      	ldr	r3, [pc, #4]	@ (8014994 <rmw_get_implementation_identifier+0x8>)
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	080195b4 	.word	0x080195b4

08014998 <rmw_init_options_init>:
 8014998:	b084      	sub	sp, #16
 801499a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801499c:	b083      	sub	sp, #12
 801499e:	ad09      	add	r5, sp, #36	@ 0x24
 80149a0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80149a4:	b130      	cbz	r0, 80149b4 <rmw_init_options_init+0x1c>
 80149a6:	4604      	mov	r4, r0
 80149a8:	4628      	mov	r0, r5
 80149aa:	f7fa f929 	bl	800ec00 <rcutils_allocator_is_valid>
 80149ae:	b108      	cbz	r0, 80149b4 <rmw_init_options_init+0x1c>
 80149b0:	68a6      	ldr	r6, [r4, #8]
 80149b2:	b12e      	cbz	r6, 80149c0 <rmw_init_options_init+0x28>
 80149b4:	200b      	movs	r0, #11
 80149b6:	b003      	add	sp, #12
 80149b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80149bc:	b004      	add	sp, #16
 80149be:	4770      	bx	lr
 80149c0:	2200      	movs	r2, #0
 80149c2:	2300      	movs	r3, #0
 80149c4:	f104 0c20 	add.w	ip, r4, #32
 80149c8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014a64 <rmw_init_options_init+0xcc>
 80149cc:	466f      	mov	r7, sp
 80149ce:	e9c4 2300 	strd	r2, r3, [r4]
 80149d2:	4b20      	ldr	r3, [pc, #128]	@ (8014a54 <rmw_init_options_init+0xbc>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	60a3      	str	r3, [r4, #8]
 80149d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149de:	682b      	ldr	r3, [r5, #0]
 80149e0:	4638      	mov	r0, r7
 80149e2:	f8cc 3000 	str.w	r3, [ip]
 80149e6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80149ea:	60e6      	str	r6, [r4, #12]
 80149ec:	f7ff fe58 	bl	80146a0 <rmw_get_default_security_options>
 80149f0:	f104 0310 	add.w	r3, r4, #16
 80149f4:	2203      	movs	r2, #3
 80149f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80149fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80149fe:	4816      	ldr	r0, [pc, #88]	@ (8014a58 <rmw_init_options_init+0xc0>)
 8014a00:	4916      	ldr	r1, [pc, #88]	@ (8014a5c <rmw_init_options_init+0xc4>)
 8014a02:	7626      	strb	r6, [r4, #24]
 8014a04:	f7fa fc26 	bl	800f254 <rmw_uxrce_init_init_options_impl_memory>
 8014a08:	4813      	ldr	r0, [pc, #76]	@ (8014a58 <rmw_init_options_init+0xc0>)
 8014a0a:	f7ff ff9b 	bl	8014944 <get_memory>
 8014a0e:	b1f0      	cbz	r0, 8014a4e <rmw_init_options_init+0xb6>
 8014a10:	4a13      	ldr	r2, [pc, #76]	@ (8014a60 <rmw_init_options_init+0xc8>)
 8014a12:	6883      	ldr	r3, [r0, #8]
 8014a14:	6851      	ldr	r1, [r2, #4]
 8014a16:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a18:	7810      	ldrb	r0, [r2, #0]
 8014a1a:	6159      	str	r1, [r3, #20]
 8014a1c:	68d1      	ldr	r1, [r2, #12]
 8014a1e:	7418      	strb	r0, [r3, #16]
 8014a20:	61d9      	str	r1, [r3, #28]
 8014a22:	6911      	ldr	r1, [r2, #16]
 8014a24:	6219      	str	r1, [r3, #32]
 8014a26:	6951      	ldr	r1, [r2, #20]
 8014a28:	6892      	ldr	r2, [r2, #8]
 8014a2a:	6259      	str	r1, [r3, #36]	@ 0x24
 8014a2c:	619a      	str	r2, [r3, #24]
 8014a2e:	f7fd fa63 	bl	8011ef8 <uxr_nanos>
 8014a32:	f002 ff4d 	bl	80178d0 <srand>
 8014a36:	f002 ff79 	bl	801792c <rand>
 8014a3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014a3c:	6298      	str	r0, [r3, #40]	@ 0x28
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	d0f9      	beq.n	8014a36 <rmw_init_options_init+0x9e>
 8014a42:	2000      	movs	r0, #0
 8014a44:	b003      	add	sp, #12
 8014a46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a4a:	b004      	add	sp, #16
 8014a4c:	4770      	bx	lr
 8014a4e:	2001      	movs	r0, #1
 8014a50:	e7b1      	b.n	80149b6 <rmw_init_options_init+0x1e>
 8014a52:	bf00      	nop
 8014a54:	080195b4 	.word	0x080195b4
 8014a58:	24068524 	.word	0x24068524
 8014a5c:	24063dc0 	.word	0x24063dc0
 8014a60:	24063c4c 	.word	0x24063c4c
 8014a64:	08019154 	.word	0x08019154

08014a68 <rmw_init_options_copy>:
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d047      	beq.n	8014afc <rmw_init_options_copy+0x94>
 8014a6c:	b570      	push	{r4, r5, r6, lr}
 8014a6e:	460d      	mov	r5, r1
 8014a70:	b149      	cbz	r1, 8014a86 <rmw_init_options_copy+0x1e>
 8014a72:	4604      	mov	r4, r0
 8014a74:	6880      	ldr	r0, [r0, #8]
 8014a76:	b120      	cbz	r0, 8014a82 <rmw_init_options_copy+0x1a>
 8014a78:	4b22      	ldr	r3, [pc, #136]	@ (8014b04 <rmw_init_options_copy+0x9c>)
 8014a7a:	6819      	ldr	r1, [r3, #0]
 8014a7c:	f7eb fc30 	bl	80002e0 <strcmp>
 8014a80:	bba8      	cbnz	r0, 8014aee <rmw_init_options_copy+0x86>
 8014a82:	68ab      	ldr	r3, [r5, #8]
 8014a84:	b11b      	cbz	r3, 8014a8e <rmw_init_options_copy+0x26>
 8014a86:	f04f 0c0b 	mov.w	ip, #11
 8014a8a:	4660      	mov	r0, ip
 8014a8c:	bd70      	pop	{r4, r5, r6, pc}
 8014a8e:	4623      	mov	r3, r4
 8014a90:	462a      	mov	r2, r5
 8014a92:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8014a96:	f8d3 e000 	ldr.w	lr, [r3]
 8014a9a:	3310      	adds	r3, #16
 8014a9c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8014aa0:	3210      	adds	r2, #16
 8014aa2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8014aa6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014aaa:	42b3      	cmp	r3, r6
 8014aac:	f842 ec10 	str.w	lr, [r2, #-16]
 8014ab0:	f842 cc0c 	str.w	ip, [r2, #-12]
 8014ab4:	f842 0c08 	str.w	r0, [r2, #-8]
 8014ab8:	f842 1c04 	str.w	r1, [r2, #-4]
 8014abc:	d1eb      	bne.n	8014a96 <rmw_init_options_copy+0x2e>
 8014abe:	6819      	ldr	r1, [r3, #0]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	4811      	ldr	r0, [pc, #68]	@ (8014b08 <rmw_init_options_copy+0xa0>)
 8014ac4:	6011      	str	r1, [r2, #0]
 8014ac6:	6053      	str	r3, [r2, #4]
 8014ac8:	f7ff ff3c 	bl	8014944 <get_memory>
 8014acc:	b198      	cbz	r0, 8014af6 <rmw_init_options_copy+0x8e>
 8014ace:	6883      	ldr	r3, [r0, #8]
 8014ad0:	f04f 0c00 	mov.w	ip, #0
 8014ad4:	636b      	str	r3, [r5, #52]	@ 0x34
 8014ad6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8014ad8:	f103 0410 	add.w	r4, r3, #16
 8014adc:	3510      	adds	r5, #16
 8014ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014aea:	4660      	mov	r0, ip
 8014aec:	bd70      	pop	{r4, r5, r6, pc}
 8014aee:	f04f 0c0c 	mov.w	ip, #12
 8014af2:	4660      	mov	r0, ip
 8014af4:	bd70      	pop	{r4, r5, r6, pc}
 8014af6:	f04f 0c01 	mov.w	ip, #1
 8014afa:	e7c6      	b.n	8014a8a <rmw_init_options_copy+0x22>
 8014afc:	f04f 0c0b 	mov.w	ip, #11
 8014b00:	4660      	mov	r0, ip
 8014b02:	4770      	bx	lr
 8014b04:	080195b4 	.word	0x080195b4
 8014b08:	24068524 	.word	0x24068524

08014b0c <rmw_init_options_fini>:
 8014b0c:	b510      	push	{r4, lr}
 8014b0e:	b08e      	sub	sp, #56	@ 0x38
 8014b10:	b388      	cbz	r0, 8014b76 <rmw_init_options_fini+0x6a>
 8014b12:	4604      	mov	r4, r0
 8014b14:	3020      	adds	r0, #32
 8014b16:	f7fa f873 	bl	800ec00 <rcutils_allocator_is_valid>
 8014b1a:	b360      	cbz	r0, 8014b76 <rmw_init_options_fini+0x6a>
 8014b1c:	68a0      	ldr	r0, [r4, #8]
 8014b1e:	b120      	cbz	r0, 8014b2a <rmw_init_options_fini+0x1e>
 8014b20:	4b1a      	ldr	r3, [pc, #104]	@ (8014b8c <rmw_init_options_fini+0x80>)
 8014b22:	6819      	ldr	r1, [r3, #0]
 8014b24:	f7eb fbdc 	bl	80002e0 <strcmp>
 8014b28:	bb68      	cbnz	r0, 8014b86 <rmw_init_options_fini+0x7a>
 8014b2a:	4b19      	ldr	r3, [pc, #100]	@ (8014b90 <rmw_init_options_fini+0x84>)
 8014b2c:	6819      	ldr	r1, [r3, #0]
 8014b2e:	b331      	cbz	r1, 8014b7e <rmw_init_options_fini+0x72>
 8014b30:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014b32:	e001      	b.n	8014b38 <rmw_init_options_fini+0x2c>
 8014b34:	6849      	ldr	r1, [r1, #4]
 8014b36:	b311      	cbz	r1, 8014b7e <rmw_init_options_fini+0x72>
 8014b38:	688b      	ldr	r3, [r1, #8]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d1fa      	bne.n	8014b34 <rmw_init_options_fini+0x28>
 8014b3e:	4814      	ldr	r0, [pc, #80]	@ (8014b90 <rmw_init_options_fini+0x84>)
 8014b40:	f7ff ff10 	bl	8014964 <put_memory>
 8014b44:	4668      	mov	r0, sp
 8014b46:	f7ff fd9b 	bl	8014680 <rmw_get_zero_initialized_init_options>
 8014b4a:	46ee      	mov	lr, sp
 8014b4c:	46a4      	mov	ip, r4
 8014b4e:	2400      	movs	r4, #0
 8014b50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b70:	4620      	mov	r0, r4
 8014b72:	b00e      	add	sp, #56	@ 0x38
 8014b74:	bd10      	pop	{r4, pc}
 8014b76:	240b      	movs	r4, #11
 8014b78:	4620      	mov	r0, r4
 8014b7a:	b00e      	add	sp, #56	@ 0x38
 8014b7c:	bd10      	pop	{r4, pc}
 8014b7e:	2401      	movs	r4, #1
 8014b80:	4620      	mov	r0, r4
 8014b82:	b00e      	add	sp, #56	@ 0x38
 8014b84:	bd10      	pop	{r4, pc}
 8014b86:	240c      	movs	r4, #12
 8014b88:	e7f2      	b.n	8014b70 <rmw_init_options_fini+0x64>
 8014b8a:	bf00      	nop
 8014b8c:	080195b4 	.word	0x080195b4
 8014b90:	24068524 	.word	0x24068524

08014b94 <rmw_init>:
 8014b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b98:	b083      	sub	sp, #12
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	f000 80d3 	beq.w	8014d46 <rmw_init+0x1b2>
 8014ba0:	460e      	mov	r6, r1
 8014ba2:	2900      	cmp	r1, #0
 8014ba4:	f000 80cf 	beq.w	8014d46 <rmw_init+0x1b2>
 8014ba8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014baa:	4605      	mov	r5, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 80ca 	beq.w	8014d46 <rmw_init+0x1b2>
 8014bb2:	4b78      	ldr	r3, [pc, #480]	@ (8014d94 <rmw_init+0x200>)
 8014bb4:	6880      	ldr	r0, [r0, #8]
 8014bb6:	681f      	ldr	r7, [r3, #0]
 8014bb8:	b128      	cbz	r0, 8014bc6 <rmw_init+0x32>
 8014bba:	4639      	mov	r1, r7
 8014bbc:	f7eb fb90 	bl	80002e0 <strcmp>
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	f040 80ca 	bne.w	8014d5a <rmw_init+0x1c6>
 8014bc6:	4c74      	ldr	r4, [pc, #464]	@ (8014d98 <rmw_init+0x204>)
 8014bc8:	f04f 0800 	mov.w	r8, #0
 8014bcc:	4973      	ldr	r1, [pc, #460]	@ (8014d9c <rmw_init+0x208>)
 8014bce:	4874      	ldr	r0, [pc, #464]	@ (8014da0 <rmw_init+0x20c>)
 8014bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014bd4:	60b7      	str	r7, [r6, #8]
 8014bd6:	e9c6 2300 	strd	r2, r3, [r6]
 8014bda:	68eb      	ldr	r3, [r5, #12]
 8014bdc:	2201      	movs	r2, #1
 8014bde:	64b3      	str	r3, [r6, #72]	@ 0x48
 8014be0:	f7fa fad8 	bl	800f194 <rmw_uxrce_init_session_memory>
 8014be4:	4620      	mov	r0, r4
 8014be6:	2204      	movs	r2, #4
 8014be8:	496e      	ldr	r1, [pc, #440]	@ (8014da4 <rmw_init+0x210>)
 8014bea:	f7fa fb13 	bl	800f214 <rmw_uxrce_init_static_input_buffer_memory>
 8014bee:	486c      	ldr	r0, [pc, #432]	@ (8014da0 <rmw_init+0x20c>)
 8014bf0:	f884 800d 	strb.w	r8, [r4, #13]
 8014bf4:	f7ff fea6 	bl	8014944 <get_memory>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	f000 80a9 	beq.w	8014d50 <rmw_init+0x1bc>
 8014bfe:	6884      	ldr	r4, [r0, #8]
 8014c00:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8014c02:	f104 0910 	add.w	r9, r4, #16
 8014c06:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8014c08:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014c0c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014c10:	9101      	str	r1, [sp, #4]
 8014c12:	4661      	mov	r1, ip
 8014c14:	6a00      	ldr	r0, [r0, #32]
 8014c16:	9000      	str	r0, [sp, #0]
 8014c18:	4648      	mov	r0, r9
 8014c1a:	f000 fdbb 	bl	8015794 <uxr_set_custom_transport_callbacks>
 8014c1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014c22:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8014c26:	4960      	ldr	r1, [pc, #384]	@ (8014da8 <rmw_init+0x214>)
 8014c28:	4860      	ldr	r0, [pc, #384]	@ (8014dac <rmw_init+0x218>)
 8014c2a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8014c2e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014c32:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014c36:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014c40:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014c44:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014c48:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8014c4c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8014c4e:	f7fa fa81 	bl	800f154 <rmw_uxrce_init_node_memory>
 8014c52:	2205      	movs	r2, #5
 8014c54:	4956      	ldr	r1, [pc, #344]	@ (8014db0 <rmw_init+0x21c>)
 8014c56:	4857      	ldr	r0, [pc, #348]	@ (8014db4 <rmw_init+0x220>)
 8014c58:	f7fa fa5c 	bl	800f114 <rmw_uxrce_init_subscription_memory>
 8014c5c:	220a      	movs	r2, #10
 8014c5e:	4956      	ldr	r1, [pc, #344]	@ (8014db8 <rmw_init+0x224>)
 8014c60:	4856      	ldr	r0, [pc, #344]	@ (8014dbc <rmw_init+0x228>)
 8014c62:	f7fa fa37 	bl	800f0d4 <rmw_uxrce_init_publisher_memory>
 8014c66:	2201      	movs	r2, #1
 8014c68:	4955      	ldr	r1, [pc, #340]	@ (8014dc0 <rmw_init+0x22c>)
 8014c6a:	4856      	ldr	r0, [pc, #344]	@ (8014dc4 <rmw_init+0x230>)
 8014c6c:	f7fa f9f2 	bl	800f054 <rmw_uxrce_init_service_memory>
 8014c70:	2201      	movs	r2, #1
 8014c72:	4955      	ldr	r1, [pc, #340]	@ (8014dc8 <rmw_init+0x234>)
 8014c74:	4855      	ldr	r0, [pc, #340]	@ (8014dcc <rmw_init+0x238>)
 8014c76:	f7fa fa0d 	bl	800f094 <rmw_uxrce_init_client_memory>
 8014c7a:	220f      	movs	r2, #15
 8014c7c:	4954      	ldr	r1, [pc, #336]	@ (8014dd0 <rmw_init+0x23c>)
 8014c7e:	4855      	ldr	r0, [pc, #340]	@ (8014dd4 <rmw_init+0x240>)
 8014c80:	f7fa faa8 	bl	800f1d4 <rmw_uxrce_init_topic_memory>
 8014c84:	2203      	movs	r2, #3
 8014c86:	4954      	ldr	r1, [pc, #336]	@ (8014dd8 <rmw_init+0x244>)
 8014c88:	4854      	ldr	r0, [pc, #336]	@ (8014ddc <rmw_init+0x248>)
 8014c8a:	f7fa fae3 	bl	800f254 <rmw_uxrce_init_init_options_impl_memory>
 8014c8e:	2204      	movs	r2, #4
 8014c90:	4953      	ldr	r1, [pc, #332]	@ (8014de0 <rmw_init+0x24c>)
 8014c92:	4854      	ldr	r0, [pc, #336]	@ (8014de4 <rmw_init+0x250>)
 8014c94:	f7fa fafe 	bl	800f294 <rmw_uxrce_init_wait_set_memory>
 8014c98:	4953      	ldr	r1, [pc, #332]	@ (8014de8 <rmw_init+0x254>)
 8014c9a:	4854      	ldr	r0, [pc, #336]	@ (8014dec <rmw_init+0x258>)
 8014c9c:	2204      	movs	r2, #4
 8014c9e:	f7fa fb19 	bl	800f2d4 <rmw_uxrce_init_guard_condition_memory>
 8014ca2:	4642      	mov	r2, r8
 8014ca4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8014ca6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8014ca8:	f000 fb0a 	bl	80152c0 <rmw_uxrce_transport_init>
 8014cac:	4607      	mov	r7, r0
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	d158      	bne.n	8014d64 <rmw_init+0x1d0>
 8014cb2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8014cb4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8014cb8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8014cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	f7fb ff56 	bl	8010b70 <uxr_init_session>
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	494a      	ldr	r1, [pc, #296]	@ (8014df0 <rmw_init+0x25c>)
 8014cc8:	4628      	mov	r0, r5
 8014cca:	f7fb ff75 	bl	8010bb8 <uxr_set_topic_callback>
 8014cce:	463a      	mov	r2, r7
 8014cd0:	4948      	ldr	r1, [pc, #288]	@ (8014df4 <rmw_init+0x260>)
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7fb ff6c 	bl	8010bb0 <uxr_set_status_callback>
 8014cd8:	463a      	mov	r2, r7
 8014cda:	4947      	ldr	r1, [pc, #284]	@ (8014df8 <rmw_init+0x264>)
 8014cdc:	4628      	mov	r0, r5
 8014cde:	f7fb ff6f 	bl	8010bc0 <uxr_set_request_callback>
 8014ce2:	463a      	mov	r2, r7
 8014ce4:	4945      	ldr	r1, [pc, #276]	@ (8014dfc <rmw_init+0x268>)
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f7fb ff6e 	bl	8010bc8 <uxr_set_reply_callback>
 8014cec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014cf0:	2304      	movs	r3, #4
 8014cf2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8014cf6:	0092      	lsls	r2, r2, #2
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	f7fb ffa5 	bl	8010c48 <uxr_create_input_reliable_stream>
 8014cfe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014d02:	2304      	movs	r3, #4
 8014d04:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8014d08:	0092      	lsls	r2, r2, #2
 8014d0a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8014d0e:	4628      	mov	r0, r5
 8014d10:	f7fb ff70 	bl	8010bf4 <uxr_create_output_reliable_stream>
 8014d14:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8014d18:	4628      	mov	r0, r5
 8014d1a:	f7fb ff8f 	bl	8010c3c <uxr_create_input_best_effort_stream>
 8014d1e:	f241 3194 	movw	r1, #5012	@ 0x1394
 8014d22:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8014d26:	4628      	mov	r0, r5
 8014d28:	4421      	add	r1, r4
 8014d2a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014d2e:	f7fb ff4f 	bl	8010bd0 <uxr_create_output_best_effort_stream>
 8014d32:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014d36:	4628      	mov	r0, r5
 8014d38:	f7fc fcf2 	bl	8011720 <uxr_create_session>
 8014d3c:	b1f8      	cbz	r0, 8014d7e <rmw_init+0x1ea>
 8014d3e:	4638      	mov	r0, r7
 8014d40:	b003      	add	sp, #12
 8014d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d46:	270b      	movs	r7, #11
 8014d48:	4638      	mov	r0, r7
 8014d4a:	b003      	add	sp, #12
 8014d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d50:	2701      	movs	r7, #1
 8014d52:	4638      	mov	r0, r7
 8014d54:	b003      	add	sp, #12
 8014d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d5a:	270c      	movs	r7, #12
 8014d5c:	4638      	mov	r0, r7
 8014d5e:	b003      	add	sp, #12
 8014d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d64:	4648      	mov	r0, r9
 8014d66:	f000 fd53 	bl	8015810 <uxr_close_custom_transport>
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	480c      	ldr	r0, [pc, #48]	@ (8014da0 <rmw_init+0x20c>)
 8014d6e:	f7ff fdf9 	bl	8014964 <put_memory>
 8014d72:	4638      	mov	r0, r7
 8014d74:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8014d78:	b003      	add	sp, #12
 8014d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d7e:	4648      	mov	r0, r9
 8014d80:	f000 fd46 	bl	8015810 <uxr_close_custom_transport>
 8014d84:	4621      	mov	r1, r4
 8014d86:	4806      	ldr	r0, [pc, #24]	@ (8014da0 <rmw_init+0x20c>)
 8014d88:	f7ff fdec 	bl	8014964 <put_memory>
 8014d8c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8014d8e:	2701      	movs	r7, #1
 8014d90:	e7d5      	b.n	8014d3e <rmw_init+0x1aa>
 8014d92:	bf00      	nop
 8014d94:	080195b4 	.word	0x080195b4
 8014d98:	24068574 	.word	0x24068574
 8014d9c:	24064820 	.word	0x24064820
 8014da0:	24068564 	.word	0x24068564
 8014da4:	24065dc8 	.word	0x24065dc8
 8014da8:	24063e44 	.word	0x24063e44
 8014dac:	24068534 	.word	0x24068534
 8014db0:	24067ec8 	.word	0x24067ec8
 8014db4:	24068584 	.word	0x24068584
 8014db8:	24063ee8 	.word	0x24063ee8
 8014dbc:	24068544 	.word	0x24068544
 8014dc0:	24064758 	.word	0x24064758
 8014dc4:	24068554 	.word	0x24068554
 8014dc8:	24063c78 	.word	0x24063c78
 8014dcc:	24063c68 	.word	0x24063c68
 8014dd0:	24068300 	.word	0x24068300
 8014dd4:	24068594 	.word	0x24068594
 8014dd8:	24063dc0 	.word	0x24063dc0
 8014ddc:	24068524 	.word	0x24068524
 8014de0:	240684a4 	.word	0x240684a4
 8014de4:	240685a4 	.word	0x240685a4
 8014de8:	24063d40 	.word	0x24063d40
 8014dec:	24068514 	.word	0x24068514
 8014df0:	080173e9 	.word	0x080173e9
 8014df4:	080173e1 	.word	0x080173e1
 8014df8:	08017481 	.word	0x08017481
 8014dfc:	0801751d 	.word	0x0801751d

08014e00 <rmw_context_fini>:
 8014e00:	4b17      	ldr	r3, [pc, #92]	@ (8014e60 <rmw_context_fini+0x60>)
 8014e02:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	681c      	ldr	r4, [r3, #0]
 8014e08:	4605      	mov	r5, r0
 8014e0a:	b334      	cbz	r4, 8014e5a <rmw_context_fini+0x5a>
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014e12:	6902      	ldr	r2, [r0, #16]
 8014e14:	428a      	cmp	r2, r1
 8014e16:	d018      	beq.n	8014e4a <rmw_context_fini+0x4a>
 8014e18:	2c00      	cmp	r4, #0
 8014e1a:	d1f8      	bne.n	8014e0e <rmw_context_fini+0xe>
 8014e1c:	b189      	cbz	r1, 8014e42 <rmw_context_fini+0x42>
 8014e1e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8014e22:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8014e26:	789b      	ldrb	r3, [r3, #2]
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	bf14      	ite	ne
 8014e2c:	210a      	movne	r1, #10
 8014e2e:	2100      	moveq	r1, #0
 8014e30:	f7fc fc4e 	bl	80116d0 <uxr_delete_session_retries>
 8014e34:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014e36:	f7fa fa6d 	bl	800f314 <rmw_uxrce_fini_session_memory>
 8014e3a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014e3c:	3010      	adds	r0, #16
 8014e3e:	f000 fce7 	bl	8015810 <uxr_close_custom_transport>
 8014e42:	2300      	movs	r3, #0
 8014e44:	4630      	mov	r0, r6
 8014e46:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8014e48:	bd70      	pop	{r4, r5, r6, pc}
 8014e4a:	3018      	adds	r0, #24
 8014e4c:	f000 f90e 	bl	801506c <rmw_destroy_node>
 8014e50:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8014e52:	4606      	mov	r6, r0
 8014e54:	2c00      	cmp	r4, #0
 8014e56:	d1da      	bne.n	8014e0e <rmw_context_fini+0xe>
 8014e58:	e7e0      	b.n	8014e1c <rmw_context_fini+0x1c>
 8014e5a:	4626      	mov	r6, r4
 8014e5c:	e7de      	b.n	8014e1c <rmw_context_fini+0x1c>
 8014e5e:	bf00      	nop
 8014e60:	24068534 	.word	0x24068534

08014e64 <create_topic>:
 8014e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e68:	4605      	mov	r5, r0
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	4822      	ldr	r0, [pc, #136]	@ (8014ef8 <create_topic+0x94>)
 8014e6e:	460f      	mov	r7, r1
 8014e70:	4616      	mov	r6, r2
 8014e72:	f7ff fd67 	bl	8014944 <get_memory>
 8014e76:	4604      	mov	r4, r0
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	d039      	beq.n	8014ef0 <create_topic+0x8c>
 8014e7c:	692b      	ldr	r3, [r5, #16]
 8014e7e:	2102      	movs	r1, #2
 8014e80:	6884      	ldr	r4, [r0, #8]
 8014e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e86:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8014f00 <create_topic+0x9c>
 8014e8a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014e8e:	1c42      	adds	r2, r0, #1
 8014e90:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014e94:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014e98:	f7fb fdac 	bl	80109f4 <uxr_object_id>
 8014e9c:	223c      	movs	r2, #60	@ 0x3c
 8014e9e:	6120      	str	r0, [r4, #16]
 8014ea0:	4641      	mov	r1, r8
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	f7fa fb74 	bl	800f590 <generate_topic_name>
 8014ea8:	b1f0      	cbz	r0, 8014ee8 <create_topic+0x84>
 8014eaa:	4f14      	ldr	r7, [pc, #80]	@ (8014efc <create_topic+0x98>)
 8014eac:	4630      	mov	r0, r6
 8014eae:	2264      	movs	r2, #100	@ 0x64
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	f7fa fb3f 	bl	800f534 <generate_type_name>
 8014eb6:	b1b8      	cbz	r0, 8014ee8 <create_topic+0x84>
 8014eb8:	6928      	ldr	r0, [r5, #16]
 8014eba:	2106      	movs	r1, #6
 8014ebc:	696b      	ldr	r3, [r5, #20]
 8014ebe:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014ec2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ec6:	f8cd 8000 	str.w	r8, [sp]
 8014eca:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8014ece:	6811      	ldr	r1, [r2, #0]
 8014ed0:	6922      	ldr	r2, [r4, #16]
 8014ed2:	f7fb fcb3 	bl	801083c <uxr_buffer_create_topic_bin>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	6928      	ldr	r0, [r5, #16]
 8014eda:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014ede:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014ee2:	f7fa faf3 	bl	800f4cc <run_xrce_session>
 8014ee6:	b918      	cbnz	r0, 8014ef0 <create_topic+0x8c>
 8014ee8:	4620      	mov	r0, r4
 8014eea:	2400      	movs	r4, #0
 8014eec:	f7fa fa88 	bl	800f400 <rmw_uxrce_fini_topic_memory>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	b004      	add	sp, #16
 8014ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef8:	24068594 	.word	0x24068594
 8014efc:	24068610 	.word	0x24068610
 8014f00:	240685d4 	.word	0x240685d4

08014f04 <destroy_topic>:
 8014f04:	b538      	push	{r3, r4, r5, lr}
 8014f06:	6985      	ldr	r5, [r0, #24]
 8014f08:	b1dd      	cbz	r5, 8014f42 <destroy_topic+0x3e>
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	6928      	ldr	r0, [r5, #16]
 8014f0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014f12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f16:	6922      	ldr	r2, [r4, #16]
 8014f18:	6819      	ldr	r1, [r3, #0]
 8014f1a:	f7fb fc11 	bl	8010740 <uxr_buffer_delete_entity>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	6928      	ldr	r0, [r5, #16]
 8014f22:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014f26:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014f2a:	f7fa facf 	bl	800f4cc <run_xrce_session>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	4620      	mov	r0, r4
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	bf14      	ite	ne
 8014f36:	2400      	movne	r4, #0
 8014f38:	2402      	moveq	r4, #2
 8014f3a:	f7fa fa61 	bl	800f400 <rmw_uxrce_fini_topic_memory>
 8014f3e:	4620      	mov	r0, r4
 8014f40:	bd38      	pop	{r3, r4, r5, pc}
 8014f42:	2401      	movs	r4, #1
 8014f44:	4620      	mov	r0, r4
 8014f46:	bd38      	pop	{r3, r4, r5, pc}

08014f48 <create_node>:
 8014f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f4c:	b083      	sub	sp, #12
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d064      	beq.n	801501c <create_node+0xd4>
 8014f52:	4606      	mov	r6, r0
 8014f54:	4838      	ldr	r0, [pc, #224]	@ (8015038 <create_node+0xf0>)
 8014f56:	460f      	mov	r7, r1
 8014f58:	4690      	mov	r8, r2
 8014f5a:	461d      	mov	r5, r3
 8014f5c:	f7ff fcf2 	bl	8014944 <get_memory>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d05b      	beq.n	801501c <create_node+0xd4>
 8014f64:	6884      	ldr	r4, [r0, #8]
 8014f66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014f68:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014f6c:	f104 0518 	add.w	r5, r4, #24
 8014f70:	6123      	str	r3, [r4, #16]
 8014f72:	f7ff fd0b 	bl	801498c <rmw_get_implementation_identifier>
 8014f76:	f8c4 9020 	str.w	r9, [r4, #32]
 8014f7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014f7e:	4630      	mov	r0, r6
 8014f80:	f7eb f9b8 	bl	80002f4 <strlen>
 8014f84:	1c42      	adds	r2, r0, #1
 8014f86:	2a3c      	cmp	r2, #60	@ 0x3c
 8014f88:	d840      	bhi.n	801500c <create_node+0xc4>
 8014f8a:	4648      	mov	r0, r9
 8014f8c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014f90:	4631      	mov	r1, r6
 8014f92:	f003 f848 	bl	8018026 <memcpy>
 8014f96:	4638      	mov	r0, r7
 8014f98:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014f9c:	f7eb f9aa 	bl	80002f4 <strlen>
 8014fa0:	1c42      	adds	r2, r0, #1
 8014fa2:	2a3c      	cmp	r2, #60	@ 0x3c
 8014fa4:	d832      	bhi.n	801500c <create_node+0xc4>
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	4648      	mov	r0, r9
 8014faa:	f003 f83c 	bl	8018026 <memcpy>
 8014fae:	6923      	ldr	r3, [r4, #16]
 8014fb0:	2101      	movs	r1, #1
 8014fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014fb6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8014fba:	1842      	adds	r2, r0, r1
 8014fbc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014fc0:	f7fb fd18 	bl	80109f4 <uxr_object_id>
 8014fc4:	6160      	str	r0, [r4, #20]
 8014fc6:	783b      	ldrb	r3, [r7, #0]
 8014fc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8014fca:	d12c      	bne.n	8015026 <create_node+0xde>
 8014fcc:	787b      	ldrb	r3, [r7, #1]
 8014fce:	bb53      	cbnz	r3, 8015026 <create_node+0xde>
 8014fd0:	4633      	mov	r3, r6
 8014fd2:	4a1a      	ldr	r2, [pc, #104]	@ (801503c <create_node+0xf4>)
 8014fd4:	213c      	movs	r1, #60	@ 0x3c
 8014fd6:	481a      	ldr	r0, [pc, #104]	@ (8015040 <create_node+0xf8>)
 8014fd8:	f002 fe56 	bl	8017c88 <sniprintf>
 8014fdc:	6920      	ldr	r0, [r4, #16]
 8014fde:	2106      	movs	r1, #6
 8014fe0:	fa1f f388 	uxth.w	r3, r8
 8014fe4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014fe8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014fec:	9101      	str	r1, [sp, #4]
 8014fee:	4914      	ldr	r1, [pc, #80]	@ (8015040 <create_node+0xf8>)
 8014ff0:	9100      	str	r1, [sp, #0]
 8014ff2:	6811      	ldr	r1, [r2, #0]
 8014ff4:	6962      	ldr	r2, [r4, #20]
 8014ff6:	f7fb fbef 	bl	80107d8 <uxr_buffer_create_participant_bin>
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	6920      	ldr	r0, [r4, #16]
 8014ffe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015002:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015006:	f7fa fa61 	bl	800f4cc <run_xrce_session>
 801500a:	b918      	cbnz	r0, 8015014 <create_node+0xcc>
 801500c:	4628      	mov	r0, r5
 801500e:	2500      	movs	r5, #0
 8015010:	f7fa f986 	bl	800f320 <rmw_uxrce_fini_node_memory>
 8015014:	4628      	mov	r0, r5
 8015016:	b003      	add	sp, #12
 8015018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801501c:	2500      	movs	r5, #0
 801501e:	4628      	mov	r0, r5
 8015020:	b003      	add	sp, #12
 8015022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015026:	463b      	mov	r3, r7
 8015028:	4a06      	ldr	r2, [pc, #24]	@ (8015044 <create_node+0xfc>)
 801502a:	213c      	movs	r1, #60	@ 0x3c
 801502c:	9600      	str	r6, [sp, #0]
 801502e:	4804      	ldr	r0, [pc, #16]	@ (8015040 <create_node+0xf8>)
 8015030:	f002 fe2a 	bl	8017c88 <sniprintf>
 8015034:	e7d2      	b.n	8014fdc <create_node+0x94>
 8015036:	bf00      	nop
 8015038:	24068534 	.word	0x24068534
 801503c:	08018fcc 	.word	0x08018fcc
 8015040:	24068674 	.word	0x24068674
 8015044:	0801915c 	.word	0x0801915c

08015048 <rmw_create_node>:
 8015048:	468c      	mov	ip, r1
 801504a:	4611      	mov	r1, r2
 801504c:	f1bc 0f00 	cmp.w	ip, #0
 8015050:	d00a      	beq.n	8015068 <rmw_create_node+0x20>
 8015052:	f89c 3000 	ldrb.w	r3, [ip]
 8015056:	b13b      	cbz	r3, 8015068 <rmw_create_node+0x20>
 8015058:	b132      	cbz	r2, 8015068 <rmw_create_node+0x20>
 801505a:	7813      	ldrb	r3, [r2, #0]
 801505c:	b123      	cbz	r3, 8015068 <rmw_create_node+0x20>
 801505e:	4603      	mov	r3, r0
 8015060:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015062:	4660      	mov	r0, ip
 8015064:	f7ff bf70 	b.w	8014f48 <create_node>
 8015068:	2000      	movs	r0, #0
 801506a:	4770      	bx	lr

0801506c <rmw_destroy_node>:
 801506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506e:	b328      	cbz	r0, 80150bc <rmw_destroy_node+0x50>
 8015070:	4607      	mov	r7, r0
 8015072:	6800      	ldr	r0, [r0, #0]
 8015074:	b120      	cbz	r0, 8015080 <rmw_destroy_node+0x14>
 8015076:	4b37      	ldr	r3, [pc, #220]	@ (8015154 <rmw_destroy_node+0xe8>)
 8015078:	6819      	ldr	r1, [r3, #0]
 801507a:	f7eb f931 	bl	80002e0 <strcmp>
 801507e:	b9e8      	cbnz	r0, 80150bc <rmw_destroy_node+0x50>
 8015080:	687d      	ldr	r5, [r7, #4]
 8015082:	b1dd      	cbz	r5, 80150bc <rmw_destroy_node+0x50>
 8015084:	4b34      	ldr	r3, [pc, #208]	@ (8015158 <rmw_destroy_node+0xec>)
 8015086:	681c      	ldr	r4, [r3, #0]
 8015088:	2c00      	cmp	r4, #0
 801508a:	d060      	beq.n	801514e <rmw_destroy_node+0xe2>
 801508c:	2600      	movs	r6, #0
 801508e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015092:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015096:	429d      	cmp	r5, r3
 8015098:	d013      	beq.n	80150c2 <rmw_destroy_node+0x56>
 801509a:	2c00      	cmp	r4, #0
 801509c:	d1f7      	bne.n	801508e <rmw_destroy_node+0x22>
 801509e:	4b2f      	ldr	r3, [pc, #188]	@ (801515c <rmw_destroy_node+0xf0>)
 80150a0:	681c      	ldr	r4, [r3, #0]
 80150a2:	b1c4      	cbz	r4, 80150d6 <rmw_destroy_node+0x6a>
 80150a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80150a8:	6a0b      	ldr	r3, [r1, #32]
 80150aa:	429d      	cmp	r5, r3
 80150ac:	d1f9      	bne.n	80150a2 <rmw_destroy_node+0x36>
 80150ae:	317c      	adds	r1, #124	@ 0x7c
 80150b0:	4638      	mov	r0, r7
 80150b2:	f000 f8a3 	bl	80151fc <rmw_destroy_subscription>
 80150b6:	2801      	cmp	r0, #1
 80150b8:	4606      	mov	r6, r0
 80150ba:	d1f2      	bne.n	80150a2 <rmw_destroy_node+0x36>
 80150bc:	2601      	movs	r6, #1
 80150be:	4630      	mov	r0, r6
 80150c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c2:	3184      	adds	r1, #132	@ 0x84
 80150c4:	4638      	mov	r0, r7
 80150c6:	f7f9 ff51 	bl	800ef6c <rmw_destroy_publisher>
 80150ca:	2801      	cmp	r0, #1
 80150cc:	4606      	mov	r6, r0
 80150ce:	d0f5      	beq.n	80150bc <rmw_destroy_node+0x50>
 80150d0:	2c00      	cmp	r4, #0
 80150d2:	d1dc      	bne.n	801508e <rmw_destroy_node+0x22>
 80150d4:	e7e3      	b.n	801509e <rmw_destroy_node+0x32>
 80150d6:	4b22      	ldr	r3, [pc, #136]	@ (8015160 <rmw_destroy_node+0xf4>)
 80150d8:	681c      	ldr	r4, [r3, #0]
 80150da:	b16c      	cbz	r4, 80150f8 <rmw_destroy_node+0x8c>
 80150dc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80150e0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80150e2:	429d      	cmp	r5, r3
 80150e4:	d1f9      	bne.n	80150da <rmw_destroy_node+0x6e>
 80150e6:	317c      	adds	r1, #124	@ 0x7c
 80150e8:	4638      	mov	r0, r7
 80150ea:	f000 f843 	bl	8015174 <rmw_destroy_service>
 80150ee:	2801      	cmp	r0, #1
 80150f0:	4606      	mov	r6, r0
 80150f2:	d0e3      	beq.n	80150bc <rmw_destroy_node+0x50>
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	d1f1      	bne.n	80150dc <rmw_destroy_node+0x70>
 80150f8:	4b1a      	ldr	r3, [pc, #104]	@ (8015164 <rmw_destroy_node+0xf8>)
 80150fa:	681c      	ldr	r4, [r3, #0]
 80150fc:	b16c      	cbz	r4, 801511a <rmw_destroy_node+0xae>
 80150fe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015102:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015104:	429d      	cmp	r5, r3
 8015106:	d1f9      	bne.n	80150fc <rmw_destroy_node+0x90>
 8015108:	317c      	adds	r1, #124	@ 0x7c
 801510a:	4638      	mov	r0, r7
 801510c:	f002 fa50 	bl	80175b0 <rmw_destroy_client>
 8015110:	2801      	cmp	r0, #1
 8015112:	4606      	mov	r6, r0
 8015114:	d0d2      	beq.n	80150bc <rmw_destroy_node+0x50>
 8015116:	2c00      	cmp	r4, #0
 8015118:	d1f1      	bne.n	80150fe <rmw_destroy_node+0x92>
 801511a:	6928      	ldr	r0, [r5, #16]
 801511c:	696a      	ldr	r2, [r5, #20]
 801511e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015122:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015126:	6819      	ldr	r1, [r3, #0]
 8015128:	f7fb fb0a 	bl	8010740 <uxr_buffer_delete_entity>
 801512c:	4602      	mov	r2, r0
 801512e:	6928      	ldr	r0, [r5, #16]
 8015130:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015134:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015138:	f7fa f9c8 	bl	800f4cc <run_xrce_session>
 801513c:	4603      	mov	r3, r0
 801513e:	4638      	mov	r0, r7
 8015140:	2b00      	cmp	r3, #0
 8015142:	bf08      	it	eq
 8015144:	2602      	moveq	r6, #2
 8015146:	f7fa f8eb 	bl	800f320 <rmw_uxrce_fini_node_memory>
 801514a:	4630      	mov	r0, r6
 801514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801514e:	4626      	mov	r6, r4
 8015150:	e7a5      	b.n	801509e <rmw_destroy_node+0x32>
 8015152:	bf00      	nop
 8015154:	080195b4 	.word	0x080195b4
 8015158:	24068544 	.word	0x24068544
 801515c:	24068584 	.word	0x24068584
 8015160:	24068554 	.word	0x24068554
 8015164:	24063c68 	.word	0x24063c68

08015168 <rmw_node_get_graph_guard_condition>:
 8015168:	6843      	ldr	r3, [r0, #4]
 801516a:	6918      	ldr	r0, [r3, #16]
 801516c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop

08015174 <rmw_destroy_service>:
 8015174:	b570      	push	{r4, r5, r6, lr}
 8015176:	b128      	cbz	r0, 8015184 <rmw_destroy_service+0x10>
 8015178:	4604      	mov	r4, r0
 801517a:	6800      	ldr	r0, [r0, #0]
 801517c:	460d      	mov	r5, r1
 801517e:	f7fa fa1f 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 8015182:	b910      	cbnz	r0, 801518a <rmw_destroy_service+0x16>
 8015184:	2401      	movs	r4, #1
 8015186:	4620      	mov	r0, r4
 8015188:	bd70      	pop	{r4, r5, r6, pc}
 801518a:	6863      	ldr	r3, [r4, #4]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d0f9      	beq.n	8015184 <rmw_destroy_service+0x10>
 8015190:	2d00      	cmp	r5, #0
 8015192:	d0f7      	beq.n	8015184 <rmw_destroy_service+0x10>
 8015194:	6828      	ldr	r0, [r5, #0]
 8015196:	f7fa fa13 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 801519a:	2800      	cmp	r0, #0
 801519c:	d0f2      	beq.n	8015184 <rmw_destroy_service+0x10>
 801519e:	686e      	ldr	r6, [r5, #4]
 80151a0:	2e00      	cmp	r6, #0
 80151a2:	d0ef      	beq.n	8015184 <rmw_destroy_service+0x10>
 80151a4:	6864      	ldr	r4, [r4, #4]
 80151a6:	6932      	ldr	r2, [r6, #16]
 80151a8:	6920      	ldr	r0, [r4, #16]
 80151aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80151ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80151b2:	6819      	ldr	r1, [r3, #0]
 80151b4:	f001 f87c 	bl	80162b0 <uxr_buffer_cancel_data>
 80151b8:	4602      	mov	r2, r0
 80151ba:	6920      	ldr	r0, [r4, #16]
 80151bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80151c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80151c4:	f7fa f982 	bl	800f4cc <run_xrce_session>
 80151c8:	6920      	ldr	r0, [r4, #16]
 80151ca:	6932      	ldr	r2, [r6, #16]
 80151cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80151d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80151d4:	6819      	ldr	r1, [r3, #0]
 80151d6:	f7fb fab3 	bl	8010740 <uxr_buffer_delete_entity>
 80151da:	4602      	mov	r2, r0
 80151dc:	6920      	ldr	r0, [r4, #16]
 80151de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80151e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80151e6:	f7fa f971 	bl	800f4cc <run_xrce_session>
 80151ea:	4603      	mov	r3, r0
 80151ec:	4628      	mov	r0, r5
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	bf14      	ite	ne
 80151f2:	2400      	movne	r4, #0
 80151f4:	2402      	moveq	r4, #2
 80151f6:	f7fa f8d7 	bl	800f3a8 <rmw_uxrce_fini_service_memory>
 80151fa:	e7c4      	b.n	8015186 <rmw_destroy_service+0x12>

080151fc <rmw_destroy_subscription>:
 80151fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015200:	b128      	cbz	r0, 801520e <rmw_destroy_subscription+0x12>
 8015202:	4604      	mov	r4, r0
 8015204:	6800      	ldr	r0, [r0, #0]
 8015206:	460d      	mov	r5, r1
 8015208:	f7fa f9da 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 801520c:	b918      	cbnz	r0, 8015216 <rmw_destroy_subscription+0x1a>
 801520e:	2401      	movs	r4, #1
 8015210:	4620      	mov	r0, r4
 8015212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015216:	6863      	ldr	r3, [r4, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d0f8      	beq.n	801520e <rmw_destroy_subscription+0x12>
 801521c:	fab5 f485 	clz	r4, r5
 8015220:	0964      	lsrs	r4, r4, #5
 8015222:	2d00      	cmp	r5, #0
 8015224:	d0f3      	beq.n	801520e <rmw_destroy_subscription+0x12>
 8015226:	6828      	ldr	r0, [r5, #0]
 8015228:	f7fa f9ca 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 801522c:	2800      	cmp	r0, #0
 801522e:	d0ee      	beq.n	801520e <rmw_destroy_subscription+0x12>
 8015230:	686e      	ldr	r6, [r5, #4]
 8015232:	2e00      	cmp	r6, #0
 8015234:	d0eb      	beq.n	801520e <rmw_destroy_subscription+0x12>
 8015236:	6a37      	ldr	r7, [r6, #32]
 8015238:	6972      	ldr	r2, [r6, #20]
 801523a:	6938      	ldr	r0, [r7, #16]
 801523c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015240:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015244:	6819      	ldr	r1, [r3, #0]
 8015246:	f001 f833 	bl	80162b0 <uxr_buffer_cancel_data>
 801524a:	4602      	mov	r2, r0
 801524c:	6938      	ldr	r0, [r7, #16]
 801524e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015252:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015256:	f7fa f939 	bl	800f4cc <run_xrce_session>
 801525a:	69f0      	ldr	r0, [r6, #28]
 801525c:	f7ff fe52 	bl	8014f04 <destroy_topic>
 8015260:	6a33      	ldr	r3, [r6, #32]
 8015262:	6972      	ldr	r2, [r6, #20]
 8015264:	6918      	ldr	r0, [r3, #16]
 8015266:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801526a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801526e:	6819      	ldr	r1, [r3, #0]
 8015270:	f7fb fa66 	bl	8010740 <uxr_buffer_delete_entity>
 8015274:	6a33      	ldr	r3, [r6, #32]
 8015276:	4680      	mov	r8, r0
 8015278:	6932      	ldr	r2, [r6, #16]
 801527a:	6918      	ldr	r0, [r3, #16]
 801527c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015280:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015284:	6819      	ldr	r1, [r3, #0]
 8015286:	f7fb fa5b 	bl	8010740 <uxr_buffer_delete_entity>
 801528a:	4606      	mov	r6, r0
 801528c:	6938      	ldr	r0, [r7, #16]
 801528e:	4642      	mov	r2, r8
 8015290:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015294:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015298:	f7fa f918 	bl	800f4cc <run_xrce_session>
 801529c:	693f      	ldr	r7, [r7, #16]
 801529e:	4632      	mov	r2, r6
 80152a0:	4606      	mov	r6, r0
 80152a2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80152a6:	4638      	mov	r0, r7
 80152a8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80152ac:	f7fa f90e 	bl	800f4cc <run_xrce_session>
 80152b0:	b126      	cbz	r6, 80152bc <rmw_destroy_subscription+0xc0>
 80152b2:	b118      	cbz	r0, 80152bc <rmw_destroy_subscription+0xc0>
 80152b4:	4628      	mov	r0, r5
 80152b6:	f7fa f861 	bl	800f37c <rmw_uxrce_fini_subscription_memory>
 80152ba:	e7a9      	b.n	8015210 <rmw_destroy_subscription+0x14>
 80152bc:	2402      	movs	r4, #2
 80152be:	e7f9      	b.n	80152b4 <rmw_destroy_subscription+0xb8>

080152c0 <rmw_uxrce_transport_init>:
 80152c0:	b508      	push	{r3, lr}
 80152c2:	b108      	cbz	r0, 80152c8 <rmw_uxrce_transport_init+0x8>
 80152c4:	f100 0210 	add.w	r2, r0, #16
 80152c8:	b139      	cbz	r1, 80152da <rmw_uxrce_transport_init+0x1a>
 80152ca:	6949      	ldr	r1, [r1, #20]
 80152cc:	4610      	mov	r0, r2
 80152ce:	f000 fa6b 	bl	80157a8 <uxr_init_custom_transport>
 80152d2:	f080 0001 	eor.w	r0, r0, #1
 80152d6:	b2c0      	uxtb	r0, r0
 80152d8:	bd08      	pop	{r3, pc}
 80152da:	4b04      	ldr	r3, [pc, #16]	@ (80152ec <rmw_uxrce_transport_init+0x2c>)
 80152dc:	4610      	mov	r0, r2
 80152de:	6859      	ldr	r1, [r3, #4]
 80152e0:	f000 fa62 	bl	80157a8 <uxr_init_custom_transport>
 80152e4:	f080 0001 	eor.w	r0, r0, #1
 80152e8:	b2c0      	uxtb	r0, r0
 80152ea:	bd08      	pop	{r3, pc}
 80152ec:	24063c4c 	.word	0x24063c4c

080152f0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80152f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f4:	6805      	ldr	r5, [r0, #0]
 80152f6:	4604      	mov	r4, r0
 80152f8:	460e      	mov	r6, r1
 80152fa:	4628      	mov	r0, r5
 80152fc:	f7ea fff0 	bl	80002e0 <strcmp>
 8015300:	b1c8      	cbz	r0, 8015336 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015302:	4b11      	ldr	r3, [pc, #68]	@ (8015348 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	429d      	cmp	r5, r3
 8015308:	d112      	bne.n	8015330 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801530a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801530e:	f8d8 4000 	ldr.w	r4, [r8]
 8015312:	b16c      	cbz	r4, 8015330 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015314:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015318:	2700      	movs	r7, #0
 801531a:	3d04      	subs	r5, #4
 801531c:	4631      	mov	r1, r6
 801531e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015322:	f7ea ffdd 	bl	80002e0 <strcmp>
 8015326:	00bb      	lsls	r3, r7, #2
 8015328:	b140      	cbz	r0, 801533c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801532a:	3701      	adds	r7, #1
 801532c:	42bc      	cmp	r4, r7
 801532e:	d1f5      	bne.n	801531c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015330:	2000      	movs	r0, #0
 8015332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015336:	4620      	mov	r0, r4
 8015338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801533c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015344:	58d3      	ldr	r3, [r2, r3]
 8015346:	4718      	bx	r3
 8015348:	240000b0 	.word	0x240000b0

0801534c <std_msgs__msg__Int32__init>:
 801534c:	3800      	subs	r0, #0
 801534e:	bf18      	it	ne
 8015350:	2001      	movne	r0, #1
 8015352:	4770      	bx	lr

08015354 <std_msgs__msg__Int32__fini>:
 8015354:	4770      	bx	lr
 8015356:	bf00      	nop

08015358 <ucdr_serialize_endian_array_char>:
 8015358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535c:	4619      	mov	r1, r3
 801535e:	461f      	mov	r7, r3
 8015360:	4605      	mov	r5, r0
 8015362:	4690      	mov	r8, r2
 8015364:	f7fb f924 	bl	80105b0 <ucdr_check_buffer_available_for>
 8015368:	b9e0      	cbnz	r0, 80153a4 <ucdr_serialize_endian_array_char+0x4c>
 801536a:	463e      	mov	r6, r7
 801536c:	e00b      	b.n	8015386 <ucdr_serialize_endian_array_char+0x2e>
 801536e:	4441      	add	r1, r8
 8015370:	68a8      	ldr	r0, [r5, #8]
 8015372:	4622      	mov	r2, r4
 8015374:	1b36      	subs	r6, r6, r4
 8015376:	f002 fe56 	bl	8018026 <memcpy>
 801537a:	68ab      	ldr	r3, [r5, #8]
 801537c:	6928      	ldr	r0, [r5, #16]
 801537e:	4423      	add	r3, r4
 8015380:	4420      	add	r0, r4
 8015382:	60ab      	str	r3, [r5, #8]
 8015384:	6128      	str	r0, [r5, #16]
 8015386:	4631      	mov	r1, r6
 8015388:	2201      	movs	r2, #1
 801538a:	4628      	mov	r0, r5
 801538c:	f7fb f99a 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 8015390:	1bb9      	subs	r1, r7, r6
 8015392:	4604      	mov	r4, r0
 8015394:	2800      	cmp	r0, #0
 8015396:	d1ea      	bne.n	801536e <ucdr_serialize_endian_array_char+0x16>
 8015398:	2301      	movs	r3, #1
 801539a:	7da8      	ldrb	r0, [r5, #22]
 801539c:	756b      	strb	r3, [r5, #21]
 801539e:	4058      	eors	r0, r3
 80153a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a4:	463a      	mov	r2, r7
 80153a6:	4641      	mov	r1, r8
 80153a8:	68a8      	ldr	r0, [r5, #8]
 80153aa:	f002 fe3c 	bl	8018026 <memcpy>
 80153ae:	68aa      	ldr	r2, [r5, #8]
 80153b0:	692b      	ldr	r3, [r5, #16]
 80153b2:	443a      	add	r2, r7
 80153b4:	443b      	add	r3, r7
 80153b6:	60aa      	str	r2, [r5, #8]
 80153b8:	612b      	str	r3, [r5, #16]
 80153ba:	e7ed      	b.n	8015398 <ucdr_serialize_endian_array_char+0x40>

080153bc <ucdr_deserialize_endian_array_char>:
 80153bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153c0:	4619      	mov	r1, r3
 80153c2:	461f      	mov	r7, r3
 80153c4:	4605      	mov	r5, r0
 80153c6:	4690      	mov	r8, r2
 80153c8:	f7fb f8f2 	bl	80105b0 <ucdr_check_buffer_available_for>
 80153cc:	b9e8      	cbnz	r0, 801540a <ucdr_deserialize_endian_array_char+0x4e>
 80153ce:	463e      	mov	r6, r7
 80153d0:	e00c      	b.n	80153ec <ucdr_deserialize_endian_array_char+0x30>
 80153d2:	eb08 0003 	add.w	r0, r8, r3
 80153d6:	68a9      	ldr	r1, [r5, #8]
 80153d8:	4622      	mov	r2, r4
 80153da:	1b36      	subs	r6, r6, r4
 80153dc:	f002 fe23 	bl	8018026 <memcpy>
 80153e0:	68ab      	ldr	r3, [r5, #8]
 80153e2:	6928      	ldr	r0, [r5, #16]
 80153e4:	4423      	add	r3, r4
 80153e6:	4420      	add	r0, r4
 80153e8:	60ab      	str	r3, [r5, #8]
 80153ea:	6128      	str	r0, [r5, #16]
 80153ec:	4631      	mov	r1, r6
 80153ee:	2201      	movs	r2, #1
 80153f0:	4628      	mov	r0, r5
 80153f2:	f7fb f967 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 80153f6:	1bbb      	subs	r3, r7, r6
 80153f8:	4604      	mov	r4, r0
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d1e9      	bne.n	80153d2 <ucdr_deserialize_endian_array_char+0x16>
 80153fe:	2301      	movs	r3, #1
 8015400:	7da8      	ldrb	r0, [r5, #22]
 8015402:	756b      	strb	r3, [r5, #21]
 8015404:	4058      	eors	r0, r3
 8015406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801540a:	463a      	mov	r2, r7
 801540c:	68a9      	ldr	r1, [r5, #8]
 801540e:	4640      	mov	r0, r8
 8015410:	f002 fe09 	bl	8018026 <memcpy>
 8015414:	68aa      	ldr	r2, [r5, #8]
 8015416:	692b      	ldr	r3, [r5, #16]
 8015418:	443a      	add	r2, r7
 801541a:	443b      	add	r3, r7
 801541c:	60aa      	str	r2, [r5, #8]
 801541e:	612b      	str	r3, [r5, #16]
 8015420:	e7ed      	b.n	80153fe <ucdr_deserialize_endian_array_char+0x42>
 8015422:	bf00      	nop

08015424 <ucdr_serialize_array_uint8_t>:
 8015424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015428:	4688      	mov	r8, r1
 801542a:	4611      	mov	r1, r2
 801542c:	4617      	mov	r7, r2
 801542e:	4605      	mov	r5, r0
 8015430:	f7fb f8be 	bl	80105b0 <ucdr_check_buffer_available_for>
 8015434:	b9e0      	cbnz	r0, 8015470 <ucdr_serialize_array_uint8_t+0x4c>
 8015436:	463e      	mov	r6, r7
 8015438:	e00b      	b.n	8015452 <ucdr_serialize_array_uint8_t+0x2e>
 801543a:	4441      	add	r1, r8
 801543c:	68a8      	ldr	r0, [r5, #8]
 801543e:	4622      	mov	r2, r4
 8015440:	1b36      	subs	r6, r6, r4
 8015442:	f002 fdf0 	bl	8018026 <memcpy>
 8015446:	68ab      	ldr	r3, [r5, #8]
 8015448:	6928      	ldr	r0, [r5, #16]
 801544a:	4423      	add	r3, r4
 801544c:	4420      	add	r0, r4
 801544e:	60ab      	str	r3, [r5, #8]
 8015450:	6128      	str	r0, [r5, #16]
 8015452:	4631      	mov	r1, r6
 8015454:	2201      	movs	r2, #1
 8015456:	4628      	mov	r0, r5
 8015458:	f7fb f934 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 801545c:	1bb9      	subs	r1, r7, r6
 801545e:	4604      	mov	r4, r0
 8015460:	2800      	cmp	r0, #0
 8015462:	d1ea      	bne.n	801543a <ucdr_serialize_array_uint8_t+0x16>
 8015464:	2301      	movs	r3, #1
 8015466:	7da8      	ldrb	r0, [r5, #22]
 8015468:	756b      	strb	r3, [r5, #21]
 801546a:	4058      	eors	r0, r3
 801546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015470:	463a      	mov	r2, r7
 8015472:	4641      	mov	r1, r8
 8015474:	68a8      	ldr	r0, [r5, #8]
 8015476:	f002 fdd6 	bl	8018026 <memcpy>
 801547a:	68aa      	ldr	r2, [r5, #8]
 801547c:	692b      	ldr	r3, [r5, #16]
 801547e:	443a      	add	r2, r7
 8015480:	443b      	add	r3, r7
 8015482:	60aa      	str	r2, [r5, #8]
 8015484:	612b      	str	r3, [r5, #16]
 8015486:	e7ed      	b.n	8015464 <ucdr_serialize_array_uint8_t+0x40>

08015488 <ucdr_serialize_endian_array_uint8_t>:
 8015488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801548c:	4619      	mov	r1, r3
 801548e:	461f      	mov	r7, r3
 8015490:	4605      	mov	r5, r0
 8015492:	4690      	mov	r8, r2
 8015494:	f7fb f88c 	bl	80105b0 <ucdr_check_buffer_available_for>
 8015498:	b9e0      	cbnz	r0, 80154d4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801549a:	463e      	mov	r6, r7
 801549c:	e00b      	b.n	80154b6 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801549e:	4441      	add	r1, r8
 80154a0:	68a8      	ldr	r0, [r5, #8]
 80154a2:	4622      	mov	r2, r4
 80154a4:	1b36      	subs	r6, r6, r4
 80154a6:	f002 fdbe 	bl	8018026 <memcpy>
 80154aa:	68ab      	ldr	r3, [r5, #8]
 80154ac:	6928      	ldr	r0, [r5, #16]
 80154ae:	4423      	add	r3, r4
 80154b0:	4420      	add	r0, r4
 80154b2:	60ab      	str	r3, [r5, #8]
 80154b4:	6128      	str	r0, [r5, #16]
 80154b6:	4631      	mov	r1, r6
 80154b8:	2201      	movs	r2, #1
 80154ba:	4628      	mov	r0, r5
 80154bc:	f7fb f902 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 80154c0:	1bb9      	subs	r1, r7, r6
 80154c2:	4604      	mov	r4, r0
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d1ea      	bne.n	801549e <ucdr_serialize_endian_array_uint8_t+0x16>
 80154c8:	2301      	movs	r3, #1
 80154ca:	7da8      	ldrb	r0, [r5, #22]
 80154cc:	756b      	strb	r3, [r5, #21]
 80154ce:	4058      	eors	r0, r3
 80154d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d4:	463a      	mov	r2, r7
 80154d6:	4641      	mov	r1, r8
 80154d8:	68a8      	ldr	r0, [r5, #8]
 80154da:	f002 fda4 	bl	8018026 <memcpy>
 80154de:	68aa      	ldr	r2, [r5, #8]
 80154e0:	692b      	ldr	r3, [r5, #16]
 80154e2:	443a      	add	r2, r7
 80154e4:	443b      	add	r3, r7
 80154e6:	60aa      	str	r2, [r5, #8]
 80154e8:	612b      	str	r3, [r5, #16]
 80154ea:	e7ed      	b.n	80154c8 <ucdr_serialize_endian_array_uint8_t+0x40>

080154ec <ucdr_deserialize_array_uint8_t>:
 80154ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f0:	4688      	mov	r8, r1
 80154f2:	4611      	mov	r1, r2
 80154f4:	4617      	mov	r7, r2
 80154f6:	4605      	mov	r5, r0
 80154f8:	f7fb f85a 	bl	80105b0 <ucdr_check_buffer_available_for>
 80154fc:	b9e8      	cbnz	r0, 801553a <ucdr_deserialize_array_uint8_t+0x4e>
 80154fe:	463e      	mov	r6, r7
 8015500:	e00c      	b.n	801551c <ucdr_deserialize_array_uint8_t+0x30>
 8015502:	eb08 0003 	add.w	r0, r8, r3
 8015506:	68a9      	ldr	r1, [r5, #8]
 8015508:	4622      	mov	r2, r4
 801550a:	1b36      	subs	r6, r6, r4
 801550c:	f002 fd8b 	bl	8018026 <memcpy>
 8015510:	68ab      	ldr	r3, [r5, #8]
 8015512:	6928      	ldr	r0, [r5, #16]
 8015514:	4423      	add	r3, r4
 8015516:	4420      	add	r0, r4
 8015518:	60ab      	str	r3, [r5, #8]
 801551a:	6128      	str	r0, [r5, #16]
 801551c:	4631      	mov	r1, r6
 801551e:	2201      	movs	r2, #1
 8015520:	4628      	mov	r0, r5
 8015522:	f7fb f8cf 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 8015526:	1bbb      	subs	r3, r7, r6
 8015528:	4604      	mov	r4, r0
 801552a:	2800      	cmp	r0, #0
 801552c:	d1e9      	bne.n	8015502 <ucdr_deserialize_array_uint8_t+0x16>
 801552e:	2301      	movs	r3, #1
 8015530:	7da8      	ldrb	r0, [r5, #22]
 8015532:	756b      	strb	r3, [r5, #21]
 8015534:	4058      	eors	r0, r3
 8015536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801553a:	463a      	mov	r2, r7
 801553c:	68a9      	ldr	r1, [r5, #8]
 801553e:	4640      	mov	r0, r8
 8015540:	f002 fd71 	bl	8018026 <memcpy>
 8015544:	68aa      	ldr	r2, [r5, #8]
 8015546:	692b      	ldr	r3, [r5, #16]
 8015548:	443a      	add	r2, r7
 801554a:	443b      	add	r3, r7
 801554c:	60aa      	str	r2, [r5, #8]
 801554e:	612b      	str	r3, [r5, #16]
 8015550:	e7ed      	b.n	801552e <ucdr_deserialize_array_uint8_t+0x42>
 8015552:	bf00      	nop

08015554 <ucdr_deserialize_endian_array_uint8_t>:
 8015554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015558:	4619      	mov	r1, r3
 801555a:	461f      	mov	r7, r3
 801555c:	4605      	mov	r5, r0
 801555e:	4690      	mov	r8, r2
 8015560:	f7fb f826 	bl	80105b0 <ucdr_check_buffer_available_for>
 8015564:	b9e8      	cbnz	r0, 80155a2 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8015566:	463e      	mov	r6, r7
 8015568:	e00c      	b.n	8015584 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801556a:	eb08 0003 	add.w	r0, r8, r3
 801556e:	68a9      	ldr	r1, [r5, #8]
 8015570:	4622      	mov	r2, r4
 8015572:	1b36      	subs	r6, r6, r4
 8015574:	f002 fd57 	bl	8018026 <memcpy>
 8015578:	68ab      	ldr	r3, [r5, #8]
 801557a:	6928      	ldr	r0, [r5, #16]
 801557c:	4423      	add	r3, r4
 801557e:	4420      	add	r0, r4
 8015580:	60ab      	str	r3, [r5, #8]
 8015582:	6128      	str	r0, [r5, #16]
 8015584:	4631      	mov	r1, r6
 8015586:	2201      	movs	r2, #1
 8015588:	4628      	mov	r0, r5
 801558a:	f7fb f89b 	bl	80106c4 <ucdr_check_final_buffer_behavior_array>
 801558e:	1bbb      	subs	r3, r7, r6
 8015590:	4604      	mov	r4, r0
 8015592:	2800      	cmp	r0, #0
 8015594:	d1e9      	bne.n	801556a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015596:	2301      	movs	r3, #1
 8015598:	7da8      	ldrb	r0, [r5, #22]
 801559a:	756b      	strb	r3, [r5, #21]
 801559c:	4058      	eors	r0, r3
 801559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155a2:	463a      	mov	r2, r7
 80155a4:	68a9      	ldr	r1, [r5, #8]
 80155a6:	4640      	mov	r0, r8
 80155a8:	f002 fd3d 	bl	8018026 <memcpy>
 80155ac:	68aa      	ldr	r2, [r5, #8]
 80155ae:	692b      	ldr	r3, [r5, #16]
 80155b0:	443a      	add	r2, r7
 80155b2:	443b      	add	r3, r7
 80155b4:	60aa      	str	r2, [r5, #8]
 80155b6:	612b      	str	r3, [r5, #16]
 80155b8:	e7ed      	b.n	8015596 <ucdr_deserialize_endian_array_uint8_t+0x42>
 80155ba:	bf00      	nop

080155bc <ucdr_serialize_sequence_char>:
 80155bc:	b570      	push	{r4, r5, r6, lr}
 80155be:	4615      	mov	r5, r2
 80155c0:	460e      	mov	r6, r1
 80155c2:	7d01      	ldrb	r1, [r0, #20]
 80155c4:	4604      	mov	r4, r0
 80155c6:	f7fa fb49 	bl	800fc5c <ucdr_serialize_endian_uint32_t>
 80155ca:	b90d      	cbnz	r5, 80155d0 <ucdr_serialize_sequence_char+0x14>
 80155cc:	2001      	movs	r0, #1
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	462b      	mov	r3, r5
 80155d2:	4632      	mov	r2, r6
 80155d4:	7d21      	ldrb	r1, [r4, #20]
 80155d6:	4620      	mov	r0, r4
 80155d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155dc:	f7ff bebc 	b.w	8015358 <ucdr_serialize_endian_array_char>

080155e0 <ucdr_deserialize_sequence_char>:
 80155e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e4:	461d      	mov	r5, r3
 80155e6:	4616      	mov	r6, r2
 80155e8:	460f      	mov	r7, r1
 80155ea:	461a      	mov	r2, r3
 80155ec:	7d01      	ldrb	r1, [r0, #20]
 80155ee:	4604      	mov	r4, r0
 80155f0:	f7fa fc5c 	bl	800feac <ucdr_deserialize_endian_uint32_t>
 80155f4:	682b      	ldr	r3, [r5, #0]
 80155f6:	429e      	cmp	r6, r3
 80155f8:	d201      	bcs.n	80155fe <ucdr_deserialize_sequence_char+0x1e>
 80155fa:	2201      	movs	r2, #1
 80155fc:	75a2      	strb	r2, [r4, #22]
 80155fe:	b913      	cbnz	r3, 8015606 <ucdr_deserialize_sequence_char+0x26>
 8015600:	2001      	movs	r0, #1
 8015602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015606:	463a      	mov	r2, r7
 8015608:	7d21      	ldrb	r1, [r4, #20]
 801560a:	4620      	mov	r0, r4
 801560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015610:	f7ff bed4 	b.w	80153bc <ucdr_deserialize_endian_array_char>

08015614 <ucdr_serialize_sequence_uint8_t>:
 8015614:	b570      	push	{r4, r5, r6, lr}
 8015616:	4615      	mov	r5, r2
 8015618:	460e      	mov	r6, r1
 801561a:	7d01      	ldrb	r1, [r0, #20]
 801561c:	4604      	mov	r4, r0
 801561e:	f7fa fb1d 	bl	800fc5c <ucdr_serialize_endian_uint32_t>
 8015622:	b90d      	cbnz	r5, 8015628 <ucdr_serialize_sequence_uint8_t+0x14>
 8015624:	2001      	movs	r0, #1
 8015626:	bd70      	pop	{r4, r5, r6, pc}
 8015628:	462b      	mov	r3, r5
 801562a:	4632      	mov	r2, r6
 801562c:	7d21      	ldrb	r1, [r4, #20]
 801562e:	4620      	mov	r0, r4
 8015630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015634:	f7ff bf28 	b.w	8015488 <ucdr_serialize_endian_array_uint8_t>

08015638 <ucdr_deserialize_sequence_uint8_t>:
 8015638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801563c:	461d      	mov	r5, r3
 801563e:	4616      	mov	r6, r2
 8015640:	460f      	mov	r7, r1
 8015642:	461a      	mov	r2, r3
 8015644:	7d01      	ldrb	r1, [r0, #20]
 8015646:	4604      	mov	r4, r0
 8015648:	f7fa fc30 	bl	800feac <ucdr_deserialize_endian_uint32_t>
 801564c:	682b      	ldr	r3, [r5, #0]
 801564e:	429e      	cmp	r6, r3
 8015650:	d201      	bcs.n	8015656 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8015652:	2201      	movs	r2, #1
 8015654:	75a2      	strb	r2, [r4, #22]
 8015656:	b913      	cbnz	r3, 801565e <ucdr_deserialize_sequence_uint8_t+0x26>
 8015658:	2001      	movs	r0, #1
 801565a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801565e:	463a      	mov	r2, r7
 8015660:	7d21      	ldrb	r1, [r4, #20]
 8015662:	4620      	mov	r0, r4
 8015664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015668:	f7ff bf74 	b.w	8015554 <ucdr_deserialize_endian_array_uint8_t>

0801566c <ucdr_serialize_string>:
 801566c:	b510      	push	{r4, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	4604      	mov	r4, r0
 8015672:	4608      	mov	r0, r1
 8015674:	9101      	str	r1, [sp, #4]
 8015676:	f7ea fe3d 	bl	80002f4 <strlen>
 801567a:	4602      	mov	r2, r0
 801567c:	9901      	ldr	r1, [sp, #4]
 801567e:	4620      	mov	r0, r4
 8015680:	3201      	adds	r2, #1
 8015682:	b002      	add	sp, #8
 8015684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015688:	f7ff bf98 	b.w	80155bc <ucdr_serialize_sequence_char>

0801568c <ucdr_deserialize_string>:
 801568c:	b500      	push	{lr}
 801568e:	b083      	sub	sp, #12
 8015690:	ab01      	add	r3, sp, #4
 8015692:	f7ff ffa5 	bl	80155e0 <ucdr_deserialize_sequence_char>
 8015696:	b003      	add	sp, #12
 8015698:	f85d fb04 	ldr.w	pc, [sp], #4

0801569c <get_custom_error>:
 801569c:	4b01      	ldr	r3, [pc, #4]	@ (80156a4 <get_custom_error+0x8>)
 801569e:	7818      	ldrb	r0, [r3, #0]
 80156a0:	4770      	bx	lr
 80156a2:	bf00      	nop
 80156a4:	240686b0 	.word	0x240686b0

080156a8 <recv_custom_msg>:
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	4693      	mov	fp, r2
 80156ae:	b089      	sub	sp, #36	@ 0x24
 80156b0:	2200      	movs	r2, #0
 80156b2:	4604      	mov	r4, r0
 80156b4:	468a      	mov	sl, r1
 80156b6:	9305      	str	r3, [sp, #20]
 80156b8:	f88d 201e 	strb.w	r2, [sp, #30]
 80156bc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80156c0:	b322      	cbz	r2, 801570c <recv_custom_msg+0x64>
 80156c2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80156c6:	f10d 081f 	add.w	r8, sp, #31
 80156ca:	af05      	add	r7, sp, #20
 80156cc:	f10d 061e 	add.w	r6, sp, #30
 80156d0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80156d4:	e002      	b.n	80156dc <recv_custom_msg+0x34>
 80156d6:	9b05      	ldr	r3, [sp, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	dd0f      	ble.n	80156fc <recv_custom_msg+0x54>
 80156dc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80156e0:	4623      	mov	r3, r4
 80156e2:	4622      	mov	r2, r4
 80156e4:	4648      	mov	r0, r9
 80156e6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80156ea:	e9cd 5600 	strd	r5, r6, [sp]
 80156ee:	f001 f8d9 	bl	80168a4 <uxr_read_framed_msg>
 80156f2:	2800      	cmp	r0, #0
 80156f4:	d0ef      	beq.n	80156d6 <recv_custom_msg+0x2e>
 80156f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80156fa:	b1b3      	cbz	r3, 801572a <recv_custom_msg+0x82>
 80156fc:	4b0f      	ldr	r3, [pc, #60]	@ (801573c <recv_custom_msg+0x94>)
 80156fe:	2000      	movs	r0, #0
 8015700:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015704:	701a      	strb	r2, [r3, #0]
 8015706:	b009      	add	sp, #36	@ 0x24
 8015708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	f10d 021f 	add.w	r2, sp, #31
 8015710:	4601      	mov	r1, r0
 8015712:	9200      	str	r2, [sp, #0]
 8015714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015718:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801571c:	47a8      	blx	r5
 801571e:	2800      	cmp	r0, #0
 8015720:	d0ec      	beq.n	80156fc <recv_custom_msg+0x54>
 8015722:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d1e8      	bne.n	80156fc <recv_custom_msg+0x54>
 801572a:	f8cb 0000 	str.w	r0, [fp]
 801572e:	2001      	movs	r0, #1
 8015730:	f8ca 4000 	str.w	r4, [sl]
 8015734:	b009      	add	sp, #36	@ 0x24
 8015736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801573a:	bf00      	nop
 801573c:	240686b0 	.word	0x240686b0

08015740 <send_custom_msg>:
 8015740:	b530      	push	{r4, r5, lr}
 8015742:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8015746:	b087      	sub	sp, #28
 8015748:	4614      	mov	r4, r2
 801574a:	b995      	cbnz	r5, 8015772 <send_custom_msg+0x32>
 801574c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8015750:	f10d 0317 	add.w	r3, sp, #23
 8015754:	47a8      	blx	r5
 8015756:	1e03      	subs	r3, r0, #0
 8015758:	bf18      	it	ne
 801575a:	2301      	movne	r3, #1
 801575c:	42a0      	cmp	r0, r4
 801575e:	bf18      	it	ne
 8015760:	2300      	movne	r3, #0
 8015762:	b91b      	cbnz	r3, 801576c <send_custom_msg+0x2c>
 8015764:	4a0a      	ldr	r2, [pc, #40]	@ (8015790 <send_custom_msg+0x50>)
 8015766:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801576a:	7011      	strb	r1, [r2, #0]
 801576c:	4618      	mov	r0, r3
 801576e:	b007      	add	sp, #28
 8015770:	bd30      	pop	{r4, r5, pc}
 8015772:	460b      	mov	r3, r1
 8015774:	2200      	movs	r2, #0
 8015776:	f10d 0117 	add.w	r1, sp, #23
 801577a:	9400      	str	r4, [sp, #0]
 801577c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015780:	4602      	mov	r2, r0
 8015782:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015786:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801578a:	f000 fead 	bl	80164e8 <uxr_write_framed_msg>
 801578e:	e7e2      	b.n	8015756 <send_custom_msg+0x16>
 8015790:	240686b0 	.word	0x240686b0

08015794 <uxr_set_custom_transport_callbacks>:
 8015794:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015798:	9901      	ldr	r1, [sp, #4]
 801579a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801579e:	9b00      	ldr	r3, [sp, #0]
 80157a0:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop

080157a8 <uxr_init_custom_transport>:
 80157a8:	b538      	push	{r3, r4, r5, lr}
 80157aa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80157ae:	b303      	cbz	r3, 80157f2 <uxr_init_custom_transport+0x4a>
 80157b0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80157b4:	4604      	mov	r4, r0
 80157b6:	b1e2      	cbz	r2, 80157f2 <uxr_init_custom_transport+0x4a>
 80157b8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80157bc:	b1ca      	cbz	r2, 80157f2 <uxr_init_custom_transport+0x4a>
 80157be:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80157c2:	b1b2      	cbz	r2, 80157f2 <uxr_init_custom_transport+0x4a>
 80157c4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80157c8:	4798      	blx	r3
 80157ca:	4605      	mov	r5, r0
 80157cc:	b188      	cbz	r0, 80157f2 <uxr_init_custom_transport+0x4a>
 80157ce:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80157d2:	b98b      	cbnz	r3, 80157f8 <uxr_init_custom_transport+0x50>
 80157d4:	4b0b      	ldr	r3, [pc, #44]	@ (8015804 <uxr_init_custom_transport+0x5c>)
 80157d6:	4628      	mov	r0, r5
 80157d8:	490b      	ldr	r1, [pc, #44]	@ (8015808 <uxr_init_custom_transport+0x60>)
 80157da:	4a0c      	ldr	r2, [pc, #48]	@ (801580c <uxr_init_custom_transport+0x64>)
 80157dc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80157e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157e4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80157e8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80157ec:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80157f0:	bd38      	pop	{r3, r4, r5, pc}
 80157f2:	2500      	movs	r5, #0
 80157f4:	4628      	mov	r0, r5
 80157f6:	bd38      	pop	{r3, r4, r5, pc}
 80157f8:	2100      	movs	r1, #0
 80157fa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80157fe:	f000 fe6d 	bl	80164dc <uxr_init_framing_io>
 8015802:	e7e7      	b.n	80157d4 <uxr_init_custom_transport+0x2c>
 8015804:	080156a9 	.word	0x080156a9
 8015808:	08015741 	.word	0x08015741
 801580c:	0801569d 	.word	0x0801569d

08015810 <uxr_close_custom_transport>:
 8015810:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8015814:	4718      	bx	r3
 8015816:	bf00      	nop

08015818 <uxr_init_input_best_effort_stream>:
 8015818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801581c:	8003      	strh	r3, [r0, #0]
 801581e:	4770      	bx	lr

08015820 <uxr_reset_input_best_effort_stream>:
 8015820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015824:	8003      	strh	r3, [r0, #0]
 8015826:	4770      	bx	lr

08015828 <uxr_receive_best_effort_message>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	4604      	mov	r4, r0
 801582c:	8800      	ldrh	r0, [r0, #0]
 801582e:	460d      	mov	r5, r1
 8015830:	f000 fe3c 	bl	80164ac <uxr_seq_num_cmp>
 8015834:	4603      	mov	r3, r0
 8015836:	0fc0      	lsrs	r0, r0, #31
 8015838:	2b00      	cmp	r3, #0
 801583a:	bfb8      	it	lt
 801583c:	8025      	strhlt	r5, [r4, #0]
 801583e:	bd38      	pop	{r3, r4, r5, pc}

08015840 <on_full_input_buffer>:
 8015840:	b570      	push	{r4, r5, r6, lr}
 8015842:	460c      	mov	r4, r1
 8015844:	4605      	mov	r5, r0
 8015846:	8908      	ldrh	r0, [r1, #8]
 8015848:	682b      	ldr	r3, [r5, #0]
 801584a:	7d26      	ldrb	r6, [r4, #20]
 801584c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015850:	fbb2 f2f0 	udiv	r2, r2, r0
 8015854:	eba3 0c01 	sub.w	ip, r3, r1
 8015858:	fbbc fcf2 	udiv	ip, ip, r2
 801585c:	f10c 0c01 	add.w	ip, ip, #1
 8015860:	fa1f f38c 	uxth.w	r3, ip
 8015864:	fbb3 fcf0 	udiv	ip, r3, r0
 8015868:	fb00 331c 	mls	r3, r0, ip, r3
 801586c:	b29b      	uxth	r3, r3
 801586e:	fb02 f303 	mul.w	r3, r2, r3
 8015872:	1d18      	adds	r0, r3, #4
 8015874:	4408      	add	r0, r1
 8015876:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801587a:	b116      	cbz	r6, 8015882 <on_full_input_buffer+0x42>
 801587c:	2600      	movs	r6, #0
 801587e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015882:	2a03      	cmp	r2, #3
 8015884:	d801      	bhi.n	801588a <on_full_input_buffer+0x4a>
 8015886:	2001      	movs	r0, #1
 8015888:	bd70      	pop	{r4, r5, r6, pc}
 801588a:	3308      	adds	r3, #8
 801588c:	4628      	mov	r0, r5
 801588e:	3a04      	subs	r2, #4
 8015890:	4419      	add	r1, r3
 8015892:	692b      	ldr	r3, [r5, #16]
 8015894:	f7fa fed8 	bl	8010648 <ucdr_init_buffer_origin>
 8015898:	4628      	mov	r0, r5
 801589a:	4622      	mov	r2, r4
 801589c:	4902      	ldr	r1, [pc, #8]	@ (80158a8 <on_full_input_buffer+0x68>)
 801589e:	f7fa feaf 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 80158a2:	2000      	movs	r0, #0
 80158a4:	bd70      	pop	{r4, r5, r6, pc}
 80158a6:	bf00      	nop
 80158a8:	08015841 	.word	0x08015841

080158ac <uxr_init_input_reliable_stream>:
 80158ac:	b510      	push	{r4, lr}
 80158ae:	e9c0 1200 	strd	r1, r2, [r0]
 80158b2:	2400      	movs	r4, #0
 80158b4:	9a02      	ldr	r2, [sp, #8]
 80158b6:	8103      	strh	r3, [r0, #8]
 80158b8:	6102      	str	r2, [r0, #16]
 80158ba:	7504      	strb	r4, [r0, #20]
 80158bc:	b1c3      	cbz	r3, 80158f0 <uxr_init_input_reliable_stream+0x44>
 80158be:	600c      	str	r4, [r1, #0]
 80158c0:	8901      	ldrh	r1, [r0, #8]
 80158c2:	2901      	cmp	r1, #1
 80158c4:	d914      	bls.n	80158f0 <uxr_init_input_reliable_stream+0x44>
 80158c6:	f04f 0c01 	mov.w	ip, #1
 80158ca:	6843      	ldr	r3, [r0, #4]
 80158cc:	f10c 0e01 	add.w	lr, ip, #1
 80158d0:	fbbc f2f1 	udiv	r2, ip, r1
 80158d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80158d8:	fb01 c212 	mls	r2, r1, r2, ip
 80158dc:	fa1f fc8e 	uxth.w	ip, lr
 80158e0:	b292      	uxth	r2, r2
 80158e2:	fb02 f303 	mul.w	r3, r2, r3
 80158e6:	6802      	ldr	r2, [r0, #0]
 80158e8:	50d4      	str	r4, [r2, r3]
 80158ea:	8901      	ldrh	r1, [r0, #8]
 80158ec:	4561      	cmp	r1, ip
 80158ee:	d8ec      	bhi.n	80158ca <uxr_init_input_reliable_stream+0x1e>
 80158f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80158f4:	60c3      	str	r3, [r0, #12]
 80158f6:	bd10      	pop	{r4, pc}

080158f8 <uxr_reset_input_reliable_stream>:
 80158f8:	8901      	ldrh	r1, [r0, #8]
 80158fa:	b1d9      	cbz	r1, 8015934 <uxr_reset_input_reliable_stream+0x3c>
 80158fc:	b510      	push	{r4, lr}
 80158fe:	f04f 0e00 	mov.w	lr, #0
 8015902:	46f4      	mov	ip, lr
 8015904:	4674      	mov	r4, lr
 8015906:	6843      	ldr	r3, [r0, #4]
 8015908:	f10e 0e01 	add.w	lr, lr, #1
 801590c:	fbbc f2f1 	udiv	r2, ip, r1
 8015910:	fbb3 f3f1 	udiv	r3, r3, r1
 8015914:	fb01 c212 	mls	r2, r1, r2, ip
 8015918:	fa1f fc8e 	uxth.w	ip, lr
 801591c:	b292      	uxth	r2, r2
 801591e:	fb02 f303 	mul.w	r3, r2, r3
 8015922:	6802      	ldr	r2, [r0, #0]
 8015924:	50d4      	str	r4, [r2, r3]
 8015926:	8901      	ldrh	r1, [r0, #8]
 8015928:	4561      	cmp	r1, ip
 801592a:	d8ec      	bhi.n	8015906 <uxr_reset_input_reliable_stream+0xe>
 801592c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015930:	60c3      	str	r3, [r0, #12]
 8015932:	bd10      	pop	{r4, pc}
 8015934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015938:	60c3      	str	r3, [r0, #12]
 801593a:	4770      	bx	lr

0801593c <uxr_receive_reliable_message>:
 801593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015940:	4604      	mov	r4, r0
 8015942:	460d      	mov	r5, r1
 8015944:	8901      	ldrh	r1, [r0, #8]
 8015946:	4617      	mov	r7, r2
 8015948:	8980      	ldrh	r0, [r0, #12]
 801594a:	4698      	mov	r8, r3
 801594c:	f000 fda6 	bl	801649c <uxr_seq_num_add>
 8015950:	4629      	mov	r1, r5
 8015952:	4606      	mov	r6, r0
 8015954:	89a0      	ldrh	r0, [r4, #12]
 8015956:	f000 fda9 	bl	80164ac <uxr_seq_num_cmp>
 801595a:	2800      	cmp	r0, #0
 801595c:	db0a      	blt.n	8015974 <uxr_receive_reliable_message+0x38>
 801595e:	2600      	movs	r6, #0
 8015960:	4629      	mov	r1, r5
 8015962:	89e0      	ldrh	r0, [r4, #14]
 8015964:	f000 fda2 	bl	80164ac <uxr_seq_num_cmp>
 8015968:	2800      	cmp	r0, #0
 801596a:	da00      	bge.n	801596e <uxr_receive_reliable_message+0x32>
 801596c:	81e5      	strh	r5, [r4, #14]
 801596e:	4630      	mov	r0, r6
 8015970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015974:	4630      	mov	r0, r6
 8015976:	4629      	mov	r1, r5
 8015978:	f000 fd98 	bl	80164ac <uxr_seq_num_cmp>
 801597c:	2800      	cmp	r0, #0
 801597e:	dbee      	blt.n	801595e <uxr_receive_reliable_message+0x22>
 8015980:	6923      	ldr	r3, [r4, #16]
 8015982:	4638      	mov	r0, r7
 8015984:	4798      	blx	r3
 8015986:	4681      	mov	r9, r0
 8015988:	2101      	movs	r1, #1
 801598a:	89a0      	ldrh	r0, [r4, #12]
 801598c:	f000 fd86 	bl	801649c <uxr_seq_num_add>
 8015990:	f1b9 0f00 	cmp.w	r9, #0
 8015994:	bf08      	it	eq
 8015996:	4285      	cmpeq	r5, r0
 8015998:	bf0c      	ite	eq
 801599a:	2601      	moveq	r6, #1
 801599c:	2600      	movne	r6, #0
 801599e:	d104      	bne.n	80159aa <uxr_receive_reliable_message+0x6e>
 80159a0:	2300      	movs	r3, #0
 80159a2:	9a08      	ldr	r2, [sp, #32]
 80159a4:	81a0      	strh	r0, [r4, #12]
 80159a6:	7013      	strb	r3, [r2, #0]
 80159a8:	e7da      	b.n	8015960 <uxr_receive_reliable_message+0x24>
 80159aa:	8922      	ldrh	r2, [r4, #8]
 80159ac:	6863      	ldr	r3, [r4, #4]
 80159ae:	fbb5 f0f2 	udiv	r0, r5, r2
 80159b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80159b6:	fb02 5010 	mls	r0, r2, r0, r5
 80159ba:	b280      	uxth	r0, r0
 80159bc:	fb03 f000 	mul.w	r0, r3, r0
 80159c0:	6823      	ldr	r3, [r4, #0]
 80159c2:	3004      	adds	r0, #4
 80159c4:	4418      	add	r0, r3
 80159c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d1c7      	bne.n	801595e <uxr_receive_reliable_message+0x22>
 80159ce:	4639      	mov	r1, r7
 80159d0:	4642      	mov	r2, r8
 80159d2:	f002 fb28 	bl	8018026 <memcpy>
 80159d6:	8921      	ldrh	r1, [r4, #8]
 80159d8:	6863      	ldr	r3, [r4, #4]
 80159da:	fbb5 f2f1 	udiv	r2, r5, r1
 80159de:	fbb3 f3f1 	udiv	r3, r3, r1
 80159e2:	fb01 5212 	mls	r2, r1, r2, r5
 80159e6:	b292      	uxth	r2, r2
 80159e8:	fb02 f303 	mul.w	r3, r2, r3
 80159ec:	6822      	ldr	r2, [r4, #0]
 80159ee:	f842 8003 	str.w	r8, [r2, r3]
 80159f2:	2301      	movs	r3, #1
 80159f4:	9a08      	ldr	r2, [sp, #32]
 80159f6:	7013      	strb	r3, [r2, #0]
 80159f8:	f1b9 0f00 	cmp.w	r9, #0
 80159fc:	d0af      	beq.n	801595e <uxr_receive_reliable_message+0x22>
 80159fe:	89a6      	ldrh	r6, [r4, #12]
 8015a00:	2101      	movs	r1, #1
 8015a02:	4630      	mov	r0, r6
 8015a04:	f000 fd4a 	bl	801649c <uxr_seq_num_add>
 8015a08:	8921      	ldrh	r1, [r4, #8]
 8015a0a:	6863      	ldr	r3, [r4, #4]
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a16:	fb01 0212 	mls	r2, r1, r2, r0
 8015a1a:	6820      	ldr	r0, [r4, #0]
 8015a1c:	b292      	uxth	r2, r2
 8015a1e:	fb02 f303 	mul.w	r3, r2, r3
 8015a22:	3304      	adds	r3, #4
 8015a24:	4418      	add	r0, r3
 8015a26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d097      	beq.n	801595e <uxr_receive_reliable_message+0x22>
 8015a2e:	6923      	ldr	r3, [r4, #16]
 8015a30:	4798      	blx	r3
 8015a32:	2802      	cmp	r0, #2
 8015a34:	d002      	beq.n	8015a3c <uxr_receive_reliable_message+0x100>
 8015a36:	2801      	cmp	r0, #1
 8015a38:	d0e2      	beq.n	8015a00 <uxr_receive_reliable_message+0xc4>
 8015a3a:	e790      	b.n	801595e <uxr_receive_reliable_message+0x22>
 8015a3c:	2601      	movs	r6, #1
 8015a3e:	e78f      	b.n	8015960 <uxr_receive_reliable_message+0x24>

08015a40 <uxr_next_input_reliable_buffer_available>:
 8015a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a44:	4604      	mov	r4, r0
 8015a46:	460f      	mov	r7, r1
 8015a48:	8980      	ldrh	r0, [r0, #12]
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	4690      	mov	r8, r2
 8015a4e:	f000 fd25 	bl	801649c <uxr_seq_num_add>
 8015a52:	8922      	ldrh	r2, [r4, #8]
 8015a54:	6866      	ldr	r6, [r4, #4]
 8015a56:	fbb0 f3f2 	udiv	r3, r0, r2
 8015a5a:	fbb6 f6f2 	udiv	r6, r6, r2
 8015a5e:	fb02 0313 	mls	r3, r2, r3, r0
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	fb03 f606 	mul.w	r6, r3, r6
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	3604      	adds	r6, #4
 8015a6c:	441e      	add	r6, r3
 8015a6e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015a72:	f1b9 0f00 	cmp.w	r9, #0
 8015a76:	d023      	beq.n	8015ac0 <uxr_next_input_reliable_buffer_available+0x80>
 8015a78:	4605      	mov	r5, r0
 8015a7a:	6923      	ldr	r3, [r4, #16]
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	4798      	blx	r3
 8015a80:	4682      	mov	sl, r0
 8015a82:	b300      	cbz	r0, 8015ac6 <uxr_next_input_reliable_buffer_available+0x86>
 8015a84:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015a88:	2101      	movs	r1, #1
 8015a8a:	4650      	mov	r0, sl
 8015a8c:	f000 fd06 	bl	801649c <uxr_seq_num_add>
 8015a90:	8921      	ldrh	r1, [r4, #8]
 8015a92:	4682      	mov	sl, r0
 8015a94:	6863      	ldr	r3, [r4, #4]
 8015a96:	6820      	ldr	r0, [r4, #0]
 8015a98:	fbba f2f1 	udiv	r2, sl, r1
 8015a9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015aa0:	fb01 a212 	mls	r2, r1, r2, sl
 8015aa4:	b292      	uxth	r2, r2
 8015aa6:	fb02 f303 	mul.w	r3, r2, r3
 8015aaa:	3304      	adds	r3, #4
 8015aac:	4418      	add	r0, r3
 8015aae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015ab2:	b12b      	cbz	r3, 8015ac0 <uxr_next_input_reliable_buffer_available+0x80>
 8015ab4:	6923      	ldr	r3, [r4, #16]
 8015ab6:	4798      	blx	r3
 8015ab8:	2802      	cmp	r0, #2
 8015aba:	d01b      	beq.n	8015af4 <uxr_next_input_reliable_buffer_available+0xb4>
 8015abc:	2801      	cmp	r0, #1
 8015abe:	d0e3      	beq.n	8015a88 <uxr_next_input_reliable_buffer_available+0x48>
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ac6:	464a      	mov	r2, r9
 8015ac8:	4631      	mov	r1, r6
 8015aca:	4638      	mov	r0, r7
 8015acc:	f7fa fdc4 	bl	8010658 <ucdr_init_buffer>
 8015ad0:	8921      	ldrh	r1, [r4, #8]
 8015ad2:	6863      	ldr	r3, [r4, #4]
 8015ad4:	2001      	movs	r0, #1
 8015ad6:	fbb5 f2f1 	udiv	r2, r5, r1
 8015ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ade:	fb01 5212 	mls	r2, r1, r2, r5
 8015ae2:	b292      	uxth	r2, r2
 8015ae4:	fb02 f303 	mul.w	r3, r2, r3
 8015ae8:	6822      	ldr	r2, [r4, #0]
 8015aea:	f842 a003 	str.w	sl, [r2, r3]
 8015aee:	81a5      	strh	r5, [r4, #12]
 8015af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af4:	8920      	ldrh	r0, [r4, #8]
 8015af6:	eb06 0108 	add.w	r1, r6, r8
 8015afa:	6863      	ldr	r3, [r4, #4]
 8015afc:	eba9 0208 	sub.w	r2, r9, r8
 8015b00:	fbb5 f6f0 	udiv	r6, r5, r0
 8015b04:	fbb3 f3f0 	udiv	r3, r3, r0
 8015b08:	fb00 5516 	mls	r5, r0, r6, r5
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	b2ad      	uxth	r5, r5
 8015b10:	fb03 f505 	mul.w	r5, r3, r5
 8015b14:	6823      	ldr	r3, [r4, #0]
 8015b16:	5158      	str	r0, [r3, r5]
 8015b18:	4638      	mov	r0, r7
 8015b1a:	f7fa fd9d 	bl	8010658 <ucdr_init_buffer>
 8015b1e:	4638      	mov	r0, r7
 8015b20:	4622      	mov	r2, r4
 8015b22:	4903      	ldr	r1, [pc, #12]	@ (8015b30 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015b24:	f7fa fd6c 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8015b28:	2001      	movs	r0, #1
 8015b2a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015b2e:	e7c8      	b.n	8015ac2 <uxr_next_input_reliable_buffer_available+0x82>
 8015b30:	08015841 	.word	0x08015841

08015b34 <uxr_process_heartbeat>:
 8015b34:	b538      	push	{r3, r4, r5, lr}
 8015b36:	4611      	mov	r1, r2
 8015b38:	4604      	mov	r4, r0
 8015b3a:	89c0      	ldrh	r0, [r0, #14]
 8015b3c:	4615      	mov	r5, r2
 8015b3e:	f000 fcb5 	bl	80164ac <uxr_seq_num_cmp>
 8015b42:	2800      	cmp	r0, #0
 8015b44:	bfb8      	it	lt
 8015b46:	81e5      	strhlt	r5, [r4, #14]
 8015b48:	bd38      	pop	{r3, r4, r5, pc}
 8015b4a:	bf00      	nop

08015b4c <uxr_compute_acknack>:
 8015b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b50:	8903      	ldrh	r3, [r0, #8]
 8015b52:	4604      	mov	r4, r0
 8015b54:	460f      	mov	r7, r1
 8015b56:	8985      	ldrh	r5, [r0, #12]
 8015b58:	b1db      	cbz	r3, 8015b92 <uxr_compute_acknack+0x46>
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	2601      	movs	r6, #1
 8015b5e:	e004      	b.n	8015b6a <uxr_compute_acknack+0x1e>
 8015b60:	4566      	cmp	r6, ip
 8015b62:	f106 0601 	add.w	r6, r6, #1
 8015b66:	d214      	bcs.n	8015b92 <uxr_compute_acknack+0x46>
 8015b68:	89a0      	ldrh	r0, [r4, #12]
 8015b6a:	b2b1      	uxth	r1, r6
 8015b6c:	f000 fc96 	bl	801649c <uxr_seq_num_add>
 8015b70:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015b74:	fbb0 f2fc 	udiv	r2, r0, ip
 8015b78:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015b7c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015b80:	fbb3 f3fc 	udiv	r3, r3, ip
 8015b84:	b292      	uxth	r2, r2
 8015b86:	fb02 f303 	mul.w	r3, r2, r3
 8015b8a:	58cb      	ldr	r3, [r1, r3]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1e7      	bne.n	8015b60 <uxr_compute_acknack+0x14>
 8015b90:	4605      	mov	r5, r0
 8015b92:	803d      	strh	r5, [r7, #0]
 8015b94:	2101      	movs	r1, #1
 8015b96:	89e6      	ldrh	r6, [r4, #14]
 8015b98:	4628      	mov	r0, r5
 8015b9a:	f000 fc83 	bl	80164a4 <uxr_seq_num_sub>
 8015b9e:	4601      	mov	r1, r0
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f000 fc7f 	bl	80164a4 <uxr_seq_num_sub>
 8015ba6:	4606      	mov	r6, r0
 8015ba8:	b328      	cbz	r0, 8015bf6 <uxr_compute_acknack+0xaa>
 8015baa:	f04f 0900 	mov.w	r9, #0
 8015bae:	f04f 0801 	mov.w	r8, #1
 8015bb2:	464d      	mov	r5, r9
 8015bb4:	fa1f f189 	uxth.w	r1, r9
 8015bb8:	8838      	ldrh	r0, [r7, #0]
 8015bba:	f000 fc6f 	bl	801649c <uxr_seq_num_add>
 8015bbe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015bc2:	6861      	ldr	r1, [r4, #4]
 8015bc4:	fa08 fe09 	lsl.w	lr, r8, r9
 8015bc8:	6822      	ldr	r2, [r4, #0]
 8015bca:	f109 0901 	add.w	r9, r9, #1
 8015bce:	ea4e 0e05 	orr.w	lr, lr, r5
 8015bd2:	fbb0 f3fc 	udiv	r3, r0, ip
 8015bd6:	fbb1 f1fc 	udiv	r1, r1, ip
 8015bda:	fb03 001c 	mls	r0, r3, ip, r0
 8015bde:	b283      	uxth	r3, r0
 8015be0:	fb01 f303 	mul.w	r3, r1, r3
 8015be4:	58d3      	ldr	r3, [r2, r3]
 8015be6:	b90b      	cbnz	r3, 8015bec <uxr_compute_acknack+0xa0>
 8015be8:	fa1f f58e 	uxth.w	r5, lr
 8015bec:	454e      	cmp	r6, r9
 8015bee:	d1e1      	bne.n	8015bb4 <uxr_compute_acknack+0x68>
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bf6:	4605      	mov	r5, r0
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bfe:	bf00      	nop

08015c00 <uxr_init_output_best_effort_stream>:
 8015c00:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015c04:	6001      	str	r1, [r0, #0]
 8015c06:	7303      	strb	r3, [r0, #12]
 8015c08:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015c0c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015c10:	4770      	bx	lr
 8015c12:	bf00      	nop

08015c14 <uxr_reset_output_best_effort_stream>:
 8015c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c18:	7b03      	ldrb	r3, [r0, #12]
 8015c1a:	81c2      	strh	r2, [r0, #14]
 8015c1c:	6043      	str	r3, [r0, #4]
 8015c1e:	4770      	bx	lr

08015c20 <uxr_prepare_best_effort_buffer_to_write>:
 8015c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c22:	4604      	mov	r4, r0
 8015c24:	b083      	sub	sp, #12
 8015c26:	6840      	ldr	r0, [r0, #4]
 8015c28:	460d      	mov	r5, r1
 8015c2a:	4616      	mov	r6, r2
 8015c2c:	f7fc f942 	bl	8011eb4 <uxr_submessage_padding>
 8015c30:	6863      	ldr	r3, [r4, #4]
 8015c32:	4418      	add	r0, r3
 8015c34:	68a3      	ldr	r3, [r4, #8]
 8015c36:	1942      	adds	r2, r0, r5
 8015c38:	4293      	cmp	r3, r2
 8015c3a:	bf2c      	ite	cs
 8015c3c:	2701      	movcs	r7, #1
 8015c3e:	2700      	movcc	r7, #0
 8015c40:	d202      	bcs.n	8015c48 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015c42:	4638      	mov	r0, r7
 8015c44:	b003      	add	sp, #12
 8015c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c48:	9000      	str	r0, [sp, #0]
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	6821      	ldr	r1, [r4, #0]
 8015c50:	f7fa fcf0 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8015c54:	6861      	ldr	r1, [r4, #4]
 8015c56:	4638      	mov	r0, r7
 8015c58:	4429      	add	r1, r5
 8015c5a:	6061      	str	r1, [r4, #4]
 8015c5c:	b003      	add	sp, #12
 8015c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c60 <uxr_prepare_best_effort_buffer_to_send>:
 8015c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c64:	4604      	mov	r4, r0
 8015c66:	461d      	mov	r5, r3
 8015c68:	6840      	ldr	r0, [r0, #4]
 8015c6a:	7b23      	ldrb	r3, [r4, #12]
 8015c6c:	4298      	cmp	r0, r3
 8015c6e:	bf8c      	ite	hi
 8015c70:	2601      	movhi	r6, #1
 8015c72:	2600      	movls	r6, #0
 8015c74:	d802      	bhi.n	8015c7c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015c76:	4630      	mov	r0, r6
 8015c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c7c:	4688      	mov	r8, r1
 8015c7e:	89e0      	ldrh	r0, [r4, #14]
 8015c80:	2101      	movs	r1, #1
 8015c82:	4617      	mov	r7, r2
 8015c84:	f000 fc0a 	bl	801649c <uxr_seq_num_add>
 8015c88:	6823      	ldr	r3, [r4, #0]
 8015c8a:	81e0      	strh	r0, [r4, #14]
 8015c8c:	8028      	strh	r0, [r5, #0]
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f8c8 3000 	str.w	r3, [r8]
 8015c94:	6863      	ldr	r3, [r4, #4]
 8015c96:	603b      	str	r3, [r7, #0]
 8015c98:	7b23      	ldrb	r3, [r4, #12]
 8015c9a:	6063      	str	r3, [r4, #4]
 8015c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ca0 <on_full_output_buffer>:
 8015ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ca2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8015ca6:	460c      	mov	r4, r1
 8015ca8:	6803      	ldr	r3, [r0, #0]
 8015caa:	4605      	mov	r5, r0
 8015cac:	7b26      	ldrb	r6, [r4, #12]
 8015cae:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015cb2:	fbb2 f2fc 	udiv	r2, r2, ip
 8015cb6:	eba3 0e01 	sub.w	lr, r3, r1
 8015cba:	6903      	ldr	r3, [r0, #16]
 8015cbc:	fbbe fef2 	udiv	lr, lr, r2
 8015cc0:	f10e 0e01 	add.w	lr, lr, #1
 8015cc4:	fa1f fe8e 	uxth.w	lr, lr
 8015cc8:	fbbe f7fc 	udiv	r7, lr, ip
 8015ccc:	fb0c ec17 	mls	ip, ip, r7, lr
 8015cd0:	fa1f fc8c 	uxth.w	ip, ip
 8015cd4:	fb02 fc0c 	mul.w	ip, r2, ip
 8015cd8:	f851 200c 	ldr.w	r2, [r1, ip]
 8015cdc:	44b4      	add	ip, r6
 8015cde:	1b92      	subs	r2, r2, r6
 8015ce0:	f10c 0c08 	add.w	ip, ip, #8
 8015ce4:	3a04      	subs	r2, #4
 8015ce6:	4461      	add	r1, ip
 8015ce8:	f7fa fcae 	bl	8010648 <ucdr_init_buffer_origin>
 8015cec:	4628      	mov	r0, r5
 8015cee:	4622      	mov	r2, r4
 8015cf0:	4902      	ldr	r1, [pc, #8]	@ (8015cfc <on_full_output_buffer+0x5c>)
 8015cf2:	f7fa fc85 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	08015ca1 	.word	0x08015ca1

08015d00 <uxr_init_output_reliable_stream>:
 8015d00:	b530      	push	{r4, r5, lr}
 8015d02:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8015d06:	8103      	strh	r3, [r0, #8]
 8015d08:	7304      	strb	r4, [r0, #12]
 8015d0a:	e9c0 1200 	strd	r1, r2, [r0]
 8015d0e:	b1e3      	cbz	r3, 8015d4a <uxr_init_output_reliable_stream+0x4a>
 8015d10:	600c      	str	r4, [r1, #0]
 8015d12:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015d16:	f1bc 0f01 	cmp.w	ip, #1
 8015d1a:	d916      	bls.n	8015d4a <uxr_init_output_reliable_stream+0x4a>
 8015d1c:	f04f 0e01 	mov.w	lr, #1
 8015d20:	6843      	ldr	r3, [r0, #4]
 8015d22:	f10e 0501 	add.w	r5, lr, #1
 8015d26:	7b04      	ldrb	r4, [r0, #12]
 8015d28:	6801      	ldr	r1, [r0, #0]
 8015d2a:	fbbe f2fc 	udiv	r2, lr, ip
 8015d2e:	fbb3 f3fc 	udiv	r3, r3, ip
 8015d32:	fb0c e212 	mls	r2, ip, r2, lr
 8015d36:	fa1f fe85 	uxth.w	lr, r5
 8015d3a:	b292      	uxth	r2, r2
 8015d3c:	fb02 f303 	mul.w	r3, r2, r3
 8015d40:	50cc      	str	r4, [r1, r3]
 8015d42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015d46:	45f4      	cmp	ip, lr
 8015d48:	d8ea      	bhi.n	8015d20 <uxr_init_output_reliable_stream+0x20>
 8015d4a:	4b07      	ldr	r3, [pc, #28]	@ (8015d68 <uxr_init_output_reliable_stream+0x68>)
 8015d4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d50:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015d54:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015d58:	f8c0 300e 	str.w	r3, [r0, #14]
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	8242      	strh	r2, [r0, #18]
 8015d60:	8403      	strh	r3, [r0, #32]
 8015d62:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8015d66:	bd30      	pop	{r4, r5, pc}
 8015d68:	ffff0000 	.word	0xffff0000
 8015d6c:	00000000 	.word	0x00000000

08015d70 <uxr_reset_output_reliable_stream>:
 8015d70:	8901      	ldrh	r1, [r0, #8]
 8015d72:	b510      	push	{r4, lr}
 8015d74:	b1b1      	cbz	r1, 8015da4 <uxr_reset_output_reliable_stream+0x34>
 8015d76:	f04f 0e00 	mov.w	lr, #0
 8015d7a:	46f4      	mov	ip, lr
 8015d7c:	6843      	ldr	r3, [r0, #4]
 8015d7e:	f10e 0e01 	add.w	lr, lr, #1
 8015d82:	7b04      	ldrb	r4, [r0, #12]
 8015d84:	fbbc f2f1 	udiv	r2, ip, r1
 8015d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d8c:	fb01 c212 	mls	r2, r1, r2, ip
 8015d90:	fa1f fc8e 	uxth.w	ip, lr
 8015d94:	b292      	uxth	r2, r2
 8015d96:	fb02 f303 	mul.w	r3, r2, r3
 8015d9a:	6802      	ldr	r2, [r0, #0]
 8015d9c:	50d4      	str	r4, [r2, r3]
 8015d9e:	8901      	ldrh	r1, [r0, #8]
 8015da0:	4561      	cmp	r1, ip
 8015da2:	d8eb      	bhi.n	8015d7c <uxr_reset_output_reliable_stream+0xc>
 8015da4:	4b08      	ldr	r3, [pc, #32]	@ (8015dc8 <uxr_reset_output_reliable_stream+0x58>)
 8015da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015daa:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8015dc0 <uxr_reset_output_reliable_stream+0x50>
 8015dae:	f8c0 300e 	str.w	r3, [r0, #14]
 8015db2:	2300      	movs	r3, #0
 8015db4:	8242      	strh	r2, [r0, #18]
 8015db6:	8403      	strh	r3, [r0, #32]
 8015db8:	ed80 7b06 	vstr	d7, [r0, #24]
 8015dbc:	bd10      	pop	{r4, pc}
 8015dbe:	bf00      	nop
 8015dc0:	ffffffff 	.word	0xffffffff
 8015dc4:	7fffffff 	.word	0x7fffffff
 8015dc8:	ffff0000 	.word	0xffff0000

08015dcc <uxr_prepare_reliable_buffer_to_write>:
 8015dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	b091      	sub	sp, #68	@ 0x44
 8015dd4:	8900      	ldrh	r0, [r0, #8]
 8015dd6:	468b      	mov	fp, r1
 8015dd8:	89e6      	ldrh	r6, [r4, #14]
 8015dda:	9204      	str	r2, [sp, #16]
 8015ddc:	6865      	ldr	r5, [r4, #4]
 8015dde:	6823      	ldr	r3, [r4, #0]
 8015de0:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015de4:	fbb6 f2f0 	udiv	r2, r6, r0
 8015de8:	fbb5 f5f0 	udiv	r5, r5, r0
 8015dec:	fb00 6212 	mls	r2, r0, r2, r6
 8015df0:	1f2f      	subs	r7, r5, #4
 8015df2:	b292      	uxth	r2, r2
 8015df4:	fb05 3202 	mla	r2, r5, r2, r3
 8015df8:	1d11      	adds	r1, r2, #4
 8015dfa:	f8d2 8000 	ldr.w	r8, [r2]
 8015dfe:	9103      	str	r1, [sp, #12]
 8015e00:	2800      	cmp	r0, #0
 8015e02:	f000 814a 	beq.w	801609a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8015e06:	f04f 0c00 	mov.w	ip, #0
 8015e0a:	46e2      	mov	sl, ip
 8015e0c:	4661      	mov	r1, ip
 8015e0e:	f10c 0c01 	add.w	ip, ip, #1
 8015e12:	fbb1 f2f0 	udiv	r2, r1, r0
 8015e16:	fb00 1212 	mls	r2, r0, r2, r1
 8015e1a:	fa1f f18c 	uxth.w	r1, ip
 8015e1e:	b292      	uxth	r2, r2
 8015e20:	fb05 f202 	mul.w	r2, r5, r2
 8015e24:	589a      	ldr	r2, [r3, r2]
 8015e26:	454a      	cmp	r2, r9
 8015e28:	d103      	bne.n	8015e32 <uxr_prepare_reliable_buffer_to_write+0x66>
 8015e2a:	f10a 0a01 	add.w	sl, sl, #1
 8015e2e:	fa1f fa8a 	uxth.w	sl, sl
 8015e32:	4281      	cmp	r1, r0
 8015e34:	d3eb      	bcc.n	8015e0e <uxr_prepare_reliable_buffer_to_write+0x42>
 8015e36:	4640      	mov	r0, r8
 8015e38:	2104      	movs	r1, #4
 8015e3a:	f8cd a014 	str.w	sl, [sp, #20]
 8015e3e:	f7fa fc0f 	bl	8010660 <ucdr_alignment>
 8015e42:	4480      	add	r8, r0
 8015e44:	eb08 020b 	add.w	r2, r8, fp
 8015e48:	42ba      	cmp	r2, r7
 8015e4a:	f240 80ca 	bls.w	8015fe2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015e4e:	7b22      	ldrb	r2, [r4, #12]
 8015e50:	445a      	add	r2, fp
 8015e52:	42ba      	cmp	r2, r7
 8015e54:	f240 80b2 	bls.w	8015fbc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8015e58:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015e5c:	b2bb      	uxth	r3, r7
 8015e5e:	eba2 0209 	sub.w	r2, r2, r9
 8015e62:	441a      	add	r2, r3
 8015e64:	b292      	uxth	r2, r2
 8015e66:	fb0a f902 	mul.w	r9, sl, r2
 8015e6a:	9205      	str	r2, [sp, #20]
 8015e6c:	45d9      	cmp	r9, fp
 8015e6e:	9206      	str	r2, [sp, #24]
 8015e70:	f0c0 80b3 	bcc.w	8015fda <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015e74:	f108 0204 	add.w	r2, r8, #4
 8015e78:	42ba      	cmp	r2, r7
 8015e7a:	f080 80da 	bcs.w	8016032 <uxr_prepare_reliable_buffer_to_write+0x266>
 8015e7e:	f1a3 0904 	sub.w	r9, r3, #4
 8015e82:	9b05      	ldr	r3, [sp, #20]
 8015e84:	eba9 0908 	sub.w	r9, r9, r8
 8015e88:	fa1f f989 	uxth.w	r9, r9
 8015e8c:	ebab 0b09 	sub.w	fp, fp, r9
 8015e90:	fbbb f2f3 	udiv	r2, fp, r3
 8015e94:	fb03 b312 	mls	r3, r3, r2, fp
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	f040 80c4 	bne.w	8016026 <uxr_prepare_reliable_buffer_to_write+0x25a>
 8015e9e:	b293      	uxth	r3, r2
 8015ea0:	4553      	cmp	r3, sl
 8015ea2:	f200 809a 	bhi.w	8015fda <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	f000 80f9 	beq.w	801609e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015eac:	f8cd 801c 	str.w	r8, [sp, #28]
 8015eb0:	f04f 0a00 	mov.w	sl, #0
 8015eb4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015eb8:	f10d 0b20 	add.w	fp, sp, #32
 8015ebc:	9505      	str	r5, [sp, #20]
 8015ebe:	461d      	mov	r5, r3
 8015ec0:	e000      	b.n	8015ec4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8015ec2:	46c1      	mov	r9, r8
 8015ec4:	8922      	ldrh	r2, [r4, #8]
 8015ec6:	4658      	mov	r0, fp
 8015ec8:	6863      	ldr	r3, [r4, #4]
 8015eca:	f10a 0a01 	add.w	sl, sl, #1
 8015ece:	fbb6 f1f2 	udiv	r1, r6, r2
 8015ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ed6:	fb02 6111 	mls	r1, r2, r1, r6
 8015eda:	463a      	mov	r2, r7
 8015edc:	b289      	uxth	r1, r1
 8015ede:	fb03 f101 	mul.w	r1, r3, r1
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	3104      	adds	r1, #4
 8015ee6:	4419      	add	r1, r3
 8015ee8:	2300      	movs	r3, #0
 8015eea:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8015eee:	f8cd c000 	str.w	ip, [sp]
 8015ef2:	f7fa fb9f 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8015ef6:	464a      	mov	r2, r9
 8015ef8:	2300      	movs	r3, #0
 8015efa:	210d      	movs	r1, #13
 8015efc:	4658      	mov	r0, fp
 8015efe:	f7fb ff99 	bl	8011e34 <uxr_buffer_submessage_header>
 8015f02:	8921      	ldrh	r1, [r4, #8]
 8015f04:	6863      	ldr	r3, [r4, #4]
 8015f06:	4630      	mov	r0, r6
 8015f08:	fbb6 f2f1 	udiv	r2, r6, r1
 8015f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f10:	fb01 6212 	mls	r2, r1, r2, r6
 8015f14:	2101      	movs	r1, #1
 8015f16:	b292      	uxth	r2, r2
 8015f18:	fb02 f303 	mul.w	r3, r2, r3
 8015f1c:	6822      	ldr	r2, [r4, #0]
 8015f1e:	50d7      	str	r7, [r2, r3]
 8015f20:	f000 fabc 	bl	801649c <uxr_seq_num_add>
 8015f24:	4606      	mov	r6, r0
 8015f26:	fa1f f38a 	uxth.w	r3, sl
 8015f2a:	429d      	cmp	r5, r3
 8015f2c:	d8c9      	bhi.n	8015ec2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 8015f2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015f32:	9d05      	ldr	r5, [sp, #20]
 8015f34:	8920      	ldrh	r0, [r4, #8]
 8015f36:	463a      	mov	r2, r7
 8015f38:	6863      	ldr	r3, [r4, #4]
 8015f3a:	fbb6 f1f0 	udiv	r1, r6, r0
 8015f3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015f42:	fb00 6111 	mls	r1, r0, r1, r6
 8015f46:	4658      	mov	r0, fp
 8015f48:	b289      	uxth	r1, r1
 8015f4a:	fb01 f303 	mul.w	r3, r1, r3
 8015f4e:	6821      	ldr	r1, [r4, #0]
 8015f50:	3304      	adds	r3, #4
 8015f52:	4419      	add	r1, r3
 8015f54:	2300      	movs	r3, #0
 8015f56:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8015f5a:	9700      	str	r7, [sp, #0]
 8015f5c:	f7fa fb6a 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8015f60:	9f06      	ldr	r7, [sp, #24]
 8015f62:	4658      	mov	r0, fp
 8015f64:	2302      	movs	r3, #2
 8015f66:	b2ba      	uxth	r2, r7
 8015f68:	210d      	movs	r1, #13
 8015f6a:	f7fb ff63 	bl	8011e34 <uxr_buffer_submessage_header>
 8015f6e:	f108 0104 	add.w	r1, r8, #4
 8015f72:	9b03      	ldr	r3, [sp, #12]
 8015f74:	f1a5 0208 	sub.w	r2, r5, #8
 8015f78:	8925      	ldrh	r5, [r4, #8]
 8015f7a:	440b      	add	r3, r1
 8015f7c:	eba2 0208 	sub.w	r2, r2, r8
 8015f80:	fbb6 f0f5 	udiv	r0, r6, r5
 8015f84:	4619      	mov	r1, r3
 8015f86:	6863      	ldr	r3, [r4, #4]
 8015f88:	fb05 6010 	mls	r0, r5, r0, r6
 8015f8c:	fbb3 f3f5 	udiv	r3, r3, r5
 8015f90:	b280      	uxth	r0, r0
 8015f92:	6825      	ldr	r5, [r4, #0]
 8015f94:	fb00 f303 	mul.w	r3, r0, r3
 8015f98:	7b20      	ldrb	r0, [r4, #12]
 8015f9a:	3004      	adds	r0, #4
 8015f9c:	4438      	add	r0, r7
 8015f9e:	50e8      	str	r0, [r5, r3]
 8015fa0:	9d04      	ldr	r5, [sp, #16]
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	f7fa fb58 	bl	8010658 <ucdr_init_buffer>
 8015fa8:	4628      	mov	r0, r5
 8015faa:	4622      	mov	r2, r4
 8015fac:	493d      	ldr	r1, [pc, #244]	@ (80160a4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015fae:	f7fa fb27 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	81e6      	strh	r6, [r4, #14]
 8015fb6:	b011      	add	sp, #68	@ 0x44
 8015fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fbc:	2101      	movs	r1, #1
 8015fbe:	89e0      	ldrh	r0, [r4, #14]
 8015fc0:	f000 fa6c 	bl	801649c <uxr_seq_num_add>
 8015fc4:	4605      	mov	r5, r0
 8015fc6:	8921      	ldrh	r1, [r4, #8]
 8015fc8:	8a60      	ldrh	r0, [r4, #18]
 8015fca:	f000 fa67 	bl	801649c <uxr_seq_num_add>
 8015fce:	4601      	mov	r1, r0
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	f000 fa6b 	bl	80164ac <uxr_seq_num_cmp>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	dd44      	ble.n	8016064 <uxr_prepare_reliable_buffer_to_write+0x298>
 8015fda:	2000      	movs	r0, #0
 8015fdc:	b011      	add	sp, #68	@ 0x44
 8015fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe2:	8921      	ldrh	r1, [r4, #8]
 8015fe4:	8a60      	ldrh	r0, [r4, #18]
 8015fe6:	9205      	str	r2, [sp, #20]
 8015fe8:	f000 fa58 	bl	801649c <uxr_seq_num_add>
 8015fec:	4601      	mov	r1, r0
 8015fee:	4630      	mov	r0, r6
 8015ff0:	f000 fa5c 	bl	80164ac <uxr_seq_num_cmp>
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	9a05      	ldr	r2, [sp, #20]
 8015ff8:	dcef      	bgt.n	8015fda <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015ffa:	8925      	ldrh	r5, [r4, #8]
 8015ffc:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016000:	fbb6 f4f5 	udiv	r4, r6, r5
 8016004:	fbb3 f3f5 	udiv	r3, r3, r5
 8016008:	fb05 6414 	mls	r4, r5, r4, r6
 801600c:	b2a4      	uxth	r4, r4
 801600e:	fb04 f303 	mul.w	r3, r4, r3
 8016012:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016016:	50fa      	str	r2, [r7, r3]
 8016018:	2300      	movs	r3, #0
 801601a:	f8cd 8000 	str.w	r8, [sp]
 801601e:	f7fa fb09 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8016022:	2001      	movs	r0, #1
 8016024:	e7da      	b.n	8015fdc <uxr_prepare_reliable_buffer_to_write+0x210>
 8016026:	3201      	adds	r2, #1
 8016028:	9306      	str	r3, [sp, #24]
 801602a:	b293      	uxth	r3, r2
 801602c:	4553      	cmp	r3, sl
 801602e:	d8d4      	bhi.n	8015fda <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016030:	e739      	b.n	8015ea6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8016032:	4630      	mov	r0, r6
 8016034:	2101      	movs	r1, #1
 8016036:	9307      	str	r3, [sp, #28]
 8016038:	f000 fa30 	bl	801649c <uxr_seq_num_add>
 801603c:	4606      	mov	r6, r0
 801603e:	8920      	ldrh	r0, [r4, #8]
 8016040:	6862      	ldr	r2, [r4, #4]
 8016042:	fbb6 f1f0 	udiv	r1, r6, r0
 8016046:	fbb2 f2f0 	udiv	r2, r2, r0
 801604a:	fb00 6111 	mls	r1, r0, r1, r6
 801604e:	b289      	uxth	r1, r1
 8016050:	fb01 f202 	mul.w	r2, r1, r2
 8016054:	6821      	ldr	r1, [r4, #0]
 8016056:	3204      	adds	r2, #4
 8016058:	188b      	adds	r3, r1, r2
 801605a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801605e:	9303      	str	r3, [sp, #12]
 8016060:	9b07      	ldr	r3, [sp, #28]
 8016062:	e70c      	b.n	8015e7e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016064:	8921      	ldrh	r1, [r4, #8]
 8016066:	6863      	ldr	r3, [r4, #4]
 8016068:	9804      	ldr	r0, [sp, #16]
 801606a:	fbb5 f2f1 	udiv	r2, r5, r1
 801606e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016072:	fb01 5212 	mls	r2, r1, r2, r5
 8016076:	6821      	ldr	r1, [r4, #0]
 8016078:	b292      	uxth	r2, r2
 801607a:	fb02 f303 	mul.w	r3, r2, r3
 801607e:	7b22      	ldrb	r2, [r4, #12]
 8016080:	3304      	adds	r3, #4
 8016082:	445a      	add	r2, fp
 8016084:	4419      	add	r1, r3
 8016086:	f841 2c04 	str.w	r2, [r1, #-4]
 801608a:	7b23      	ldrb	r3, [r4, #12]
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	2300      	movs	r3, #0
 8016090:	f7fa fad0 	bl	8010634 <ucdr_init_buffer_origin_offset>
 8016094:	2001      	movs	r0, #1
 8016096:	81e5      	strh	r5, [r4, #14]
 8016098:	e7a0      	b.n	8015fdc <uxr_prepare_reliable_buffer_to_write+0x210>
 801609a:	4682      	mov	sl, r0
 801609c:	e6cb      	b.n	8015e36 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801609e:	f10d 0b20 	add.w	fp, sp, #32
 80160a2:	e747      	b.n	8015f34 <uxr_prepare_reliable_buffer_to_write+0x168>
 80160a4:	08015ca1 	.word	0x08015ca1

080160a8 <uxr_prepare_next_reliable_buffer_to_send>:
 80160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160aa:	4604      	mov	r4, r0
 80160ac:	461d      	mov	r5, r3
 80160ae:	460f      	mov	r7, r1
 80160b0:	8a00      	ldrh	r0, [r0, #16]
 80160b2:	2101      	movs	r1, #1
 80160b4:	4616      	mov	r6, r2
 80160b6:	f000 f9f1 	bl	801649c <uxr_seq_num_add>
 80160ba:	8028      	strh	r0, [r5, #0]
 80160bc:	8922      	ldrh	r2, [r4, #8]
 80160be:	6863      	ldr	r3, [r4, #4]
 80160c0:	fbb0 f1f2 	udiv	r1, r0, r2
 80160c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80160c8:	fb02 0c11 	mls	ip, r2, r1, r0
 80160cc:	89e1      	ldrh	r1, [r4, #14]
 80160ce:	fa1f fc8c 	uxth.w	ip, ip
 80160d2:	fb0c fc03 	mul.w	ip, ip, r3
 80160d6:	6823      	ldr	r3, [r4, #0]
 80160d8:	f10c 0c04 	add.w	ip, ip, #4
 80160dc:	4463      	add	r3, ip
 80160de:	603b      	str	r3, [r7, #0]
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	449c      	add	ip, r3
 80160e4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80160e8:	6033      	str	r3, [r6, #0]
 80160ea:	f000 f9df 	bl	80164ac <uxr_seq_num_cmp>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	dd01      	ble.n	80160f6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80160f2:	2000      	movs	r0, #0
 80160f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160f6:	7b23      	ldrb	r3, [r4, #12]
 80160f8:	6832      	ldr	r2, [r6, #0]
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d9f9      	bls.n	80160f2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80160fe:	8a61      	ldrh	r1, [r4, #18]
 8016100:	8a20      	ldrh	r0, [r4, #16]
 8016102:	f000 f9cf 	bl	80164a4 <uxr_seq_num_sub>
 8016106:	8923      	ldrh	r3, [r4, #8]
 8016108:	4283      	cmp	r3, r0
 801610a:	d0f2      	beq.n	80160f2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801610c:	8828      	ldrh	r0, [r5, #0]
 801610e:	89e3      	ldrh	r3, [r4, #14]
 8016110:	8220      	strh	r0, [r4, #16]
 8016112:	4298      	cmp	r0, r3
 8016114:	d001      	beq.n	801611a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016116:	2001      	movs	r0, #1
 8016118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801611a:	2101      	movs	r1, #1
 801611c:	f000 f9be 	bl	801649c <uxr_seq_num_add>
 8016120:	4603      	mov	r3, r0
 8016122:	2001      	movs	r0, #1
 8016124:	81e3      	strh	r3, [r4, #14]
 8016126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016128 <uxr_update_output_stream_heartbeat_timestamp>:
 8016128:	b570      	push	{r4, r5, r6, lr}
 801612a:	8a01      	ldrh	r1, [r0, #16]
 801612c:	4604      	mov	r4, r0
 801612e:	8a40      	ldrh	r0, [r0, #18]
 8016130:	4615      	mov	r5, r2
 8016132:	461e      	mov	r6, r3
 8016134:	f000 f9ba 	bl	80164ac <uxr_seq_num_cmp>
 8016138:	2800      	cmp	r0, #0
 801613a:	db07      	blt.n	801614c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801613c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016140:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016144:	2000      	movs	r0, #0
 8016146:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801614a:	bd70      	pop	{r4, r5, r6, pc}
 801614c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016150:	b940      	cbnz	r0, 8016164 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016152:	2301      	movs	r3, #1
 8016154:	f884 3020 	strb.w	r3, [r4, #32]
 8016158:	3564      	adds	r5, #100	@ 0x64
 801615a:	f146 0600 	adc.w	r6, r6, #0
 801615e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016162:	bd70      	pop	{r4, r5, r6, pc}
 8016164:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016168:	4295      	cmp	r5, r2
 801616a:	eb76 0303 	sbcs.w	r3, r6, r3
 801616e:	db04      	blt.n	801617a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8016170:	1c43      	adds	r3, r0, #1
 8016172:	2001      	movs	r0, #1
 8016174:	f884 3020 	strb.w	r3, [r4, #32]
 8016178:	e7ee      	b.n	8016158 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801617a:	2000      	movs	r0, #0
 801617c:	e7ec      	b.n	8016158 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801617e:	bf00      	nop

08016180 <uxr_begin_output_nack_buffer_it>:
 8016180:	8a40      	ldrh	r0, [r0, #18]
 8016182:	4770      	bx	lr

08016184 <uxr_next_reliable_nack_buffer_to_send>:
 8016184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016188:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801618c:	b197      	cbz	r7, 80161b4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801618e:	4680      	mov	r8, r0
 8016190:	460d      	mov	r5, r1
 8016192:	4616      	mov	r6, r2
 8016194:	461c      	mov	r4, r3
 8016196:	8818      	ldrh	r0, [r3, #0]
 8016198:	2101      	movs	r1, #1
 801619a:	f000 f97f 	bl	801649c <uxr_seq_num_add>
 801619e:	8020      	strh	r0, [r4, #0]
 80161a0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80161a4:	f000 f982 	bl	80164ac <uxr_seq_num_cmp>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	dd06      	ble.n	80161ba <uxr_next_reliable_nack_buffer_to_send+0x36>
 80161ac:	2300      	movs	r3, #0
 80161ae:	461f      	mov	r7, r3
 80161b0:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 80161b4:	4638      	mov	r0, r7
 80161b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ba:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80161be:	8820      	ldrh	r0, [r4, #0]
 80161c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80161c4:	fbb0 f3f2 	udiv	r3, r0, r2
 80161c8:	fbb1 fcf2 	udiv	ip, r1, r2
 80161cc:	fb02 0313 	mls	r3, r2, r3, r0
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80161d6:	f8d8 3000 	ldr.w	r3, [r8]
 80161da:	f10c 0c04 	add.w	ip, ip, #4
 80161de:	4463      	add	r3, ip
 80161e0:	602b      	str	r3, [r5, #0]
 80161e2:	f8d8 3000 	ldr.w	r3, [r8]
 80161e6:	4463      	add	r3, ip
 80161e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80161ec:	6033      	str	r3, [r6, #0]
 80161ee:	f898 200c 	ldrb.w	r2, [r8, #12]
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d0d0      	beq.n	8016198 <uxr_next_reliable_nack_buffer_to_send+0x14>
 80161f6:	e7dd      	b.n	80161b4 <uxr_next_reliable_nack_buffer_to_send+0x30>

080161f8 <uxr_process_acknack>:
 80161f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fa:	4604      	mov	r4, r0
 80161fc:	460e      	mov	r6, r1
 80161fe:	4610      	mov	r0, r2
 8016200:	2101      	movs	r1, #1
 8016202:	f000 f94f 	bl	80164a4 <uxr_seq_num_sub>
 8016206:	8a61      	ldrh	r1, [r4, #18]
 8016208:	f000 f94c 	bl	80164a4 <uxr_seq_num_sub>
 801620c:	b1c8      	cbz	r0, 8016242 <uxr_process_acknack+0x4a>
 801620e:	4605      	mov	r5, r0
 8016210:	2700      	movs	r7, #0
 8016212:	2101      	movs	r1, #1
 8016214:	8a60      	ldrh	r0, [r4, #18]
 8016216:	f000 f941 	bl	801649c <uxr_seq_num_add>
 801621a:	8923      	ldrh	r3, [r4, #8]
 801621c:	6862      	ldr	r2, [r4, #4]
 801621e:	3701      	adds	r7, #1
 8016220:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016224:	6821      	ldr	r1, [r4, #0]
 8016226:	42bd      	cmp	r5, r7
 8016228:	8260      	strh	r0, [r4, #18]
 801622a:	fbb0 fef3 	udiv	lr, r0, r3
 801622e:	fbb2 f2f3 	udiv	r2, r2, r3
 8016232:	fb03 031e 	mls	r3, r3, lr, r0
 8016236:	b29b      	uxth	r3, r3
 8016238:	fb02 f303 	mul.w	r3, r2, r3
 801623c:	f841 c003 	str.w	ip, [r1, r3]
 8016240:	d1e7      	bne.n	8016212 <uxr_process_acknack+0x1a>
 8016242:	3e00      	subs	r6, #0
 8016244:	f04f 0300 	mov.w	r3, #0
 8016248:	bf18      	it	ne
 801624a:	2601      	movne	r6, #1
 801624c:	f884 3020 	strb.w	r3, [r4, #32]
 8016250:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016256:	bf00      	nop

08016258 <uxr_is_output_up_to_date>:
 8016258:	8a01      	ldrh	r1, [r0, #16]
 801625a:	8a40      	ldrh	r0, [r0, #18]
 801625c:	b508      	push	{r3, lr}
 801625e:	f000 f925 	bl	80164ac <uxr_seq_num_cmp>
 8016262:	fab0 f080 	clz	r0, r0
 8016266:	0940      	lsrs	r0, r0, #5
 8016268:	bd08      	pop	{r3, pc}
 801626a:	bf00      	nop

0801626c <get_available_free_slots>:
 801626c:	8901      	ldrh	r1, [r0, #8]
 801626e:	b1e1      	cbz	r1, 80162aa <get_available_free_slots+0x3e>
 8016270:	6843      	ldr	r3, [r0, #4]
 8016272:	f04f 0c00 	mov.w	ip, #0
 8016276:	b530      	push	{r4, r5, lr}
 8016278:	fbb3 fef1 	udiv	lr, r3, r1
 801627c:	6805      	ldr	r5, [r0, #0]
 801627e:	4662      	mov	r2, ip
 8016280:	7b04      	ldrb	r4, [r0, #12]
 8016282:	4660      	mov	r0, ip
 8016284:	f10c 0c01 	add.w	ip, ip, #1
 8016288:	fbb2 f3f1 	udiv	r3, r2, r1
 801628c:	fb01 2313 	mls	r3, r1, r3, r2
 8016290:	fa1f f28c 	uxth.w	r2, ip
 8016294:	b29b      	uxth	r3, r3
 8016296:	fb0e f303 	mul.w	r3, lr, r3
 801629a:	58eb      	ldr	r3, [r5, r3]
 801629c:	429c      	cmp	r4, r3
 801629e:	d101      	bne.n	80162a4 <get_available_free_slots+0x38>
 80162a0:	3001      	adds	r0, #1
 80162a2:	b280      	uxth	r0, r0
 80162a4:	428a      	cmp	r2, r1
 80162a6:	d3ed      	bcc.n	8016284 <get_available_free_slots+0x18>
 80162a8:	bd30      	pop	{r4, r5, pc}
 80162aa:	4608      	mov	r0, r1
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop

080162b0 <uxr_buffer_cancel_data>:
 80162b0:	b510      	push	{r4, lr}
 80162b2:	2300      	movs	r3, #0
 80162b4:	b094      	sub	sp, #80	@ 0x50
 80162b6:	4604      	mov	r4, r0
 80162b8:	9205      	str	r2, [sp, #20]
 80162ba:	9301      	str	r3, [sp, #4]
 80162bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80162c0:	f88d 301e 	strb.w	r3, [sp, #30]
 80162c4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80162c8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80162cc:	2308      	movs	r3, #8
 80162ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80162d2:	2201      	movs	r2, #1
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80162d8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80162dc:	2210      	movs	r2, #16
 80162de:	f7fb fafd 	bl	80118dc <uxr_prepare_stream_to_write_submessage>
 80162e2:	b918      	cbnz	r0, 80162ec <uxr_buffer_cancel_data+0x3c>
 80162e4:	4604      	mov	r4, r0
 80162e6:	4620      	mov	r0, r4
 80162e8:	b014      	add	sp, #80	@ 0x50
 80162ea:	bd10      	pop	{r4, pc}
 80162ec:	9905      	ldr	r1, [sp, #20]
 80162ee:	aa06      	add	r2, sp, #24
 80162f0:	4620      	mov	r0, r4
 80162f2:	f7fb fc2f 	bl	8011b54 <uxr_init_base_object_request>
 80162f6:	4604      	mov	r4, r0
 80162f8:	a906      	add	r1, sp, #24
 80162fa:	a80c      	add	r0, sp, #48	@ 0x30
 80162fc:	f7fc fe42 	bl	8012f84 <uxr_serialize_READ_DATA_Payload>
 8016300:	4620      	mov	r0, r4
 8016302:	b014      	add	sp, #80	@ 0x50
 8016304:	bd10      	pop	{r4, pc}
 8016306:	bf00      	nop

08016308 <read_submessage_format>:
 8016308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801630c:	b095      	sub	sp, #84	@ 0x54
 801630e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8016312:	b113      	cbz	r3, 801631a <read_submessage_format+0x12>
 8016314:	b015      	add	sp, #84	@ 0x54
 8016316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801631a:	4606      	mov	r6, r0
 801631c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801631e:	460c      	mov	r4, r1
 8016320:	4615      	mov	r5, r2
 8016322:	9004      	str	r0, [sp, #16]
 8016324:	4699      	mov	r9, r3
 8016326:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016328:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801632c:	9005      	str	r0, [sp, #20]
 801632e:	a80c      	add	r0, sp, #48	@ 0x30
 8016330:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016334:	1a52      	subs	r2, r2, r1
 8016336:	f7fa f98f 	bl	8010658 <ucdr_init_buffer>
 801633a:	a80c      	add	r0, sp, #48	@ 0x30
 801633c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016340:	f7fa f95e 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8016344:	69e2      	ldr	r2, [r4, #28]
 8016346:	b19a      	cbz	r2, 8016370 <read_submessage_format+0x68>
 8016348:	f1b8 0f07 	cmp.w	r8, #7
 801634c:	f882 9014 	strb.w	r9, [r2, #20]
 8016350:	d040      	beq.n	80163d4 <read_submessage_format+0xcc>
 8016352:	f1b8 0f08 	cmp.w	r8, #8
 8016356:	d02e      	beq.n	80163b6 <read_submessage_format+0xae>
 8016358:	f1b8 0f06 	cmp.w	r8, #6
 801635c:	d011      	beq.n	8016382 <read_submessage_format+0x7a>
 801635e:	2301      	movs	r3, #1
 8016360:	7513      	strb	r3, [r2, #20]
 8016362:	4629      	mov	r1, r5
 8016364:	4620      	mov	r0, r4
 8016366:	f7fa f9cb 	bl	8010700 <ucdr_advance_buffer>
 801636a:	b015      	add	sp, #84	@ 0x54
 801636c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016370:	f1b8 0f07 	cmp.w	r8, #7
 8016374:	d02e      	beq.n	80163d4 <read_submessage_format+0xcc>
 8016376:	f1b8 0f08 	cmp.w	r8, #8
 801637a:	d01c      	beq.n	80163b6 <read_submessage_format+0xae>
 801637c:	f1b8 0f06 	cmp.w	r8, #6
 8016380:	d1ef      	bne.n	8016362 <read_submessage_format+0x5a>
 8016382:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8016386:	f1b8 0f00 	cmp.w	r8, #0
 801638a:	d011      	beq.n	80163b0 <read_submessage_format+0xa8>
 801638c:	ab0c      	add	r3, sp, #48	@ 0x30
 801638e:	9501      	str	r5, [sp, #4]
 8016390:	463a      	mov	r2, r7
 8016392:	4630      	mov	r0, r6
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	2306      	movs	r3, #6
 8016398:	f88d 3016 	strb.w	r3, [sp, #22]
 801639c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 80163a0:	9302      	str	r3, [sp, #8]
 80163a2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80163a6:	47c0      	blx	r8
 80163a8:	2301      	movs	r3, #1
 80163aa:	69e2      	ldr	r2, [r4, #28]
 80163ac:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80163b0:	2a00      	cmp	r2, #0
 80163b2:	d1d4      	bne.n	801635e <read_submessage_format+0x56>
 80163b4:	e7d5      	b.n	8016362 <read_submessage_format+0x5a>
 80163b6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d0f8      	beq.n	80163b0 <read_submessage_format+0xa8>
 80163be:	a80c      	add	r0, sp, #48	@ 0x30
 80163c0:	a906      	add	r1, sp, #24
 80163c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80163c6:	f7fc fe91 	bl	80130ec <uxr_deserialize_SampleIdentity>
 80163ca:	b9a0      	cbnz	r0, 80163f6 <read_submessage_format+0xee>
 80163cc:	69e2      	ldr	r2, [r4, #28]
 80163ce:	2a00      	cmp	r2, #0
 80163d0:	d1c5      	bne.n	801635e <read_submessage_format+0x56>
 80163d2:	e7c6      	b.n	8016362 <read_submessage_format+0x5a>
 80163d4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80163d8:	b13b      	cbz	r3, 80163ea <read_submessage_format+0xe2>
 80163da:	a906      	add	r1, sp, #24
 80163dc:	a80c      	add	r0, sp, #48	@ 0x30
 80163de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80163e2:	f7fc fb6f 	bl	8012ac4 <uxr_deserialize_BaseObjectRequest>
 80163e6:	bb60      	cbnz	r0, 8016442 <read_submessage_format+0x13a>
 80163e8:	69e2      	ldr	r2, [r4, #28]
 80163ea:	68a3      	ldr	r3, [r4, #8]
 80163ec:	442b      	add	r3, r5
 80163ee:	60a3      	str	r3, [r4, #8]
 80163f0:	2a00      	cmp	r2, #0
 80163f2:	d1b4      	bne.n	801635e <read_submessage_format+0x56>
 80163f4:	e7b5      	b.n	8016362 <read_submessage_format+0x5a>
 80163f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80163f8:	a80c      	add	r0, sp, #48	@ 0x30
 80163fa:	eba8 0803 	sub.w	r8, r8, r3
 80163fe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016402:	44a8      	add	r8, r5
 8016404:	1a52      	subs	r2, r2, r1
 8016406:	f7fa f927 	bl	8010658 <ucdr_init_buffer>
 801640a:	a80c      	add	r0, sp, #48	@ 0x30
 801640c:	fa1f f888 	uxth.w	r8, r8
 8016410:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016414:	f7fa f8f4 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8016418:	ab0c      	add	r3, sp, #48	@ 0x30
 801641a:	2108      	movs	r1, #8
 801641c:	f8cd 8004 	str.w	r8, [sp, #4]
 8016420:	9300      	str	r3, [sp, #0]
 8016422:	463a      	mov	r2, r7
 8016424:	f88d 1016 	strb.w	r1, [sp, #22]
 8016428:	ab06      	add	r3, sp, #24
 801642a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801642e:	4630      	mov	r0, r6
 8016430:	9102      	str	r1, [sp, #8]
 8016432:	9905      	ldr	r1, [sp, #20]
 8016434:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8016438:	47b8      	blx	r7
 801643a:	2301      	movs	r3, #1
 801643c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016440:	e7c4      	b.n	80163cc <read_submessage_format+0xc4>
 8016442:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016446:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016448:	a80c      	add	r0, sp, #48	@ 0x30
 801644a:	1a52      	subs	r2, r2, r1
 801644c:	eba8 0803 	sub.w	r8, r8, r3
 8016450:	f7fa f902 	bl	8010658 <ucdr_init_buffer>
 8016454:	a80c      	add	r0, sp, #48	@ 0x30
 8016456:	44a8      	add	r8, r5
 8016458:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801645c:	f7fa f8d0 	bl	8010600 <ucdr_set_on_full_buffer_callback>
 8016460:	ab0c      	add	r3, sp, #48	@ 0x30
 8016462:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016466:	fa1f f888 	uxth.w	r8, r8
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	463a      	mov	r2, r7
 801646e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016472:	4630      	mov	r0, r6
 8016474:	f8cd 8004 	str.w	r8, [sp, #4]
 8016478:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801647c:	2107      	movs	r1, #7
 801647e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016482:	b29b      	uxth	r3, r3
 8016484:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8016488:	9102      	str	r1, [sp, #8]
 801648a:	9905      	ldr	r1, [sp, #20]
 801648c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8016490:	47b8      	blx	r7
 8016492:	2301      	movs	r3, #1
 8016494:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016498:	e7a6      	b.n	80163e8 <read_submessage_format+0xe0>
 801649a:	bf00      	nop

0801649c <uxr_seq_num_add>:
 801649c:	4408      	add	r0, r1
 801649e:	b280      	uxth	r0, r0
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop

080164a4 <uxr_seq_num_sub>:
 80164a4:	1a40      	subs	r0, r0, r1
 80164a6:	b280      	uxth	r0, r0
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop

080164ac <uxr_seq_num_cmp>:
 80164ac:	4288      	cmp	r0, r1
 80164ae:	d011      	beq.n	80164d4 <uxr_seq_num_cmp+0x28>
 80164b0:	d309      	bcc.n	80164c6 <uxr_seq_num_cmp+0x1a>
 80164b2:	4288      	cmp	r0, r1
 80164b4:	d910      	bls.n	80164d8 <uxr_seq_num_cmp+0x2c>
 80164b6:	1a40      	subs	r0, r0, r1
 80164b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80164bc:	bfd4      	ite	le
 80164be:	2001      	movle	r0, #1
 80164c0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80164c4:	4770      	bx	lr
 80164c6:	1a0b      	subs	r3, r1, r0
 80164c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80164cc:	daf1      	bge.n	80164b2 <uxr_seq_num_cmp+0x6>
 80164ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164d2:	4770      	bx	lr
 80164d4:	2000      	movs	r0, #0
 80164d6:	4770      	bx	lr
 80164d8:	2001      	movs	r0, #1
 80164da:	4770      	bx	lr

080164dc <uxr_init_framing_io>:
 80164dc:	2300      	movs	r3, #0
 80164de:	7041      	strb	r1, [r0, #1]
 80164e0:	7003      	strb	r3, [r0, #0]
 80164e2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop

080164e8 <uxr_write_framed_msg>:
 80164e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ec:	4617      	mov	r7, r2
 80164ee:	7842      	ldrb	r2, [r0, #1]
 80164f0:	460e      	mov	r6, r1
 80164f2:	b083      	sub	sp, #12
 80164f4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80164f8:	469b      	mov	fp, r3
 80164fa:	237e      	movs	r3, #126	@ 0x7e
 80164fc:	4604      	mov	r4, r0
 80164fe:	2901      	cmp	r1, #1
 8016500:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8016504:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8016508:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801650c:	f240 8115 	bls.w	801673a <uxr_write_framed_msg+0x252>
 8016510:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016514:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8016518:	2202      	movs	r2, #2
 801651a:	2901      	cmp	r1, #1
 801651c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016520:	d952      	bls.n	80165c8 <uxr_write_framed_msg+0xe0>
 8016522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016524:	2103      	movs	r1, #3
 8016526:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801652a:	b2dd      	uxtb	r5, r3
 801652c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8016530:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016534:	2a01      	cmp	r2, #1
 8016536:	d95c      	bls.n	80165f2 <uxr_write_framed_msg+0x10a>
 8016538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801653a:	1862      	adds	r2, r4, r1
 801653c:	3101      	adds	r1, #1
 801653e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016542:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8016546:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801654a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801654e:	2a01      	cmp	r2, #1
 8016550:	d961      	bls.n	8016616 <uxr_write_framed_msg+0x12e>
 8016552:	1c4a      	adds	r2, r1, #1
 8016554:	4421      	add	r1, r4
 8016556:	b2d2      	uxtb	r2, r2
 8016558:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801655c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016560:	2b00      	cmp	r3, #0
 8016562:	d06a      	beq.n	801663a <uxr_write_framed_msg+0x152>
 8016564:	f04f 0800 	mov.w	r8, #0
 8016568:	46c1      	mov	r9, r8
 801656a:	e016      	b.n	801659a <uxr_write_framed_msg+0xb2>
 801656c:	2a29      	cmp	r2, #41	@ 0x29
 801656e:	d868      	bhi.n	8016642 <uxr_write_framed_msg+0x15a>
 8016570:	18a0      	adds	r0, r4, r2
 8016572:	3201      	adds	r2, #1
 8016574:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016578:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801657c:	ea88 0101 	eor.w	r1, r8, r1
 8016580:	4b7d      	ldr	r3, [pc, #500]	@ (8016778 <uxr_write_framed_msg+0x290>)
 8016582:	f109 0901 	add.w	r9, r9, #1
 8016586:	b2c9      	uxtb	r1, r1
 8016588:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801658c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8016590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016592:	454b      	cmp	r3, r9
 8016594:	d969      	bls.n	801666a <uxr_write_framed_msg+0x182>
 8016596:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801659a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801659e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80165a2:	2801      	cmp	r0, #1
 80165a4:	d8e2      	bhi.n	801656c <uxr_write_framed_msg+0x84>
 80165a6:	1c50      	adds	r0, r2, #1
 80165a8:	b2c0      	uxtb	r0, r0
 80165aa:	2829      	cmp	r0, #41	@ 0x29
 80165ac:	d849      	bhi.n	8016642 <uxr_write_framed_msg+0x15a>
 80165ae:	18a0      	adds	r0, r4, r2
 80165b0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80165b4:	3202      	adds	r2, #2
 80165b6:	f081 0520 	eor.w	r5, r1, #32
 80165ba:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80165be:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80165c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80165c6:	e7d9      	b.n	801657c <uxr_write_framed_msg+0x94>
 80165c8:	2104      	movs	r1, #4
 80165ca:	f04f 0c03 	mov.w	ip, #3
 80165ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165d0:	4422      	add	r2, r4
 80165d2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80165d6:	44a4      	add	ip, r4
 80165d8:	b2dd      	uxtb	r5, r3
 80165da:	f080 0020 	eor.w	r0, r0, #32
 80165de:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80165e2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80165e6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80165ea:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80165ee:	2a01      	cmp	r2, #1
 80165f0:	d8a2      	bhi.n	8016538 <uxr_write_framed_msg+0x50>
 80165f2:	1862      	adds	r2, r4, r1
 80165f4:	207d      	movs	r0, #125	@ 0x7d
 80165f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165f8:	f085 0520 	eor.w	r5, r5, #32
 80165fc:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8016600:	3102      	adds	r1, #2
 8016602:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016606:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801660a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801660e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8016612:	2a01      	cmp	r2, #1
 8016614:	d89d      	bhi.n	8016552 <uxr_write_framed_msg+0x6a>
 8016616:	1c4d      	adds	r5, r1, #1
 8016618:	1c8a      	adds	r2, r1, #2
 801661a:	f080 0020 	eor.w	r0, r0, #32
 801661e:	4421      	add	r1, r4
 8016620:	fa54 f585 	uxtab	r5, r4, r5
 8016624:	b2d2      	uxtb	r2, r2
 8016626:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801662a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801662e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8016632:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016636:	2b00      	cmp	r3, #0
 8016638:	d194      	bne.n	8016564 <uxr_write_framed_msg+0x7c>
 801663a:	4619      	mov	r1, r3
 801663c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016640:	e019      	b.n	8016676 <uxr_write_framed_msg+0x18e>
 8016642:	2500      	movs	r5, #0
 8016644:	e000      	b.n	8016648 <uxr_write_framed_msg+0x160>
 8016646:	b160      	cbz	r0, 8016662 <uxr_write_framed_msg+0x17a>
 8016648:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801664c:	1b52      	subs	r2, r2, r5
 801664e:	4653      	mov	r3, sl
 8016650:	4638      	mov	r0, r7
 8016652:	4421      	add	r1, r4
 8016654:	47b0      	blx	r6
 8016656:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801665a:	4405      	add	r5, r0
 801665c:	4295      	cmp	r5, r2
 801665e:	d3f2      	bcc.n	8016646 <uxr_write_framed_msg+0x15e>
 8016660:	d066      	beq.n	8016730 <uxr_write_framed_msg+0x248>
 8016662:	2000      	movs	r0, #0
 8016664:	b003      	add	sp, #12
 8016666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801666a:	fa5f f188 	uxtb.w	r1, r8
 801666e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016672:	f8ad 8004 	strh.w	r8, [sp, #4]
 8016676:	f04f 0900 	mov.w	r9, #0
 801667a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801667e:	46c8      	mov	r8, r9
 8016680:	e013      	b.n	80166aa <uxr_write_framed_msg+0x1c2>
 8016682:	2a29      	cmp	r2, #41	@ 0x29
 8016684:	d824      	bhi.n	80166d0 <uxr_write_framed_msg+0x1e8>
 8016686:	18a3      	adds	r3, r4, r2
 8016688:	3201      	adds	r2, #1
 801668a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801668e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016692:	f109 0901 	add.w	r9, r9, #1
 8016696:	f1b9 0f02 	cmp.w	r9, #2
 801669a:	d02d      	beq.n	80166f8 <uxr_write_framed_msg+0x210>
 801669c:	f109 0308 	add.w	r3, r9, #8
 80166a0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80166a4:	446b      	add	r3, sp
 80166a6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80166aa:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80166ae:	2b01      	cmp	r3, #1
 80166b0:	d8e7      	bhi.n	8016682 <uxr_write_framed_msg+0x19a>
 80166b2:	1c53      	adds	r3, r2, #1
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	2b29      	cmp	r3, #41	@ 0x29
 80166b8:	d80a      	bhi.n	80166d0 <uxr_write_framed_msg+0x1e8>
 80166ba:	18a3      	adds	r3, r4, r2
 80166bc:	f081 0120 	eor.w	r1, r1, #32
 80166c0:	3202      	adds	r2, #2
 80166c2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80166c6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80166ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80166ce:	e7e0      	b.n	8016692 <uxr_write_framed_msg+0x1aa>
 80166d0:	2500      	movs	r5, #0
 80166d2:	e001      	b.n	80166d8 <uxr_write_framed_msg+0x1f0>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	d0c4      	beq.n	8016662 <uxr_write_framed_msg+0x17a>
 80166d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80166dc:	1b52      	subs	r2, r2, r5
 80166de:	4653      	mov	r3, sl
 80166e0:	4638      	mov	r0, r7
 80166e2:	4421      	add	r1, r4
 80166e4:	47b0      	blx	r6
 80166e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80166ea:	4405      	add	r5, r0
 80166ec:	4295      	cmp	r5, r2
 80166ee:	d3f1      	bcc.n	80166d4 <uxr_write_framed_msg+0x1ec>
 80166f0:	d1b7      	bne.n	8016662 <uxr_write_framed_msg+0x17a>
 80166f2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80166f6:	e7d1      	b.n	801669c <uxr_write_framed_msg+0x1b4>
 80166f8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80166fc:	b19a      	cbz	r2, 8016726 <uxr_write_framed_msg+0x23e>
 80166fe:	2500      	movs	r5, #0
 8016700:	e001      	b.n	8016706 <uxr_write_framed_msg+0x21e>
 8016702:	2800      	cmp	r0, #0
 8016704:	d0ad      	beq.n	8016662 <uxr_write_framed_msg+0x17a>
 8016706:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801670a:	1b52      	subs	r2, r2, r5
 801670c:	4653      	mov	r3, sl
 801670e:	4638      	mov	r0, r7
 8016710:	4421      	add	r1, r4
 8016712:	47b0      	blx	r6
 8016714:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016718:	4405      	add	r5, r0
 801671a:	4295      	cmp	r5, r2
 801671c:	d3f1      	bcc.n	8016702 <uxr_write_framed_msg+0x21a>
 801671e:	d1a0      	bne.n	8016662 <uxr_write_framed_msg+0x17a>
 8016720:	2300      	movs	r3, #0
 8016722:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016728:	b298      	uxth	r0, r3
 801672a:	b003      	add	sp, #12
 801672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016730:	f04f 0300 	mov.w	r3, #0
 8016734:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016738:	e72a      	b.n	8016590 <uxr_write_framed_msg+0xa8>
 801673a:	217d      	movs	r1, #125	@ 0x7d
 801673c:	f082 0220 	eor.w	r2, r2, #32
 8016740:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8016744:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016748:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801674c:	2203      	movs	r2, #3
 801674e:	2901      	cmp	r1, #1
 8016750:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016754:	d803      	bhi.n	801675e <uxr_write_framed_msg+0x276>
 8016756:	2105      	movs	r1, #5
 8016758:	f04f 0c04 	mov.w	ip, #4
 801675c:	e737      	b.n	80165ce <uxr_write_framed_msg+0xe6>
 801675e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016760:	2104      	movs	r1, #4
 8016762:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016766:	b2dd      	uxtb	r5, r3
 8016768:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801676c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016770:	2a01      	cmp	r2, #1
 8016772:	f63f aee1 	bhi.w	8016538 <uxr_write_framed_msg+0x50>
 8016776:	e73c      	b.n	80165f2 <uxr_write_framed_msg+0x10a>
 8016778:	080195d0 	.word	0x080195d0

0801677c <uxr_framing_read_transport>:
 801677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016780:	4604      	mov	r4, r0
 8016782:	b085      	sub	sp, #20
 8016784:	4692      	mov	sl, r2
 8016786:	4689      	mov	r9, r1
 8016788:	461d      	mov	r5, r3
 801678a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801678c:	f7fb fb98 	bl	8011ec0 <uxr_millis>
 8016790:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016794:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8016798:	4680      	mov	r8, r0
 801679a:	42ba      	cmp	r2, r7
 801679c:	d05f      	beq.n	801685e <uxr_framing_read_transport+0xe2>
 801679e:	d817      	bhi.n	80167d0 <uxr_framing_read_transport+0x54>
 80167a0:	3f01      	subs	r7, #1
 80167a2:	1aba      	subs	r2, r7, r2
 80167a4:	2700      	movs	r7, #0
 80167a6:	b2d2      	uxtb	r2, r2
 80167a8:	42b2      	cmp	r2, r6
 80167aa:	d81a      	bhi.n	80167e2 <uxr_framing_read_transport+0x66>
 80167ac:	19d3      	adds	r3, r2, r7
 80167ae:	42b3      	cmp	r3, r6
 80167b0:	d852      	bhi.n	8016858 <uxr_framing_read_transport+0xdc>
 80167b2:	b9d2      	cbnz	r2, 80167ea <uxr_framing_read_transport+0x6e>
 80167b4:	2600      	movs	r6, #0
 80167b6:	f7fb fb83 	bl	8011ec0 <uxr_millis>
 80167ba:	682b      	ldr	r3, [r5, #0]
 80167bc:	eba0 0008 	sub.w	r0, r0, r8
 80167c0:	1a1b      	subs	r3, r3, r0
 80167c2:	4630      	mov	r0, r6
 80167c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80167c8:	602b      	str	r3, [r5, #0]
 80167ca:	b005      	add	sp, #20
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d0:	2f00      	cmp	r7, #0
 80167d2:	d060      	beq.n	8016896 <uxr_framing_read_transport+0x11a>
 80167d4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80167d8:	3f01      	subs	r7, #1
 80167da:	b2d2      	uxtb	r2, r2
 80167dc:	b2ff      	uxtb	r7, r7
 80167de:	42b2      	cmp	r2, r6
 80167e0:	d9e4      	bls.n	80167ac <uxr_framing_read_transport+0x30>
 80167e2:	b2f2      	uxtb	r2, r6
 80167e4:	2700      	movs	r7, #0
 80167e6:	2a00      	cmp	r2, #0
 80167e8:	d0e4      	beq.n	80167b4 <uxr_framing_read_transport+0x38>
 80167ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167ec:	4650      	mov	r0, sl
 80167ee:	9203      	str	r2, [sp, #12]
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80167f6:	682b      	ldr	r3, [r5, #0]
 80167f8:	3102      	adds	r1, #2
 80167fa:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 80168a0 <uxr_framing_read_transport+0x124>
 80167fe:	4421      	add	r1, r4
 8016800:	47c8      	blx	r9
 8016802:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016806:	4606      	mov	r6, r0
 8016808:	4403      	add	r3, r0
 801680a:	0859      	lsrs	r1, r3, #1
 801680c:	fbab 2101 	umull	r2, r1, fp, r1
 8016810:	222a      	movs	r2, #42	@ 0x2a
 8016812:	0889      	lsrs	r1, r1, #2
 8016814:	fb02 3111 	mls	r1, r2, r1, r3
 8016818:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801681c:	2800      	cmp	r0, #0
 801681e:	d0c9      	beq.n	80167b4 <uxr_framing_read_transport+0x38>
 8016820:	9a03      	ldr	r2, [sp, #12]
 8016822:	4290      	cmp	r0, r2
 8016824:	d1c7      	bne.n	80167b6 <uxr_framing_read_transport+0x3a>
 8016826:	2f00      	cmp	r7, #0
 8016828:	d0c5      	beq.n	80167b6 <uxr_framing_read_transport+0x3a>
 801682a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801682c:	3102      	adds	r1, #2
 801682e:	463a      	mov	r2, r7
 8016830:	4650      	mov	r0, sl
 8016832:	4421      	add	r1, r4
 8016834:	9300      	str	r3, [sp, #0]
 8016836:	2300      	movs	r3, #0
 8016838:	47c8      	blx	r9
 801683a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801683e:	4406      	add	r6, r0
 8016840:	1813      	adds	r3, r2, r0
 8016842:	085a      	lsrs	r2, r3, #1
 8016844:	fbab 1b02 	umull	r1, fp, fp, r2
 8016848:	222a      	movs	r2, #42	@ 0x2a
 801684a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801684e:	fb02 331b 	mls	r3, r2, fp, r3
 8016852:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016856:	e7ae      	b.n	80167b6 <uxr_framing_read_transport+0x3a>
 8016858:	1ab6      	subs	r6, r6, r2
 801685a:	b2f7      	uxtb	r7, r6
 801685c:	e7a9      	b.n	80167b2 <uxr_framing_read_transport+0x36>
 801685e:	2300      	movs	r3, #0
 8016860:	2e28      	cmp	r6, #40	@ 0x28
 8016862:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8016864:	d9bd      	bls.n	80167e2 <uxr_framing_read_transport+0x66>
 8016866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016868:	2229      	movs	r2, #41	@ 0x29
 801686a:	1ca1      	adds	r1, r4, #2
 801686c:	4650      	mov	r0, sl
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	682b      	ldr	r3, [r5, #0]
 8016872:	47c8      	blx	r9
 8016874:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016878:	4606      	mov	r6, r0
 801687a:	212a      	movs	r1, #42	@ 0x2a
 801687c:	4403      	add	r3, r0
 801687e:	4808      	ldr	r0, [pc, #32]	@ (80168a0 <uxr_framing_read_transport+0x124>)
 8016880:	085a      	lsrs	r2, r3, #1
 8016882:	fba0 0202 	umull	r0, r2, r0, r2
 8016886:	0892      	lsrs	r2, r2, #2
 8016888:	fb01 3312 	mls	r3, r1, r2, r3
 801688c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016890:	2e00      	cmp	r6, #0
 8016892:	d08f      	beq.n	80167b4 <uxr_framing_read_transport+0x38>
 8016894:	e78f      	b.n	80167b6 <uxr_framing_read_transport+0x3a>
 8016896:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801689a:	b2d2      	uxtb	r2, r2
 801689c:	e784      	b.n	80167a8 <uxr_framing_read_transport+0x2c>
 801689e:	bf00      	nop
 80168a0:	30c30c31 	.word	0x30c30c31

080168a4 <uxr_read_framed_msg>:
 80168a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a8:	461e      	mov	r6, r3
 80168aa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80168ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80168b2:	b083      	sub	sp, #12
 80168b4:	4604      	mov	r4, r0
 80168b6:	4688      	mov	r8, r1
 80168b8:	429d      	cmp	r5, r3
 80168ba:	4691      	mov	r9, r2
 80168bc:	f000 818c 	beq.w	8016bd8 <uxr_read_framed_msg+0x334>
 80168c0:	7823      	ldrb	r3, [r4, #0]
 80168c2:	4dc3      	ldr	r5, [pc, #780]	@ (8016bd0 <uxr_read_framed_msg+0x32c>)
 80168c4:	4fc3      	ldr	r7, [pc, #780]	@ (8016bd4 <uxr_read_framed_msg+0x330>)
 80168c6:	2b07      	cmp	r3, #7
 80168c8:	d8fd      	bhi.n	80168c6 <uxr_read_framed_msg+0x22>
 80168ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80168ce:	011c      	.short	0x011c
 80168d0:	00d900fb 	.word	0x00d900fb
 80168d4:	008f00ba 	.word	0x008f00ba
 80168d8:	00320051 	.word	0x00320051
 80168dc:	0008      	.short	0x0008
 80168de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80168e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80168e6:	4299      	cmp	r1, r3
 80168e8:	f000 814d 	beq.w	8016b86 <uxr_read_framed_msg+0x2e2>
 80168ec:	18e2      	adds	r2, r4, r3
 80168ee:	7892      	ldrb	r2, [r2, #2]
 80168f0:	2a7d      	cmp	r2, #125	@ 0x7d
 80168f2:	f000 81b8 	beq.w	8016c66 <uxr_read_framed_msg+0x3c2>
 80168f6:	3301      	adds	r3, #1
 80168f8:	212a      	movs	r1, #42	@ 0x2a
 80168fa:	2a7e      	cmp	r2, #126	@ 0x7e
 80168fc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016900:	fba5 c000 	umull	ip, r0, r5, r0
 8016904:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016908:	fb01 3310 	mls	r3, r1, r0, r3
 801690c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016910:	f000 8257 	beq.w	8016dc2 <uxr_read_framed_msg+0x51e>
 8016914:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016916:	2000      	movs	r0, #0
 8016918:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801691a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801691e:	7020      	strb	r0, [r4, #0]
 8016920:	b29b      	uxth	r3, r3
 8016922:	4299      	cmp	r1, r3
 8016924:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016926:	f000 8178 	beq.w	8016c1a <uxr_read_framed_msg+0x376>
 801692a:	2000      	movs	r0, #0
 801692c:	b003      	add	sp, #12
 801692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016932:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016936:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801693a:	4298      	cmp	r0, r3
 801693c:	f000 8132 	beq.w	8016ba4 <uxr_read_framed_msg+0x300>
 8016940:	18e2      	adds	r2, r4, r3
 8016942:	7891      	ldrb	r1, [r2, #2]
 8016944:	297d      	cmp	r1, #125	@ 0x7d
 8016946:	f000 8170 	beq.w	8016c2a <uxr_read_framed_msg+0x386>
 801694a:	3301      	adds	r3, #1
 801694c:	202a      	movs	r0, #42	@ 0x2a
 801694e:	297e      	cmp	r1, #126	@ 0x7e
 8016950:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016954:	fba5 c202 	umull	ip, r2, r5, r2
 8016958:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801695c:	fb00 3312 	mls	r3, r0, r2, r3
 8016960:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016964:	f000 821d 	beq.w	8016da2 <uxr_read_framed_msg+0x4fe>
 8016968:	2307      	movs	r3, #7
 801696a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801696c:	7023      	strb	r3, [r4, #0]
 801696e:	e7aa      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016970:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016972:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016976:	459e      	cmp	lr, r3
 8016978:	d827      	bhi.n	80169ca <uxr_read_framed_msg+0x126>
 801697a:	e032      	b.n	80169e2 <uxr_read_framed_msg+0x13e>
 801697c:	fba5 b101 	umull	fp, r1, r5, r1
 8016980:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016984:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016988:	0889      	lsrs	r1, r1, #2
 801698a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801698e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016992:	f000 80d4 	beq.w	8016b3e <uxr_read_framed_msg+0x29a>
 8016996:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801699a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801699e:	f000 80cb 	beq.w	8016b38 <uxr_read_framed_msg+0x294>
 80169a2:	f806 c003 	strb.w	ip, [r6, r3]
 80169a6:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80169a8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80169aa:	ea80 010c 	eor.w	r1, r0, ip
 80169ae:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80169b2:	3301      	adds	r3, #1
 80169b4:	b2c9      	uxtb	r1, r1
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80169bc:	4573      	cmp	r3, lr
 80169be:	8663      	strh	r3, [r4, #50]	@ 0x32
 80169c0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80169c4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80169c6:	f080 811d 	bcs.w	8016c04 <uxr_read_framed_msg+0x360>
 80169ca:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80169ce:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80169d2:	1c50      	adds	r0, r2, #1
 80169d4:	eb04 0c02 	add.w	ip, r4, r2
 80169d8:	4592      	cmp	sl, r2
 80169da:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80169de:	d1cd      	bne.n	801697c <uxr_read_framed_msg+0xd8>
 80169e0:	459e      	cmp	lr, r3
 80169e2:	f040 8114 	bne.w	8016c0e <uxr_read_framed_msg+0x36a>
 80169e6:	2306      	movs	r3, #6
 80169e8:	7023      	strb	r3, [r4, #0]
 80169ea:	e76c      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 80169ec:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80169f0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80169f4:	4298      	cmp	r0, r3
 80169f6:	f000 80c6 	beq.w	8016b86 <uxr_read_framed_msg+0x2e2>
 80169fa:	18e2      	adds	r2, r4, r3
 80169fc:	7891      	ldrb	r1, [r2, #2]
 80169fe:	297d      	cmp	r1, #125	@ 0x7d
 8016a00:	f000 8193 	beq.w	8016d2a <uxr_read_framed_msg+0x486>
 8016a04:	3301      	adds	r3, #1
 8016a06:	202a      	movs	r0, #42	@ 0x2a
 8016a08:	297e      	cmp	r1, #126	@ 0x7e
 8016a0a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016a0e:	fba5 c202 	umull	ip, r2, r5, r2
 8016a12:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016a16:	fb00 3312 	mls	r3, r0, r2, r3
 8016a1a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016a1e:	f000 81d0 	beq.w	8016dc2 <uxr_read_framed_msg+0x51e>
 8016a22:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016a24:	2000      	movs	r0, #0
 8016a26:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016a2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016a2c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016a32:	428b      	cmp	r3, r1
 8016a34:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016a36:	f240 80e2 	bls.w	8016bfe <uxr_read_framed_msg+0x35a>
 8016a3a:	7020      	strb	r0, [r4, #0]
 8016a3c:	b003      	add	sp, #12
 8016a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a42:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016a46:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016a4a:	4298      	cmp	r0, r3
 8016a4c:	f000 80aa 	beq.w	8016ba4 <uxr_read_framed_msg+0x300>
 8016a50:	18e2      	adds	r2, r4, r3
 8016a52:	7891      	ldrb	r1, [r2, #2]
 8016a54:	297d      	cmp	r1, #125	@ 0x7d
 8016a56:	f000 8186 	beq.w	8016d66 <uxr_read_framed_msg+0x4c2>
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	202a      	movs	r0, #42	@ 0x2a
 8016a5e:	297e      	cmp	r1, #126	@ 0x7e
 8016a60:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016a64:	fba5 c202 	umull	ip, r2, r5, r2
 8016a68:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016a6c:	fb00 3312 	mls	r3, r0, r2, r3
 8016a70:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016a74:	f000 8195 	beq.w	8016da2 <uxr_read_framed_msg+0x4fe>
 8016a78:	2304      	movs	r3, #4
 8016a7a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8016a7c:	7023      	strb	r3, [r4, #0]
 8016a7e:	e722      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016a80:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016a84:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016a88:	4290      	cmp	r0, r2
 8016a8a:	f000 80b4 	beq.w	8016bf6 <uxr_read_framed_msg+0x352>
 8016a8e:	18a3      	adds	r3, r4, r2
 8016a90:	7899      	ldrb	r1, [r3, #2]
 8016a92:	297d      	cmp	r1, #125	@ 0x7d
 8016a94:	f000 8107 	beq.w	8016ca6 <uxr_read_framed_msg+0x402>
 8016a98:	3201      	adds	r2, #1
 8016a9a:	232a      	movs	r3, #42	@ 0x2a
 8016a9c:	297e      	cmp	r1, #126	@ 0x7e
 8016a9e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8016aa2:	fba5 c000 	umull	ip, r0, r5, r0
 8016aa6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016aaa:	fb03 2210 	mls	r2, r3, r0, r2
 8016aae:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016ab2:	f000 818a 	beq.w	8016dca <uxr_read_framed_msg+0x526>
 8016ab6:	7863      	ldrb	r3, [r4, #1]
 8016ab8:	428b      	cmp	r3, r1
 8016aba:	bf0c      	ite	eq
 8016abc:	2303      	moveq	r3, #3
 8016abe:	2300      	movne	r3, #0
 8016ac0:	7023      	strb	r3, [r4, #0]
 8016ac2:	e700      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016aca:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016ace:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016ad2:	4299      	cmp	r1, r3
 8016ad4:	d06a      	beq.n	8016bac <uxr_read_framed_msg+0x308>
 8016ad6:	18e2      	adds	r2, r4, r3
 8016ad8:	7890      	ldrb	r0, [r2, #2]
 8016ada:	287d      	cmp	r0, #125	@ 0x7d
 8016adc:	f000 8100 	beq.w	8016ce0 <uxr_read_framed_msg+0x43c>
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	212a      	movs	r1, #42	@ 0x2a
 8016ae4:	287e      	cmp	r0, #126	@ 0x7e
 8016ae6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016aea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016aee:	fba5 c202 	umull	ip, r2, r5, r2
 8016af2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016af6:	fb01 3312 	mls	r3, r1, r2, r3
 8016afa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016afe:	d055      	beq.n	8016bac <uxr_read_framed_msg+0x308>
 8016b00:	2302      	movs	r3, #2
 8016b02:	7023      	strb	r3, [r4, #0]
 8016b04:	e6df      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016b06:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8016b0a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016b0e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016b12:	1c5a      	adds	r2, r3, #1
 8016b14:	459c      	cmp	ip, r3
 8016b16:	eb04 0103 	add.w	r1, r4, r3
 8016b1a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8016b1e:	f43f af04 	beq.w	801692a <uxr_read_framed_msg+0x86>
 8016b22:	fba5 0303 	umull	r0, r3, r5, r3
 8016b26:	7889      	ldrb	r1, [r1, #2]
 8016b28:	089b      	lsrs	r3, r3, #2
 8016b2a:	297e      	cmp	r1, #126	@ 0x7e
 8016b2c:	fb0e 2313 	mls	r3, lr, r3, r2
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016b36:	d1ec      	bne.n	8016b12 <uxr_read_framed_msg+0x26e>
 8016b38:	2301      	movs	r3, #1
 8016b3a:	7023      	strb	r3, [r4, #0]
 8016b3c:	e6c3      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016b3e:	1c50      	adds	r0, r2, #1
 8016b40:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016b44:	3202      	adds	r2, #2
 8016b46:	0841      	lsrs	r1, r0, #1
 8016b48:	fba5 c101 	umull	ip, r1, r5, r1
 8016b4c:	0889      	lsrs	r1, r1, #2
 8016b4e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016b52:	1860      	adds	r0, r4, r1
 8016b54:	b2c9      	uxtb	r1, r1
 8016b56:	458a      	cmp	sl, r1
 8016b58:	f43f af42 	beq.w	80169e0 <uxr_read_framed_msg+0x13c>
 8016b5c:	0851      	lsrs	r1, r2, #1
 8016b5e:	7880      	ldrb	r0, [r0, #2]
 8016b60:	fba5 a101 	umull	sl, r1, r5, r1
 8016b64:	287e      	cmp	r0, #126	@ 0x7e
 8016b66:	f080 0c20 	eor.w	ip, r0, #32
 8016b6a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016b6e:	fb0b 2211 	mls	r2, fp, r1, r2
 8016b72:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b76:	f47f af14 	bne.w	80169a2 <uxr_read_framed_msg+0xfe>
 8016b7a:	459e      	cmp	lr, r3
 8016b7c:	f43f af33 	beq.w	80169e6 <uxr_read_framed_msg+0x142>
 8016b80:	2301      	movs	r3, #1
 8016b82:	7023      	strb	r3, [r4, #0]
 8016b84:	e69f      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b88:	9300      	str	r3, [sp, #0]
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	9301      	str	r3, [sp, #4]
 8016b8e:	464a      	mov	r2, r9
 8016b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b92:	4641      	mov	r1, r8
 8016b94:	4620      	mov	r0, r4
 8016b96:	f7ff fdf1 	bl	801677c <uxr_framing_read_transport>
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	f43f aec5 	beq.w	801692a <uxr_read_framed_msg+0x86>
 8016ba0:	7823      	ldrb	r3, [r4, #0]
 8016ba2:	e690      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ba6:	9300      	str	r3, [sp, #0]
 8016ba8:	2302      	movs	r3, #2
 8016baa:	e7ef      	b.n	8016b8c <uxr_read_framed_msg+0x2e8>
 8016bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bae:	464a      	mov	r2, r9
 8016bb0:	4641      	mov	r1, r8
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	9300      	str	r3, [sp, #0]
 8016bb6:	2304      	movs	r3, #4
 8016bb8:	9301      	str	r3, [sp, #4]
 8016bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016bbc:	f7ff fdde 	bl	801677c <uxr_framing_read_transport>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d1ed      	bne.n	8016ba0 <uxr_read_framed_msg+0x2fc>
 8016bc4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016bc8:	2b7e      	cmp	r3, #126	@ 0x7e
 8016bca:	d0e9      	beq.n	8016ba0 <uxr_read_framed_msg+0x2fc>
 8016bcc:	e6ad      	b.n	801692a <uxr_read_framed_msg+0x86>
 8016bce:	bf00      	nop
 8016bd0:	30c30c31 	.word	0x30c30c31
 8016bd4:	080195d0 	.word	0x080195d0
 8016bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bda:	9300      	str	r3, [sp, #0]
 8016bdc:	2305      	movs	r3, #5
 8016bde:	9301      	str	r3, [sp, #4]
 8016be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016be2:	f7ff fdcb 	bl	801677c <uxr_framing_read_transport>
 8016be6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016bea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	f43f ae9b 	beq.w	801692a <uxr_read_framed_msg+0x86>
 8016bf4:	e664      	b.n	80168c0 <uxr_read_framed_msg+0x1c>
 8016bf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bf8:	9300      	str	r3, [sp, #0]
 8016bfa:	2303      	movs	r3, #3
 8016bfc:	e7c6      	b.n	8016b8c <uxr_read_framed_msg+0x2e8>
 8016bfe:	2305      	movs	r3, #5
 8016c00:	7023      	strb	r3, [r4, #0]
 8016c02:	e660      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016c04:	f43f aeef 	beq.w	80169e6 <uxr_read_framed_msg+0x142>
 8016c08:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016c0c:	d094      	beq.n	8016b38 <uxr_read_framed_msg+0x294>
 8016c0e:	ebae 0303 	sub.w	r3, lr, r3
 8016c12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016c14:	3302      	adds	r3, #2
 8016c16:	9200      	str	r2, [sp, #0]
 8016c18:	e7b8      	b.n	8016b8c <uxr_read_framed_msg+0x2e8>
 8016c1a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016c1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c20:	7013      	strb	r3, [r2, #0]
 8016c22:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016c24:	b003      	add	sp, #12
 8016c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c2a:	1c59      	adds	r1, r3, #1
 8016c2c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016c30:	084a      	lsrs	r2, r1, #1
 8016c32:	fba5 e202 	umull	lr, r2, r5, r2
 8016c36:	0892      	lsrs	r2, r2, #2
 8016c38:	fb0c 1212 	mls	r2, ip, r2, r1
 8016c3c:	b2d1      	uxtb	r1, r2
 8016c3e:	4288      	cmp	r0, r1
 8016c40:	d0b0      	beq.n	8016ba4 <uxr_read_framed_msg+0x300>
 8016c42:	3302      	adds	r3, #2
 8016c44:	4422      	add	r2, r4
 8016c46:	7891      	ldrb	r1, [r2, #2]
 8016c48:	085a      	lsrs	r2, r3, #1
 8016c4a:	fba5 0202 	umull	r0, r2, r5, r2
 8016c4e:	297e      	cmp	r1, #126	@ 0x7e
 8016c50:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016c54:	fb0c 3312 	mls	r3, ip, r2, r3
 8016c58:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016c5c:	f000 80a1 	beq.w	8016da2 <uxr_read_framed_msg+0x4fe>
 8016c60:	f081 0120 	eor.w	r1, r1, #32
 8016c64:	e680      	b.n	8016968 <uxr_read_framed_msg+0xc4>
 8016c66:	f103 0c01 	add.w	ip, r3, #1
 8016c6a:	202a      	movs	r0, #42	@ 0x2a
 8016c6c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016c70:	fba5 e202 	umull	lr, r2, r5, r2
 8016c74:	0892      	lsrs	r2, r2, #2
 8016c76:	fb00 c212 	mls	r2, r0, r2, ip
 8016c7a:	fa5f fc82 	uxtb.w	ip, r2
 8016c7e:	4561      	cmp	r1, ip
 8016c80:	d081      	beq.n	8016b86 <uxr_read_framed_msg+0x2e2>
 8016c82:	3302      	adds	r3, #2
 8016c84:	4422      	add	r2, r4
 8016c86:	0859      	lsrs	r1, r3, #1
 8016c88:	7892      	ldrb	r2, [r2, #2]
 8016c8a:	fba5 c101 	umull	ip, r1, r5, r1
 8016c8e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016c90:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016c94:	fb00 3311 	mls	r3, r0, r1, r3
 8016c98:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016c9c:	f000 8091 	beq.w	8016dc2 <uxr_read_framed_msg+0x51e>
 8016ca0:	f082 0220 	eor.w	r2, r2, #32
 8016ca4:	e636      	b.n	8016914 <uxr_read_framed_msg+0x70>
 8016ca6:	1c51      	adds	r1, r2, #1
 8016ca8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016cac:	084b      	lsrs	r3, r1, #1
 8016cae:	fba5 e303 	umull	lr, r3, r5, r3
 8016cb2:	089b      	lsrs	r3, r3, #2
 8016cb4:	fb0c 1313 	mls	r3, ip, r3, r1
 8016cb8:	b2d9      	uxtb	r1, r3
 8016cba:	4288      	cmp	r0, r1
 8016cbc:	d09b      	beq.n	8016bf6 <uxr_read_framed_msg+0x352>
 8016cbe:	3202      	adds	r2, #2
 8016cc0:	4423      	add	r3, r4
 8016cc2:	0850      	lsrs	r0, r2, #1
 8016cc4:	789b      	ldrb	r3, [r3, #2]
 8016cc6:	fba5 1000 	umull	r1, r0, r5, r0
 8016cca:	2b7e      	cmp	r3, #126	@ 0x7e
 8016ccc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016cd0:	fb0c 2210 	mls	r2, ip, r0, r2
 8016cd4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016cd8:	d077      	beq.n	8016dca <uxr_read_framed_msg+0x526>
 8016cda:	f083 0120 	eor.w	r1, r3, #32
 8016cde:	e6ea      	b.n	8016ab6 <uxr_read_framed_msg+0x212>
 8016ce0:	f103 0c01 	add.w	ip, r3, #1
 8016ce4:	202a      	movs	r0, #42	@ 0x2a
 8016ce6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016cea:	fba5 e202 	umull	lr, r2, r5, r2
 8016cee:	0892      	lsrs	r2, r2, #2
 8016cf0:	fb00 c212 	mls	r2, r0, r2, ip
 8016cf4:	fa5f fc82 	uxtb.w	ip, r2
 8016cf8:	4561      	cmp	r1, ip
 8016cfa:	f43f af57 	beq.w	8016bac <uxr_read_framed_msg+0x308>
 8016cfe:	3302      	adds	r3, #2
 8016d00:	4422      	add	r2, r4
 8016d02:	7891      	ldrb	r1, [r2, #2]
 8016d04:	085a      	lsrs	r2, r3, #1
 8016d06:	fba5 c202 	umull	ip, r2, r5, r2
 8016d0a:	297e      	cmp	r1, #126	@ 0x7e
 8016d0c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016d10:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016d14:	fb00 3312 	mls	r3, r0, r2, r3
 8016d18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d1c:	f43f af46 	beq.w	8016bac <uxr_read_framed_msg+0x308>
 8016d20:	f081 0120 	eor.w	r1, r1, #32
 8016d24:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016d28:	e6ea      	b.n	8016b00 <uxr_read_framed_msg+0x25c>
 8016d2a:	1c59      	adds	r1, r3, #1
 8016d2c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016d30:	084a      	lsrs	r2, r1, #1
 8016d32:	fba5 e202 	umull	lr, r2, r5, r2
 8016d36:	0892      	lsrs	r2, r2, #2
 8016d38:	fb0c 1212 	mls	r2, ip, r2, r1
 8016d3c:	b2d1      	uxtb	r1, r2
 8016d3e:	4288      	cmp	r0, r1
 8016d40:	f43f af21 	beq.w	8016b86 <uxr_read_framed_msg+0x2e2>
 8016d44:	3302      	adds	r3, #2
 8016d46:	4422      	add	r2, r4
 8016d48:	7891      	ldrb	r1, [r2, #2]
 8016d4a:	085a      	lsrs	r2, r3, #1
 8016d4c:	fba5 0202 	umull	r0, r2, r5, r2
 8016d50:	297e      	cmp	r1, #126	@ 0x7e
 8016d52:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016d56:	fb0c 3312 	mls	r3, ip, r2, r3
 8016d5a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d5e:	d030      	beq.n	8016dc2 <uxr_read_framed_msg+0x51e>
 8016d60:	f081 0120 	eor.w	r1, r1, #32
 8016d64:	e65d      	b.n	8016a22 <uxr_read_framed_msg+0x17e>
 8016d66:	1c59      	adds	r1, r3, #1
 8016d68:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016d6c:	084a      	lsrs	r2, r1, #1
 8016d6e:	fba5 e202 	umull	lr, r2, r5, r2
 8016d72:	0892      	lsrs	r2, r2, #2
 8016d74:	fb0c 1212 	mls	r2, ip, r2, r1
 8016d78:	b2d1      	uxtb	r1, r2
 8016d7a:	4288      	cmp	r0, r1
 8016d7c:	f43f af12 	beq.w	8016ba4 <uxr_read_framed_msg+0x300>
 8016d80:	3302      	adds	r3, #2
 8016d82:	4422      	add	r2, r4
 8016d84:	7891      	ldrb	r1, [r2, #2]
 8016d86:	085a      	lsrs	r2, r3, #1
 8016d88:	fba5 0202 	umull	r0, r2, r5, r2
 8016d8c:	297e      	cmp	r1, #126	@ 0x7e
 8016d8e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016d92:	fb0c 3312 	mls	r3, ip, r2, r3
 8016d96:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016d9a:	d002      	beq.n	8016da2 <uxr_read_framed_msg+0x4fe>
 8016d9c:	f081 0120 	eor.w	r1, r1, #32
 8016da0:	e66a      	b.n	8016a78 <uxr_read_framed_msg+0x1d4>
 8016da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	2302      	movs	r3, #2
 8016da8:	9301      	str	r3, [sp, #4]
 8016daa:	464a      	mov	r2, r9
 8016dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dae:	4641      	mov	r1, r8
 8016db0:	4620      	mov	r0, r4
 8016db2:	f7ff fce3 	bl	801677c <uxr_framing_read_transport>
 8016db6:	2800      	cmp	r0, #0
 8016db8:	f47f aef2 	bne.w	8016ba0 <uxr_read_framed_msg+0x2fc>
 8016dbc:	2301      	movs	r3, #1
 8016dbe:	7023      	strb	r3, [r4, #0]
 8016dc0:	e581      	b.n	80168c6 <uxr_read_framed_msg+0x22>
 8016dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dc4:	9300      	str	r3, [sp, #0]
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	e7ee      	b.n	8016da8 <uxr_read_framed_msg+0x504>
 8016dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	2303      	movs	r3, #3
 8016dd0:	e7ea      	b.n	8016da8 <uxr_read_framed_msg+0x504>
 8016dd2:	bf00      	nop

08016dd4 <rcl_get_default_domain_id>:
 8016dd4:	b530      	push	{r4, r5, lr}
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	b083      	sub	sp, #12
 8016dda:	9300      	str	r3, [sp, #0]
 8016ddc:	b1d0      	cbz	r0, 8016e14 <rcl_get_default_domain_id+0x40>
 8016dde:	4604      	mov	r4, r0
 8016de0:	4669      	mov	r1, sp
 8016de2:	4815      	ldr	r0, [pc, #84]	@ (8016e38 <rcl_get_default_domain_id+0x64>)
 8016de4:	f7fd f91c 	bl	8014020 <rcutils_get_env>
 8016de8:	4602      	mov	r2, r0
 8016dea:	b110      	cbz	r0, 8016df2 <rcl_get_default_domain_id+0x1e>
 8016dec:	2001      	movs	r0, #1
 8016dee:	b003      	add	sp, #12
 8016df0:	bd30      	pop	{r4, r5, pc}
 8016df2:	9b00      	ldr	r3, [sp, #0]
 8016df4:	b18b      	cbz	r3, 8016e1a <rcl_get_default_domain_id+0x46>
 8016df6:	7818      	ldrb	r0, [r3, #0]
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d0f8      	beq.n	8016dee <rcl_get_default_domain_id+0x1a>
 8016dfc:	a901      	add	r1, sp, #4
 8016dfe:	4618      	mov	r0, r3
 8016e00:	9201      	str	r2, [sp, #4]
 8016e02:	f000 fe75 	bl	8017af0 <strtoul>
 8016e06:	4605      	mov	r5, r0
 8016e08:	b150      	cbz	r0, 8016e20 <rcl_get_default_domain_id+0x4c>
 8016e0a:	1c43      	adds	r3, r0, #1
 8016e0c:	d00d      	beq.n	8016e2a <rcl_get_default_domain_id+0x56>
 8016e0e:	2000      	movs	r0, #0
 8016e10:	6025      	str	r5, [r4, #0]
 8016e12:	e7ec      	b.n	8016dee <rcl_get_default_domain_id+0x1a>
 8016e14:	200b      	movs	r0, #11
 8016e16:	b003      	add	sp, #12
 8016e18:	bd30      	pop	{r4, r5, pc}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	b003      	add	sp, #12
 8016e1e:	bd30      	pop	{r4, r5, pc}
 8016e20:	9b01      	ldr	r3, [sp, #4]
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d0f2      	beq.n	8016e0e <rcl_get_default_domain_id+0x3a>
 8016e28:	e7e0      	b.n	8016dec <rcl_get_default_domain_id+0x18>
 8016e2a:	f001 f8c7 	bl	8017fbc <__errno>
 8016e2e:	6803      	ldr	r3, [r0, #0]
 8016e30:	2b22      	cmp	r3, #34	@ 0x22
 8016e32:	d1ec      	bne.n	8016e0e <rcl_get_default_domain_id+0x3a>
 8016e34:	e7da      	b.n	8016dec <rcl_get_default_domain_id+0x18>
 8016e36:	bf00      	nop
 8016e38:	080197d0 	.word	0x080197d0

08016e3c <rcl_expand_topic_name>:
 8016e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e40:	b08d      	sub	sp, #52	@ 0x34
 8016e42:	4698      	mov	r8, r3
 8016e44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016e46:	9207      	str	r2, [sp, #28]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	bf18      	it	ne
 8016e4c:	f1b8 0f00 	cmpne.w	r8, #0
 8016e50:	bf0c      	ite	eq
 8016e52:	2301      	moveq	r3, #1
 8016e54:	2300      	movne	r3, #0
 8016e56:	2a00      	cmp	r2, #0
 8016e58:	bf08      	it	eq
 8016e5a:	f043 0301 	orreq.w	r3, r3, #1
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	bf08      	it	eq
 8016e62:	f043 0301 	orreq.w	r3, r3, #1
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d13d      	bne.n	8016ee6 <rcl_expand_topic_name+0xaa>
 8016e6a:	fab0 f280 	clz	r2, r0
 8016e6e:	4604      	mov	r4, r0
 8016e70:	0952      	lsrs	r2, r2, #5
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d037      	beq.n	8016ee6 <rcl_expand_topic_name+0xaa>
 8016e76:	460f      	mov	r7, r1
 8016e78:	a90b      	add	r1, sp, #44	@ 0x2c
 8016e7a:	f000 f9ed 	bl	8017258 <rcl_validate_topic_name>
 8016e7e:	4605      	mov	r5, r0
 8016e80:	bb68      	cbnz	r0, 8016ede <rcl_expand_topic_name+0xa2>
 8016e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d137      	bne.n	8016ef8 <rcl_expand_topic_name+0xbc>
 8016e88:	4602      	mov	r2, r0
 8016e8a:	a90b      	add	r1, sp, #44	@ 0x2c
 8016e8c:	4638      	mov	r0, r7
 8016e8e:	f7fd fcf9 	bl	8014884 <rmw_validate_node_name>
 8016e92:	bb68      	cbnz	r0, 8016ef0 <rcl_expand_topic_name+0xb4>
 8016e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d133      	bne.n	8016f02 <rcl_expand_topic_name+0xc6>
 8016e9a:	462a      	mov	r2, r5
 8016e9c:	a90b      	add	r1, sp, #44	@ 0x2c
 8016e9e:	9807      	ldr	r0, [sp, #28]
 8016ea0:	f7fd fcd2 	bl	8014848 <rmw_validate_namespace>
 8016ea4:	bb20      	cbnz	r0, 8016ef0 <rcl_expand_topic_name+0xb4>
 8016ea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016ea8:	2d00      	cmp	r5, #0
 8016eaa:	f040 80a2 	bne.w	8016ff2 <rcl_expand_topic_name+0x1b6>
 8016eae:	217b      	movs	r1, #123	@ 0x7b
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f000 ffa1 	bl	8017df8 <strchr>
 8016eb6:	7823      	ldrb	r3, [r4, #0]
 8016eb8:	4681      	mov	r9, r0
 8016eba:	bb20      	cbnz	r0, 8016f06 <rcl_expand_topic_name+0xca>
 8016ebc:	2b2f      	cmp	r3, #47	@ 0x2f
 8016ebe:	d122      	bne.n	8016f06 <rcl_expand_topic_name+0xca>
 8016ec0:	ab19      	add	r3, sp, #100	@ 0x64
 8016ec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ec6:	ab16      	add	r3, sp, #88	@ 0x58
 8016ec8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016ecc:	4620      	mov	r0, r4
 8016ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016ed0:	f7fd fa08 	bl	80142e4 <rcutils_strdup>
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016ed8:	bf08      	it	eq
 8016eda:	250a      	moveq	r5, #10
 8016edc:	6018      	str	r0, [r3, #0]
 8016ede:	4628      	mov	r0, r5
 8016ee0:	b00d      	add	sp, #52	@ 0x34
 8016ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee6:	250b      	movs	r5, #11
 8016ee8:	4628      	mov	r0, r5
 8016eea:	b00d      	add	sp, #52	@ 0x34
 8016eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef0:	f7fc f926 	bl	8013140 <rcl_convert_rmw_ret_to_rcl_ret>
 8016ef4:	4605      	mov	r5, r0
 8016ef6:	e7f2      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 8016ef8:	2567      	movs	r5, #103	@ 0x67
 8016efa:	4628      	mov	r0, r5
 8016efc:	b00d      	add	sp, #52	@ 0x34
 8016efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f02:	25c9      	movs	r5, #201	@ 0xc9
 8016f04:	e7eb      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 8016f06:	2b7e      	cmp	r3, #126	@ 0x7e
 8016f08:	d075      	beq.n	8016ff6 <rcl_expand_topic_name+0x1ba>
 8016f0a:	f1b9 0f00 	cmp.w	r9, #0
 8016f0e:	f000 80c2 	beq.w	8017096 <rcl_expand_topic_name+0x25a>
 8016f12:	2300      	movs	r3, #0
 8016f14:	46a2      	mov	sl, r4
 8016f16:	461e      	mov	r6, r3
 8016f18:	9508      	str	r5, [sp, #32]
 8016f1a:	4655      	mov	r5, sl
 8016f1c:	9409      	str	r4, [sp, #36]	@ 0x24
 8016f1e:	46b2      	mov	sl, r6
 8016f20:	464c      	mov	r4, r9
 8016f22:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016f26:	2c00      	cmp	r4, #0
 8016f28:	f000 80ae 	beq.w	8017088 <rcl_expand_topic_name+0x24c>
 8016f2c:	217d      	movs	r1, #125	@ 0x7d
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f000 ff62 	bl	8017df8 <strchr>
 8016f34:	eba0 0904 	sub.w	r9, r0, r4
 8016f38:	4621      	mov	r1, r4
 8016f3a:	4869      	ldr	r0, [pc, #420]	@ (80170e0 <rcl_expand_topic_name+0x2a4>)
 8016f3c:	f109 0601 	add.w	r6, r9, #1
 8016f40:	4632      	mov	r2, r6
 8016f42:	f000 ff66 	bl	8017e12 <strncmp>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d051      	beq.n	8016fee <rcl_expand_topic_name+0x1b2>
 8016f4a:	4632      	mov	r2, r6
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	4865      	ldr	r0, [pc, #404]	@ (80170e4 <rcl_expand_topic_name+0x2a8>)
 8016f50:	f000 ff5f 	bl	8017e12 <strncmp>
 8016f54:	b128      	cbz	r0, 8016f62 <rcl_expand_topic_name+0x126>
 8016f56:	4632      	mov	r2, r6
 8016f58:	4621      	mov	r1, r4
 8016f5a:	4863      	ldr	r0, [pc, #396]	@ (80170e8 <rcl_expand_topic_name+0x2ac>)
 8016f5c:	f000 ff59 	bl	8017e12 <strncmp>
 8016f60:	bb38      	cbnz	r0, 8016fb2 <rcl_expand_topic_name+0x176>
 8016f62:	46d9      	mov	r9, fp
 8016f64:	ab18      	add	r3, sp, #96	@ 0x60
 8016f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f6a:	ab16      	add	r3, sp, #88	@ 0x58
 8016f6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f70:	4620      	mov	r0, r4
 8016f72:	4631      	mov	r1, r6
 8016f74:	cb0c      	ldmia	r3, {r2, r3}
 8016f76:	f7fd f9d7 	bl	8014328 <rcutils_strndup>
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	f000 80a3 	beq.w	80170c8 <rcl_expand_topic_name+0x28c>
 8016f82:	464a      	mov	r2, r9
 8016f84:	4628      	mov	r0, r5
 8016f86:	ab16      	add	r3, sp, #88	@ 0x58
 8016f88:	4621      	mov	r1, r4
 8016f8a:	f7fd f8ab 	bl	80140e4 <rcutils_repl_str>
 8016f8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f90:	4605      	mov	r5, r0
 8016f92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f94:	4620      	mov	r0, r4
 8016f96:	4798      	blx	r3
 8016f98:	4650      	mov	r0, sl
 8016f9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f9e:	4798      	blx	r3
 8016fa0:	2d00      	cmp	r5, #0
 8016fa2:	d06c      	beq.n	801707e <rcl_expand_topic_name+0x242>
 8016fa4:	217b      	movs	r1, #123	@ 0x7b
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f000 ff26 	bl	8017df8 <strchr>
 8016fac:	46aa      	mov	sl, r5
 8016fae:	4604      	mov	r4, r0
 8016fb0:	e7b9      	b.n	8016f26 <rcl_expand_topic_name+0xea>
 8016fb2:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016fb6:	1c61      	adds	r1, r4, #1
 8016fb8:	4640      	mov	r0, r8
 8016fba:	f7fd facd 	bl	8014558 <rcutils_string_map_getn>
 8016fbe:	4681      	mov	r9, r0
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d1cf      	bne.n	8016f64 <rcl_expand_topic_name+0x128>
 8016fc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016fc6:	aa18      	add	r2, sp, #96	@ 0x60
 8016fc8:	2569      	movs	r5, #105	@ 0x69
 8016fca:	6018      	str	r0, [r3, #0]
 8016fcc:	ab16      	add	r3, sp, #88	@ 0x58
 8016fce:	ca07      	ldmia	r2, {r0, r1, r2}
 8016fd0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016fd4:	4631      	mov	r1, r6
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	cb0c      	ldmia	r3, {r2, r3}
 8016fda:	f7fd f9a5 	bl	8014328 <rcutils_strndup>
 8016fde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fe0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016fe2:	4798      	blx	r3
 8016fe4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016fe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fe8:	4650      	mov	r0, sl
 8016fea:	4798      	blx	r3
 8016fec:	e777      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 8016fee:	46b9      	mov	r9, r7
 8016ff0:	e7b8      	b.n	8016f64 <rcl_expand_topic_name+0x128>
 8016ff2:	25ca      	movs	r5, #202	@ 0xca
 8016ff4:	e773      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 8016ff6:	9e07      	ldr	r6, [sp, #28]
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	f7e9 f97b 	bl	80002f4 <strlen>
 8016ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80170ec <rcl_expand_topic_name+0x2b0>)
 8017000:	4b3b      	ldr	r3, [pc, #236]	@ (80170f0 <rcl_expand_topic_name+0x2b4>)
 8017002:	9603      	str	r6, [sp, #12]
 8017004:	2801      	cmp	r0, #1
 8017006:	bf18      	it	ne
 8017008:	4613      	movne	r3, r2
 801700a:	9704      	str	r7, [sp, #16]
 801700c:	9302      	str	r3, [sp, #8]
 801700e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017010:	9300      	str	r3, [sp, #0]
 8017012:	1c63      	adds	r3, r4, #1
 8017014:	9305      	str	r3, [sp, #20]
 8017016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	ab16      	add	r3, sp, #88	@ 0x58
 801701e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017020:	f7fd f826 	bl	8014070 <rcutils_format_string_limit>
 8017024:	4606      	mov	r6, r0
 8017026:	b350      	cbz	r0, 801707e <rcl_expand_topic_name+0x242>
 8017028:	f1b9 0f00 	cmp.w	r9, #0
 801702c:	d005      	beq.n	801703a <rcl_expand_topic_name+0x1fe>
 801702e:	217b      	movs	r1, #123	@ 0x7b
 8017030:	46b2      	mov	sl, r6
 8017032:	f000 fee1 	bl	8017df8 <strchr>
 8017036:	4681      	mov	r9, r0
 8017038:	e76e      	b.n	8016f18 <rcl_expand_topic_name+0xdc>
 801703a:	7833      	ldrb	r3, [r6, #0]
 801703c:	2b2f      	cmp	r3, #47	@ 0x2f
 801703e:	d01b      	beq.n	8017078 <rcl_expand_topic_name+0x23c>
 8017040:	9c07      	ldr	r4, [sp, #28]
 8017042:	4620      	mov	r0, r4
 8017044:	f7e9 f956 	bl	80002f4 <strlen>
 8017048:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801704c:	4a29      	ldr	r2, [pc, #164]	@ (80170f4 <rcl_expand_topic_name+0x2b8>)
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017052:	9604      	str	r6, [sp, #16]
 8017054:	9300      	str	r3, [sp, #0]
 8017056:	4b28      	ldr	r3, [pc, #160]	@ (80170f8 <rcl_expand_topic_name+0x2bc>)
 8017058:	9403      	str	r4, [sp, #12]
 801705a:	2801      	cmp	r0, #1
 801705c:	bf18      	it	ne
 801705e:	4613      	movne	r3, r2
 8017060:	9302      	str	r3, [sp, #8]
 8017062:	ab16      	add	r3, sp, #88	@ 0x58
 8017064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017066:	f7fd f803 	bl	8014070 <rcutils_format_string_limit>
 801706a:	4603      	mov	r3, r0
 801706c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801706e:	4630      	mov	r0, r6
 8017070:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017072:	461e      	mov	r6, r3
 8017074:	4790      	blx	r2
 8017076:	b116      	cbz	r6, 801707e <rcl_expand_topic_name+0x242>
 8017078:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801707a:	601e      	str	r6, [r3, #0]
 801707c:	e72f      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 801707e:	2300      	movs	r3, #0
 8017080:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017082:	250a      	movs	r5, #10
 8017084:	6013      	str	r3, [r2, #0]
 8017086:	e72a      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 8017088:	4653      	mov	r3, sl
 801708a:	4656      	mov	r6, sl
 801708c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d1d2      	bne.n	801703a <rcl_expand_topic_name+0x1fe>
 8017094:	7823      	ldrb	r3, [r4, #0]
 8017096:	2b2f      	cmp	r3, #47	@ 0x2f
 8017098:	d01e      	beq.n	80170d8 <rcl_expand_topic_name+0x29c>
 801709a:	9e07      	ldr	r6, [sp, #28]
 801709c:	4630      	mov	r0, r6
 801709e:	f7e9 f929 	bl	80002f4 <strlen>
 80170a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80170a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80170a8:	9603      	str	r6, [sp, #12]
 80170aa:	9404      	str	r4, [sp, #16]
 80170ac:	e9cd 2300 	strd	r2, r3, [sp]
 80170b0:	4a10      	ldr	r2, [pc, #64]	@ (80170f4 <rcl_expand_topic_name+0x2b8>)
 80170b2:	4b11      	ldr	r3, [pc, #68]	@ (80170f8 <rcl_expand_topic_name+0x2bc>)
 80170b4:	2801      	cmp	r0, #1
 80170b6:	bf18      	it	ne
 80170b8:	4613      	movne	r3, r2
 80170ba:	9302      	str	r3, [sp, #8]
 80170bc:	ab16      	add	r3, sp, #88	@ 0x58
 80170be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80170c0:	f7fc ffd6 	bl	8014070 <rcutils_format_string_limit>
 80170c4:	4606      	mov	r6, r0
 80170c6:	e7d6      	b.n	8017076 <rcl_expand_topic_name+0x23a>
 80170c8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80170cc:	4650      	mov	r0, sl
 80170ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80170d0:	6014      	str	r4, [r2, #0]
 80170d2:	250a      	movs	r5, #10
 80170d4:	4798      	blx	r3
 80170d6:	e702      	b.n	8016ede <rcl_expand_topic_name+0xa2>
 80170d8:	2300      	movs	r3, #0
 80170da:	461e      	mov	r6, r3
 80170dc:	e7cc      	b.n	8017078 <rcl_expand_topic_name+0x23c>
 80170de:	bf00      	nop
 80170e0:	080197e8 	.word	0x080197e8
 80170e4:	080197f0 	.word	0x080197f0
 80170e8:	080197f8 	.word	0x080197f8
 80170ec:	080197e0 	.word	0x080197e0
 80170f0:	08018fc8 	.word	0x08018fc8
 80170f4:	0801915c 	.word	0x0801915c
 80170f8:	08018fd8 	.word	0x08018fd8

080170fc <rcl_get_default_topic_name_substitutions>:
 80170fc:	2800      	cmp	r0, #0
 80170fe:	bf0c      	ite	eq
 8017100:	200b      	moveq	r0, #11
 8017102:	2000      	movne	r0, #0
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop

08017108 <rcl_get_zero_initialized_guard_condition>:
 8017108:	4a03      	ldr	r2, [pc, #12]	@ (8017118 <rcl_get_zero_initialized_guard_condition+0x10>)
 801710a:	4603      	mov	r3, r0
 801710c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017110:	e883 0003 	stmia.w	r3, {r0, r1}
 8017114:	4618      	mov	r0, r3
 8017116:	4770      	bx	lr
 8017118:	08019804 	.word	0x08019804

0801711c <rcl_guard_condition_init_from_rmw>:
 801711c:	b082      	sub	sp, #8
 801711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017122:	b086      	sub	sp, #24
 8017124:	4604      	mov	r4, r0
 8017126:	460e      	mov	r6, r1
 8017128:	4615      	mov	r5, r2
 801712a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801712e:	f10d 0e04 	add.w	lr, sp, #4
 8017132:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017136:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801713a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801713e:	f8dc 3000 	ldr.w	r3, [ip]
 8017142:	a801      	add	r0, sp, #4
 8017144:	f8ce 3000 	str.w	r3, [lr]
 8017148:	f7f7 fd5a 	bl	800ec00 <rcutils_allocator_is_valid>
 801714c:	f080 0301 	eor.w	r3, r0, #1
 8017150:	b2db      	uxtb	r3, r3
 8017152:	bb3b      	cbnz	r3, 80171a4 <rcl_guard_condition_init_from_rmw+0x88>
 8017154:	b334      	cbz	r4, 80171a4 <rcl_guard_condition_init_from_rmw+0x88>
 8017156:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801715a:	f1b8 0f00 	cmp.w	r8, #0
 801715e:	d11a      	bne.n	8017196 <rcl_guard_condition_init_from_rmw+0x7a>
 8017160:	b305      	cbz	r5, 80171a4 <rcl_guard_condition_init_from_rmw+0x88>
 8017162:	4628      	mov	r0, r5
 8017164:	f7fc f80a 	bl	801317c <rcl_context_is_valid>
 8017168:	b1f0      	cbz	r0, 80171a8 <rcl_guard_condition_init_from_rmw+0x8c>
 801716a:	9b01      	ldr	r3, [sp, #4]
 801716c:	201c      	movs	r0, #28
 801716e:	9905      	ldr	r1, [sp, #20]
 8017170:	4798      	blx	r3
 8017172:	4607      	mov	r7, r0
 8017174:	6060      	str	r0, [r4, #4]
 8017176:	b320      	cbz	r0, 80171c2 <rcl_guard_condition_init_from_rmw+0xa6>
 8017178:	b1c6      	cbz	r6, 80171ac <rcl_guard_condition_init_from_rmw+0x90>
 801717a:	6006      	str	r6, [r0, #0]
 801717c:	f880 8004 	strb.w	r8, [r0, #4]
 8017180:	ac01      	add	r4, sp, #4
 8017182:	f107 0c08 	add.w	ip, r7, #8
 8017186:	2500      	movs	r5, #0
 8017188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801718a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801718e:	6823      	ldr	r3, [r4, #0]
 8017190:	f8cc 3000 	str.w	r3, [ip]
 8017194:	e000      	b.n	8017198 <rcl_guard_condition_init_from_rmw+0x7c>
 8017196:	2564      	movs	r5, #100	@ 0x64
 8017198:	4628      	mov	r0, r5
 801719a:	b006      	add	sp, #24
 801719c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171a0:	b002      	add	sp, #8
 80171a2:	4770      	bx	lr
 80171a4:	250b      	movs	r5, #11
 80171a6:	e7f7      	b.n	8017198 <rcl_guard_condition_init_from_rmw+0x7c>
 80171a8:	2565      	movs	r5, #101	@ 0x65
 80171aa:	e7f5      	b.n	8017198 <rcl_guard_condition_init_from_rmw+0x7c>
 80171ac:	6828      	ldr	r0, [r5, #0]
 80171ae:	3028      	adds	r0, #40	@ 0x28
 80171b0:	f000 fa42 	bl	8017638 <rmw_create_guard_condition>
 80171b4:	6038      	str	r0, [r7, #0]
 80171b6:	6867      	ldr	r7, [r4, #4]
 80171b8:	683e      	ldr	r6, [r7, #0]
 80171ba:	b126      	cbz	r6, 80171c6 <rcl_guard_condition_init_from_rmw+0xaa>
 80171bc:	2301      	movs	r3, #1
 80171be:	713b      	strb	r3, [r7, #4]
 80171c0:	e7de      	b.n	8017180 <rcl_guard_condition_init_from_rmw+0x64>
 80171c2:	250a      	movs	r5, #10
 80171c4:	e7e8      	b.n	8017198 <rcl_guard_condition_init_from_rmw+0x7c>
 80171c6:	9b02      	ldr	r3, [sp, #8]
 80171c8:	4638      	mov	r0, r7
 80171ca:	9905      	ldr	r1, [sp, #20]
 80171cc:	2501      	movs	r5, #1
 80171ce:	4798      	blx	r3
 80171d0:	6066      	str	r6, [r4, #4]
 80171d2:	e7e1      	b.n	8017198 <rcl_guard_condition_init_from_rmw+0x7c>

080171d4 <rcl_guard_condition_fini>:
 80171d4:	b570      	push	{r4, r5, r6, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	b1f0      	cbz	r0, 8017218 <rcl_guard_condition_fini+0x44>
 80171da:	6843      	ldr	r3, [r0, #4]
 80171dc:	4604      	mov	r4, r0
 80171de:	b163      	cbz	r3, 80171fa <rcl_guard_condition_fini+0x26>
 80171e0:	6818      	ldr	r0, [r3, #0]
 80171e2:	68de      	ldr	r6, [r3, #12]
 80171e4:	6999      	ldr	r1, [r3, #24]
 80171e6:	b160      	cbz	r0, 8017202 <rcl_guard_condition_fini+0x2e>
 80171e8:	791d      	ldrb	r5, [r3, #4]
 80171ea:	b965      	cbnz	r5, 8017206 <rcl_guard_condition_fini+0x32>
 80171ec:	4618      	mov	r0, r3
 80171ee:	47b0      	blx	r6
 80171f0:	2300      	movs	r3, #0
 80171f2:	4628      	mov	r0, r5
 80171f4:	6063      	str	r3, [r4, #4]
 80171f6:	b002      	add	sp, #8
 80171f8:	bd70      	pop	{r4, r5, r6, pc}
 80171fa:	461d      	mov	r5, r3
 80171fc:	4628      	mov	r0, r5
 80171fe:	b002      	add	sp, #8
 8017200:	bd70      	pop	{r4, r5, r6, pc}
 8017202:	4605      	mov	r5, r0
 8017204:	e7f2      	b.n	80171ec <rcl_guard_condition_fini+0x18>
 8017206:	9101      	str	r1, [sp, #4]
 8017208:	f000 fa2c 	bl	8017664 <rmw_destroy_guard_condition>
 801720c:	1e05      	subs	r5, r0, #0
 801720e:	6863      	ldr	r3, [r4, #4]
 8017210:	9901      	ldr	r1, [sp, #4]
 8017212:	bf18      	it	ne
 8017214:	2501      	movne	r5, #1
 8017216:	e7e9      	b.n	80171ec <rcl_guard_condition_fini+0x18>
 8017218:	250b      	movs	r5, #11
 801721a:	4628      	mov	r0, r5
 801721c:	b002      	add	sp, #8
 801721e:	bd70      	pop	{r4, r5, r6, pc}

08017220 <rcl_guard_condition_get_default_options>:
 8017220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017222:	b087      	sub	sp, #28
 8017224:	4606      	mov	r6, r0
 8017226:	4c0b      	ldr	r4, [pc, #44]	@ (8017254 <rcl_guard_condition_get_default_options+0x34>)
 8017228:	4668      	mov	r0, sp
 801722a:	f7f7 fcdb 	bl	800ebe4 <rcutils_get_default_allocator>
 801722e:	46ee      	mov	lr, sp
 8017230:	46a4      	mov	ip, r4
 8017232:	4625      	mov	r5, r4
 8017234:	4634      	mov	r4, r6
 8017236:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801723a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801723e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017240:	f8de 7000 	ldr.w	r7, [lr]
 8017244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017246:	4630      	mov	r0, r6
 8017248:	f8cc 7000 	str.w	r7, [ip]
 801724c:	6027      	str	r7, [r4, #0]
 801724e:	b007      	add	sp, #28
 8017250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017252:	bf00      	nop
 8017254:	240686b4 	.word	0x240686b4

08017258 <rcl_validate_topic_name>:
 8017258:	2800      	cmp	r0, #0
 801725a:	f000 8089 	beq.w	8017370 <rcl_validate_topic_name+0x118>
 801725e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017262:	460e      	mov	r6, r1
 8017264:	2900      	cmp	r1, #0
 8017266:	f000 8085 	beq.w	8017374 <rcl_validate_topic_name+0x11c>
 801726a:	4604      	mov	r4, r0
 801726c:	4617      	mov	r7, r2
 801726e:	f7e9 f841 	bl	80002f4 <strlen>
 8017272:	b1b0      	cbz	r0, 80172a2 <rcl_validate_topic_name+0x4a>
 8017274:	f894 e000 	ldrb.w	lr, [r4]
 8017278:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80173dc <rcl_validate_topic_name+0x184>
 801727c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8017280:	f013 0304 	ands.w	r3, r3, #4
 8017284:	d139      	bne.n	80172fa <rcl_validate_topic_name+0xa2>
 8017286:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801728a:	f814 2008 	ldrb.w	r2, [r4, r8]
 801728e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017290:	d10f      	bne.n	80172b2 <rcl_validate_topic_name+0x5a>
 8017292:	2202      	movs	r2, #2
 8017294:	6032      	str	r2, [r6, #0]
 8017296:	b3a7      	cbz	r7, 8017302 <rcl_validate_topic_name+0xaa>
 8017298:	4618      	mov	r0, r3
 801729a:	f8c7 8000 	str.w	r8, [r7]
 801729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172a2:	2301      	movs	r3, #1
 80172a4:	6033      	str	r3, [r6, #0]
 80172a6:	b367      	cbz	r7, 8017302 <rcl_validate_topic_name+0xaa>
 80172a8:	2300      	movs	r3, #0
 80172aa:	4618      	mov	r0, r3
 80172ac:	603b      	str	r3, [r7, #0]
 80172ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172b2:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 80172b6:	461d      	mov	r5, r3
 80172b8:	4619      	mov	r1, r3
 80172ba:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80172be:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80172c2:	f1b9 0f09 	cmp.w	r9, #9
 80172c6:	d91f      	bls.n	8017308 <rcl_validate_topic_name+0xb0>
 80172c8:	f022 0920 	bic.w	r9, r2, #32
 80172cc:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80172d0:	f1b9 0f19 	cmp.w	r9, #25
 80172d4:	d918      	bls.n	8017308 <rcl_validate_topic_name+0xb0>
 80172d6:	2a5f      	cmp	r2, #95	@ 0x5f
 80172d8:	d024      	beq.n	8017324 <rcl_validate_topic_name+0xcc>
 80172da:	2a2f      	cmp	r2, #47	@ 0x2f
 80172dc:	d058      	beq.n	8017390 <rcl_validate_topic_name+0x138>
 80172de:	2a7e      	cmp	r2, #126	@ 0x7e
 80172e0:	d04a      	beq.n	8017378 <rcl_validate_topic_name+0x120>
 80172e2:	2a7b      	cmp	r2, #123	@ 0x7b
 80172e4:	d05b      	beq.n	801739e <rcl_validate_topic_name+0x146>
 80172e6:	2a7d      	cmp	r2, #125	@ 0x7d
 80172e8:	d169      	bne.n	80173be <rcl_validate_topic_name+0x166>
 80172ea:	2d00      	cmp	r5, #0
 80172ec:	d15c      	bne.n	80173a8 <rcl_validate_topic_name+0x150>
 80172ee:	2305      	movs	r3, #5
 80172f0:	6033      	str	r3, [r6, #0]
 80172f2:	b137      	cbz	r7, 8017302 <rcl_validate_topic_name+0xaa>
 80172f4:	2000      	movs	r0, #0
 80172f6:	6039      	str	r1, [r7, #0]
 80172f8:	e7d9      	b.n	80172ae <rcl_validate_topic_name+0x56>
 80172fa:	2304      	movs	r3, #4
 80172fc:	6033      	str	r3, [r6, #0]
 80172fe:	2f00      	cmp	r7, #0
 8017300:	d1d2      	bne.n	80172a8 <rcl_validate_topic_name+0x50>
 8017302:	2000      	movs	r0, #0
 8017304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017308:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801730c:	0752      	lsls	r2, r2, #29
 801730e:	d509      	bpl.n	8017324 <rcl_validate_topic_name+0xcc>
 8017310:	2900      	cmp	r1, #0
 8017312:	bf0c      	ite	eq
 8017314:	2200      	moveq	r2, #0
 8017316:	f005 0201 	andne.w	r2, r5, #1
 801731a:	b11a      	cbz	r2, 8017324 <rcl_validate_topic_name+0xcc>
 801731c:	1e4d      	subs	r5, r1, #1
 801731e:	429d      	cmp	r5, r3
 8017320:	d031      	beq.n	8017386 <rcl_validate_topic_name+0x12e>
 8017322:	4615      	mov	r5, r2
 8017324:	3101      	adds	r1, #1
 8017326:	4288      	cmp	r0, r1
 8017328:	d1c7      	bne.n	80172ba <rcl_validate_topic_name+0x62>
 801732a:	2d00      	cmp	r5, #0
 801732c:	d142      	bne.n	80173b4 <rcl_validate_topic_name+0x15c>
 801732e:	4628      	mov	r0, r5
 8017330:	2301      	movs	r3, #1
 8017332:	e00c      	b.n	801734e <rcl_validate_topic_name+0xf6>
 8017334:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8017338:	d101      	bne.n	801733e <rcl_validate_topic_name+0xe6>
 801733a:	2801      	cmp	r0, #1
 801733c:	d047      	beq.n	80173ce <rcl_validate_topic_name+0x176>
 801733e:	1c5a      	adds	r2, r3, #1
 8017340:	428b      	cmp	r3, r1
 8017342:	f100 0001 	add.w	r0, r0, #1
 8017346:	f104 0401 	add.w	r4, r4, #1
 801734a:	4613      	mov	r3, r2
 801734c:	d22e      	bcs.n	80173ac <rcl_validate_topic_name+0x154>
 801734e:	4580      	cmp	r8, r0
 8017350:	d0f5      	beq.n	801733e <rcl_validate_topic_name+0xe6>
 8017352:	7822      	ldrb	r2, [r4, #0]
 8017354:	2a2f      	cmp	r2, #47	@ 0x2f
 8017356:	d1ed      	bne.n	8017334 <rcl_validate_topic_name+0xdc>
 8017358:	7862      	ldrb	r2, [r4, #1]
 801735a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801735e:	0752      	lsls	r2, r2, #29
 8017360:	d5ed      	bpl.n	801733e <rcl_validate_topic_name+0xe6>
 8017362:	2204      	movs	r2, #4
 8017364:	6032      	str	r2, [r6, #0]
 8017366:	2f00      	cmp	r7, #0
 8017368:	d0cb      	beq.n	8017302 <rcl_validate_topic_name+0xaa>
 801736a:	2000      	movs	r0, #0
 801736c:	603b      	str	r3, [r7, #0]
 801736e:	e79e      	b.n	80172ae <rcl_validate_topic_name+0x56>
 8017370:	200b      	movs	r0, #11
 8017372:	4770      	bx	lr
 8017374:	200b      	movs	r0, #11
 8017376:	e79a      	b.n	80172ae <rcl_validate_topic_name+0x56>
 8017378:	2900      	cmp	r1, #0
 801737a:	d0d3      	beq.n	8017324 <rcl_validate_topic_name+0xcc>
 801737c:	2306      	movs	r3, #6
 801737e:	6033      	str	r3, [r6, #0]
 8017380:	2f00      	cmp	r7, #0
 8017382:	d1b7      	bne.n	80172f4 <rcl_validate_topic_name+0x9c>
 8017384:	e7bd      	b.n	8017302 <rcl_validate_topic_name+0xaa>
 8017386:	2309      	movs	r3, #9
 8017388:	6033      	str	r3, [r6, #0]
 801738a:	2f00      	cmp	r7, #0
 801738c:	d1b2      	bne.n	80172f4 <rcl_validate_topic_name+0x9c>
 801738e:	e7b8      	b.n	8017302 <rcl_validate_topic_name+0xaa>
 8017390:	2d00      	cmp	r5, #0
 8017392:	d0c7      	beq.n	8017324 <rcl_validate_topic_name+0xcc>
 8017394:	2308      	movs	r3, #8
 8017396:	6033      	str	r3, [r6, #0]
 8017398:	2f00      	cmp	r7, #0
 801739a:	d1ab      	bne.n	80172f4 <rcl_validate_topic_name+0x9c>
 801739c:	e7b1      	b.n	8017302 <rcl_validate_topic_name+0xaa>
 801739e:	2d00      	cmp	r5, #0
 80173a0:	d1f8      	bne.n	8017394 <rcl_validate_topic_name+0x13c>
 80173a2:	460b      	mov	r3, r1
 80173a4:	2501      	movs	r5, #1
 80173a6:	e7bd      	b.n	8017324 <rcl_validate_topic_name+0xcc>
 80173a8:	2500      	movs	r5, #0
 80173aa:	e7bb      	b.n	8017324 <rcl_validate_topic_name+0xcc>
 80173ac:	2300      	movs	r3, #0
 80173ae:	4618      	mov	r0, r3
 80173b0:	6033      	str	r3, [r6, #0]
 80173b2:	e77c      	b.n	80172ae <rcl_validate_topic_name+0x56>
 80173b4:	2205      	movs	r2, #5
 80173b6:	6032      	str	r2, [r6, #0]
 80173b8:	2f00      	cmp	r7, #0
 80173ba:	d1d6      	bne.n	801736a <rcl_validate_topic_name+0x112>
 80173bc:	e7a1      	b.n	8017302 <rcl_validate_topic_name+0xaa>
 80173be:	2d00      	cmp	r5, #0
 80173c0:	bf14      	ite	ne
 80173c2:	2308      	movne	r3, #8
 80173c4:	2303      	moveq	r3, #3
 80173c6:	6033      	str	r3, [r6, #0]
 80173c8:	2f00      	cmp	r7, #0
 80173ca:	d193      	bne.n	80172f4 <rcl_validate_topic_name+0x9c>
 80173cc:	e799      	b.n	8017302 <rcl_validate_topic_name+0xaa>
 80173ce:	2307      	movs	r3, #7
 80173d0:	6033      	str	r3, [r6, #0]
 80173d2:	2f00      	cmp	r7, #0
 80173d4:	d095      	beq.n	8017302 <rcl_validate_topic_name+0xaa>
 80173d6:	2301      	movs	r3, #1
 80173d8:	e7c7      	b.n	801736a <rcl_validate_topic_name+0x112>
 80173da:	bf00      	nop
 80173dc:	0801987c 	.word	0x0801987c

080173e0 <on_status>:
 80173e0:	b082      	sub	sp, #8
 80173e2:	b002      	add	sp, #8
 80173e4:	4770      	bx	lr
 80173e6:	bf00      	nop

080173e8 <on_topic>:
 80173e8:	4a23      	ldr	r2, [pc, #140]	@ (8017478 <on_topic+0x90>)
 80173ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ee:	6812      	ldr	r2, [r2, #0]
 80173f0:	b094      	sub	sp, #80	@ 0x50
 80173f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80173f4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80173f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80173fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80173fc:	b3c2      	cbz	r2, 8017470 <on_topic+0x88>
 80173fe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017402:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017406:	e001      	b.n	801740c <on_topic+0x24>
 8017408:	6852      	ldr	r2, [r2, #4]
 801740a:	b38a      	cbz	r2, 8017470 <on_topic+0x88>
 801740c:	6894      	ldr	r4, [r2, #8]
 801740e:	8aa3      	ldrh	r3, [r4, #20]
 8017410:	428b      	cmp	r3, r1
 8017412:	d1f9      	bne.n	8017408 <on_topic+0x20>
 8017414:	7da3      	ldrb	r3, [r4, #22]
 8017416:	4283      	cmp	r3, r0
 8017418:	d1f6      	bne.n	8017408 <on_topic+0x20>
 801741a:	2248      	movs	r2, #72	@ 0x48
 801741c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017420:	4668      	mov	r0, sp
 8017422:	f000 fe00 	bl	8018026 <memcpy>
 8017426:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801742a:	4620      	mov	r0, r4
 801742c:	cb0c      	ldmia	r3, {r2, r3}
 801742e:	f7f7 fff3 	bl	800f418 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017432:	4607      	mov	r7, r0
 8017434:	b1e0      	cbz	r0, 8017470 <on_topic+0x88>
 8017436:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801743a:	462a      	mov	r2, r5
 801743c:	4630      	mov	r0, r6
 801743e:	f108 0110 	add.w	r1, r8, #16
 8017442:	f7fe f853 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 8017446:	b930      	cbnz	r0, 8017456 <on_topic+0x6e>
 8017448:	4639      	mov	r1, r7
 801744a:	480c      	ldr	r0, [pc, #48]	@ (801747c <on_topic+0x94>)
 801744c:	b014      	add	sp, #80	@ 0x50
 801744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017452:	f7fd ba87 	b.w	8014964 <put_memory>
 8017456:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801745a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801745e:	f7f7 fdd9 	bl	800f014 <rmw_uros_epoch_nanos>
 8017462:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017466:	2305      	movs	r3, #5
 8017468:	e942 0102 	strd	r0, r1, [r2, #-8]
 801746c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017470:	b014      	add	sp, #80	@ 0x50
 8017472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017476:	bf00      	nop
 8017478:	24068584 	.word	0x24068584
 801747c:	24068574 	.word	0x24068574

08017480 <on_request>:
 8017480:	4824      	ldr	r0, [pc, #144]	@ (8017514 <on_request+0x94>)
 8017482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017486:	6800      	ldr	r0, [r0, #0]
 8017488:	b094      	sub	sp, #80	@ 0x50
 801748a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801748c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8017490:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017492:	2800      	cmp	r0, #0
 8017494:	d03b      	beq.n	801750e <on_request+0x8e>
 8017496:	461d      	mov	r5, r3
 8017498:	e001      	b.n	801749e <on_request+0x1e>
 801749a:	6840      	ldr	r0, [r0, #4]
 801749c:	b3b8      	cbz	r0, 801750e <on_request+0x8e>
 801749e:	6884      	ldr	r4, [r0, #8]
 80174a0:	8b21      	ldrh	r1, [r4, #24]
 80174a2:	4291      	cmp	r1, r2
 80174a4:	d1f9      	bne.n	801749a <on_request+0x1a>
 80174a6:	2248      	movs	r2, #72	@ 0x48
 80174a8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80174ac:	4668      	mov	r0, sp
 80174ae:	f000 fdba 	bl	8018026 <memcpy>
 80174b2:	f104 0320 	add.w	r3, r4, #32
 80174b6:	4620      	mov	r0, r4
 80174b8:	cb0c      	ldmia	r3, {r2, r3}
 80174ba:	f7f7 ffad 	bl	800f418 <rmw_uxrce_get_static_input_buffer_for_entity>
 80174be:	4680      	mov	r8, r0
 80174c0:	b328      	cbz	r0, 801750e <on_request+0x8e>
 80174c2:	4630      	mov	r0, r6
 80174c4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80174c8:	463a      	mov	r2, r7
 80174ca:	f106 0110 	add.w	r1, r6, #16
 80174ce:	f7fe f80d 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 80174d2:	b930      	cbnz	r0, 80174e2 <on_request+0x62>
 80174d4:	4641      	mov	r1, r8
 80174d6:	4810      	ldr	r0, [pc, #64]	@ (8017518 <on_request+0x98>)
 80174d8:	b014      	add	sp, #80	@ 0x50
 80174da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174de:	f7fd ba41 	b.w	8014964 <put_memory>
 80174e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174e4:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 80174e8:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80174ec:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80174f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80174f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174fc:	f7f7 fd8a 	bl	800f014 <rmw_uros_epoch_nanos>
 8017500:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8017504:	2303      	movs	r3, #3
 8017506:	e942 0102 	strd	r0, r1, [r2, #-8]
 801750a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801750e:	b014      	add	sp, #80	@ 0x50
 8017510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017514:	24068554 	.word	0x24068554
 8017518:	24068574 	.word	0x24068574

0801751c <on_reply>:
 801751c:	4822      	ldr	r0, [pc, #136]	@ (80175a8 <on_reply+0x8c>)
 801751e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017522:	6800      	ldr	r0, [r0, #0]
 8017524:	b094      	sub	sp, #80	@ 0x50
 8017526:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8017528:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801752c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801752e:	b3b8      	cbz	r0, 80175a0 <on_reply+0x84>
 8017530:	461d      	mov	r5, r3
 8017532:	e001      	b.n	8017538 <on_reply+0x1c>
 8017534:	6840      	ldr	r0, [r0, #4]
 8017536:	b398      	cbz	r0, 80175a0 <on_reply+0x84>
 8017538:	6884      	ldr	r4, [r0, #8]
 801753a:	8b21      	ldrh	r1, [r4, #24]
 801753c:	4291      	cmp	r1, r2
 801753e:	d1f9      	bne.n	8017534 <on_reply+0x18>
 8017540:	2248      	movs	r2, #72	@ 0x48
 8017542:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017546:	4668      	mov	r0, sp
 8017548:	f000 fd6d 	bl	8018026 <memcpy>
 801754c:	f104 0320 	add.w	r3, r4, #32
 8017550:	4620      	mov	r0, r4
 8017552:	cb0c      	ldmia	r3, {r2, r3}
 8017554:	f7f7 ff60 	bl	800f418 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017558:	4680      	mov	r8, r0
 801755a:	b308      	cbz	r0, 80175a0 <on_reply+0x84>
 801755c:	4630      	mov	r0, r6
 801755e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8017562:	463a      	mov	r2, r7
 8017564:	f106 0110 	add.w	r1, r6, #16
 8017568:	f7fd ffc0 	bl	80154ec <ucdr_deserialize_array_uint8_t>
 801756c:	b930      	cbnz	r0, 801757c <on_reply+0x60>
 801756e:	4641      	mov	r1, r8
 8017570:	480e      	ldr	r0, [pc, #56]	@ (80175ac <on_reply+0x90>)
 8017572:	b014      	add	sp, #80	@ 0x50
 8017574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017578:	f7fd b9f4 	b.w	8014964 <put_memory>
 801757c:	2200      	movs	r2, #0
 801757e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8017582:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8017586:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801758a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801758e:	f7f7 fd41 	bl	800f014 <rmw_uros_epoch_nanos>
 8017592:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8017596:	2304      	movs	r3, #4
 8017598:	e942 0102 	strd	r0, r1, [r2, #-8]
 801759c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80175a0:	b014      	add	sp, #80	@ 0x50
 80175a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175a6:	bf00      	nop
 80175a8:	24063c68 	.word	0x24063c68
 80175ac:	24068574 	.word	0x24068574

080175b0 <rmw_destroy_client>:
 80175b0:	b570      	push	{r4, r5, r6, lr}
 80175b2:	b128      	cbz	r0, 80175c0 <rmw_destroy_client+0x10>
 80175b4:	4604      	mov	r4, r0
 80175b6:	6800      	ldr	r0, [r0, #0]
 80175b8:	460d      	mov	r5, r1
 80175ba:	f7f8 f801 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 80175be:	b910      	cbnz	r0, 80175c6 <rmw_destroy_client+0x16>
 80175c0:	2401      	movs	r4, #1
 80175c2:	4620      	mov	r0, r4
 80175c4:	bd70      	pop	{r4, r5, r6, pc}
 80175c6:	6863      	ldr	r3, [r4, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d0f9      	beq.n	80175c0 <rmw_destroy_client+0x10>
 80175cc:	2d00      	cmp	r5, #0
 80175ce:	d0f7      	beq.n	80175c0 <rmw_destroy_client+0x10>
 80175d0:	6828      	ldr	r0, [r5, #0]
 80175d2:	f7f7 fff5 	bl	800f5c0 <is_uxrce_rmw_identifier_valid>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	d0f2      	beq.n	80175c0 <rmw_destroy_client+0x10>
 80175da:	686e      	ldr	r6, [r5, #4]
 80175dc:	2e00      	cmp	r6, #0
 80175de:	d0ef      	beq.n	80175c0 <rmw_destroy_client+0x10>
 80175e0:	6864      	ldr	r4, [r4, #4]
 80175e2:	6932      	ldr	r2, [r6, #16]
 80175e4:	6920      	ldr	r0, [r4, #16]
 80175e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80175ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80175ee:	6819      	ldr	r1, [r3, #0]
 80175f0:	f7fe fe5e 	bl	80162b0 <uxr_buffer_cancel_data>
 80175f4:	4602      	mov	r2, r0
 80175f6:	6920      	ldr	r0, [r4, #16]
 80175f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80175fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017600:	f7f7 ff64 	bl	800f4cc <run_xrce_session>
 8017604:	6920      	ldr	r0, [r4, #16]
 8017606:	6932      	ldr	r2, [r6, #16]
 8017608:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801760c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017610:	6819      	ldr	r1, [r3, #0]
 8017612:	f7f9 f895 	bl	8010740 <uxr_buffer_delete_entity>
 8017616:	4602      	mov	r2, r0
 8017618:	6920      	ldr	r0, [r4, #16]
 801761a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801761e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017622:	f7f7 ff53 	bl	800f4cc <run_xrce_session>
 8017626:	4603      	mov	r3, r0
 8017628:	4628      	mov	r0, r5
 801762a:	2b00      	cmp	r3, #0
 801762c:	bf14      	ite	ne
 801762e:	2400      	movne	r4, #0
 8017630:	2402      	moveq	r4, #2
 8017632:	f7f7 fecf 	bl	800f3d4 <rmw_uxrce_fini_client_memory>
 8017636:	e7c4      	b.n	80175c2 <rmw_destroy_client+0x12>

08017638 <rmw_create_guard_condition>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	4605      	mov	r5, r0
 801763c:	4808      	ldr	r0, [pc, #32]	@ (8017660 <rmw_create_guard_condition+0x28>)
 801763e:	f7fd f981 	bl	8014944 <get_memory>
 8017642:	4603      	mov	r3, r0
 8017644:	b148      	cbz	r0, 801765a <rmw_create_guard_condition+0x22>
 8017646:	6884      	ldr	r4, [r0, #8]
 8017648:	2300      	movs	r3, #0
 801764a:	61e5      	str	r5, [r4, #28]
 801764c:	7423      	strb	r3, [r4, #16]
 801764e:	f7fd f99d 	bl	801498c <rmw_get_implementation_identifier>
 8017652:	f104 0314 	add.w	r3, r4, #20
 8017656:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801765a:	4618      	mov	r0, r3
 801765c:	bd38      	pop	{r3, r4, r5, pc}
 801765e:	bf00      	nop
 8017660:	24068514 	.word	0x24068514

08017664 <rmw_destroy_guard_condition>:
 8017664:	b508      	push	{r3, lr}
 8017666:	4b08      	ldr	r3, [pc, #32]	@ (8017688 <rmw_destroy_guard_condition+0x24>)
 8017668:	6819      	ldr	r1, [r3, #0]
 801766a:	b911      	cbnz	r1, 8017672 <rmw_destroy_guard_condition+0xe>
 801766c:	e00a      	b.n	8017684 <rmw_destroy_guard_condition+0x20>
 801766e:	6849      	ldr	r1, [r1, #4]
 8017670:	b141      	cbz	r1, 8017684 <rmw_destroy_guard_condition+0x20>
 8017672:	688b      	ldr	r3, [r1, #8]
 8017674:	3314      	adds	r3, #20
 8017676:	4298      	cmp	r0, r3
 8017678:	d1f9      	bne.n	801766e <rmw_destroy_guard_condition+0xa>
 801767a:	4803      	ldr	r0, [pc, #12]	@ (8017688 <rmw_destroy_guard_condition+0x24>)
 801767c:	f7fd f972 	bl	8014964 <put_memory>
 8017680:	2000      	movs	r0, #0
 8017682:	bd08      	pop	{r3, pc}
 8017684:	2001      	movs	r0, #1
 8017686:	bd08      	pop	{r3, pc}
 8017688:	24068514 	.word	0x24068514

0801768c <calloc>:
 801768c:	4b02      	ldr	r3, [pc, #8]	@ (8017698 <calloc+0xc>)
 801768e:	460a      	mov	r2, r1
 8017690:	4601      	mov	r1, r0
 8017692:	6818      	ldr	r0, [r3, #0]
 8017694:	f000 b802 	b.w	801769c <_calloc_r>
 8017698:	240000c4 	.word	0x240000c4

0801769c <_calloc_r>:
 801769c:	b570      	push	{r4, r5, r6, lr}
 801769e:	fba1 5402 	umull	r5, r4, r1, r2
 80176a2:	b93c      	cbnz	r4, 80176b4 <_calloc_r+0x18>
 80176a4:	4629      	mov	r1, r5
 80176a6:	f000 f887 	bl	80177b8 <_malloc_r>
 80176aa:	4606      	mov	r6, r0
 80176ac:	b928      	cbnz	r0, 80176ba <_calloc_r+0x1e>
 80176ae:	2600      	movs	r6, #0
 80176b0:	4630      	mov	r0, r6
 80176b2:	bd70      	pop	{r4, r5, r6, pc}
 80176b4:	220c      	movs	r2, #12
 80176b6:	6002      	str	r2, [r0, #0]
 80176b8:	e7f9      	b.n	80176ae <_calloc_r+0x12>
 80176ba:	462a      	mov	r2, r5
 80176bc:	4621      	mov	r1, r4
 80176be:	f000 fb93 	bl	8017de8 <memset>
 80176c2:	e7f5      	b.n	80176b0 <_calloc_r+0x14>

080176c4 <getenv>:
 80176c4:	b507      	push	{r0, r1, r2, lr}
 80176c6:	4b04      	ldr	r3, [pc, #16]	@ (80176d8 <getenv+0x14>)
 80176c8:	4601      	mov	r1, r0
 80176ca:	aa01      	add	r2, sp, #4
 80176cc:	6818      	ldr	r0, [r3, #0]
 80176ce:	f000 f805 	bl	80176dc <_findenv_r>
 80176d2:	b003      	add	sp, #12
 80176d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80176d8:	240000c4 	.word	0x240000c4

080176dc <_findenv_r>:
 80176dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017750 <_findenv_r+0x74>
 80176e4:	4606      	mov	r6, r0
 80176e6:	4689      	mov	r9, r1
 80176e8:	4617      	mov	r7, r2
 80176ea:	f000 fcc9 	bl	8018080 <__env_lock>
 80176ee:	f8da 4000 	ldr.w	r4, [sl]
 80176f2:	b134      	cbz	r4, 8017702 <_findenv_r+0x26>
 80176f4:	464b      	mov	r3, r9
 80176f6:	4698      	mov	r8, r3
 80176f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176fc:	b13a      	cbz	r2, 801770e <_findenv_r+0x32>
 80176fe:	2a3d      	cmp	r2, #61	@ 0x3d
 8017700:	d1f9      	bne.n	80176f6 <_findenv_r+0x1a>
 8017702:	4630      	mov	r0, r6
 8017704:	f000 fcc2 	bl	801808c <__env_unlock>
 8017708:	2000      	movs	r0, #0
 801770a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801770e:	eba8 0809 	sub.w	r8, r8, r9
 8017712:	46a3      	mov	fp, r4
 8017714:	f854 0b04 	ldr.w	r0, [r4], #4
 8017718:	2800      	cmp	r0, #0
 801771a:	d0f2      	beq.n	8017702 <_findenv_r+0x26>
 801771c:	4642      	mov	r2, r8
 801771e:	4649      	mov	r1, r9
 8017720:	f000 fb77 	bl	8017e12 <strncmp>
 8017724:	2800      	cmp	r0, #0
 8017726:	d1f4      	bne.n	8017712 <_findenv_r+0x36>
 8017728:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801772c:	eb03 0508 	add.w	r5, r3, r8
 8017730:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017734:	2b3d      	cmp	r3, #61	@ 0x3d
 8017736:	d1ec      	bne.n	8017712 <_findenv_r+0x36>
 8017738:	f8da 3000 	ldr.w	r3, [sl]
 801773c:	ebab 0303 	sub.w	r3, fp, r3
 8017740:	109b      	asrs	r3, r3, #2
 8017742:	4630      	mov	r0, r6
 8017744:	603b      	str	r3, [r7, #0]
 8017746:	f000 fca1 	bl	801808c <__env_unlock>
 801774a:	1c68      	adds	r0, r5, #1
 801774c:	e7dd      	b.n	801770a <_findenv_r+0x2e>
 801774e:	bf00      	nop
 8017750:	24000000 	.word	0x24000000

08017754 <malloc>:
 8017754:	4b02      	ldr	r3, [pc, #8]	@ (8017760 <malloc+0xc>)
 8017756:	4601      	mov	r1, r0
 8017758:	6818      	ldr	r0, [r3, #0]
 801775a:	f000 b82d 	b.w	80177b8 <_malloc_r>
 801775e:	bf00      	nop
 8017760:	240000c4 	.word	0x240000c4

08017764 <free>:
 8017764:	4b02      	ldr	r3, [pc, #8]	@ (8017770 <free+0xc>)
 8017766:	4601      	mov	r1, r0
 8017768:	6818      	ldr	r0, [r3, #0]
 801776a:	f000 bc95 	b.w	8018098 <_free_r>
 801776e:	bf00      	nop
 8017770:	240000c4 	.word	0x240000c4

08017774 <sbrk_aligned>:
 8017774:	b570      	push	{r4, r5, r6, lr}
 8017776:	4e0f      	ldr	r6, [pc, #60]	@ (80177b4 <sbrk_aligned+0x40>)
 8017778:	460c      	mov	r4, r1
 801777a:	6831      	ldr	r1, [r6, #0]
 801777c:	4605      	mov	r5, r0
 801777e:	b911      	cbnz	r1, 8017786 <sbrk_aligned+0x12>
 8017780:	f000 fbfa 	bl	8017f78 <_sbrk_r>
 8017784:	6030      	str	r0, [r6, #0]
 8017786:	4621      	mov	r1, r4
 8017788:	4628      	mov	r0, r5
 801778a:	f000 fbf5 	bl	8017f78 <_sbrk_r>
 801778e:	1c43      	adds	r3, r0, #1
 8017790:	d103      	bne.n	801779a <sbrk_aligned+0x26>
 8017792:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017796:	4620      	mov	r0, r4
 8017798:	bd70      	pop	{r4, r5, r6, pc}
 801779a:	1cc4      	adds	r4, r0, #3
 801779c:	f024 0403 	bic.w	r4, r4, #3
 80177a0:	42a0      	cmp	r0, r4
 80177a2:	d0f8      	beq.n	8017796 <sbrk_aligned+0x22>
 80177a4:	1a21      	subs	r1, r4, r0
 80177a6:	4628      	mov	r0, r5
 80177a8:	f000 fbe6 	bl	8017f78 <_sbrk_r>
 80177ac:	3001      	adds	r0, #1
 80177ae:	d1f2      	bne.n	8017796 <sbrk_aligned+0x22>
 80177b0:	e7ef      	b.n	8017792 <sbrk_aligned+0x1e>
 80177b2:	bf00      	nop
 80177b4:	240686c8 	.word	0x240686c8

080177b8 <_malloc_r>:
 80177b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177bc:	1ccd      	adds	r5, r1, #3
 80177be:	f025 0503 	bic.w	r5, r5, #3
 80177c2:	3508      	adds	r5, #8
 80177c4:	2d0c      	cmp	r5, #12
 80177c6:	bf38      	it	cc
 80177c8:	250c      	movcc	r5, #12
 80177ca:	2d00      	cmp	r5, #0
 80177cc:	4606      	mov	r6, r0
 80177ce:	db01      	blt.n	80177d4 <_malloc_r+0x1c>
 80177d0:	42a9      	cmp	r1, r5
 80177d2:	d904      	bls.n	80177de <_malloc_r+0x26>
 80177d4:	230c      	movs	r3, #12
 80177d6:	6033      	str	r3, [r6, #0]
 80177d8:	2000      	movs	r0, #0
 80177da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80178b4 <_malloc_r+0xfc>
 80177e2:	f000 f869 	bl	80178b8 <__malloc_lock>
 80177e6:	f8d8 3000 	ldr.w	r3, [r8]
 80177ea:	461c      	mov	r4, r3
 80177ec:	bb44      	cbnz	r4, 8017840 <_malloc_r+0x88>
 80177ee:	4629      	mov	r1, r5
 80177f0:	4630      	mov	r0, r6
 80177f2:	f7ff ffbf 	bl	8017774 <sbrk_aligned>
 80177f6:	1c43      	adds	r3, r0, #1
 80177f8:	4604      	mov	r4, r0
 80177fa:	d158      	bne.n	80178ae <_malloc_r+0xf6>
 80177fc:	f8d8 4000 	ldr.w	r4, [r8]
 8017800:	4627      	mov	r7, r4
 8017802:	2f00      	cmp	r7, #0
 8017804:	d143      	bne.n	801788e <_malloc_r+0xd6>
 8017806:	2c00      	cmp	r4, #0
 8017808:	d04b      	beq.n	80178a2 <_malloc_r+0xea>
 801780a:	6823      	ldr	r3, [r4, #0]
 801780c:	4639      	mov	r1, r7
 801780e:	4630      	mov	r0, r6
 8017810:	eb04 0903 	add.w	r9, r4, r3
 8017814:	f000 fbb0 	bl	8017f78 <_sbrk_r>
 8017818:	4581      	cmp	r9, r0
 801781a:	d142      	bne.n	80178a2 <_malloc_r+0xea>
 801781c:	6821      	ldr	r1, [r4, #0]
 801781e:	1a6d      	subs	r5, r5, r1
 8017820:	4629      	mov	r1, r5
 8017822:	4630      	mov	r0, r6
 8017824:	f7ff ffa6 	bl	8017774 <sbrk_aligned>
 8017828:	3001      	adds	r0, #1
 801782a:	d03a      	beq.n	80178a2 <_malloc_r+0xea>
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	442b      	add	r3, r5
 8017830:	6023      	str	r3, [r4, #0]
 8017832:	f8d8 3000 	ldr.w	r3, [r8]
 8017836:	685a      	ldr	r2, [r3, #4]
 8017838:	bb62      	cbnz	r2, 8017894 <_malloc_r+0xdc>
 801783a:	f8c8 7000 	str.w	r7, [r8]
 801783e:	e00f      	b.n	8017860 <_malloc_r+0xa8>
 8017840:	6822      	ldr	r2, [r4, #0]
 8017842:	1b52      	subs	r2, r2, r5
 8017844:	d420      	bmi.n	8017888 <_malloc_r+0xd0>
 8017846:	2a0b      	cmp	r2, #11
 8017848:	d917      	bls.n	801787a <_malloc_r+0xc2>
 801784a:	1961      	adds	r1, r4, r5
 801784c:	42a3      	cmp	r3, r4
 801784e:	6025      	str	r5, [r4, #0]
 8017850:	bf18      	it	ne
 8017852:	6059      	strne	r1, [r3, #4]
 8017854:	6863      	ldr	r3, [r4, #4]
 8017856:	bf08      	it	eq
 8017858:	f8c8 1000 	streq.w	r1, [r8]
 801785c:	5162      	str	r2, [r4, r5]
 801785e:	604b      	str	r3, [r1, #4]
 8017860:	4630      	mov	r0, r6
 8017862:	f000 f82f 	bl	80178c4 <__malloc_unlock>
 8017866:	f104 000b 	add.w	r0, r4, #11
 801786a:	1d23      	adds	r3, r4, #4
 801786c:	f020 0007 	bic.w	r0, r0, #7
 8017870:	1ac2      	subs	r2, r0, r3
 8017872:	bf1c      	itt	ne
 8017874:	1a1b      	subne	r3, r3, r0
 8017876:	50a3      	strne	r3, [r4, r2]
 8017878:	e7af      	b.n	80177da <_malloc_r+0x22>
 801787a:	6862      	ldr	r2, [r4, #4]
 801787c:	42a3      	cmp	r3, r4
 801787e:	bf0c      	ite	eq
 8017880:	f8c8 2000 	streq.w	r2, [r8]
 8017884:	605a      	strne	r2, [r3, #4]
 8017886:	e7eb      	b.n	8017860 <_malloc_r+0xa8>
 8017888:	4623      	mov	r3, r4
 801788a:	6864      	ldr	r4, [r4, #4]
 801788c:	e7ae      	b.n	80177ec <_malloc_r+0x34>
 801788e:	463c      	mov	r4, r7
 8017890:	687f      	ldr	r7, [r7, #4]
 8017892:	e7b6      	b.n	8017802 <_malloc_r+0x4a>
 8017894:	461a      	mov	r2, r3
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	42a3      	cmp	r3, r4
 801789a:	d1fb      	bne.n	8017894 <_malloc_r+0xdc>
 801789c:	2300      	movs	r3, #0
 801789e:	6053      	str	r3, [r2, #4]
 80178a0:	e7de      	b.n	8017860 <_malloc_r+0xa8>
 80178a2:	230c      	movs	r3, #12
 80178a4:	6033      	str	r3, [r6, #0]
 80178a6:	4630      	mov	r0, r6
 80178a8:	f000 f80c 	bl	80178c4 <__malloc_unlock>
 80178ac:	e794      	b.n	80177d8 <_malloc_r+0x20>
 80178ae:	6005      	str	r5, [r0, #0]
 80178b0:	e7d6      	b.n	8017860 <_malloc_r+0xa8>
 80178b2:	bf00      	nop
 80178b4:	240686cc 	.word	0x240686cc

080178b8 <__malloc_lock>:
 80178b8:	4801      	ldr	r0, [pc, #4]	@ (80178c0 <__malloc_lock+0x8>)
 80178ba:	f000 bbaa 	b.w	8018012 <__retarget_lock_acquire_recursive>
 80178be:	bf00      	nop
 80178c0:	24068811 	.word	0x24068811

080178c4 <__malloc_unlock>:
 80178c4:	4801      	ldr	r0, [pc, #4]	@ (80178cc <__malloc_unlock+0x8>)
 80178c6:	f000 bba5 	b.w	8018014 <__retarget_lock_release_recursive>
 80178ca:	bf00      	nop
 80178cc:	24068811 	.word	0x24068811

080178d0 <srand>:
 80178d0:	b538      	push	{r3, r4, r5, lr}
 80178d2:	4b10      	ldr	r3, [pc, #64]	@ (8017914 <srand+0x44>)
 80178d4:	681d      	ldr	r5, [r3, #0]
 80178d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80178d8:	4604      	mov	r4, r0
 80178da:	b9b3      	cbnz	r3, 801790a <srand+0x3a>
 80178dc:	2018      	movs	r0, #24
 80178de:	f7ff ff39 	bl	8017754 <malloc>
 80178e2:	4602      	mov	r2, r0
 80178e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80178e6:	b920      	cbnz	r0, 80178f2 <srand+0x22>
 80178e8:	4b0b      	ldr	r3, [pc, #44]	@ (8017918 <srand+0x48>)
 80178ea:	480c      	ldr	r0, [pc, #48]	@ (801791c <srand+0x4c>)
 80178ec:	2146      	movs	r1, #70	@ 0x46
 80178ee:	f000 fba9 	bl	8018044 <__assert_func>
 80178f2:	490b      	ldr	r1, [pc, #44]	@ (8017920 <srand+0x50>)
 80178f4:	4b0b      	ldr	r3, [pc, #44]	@ (8017924 <srand+0x54>)
 80178f6:	e9c0 1300 	strd	r1, r3, [r0]
 80178fa:	4b0b      	ldr	r3, [pc, #44]	@ (8017928 <srand+0x58>)
 80178fc:	6083      	str	r3, [r0, #8]
 80178fe:	230b      	movs	r3, #11
 8017900:	8183      	strh	r3, [r0, #12]
 8017902:	2100      	movs	r1, #0
 8017904:	2001      	movs	r0, #1
 8017906:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801790a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801790c:	2200      	movs	r2, #0
 801790e:	611c      	str	r4, [r3, #16]
 8017910:	615a      	str	r2, [r3, #20]
 8017912:	bd38      	pop	{r3, r4, r5, pc}
 8017914:	240000c4 	.word	0x240000c4
 8017918:	0801980c 	.word	0x0801980c
 801791c:	08019823 	.word	0x08019823
 8017920:	abcd330e 	.word	0xabcd330e
 8017924:	e66d1234 	.word	0xe66d1234
 8017928:	0005deec 	.word	0x0005deec

0801792c <rand>:
 801792c:	4b16      	ldr	r3, [pc, #88]	@ (8017988 <rand+0x5c>)
 801792e:	b510      	push	{r4, lr}
 8017930:	681c      	ldr	r4, [r3, #0]
 8017932:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017934:	b9b3      	cbnz	r3, 8017964 <rand+0x38>
 8017936:	2018      	movs	r0, #24
 8017938:	f7ff ff0c 	bl	8017754 <malloc>
 801793c:	4602      	mov	r2, r0
 801793e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017940:	b920      	cbnz	r0, 801794c <rand+0x20>
 8017942:	4b12      	ldr	r3, [pc, #72]	@ (801798c <rand+0x60>)
 8017944:	4812      	ldr	r0, [pc, #72]	@ (8017990 <rand+0x64>)
 8017946:	2152      	movs	r1, #82	@ 0x52
 8017948:	f000 fb7c 	bl	8018044 <__assert_func>
 801794c:	4911      	ldr	r1, [pc, #68]	@ (8017994 <rand+0x68>)
 801794e:	4b12      	ldr	r3, [pc, #72]	@ (8017998 <rand+0x6c>)
 8017950:	e9c0 1300 	strd	r1, r3, [r0]
 8017954:	4b11      	ldr	r3, [pc, #68]	@ (801799c <rand+0x70>)
 8017956:	6083      	str	r3, [r0, #8]
 8017958:	230b      	movs	r3, #11
 801795a:	8183      	strh	r3, [r0, #12]
 801795c:	2100      	movs	r1, #0
 801795e:	2001      	movs	r0, #1
 8017960:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017964:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017966:	480e      	ldr	r0, [pc, #56]	@ (80179a0 <rand+0x74>)
 8017968:	690b      	ldr	r3, [r1, #16]
 801796a:	694c      	ldr	r4, [r1, #20]
 801796c:	4a0d      	ldr	r2, [pc, #52]	@ (80179a4 <rand+0x78>)
 801796e:	4358      	muls	r0, r3
 8017970:	fb02 0004 	mla	r0, r2, r4, r0
 8017974:	fba3 3202 	umull	r3, r2, r3, r2
 8017978:	3301      	adds	r3, #1
 801797a:	eb40 0002 	adc.w	r0, r0, r2
 801797e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017982:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017986:	bd10      	pop	{r4, pc}
 8017988:	240000c4 	.word	0x240000c4
 801798c:	0801980c 	.word	0x0801980c
 8017990:	08019823 	.word	0x08019823
 8017994:	abcd330e 	.word	0xabcd330e
 8017998:	e66d1234 	.word	0xe66d1234
 801799c:	0005deec 	.word	0x0005deec
 80179a0:	5851f42d 	.word	0x5851f42d
 80179a4:	4c957f2d 	.word	0x4c957f2d

080179a8 <realloc>:
 80179a8:	4b02      	ldr	r3, [pc, #8]	@ (80179b4 <realloc+0xc>)
 80179aa:	460a      	mov	r2, r1
 80179ac:	4601      	mov	r1, r0
 80179ae:	6818      	ldr	r0, [r3, #0]
 80179b0:	f000 b802 	b.w	80179b8 <_realloc_r>
 80179b4:	240000c4 	.word	0x240000c4

080179b8 <_realloc_r>:
 80179b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179bc:	4680      	mov	r8, r0
 80179be:	4615      	mov	r5, r2
 80179c0:	460c      	mov	r4, r1
 80179c2:	b921      	cbnz	r1, 80179ce <_realloc_r+0x16>
 80179c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179c8:	4611      	mov	r1, r2
 80179ca:	f7ff bef5 	b.w	80177b8 <_malloc_r>
 80179ce:	b92a      	cbnz	r2, 80179dc <_realloc_r+0x24>
 80179d0:	f000 fb62 	bl	8018098 <_free_r>
 80179d4:	2400      	movs	r4, #0
 80179d6:	4620      	mov	r0, r4
 80179d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179dc:	f000 fba6 	bl	801812c <_malloc_usable_size_r>
 80179e0:	4285      	cmp	r5, r0
 80179e2:	4606      	mov	r6, r0
 80179e4:	d802      	bhi.n	80179ec <_realloc_r+0x34>
 80179e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80179ea:	d8f4      	bhi.n	80179d6 <_realloc_r+0x1e>
 80179ec:	4629      	mov	r1, r5
 80179ee:	4640      	mov	r0, r8
 80179f0:	f7ff fee2 	bl	80177b8 <_malloc_r>
 80179f4:	4607      	mov	r7, r0
 80179f6:	2800      	cmp	r0, #0
 80179f8:	d0ec      	beq.n	80179d4 <_realloc_r+0x1c>
 80179fa:	42b5      	cmp	r5, r6
 80179fc:	462a      	mov	r2, r5
 80179fe:	4621      	mov	r1, r4
 8017a00:	bf28      	it	cs
 8017a02:	4632      	movcs	r2, r6
 8017a04:	f000 fb0f 	bl	8018026 <memcpy>
 8017a08:	4621      	mov	r1, r4
 8017a0a:	4640      	mov	r0, r8
 8017a0c:	f000 fb44 	bl	8018098 <_free_r>
 8017a10:	463c      	mov	r4, r7
 8017a12:	e7e0      	b.n	80179d6 <_realloc_r+0x1e>

08017a14 <_strtoul_l.constprop.0>:
 8017a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a18:	4e34      	ldr	r6, [pc, #208]	@ (8017aec <_strtoul_l.constprop.0+0xd8>)
 8017a1a:	4686      	mov	lr, r0
 8017a1c:	460d      	mov	r5, r1
 8017a1e:	4628      	mov	r0, r5
 8017a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a24:	5d37      	ldrb	r7, [r6, r4]
 8017a26:	f017 0708 	ands.w	r7, r7, #8
 8017a2a:	d1f8      	bne.n	8017a1e <_strtoul_l.constprop.0+0xa>
 8017a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8017a2e:	d12f      	bne.n	8017a90 <_strtoul_l.constprop.0+0x7c>
 8017a30:	782c      	ldrb	r4, [r5, #0]
 8017a32:	2701      	movs	r7, #1
 8017a34:	1c85      	adds	r5, r0, #2
 8017a36:	f033 0010 	bics.w	r0, r3, #16
 8017a3a:	d109      	bne.n	8017a50 <_strtoul_l.constprop.0+0x3c>
 8017a3c:	2c30      	cmp	r4, #48	@ 0x30
 8017a3e:	d12c      	bne.n	8017a9a <_strtoul_l.constprop.0+0x86>
 8017a40:	7828      	ldrb	r0, [r5, #0]
 8017a42:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017a46:	2858      	cmp	r0, #88	@ 0x58
 8017a48:	d127      	bne.n	8017a9a <_strtoul_l.constprop.0+0x86>
 8017a4a:	786c      	ldrb	r4, [r5, #1]
 8017a4c:	2310      	movs	r3, #16
 8017a4e:	3502      	adds	r5, #2
 8017a50:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017a54:	2600      	movs	r6, #0
 8017a56:	fbb8 f8f3 	udiv	r8, r8, r3
 8017a5a:	fb03 f908 	mul.w	r9, r3, r8
 8017a5e:	ea6f 0909 	mvn.w	r9, r9
 8017a62:	4630      	mov	r0, r6
 8017a64:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017a68:	f1bc 0f09 	cmp.w	ip, #9
 8017a6c:	d81c      	bhi.n	8017aa8 <_strtoul_l.constprop.0+0x94>
 8017a6e:	4664      	mov	r4, ip
 8017a70:	42a3      	cmp	r3, r4
 8017a72:	dd2a      	ble.n	8017aca <_strtoul_l.constprop.0+0xb6>
 8017a74:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017a78:	d007      	beq.n	8017a8a <_strtoul_l.constprop.0+0x76>
 8017a7a:	4580      	cmp	r8, r0
 8017a7c:	d322      	bcc.n	8017ac4 <_strtoul_l.constprop.0+0xb0>
 8017a7e:	d101      	bne.n	8017a84 <_strtoul_l.constprop.0+0x70>
 8017a80:	45a1      	cmp	r9, r4
 8017a82:	db1f      	blt.n	8017ac4 <_strtoul_l.constprop.0+0xb0>
 8017a84:	fb00 4003 	mla	r0, r0, r3, r4
 8017a88:	2601      	movs	r6, #1
 8017a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a8e:	e7e9      	b.n	8017a64 <_strtoul_l.constprop.0+0x50>
 8017a90:	2c2b      	cmp	r4, #43	@ 0x2b
 8017a92:	bf04      	itt	eq
 8017a94:	782c      	ldrbeq	r4, [r5, #0]
 8017a96:	1c85      	addeq	r5, r0, #2
 8017a98:	e7cd      	b.n	8017a36 <_strtoul_l.constprop.0+0x22>
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d1d8      	bne.n	8017a50 <_strtoul_l.constprop.0+0x3c>
 8017a9e:	2c30      	cmp	r4, #48	@ 0x30
 8017aa0:	bf0c      	ite	eq
 8017aa2:	2308      	moveq	r3, #8
 8017aa4:	230a      	movne	r3, #10
 8017aa6:	e7d3      	b.n	8017a50 <_strtoul_l.constprop.0+0x3c>
 8017aa8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017aac:	f1bc 0f19 	cmp.w	ip, #25
 8017ab0:	d801      	bhi.n	8017ab6 <_strtoul_l.constprop.0+0xa2>
 8017ab2:	3c37      	subs	r4, #55	@ 0x37
 8017ab4:	e7dc      	b.n	8017a70 <_strtoul_l.constprop.0+0x5c>
 8017ab6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017aba:	f1bc 0f19 	cmp.w	ip, #25
 8017abe:	d804      	bhi.n	8017aca <_strtoul_l.constprop.0+0xb6>
 8017ac0:	3c57      	subs	r4, #87	@ 0x57
 8017ac2:	e7d5      	b.n	8017a70 <_strtoul_l.constprop.0+0x5c>
 8017ac4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017ac8:	e7df      	b.n	8017a8a <_strtoul_l.constprop.0+0x76>
 8017aca:	1c73      	adds	r3, r6, #1
 8017acc:	d106      	bne.n	8017adc <_strtoul_l.constprop.0+0xc8>
 8017ace:	2322      	movs	r3, #34	@ 0x22
 8017ad0:	f8ce 3000 	str.w	r3, [lr]
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	b932      	cbnz	r2, 8017ae6 <_strtoul_l.constprop.0+0xd2>
 8017ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017adc:	b107      	cbz	r7, 8017ae0 <_strtoul_l.constprop.0+0xcc>
 8017ade:	4240      	negs	r0, r0
 8017ae0:	2a00      	cmp	r2, #0
 8017ae2:	d0f9      	beq.n	8017ad8 <_strtoul_l.constprop.0+0xc4>
 8017ae4:	b106      	cbz	r6, 8017ae8 <_strtoul_l.constprop.0+0xd4>
 8017ae6:	1e69      	subs	r1, r5, #1
 8017ae8:	6011      	str	r1, [r2, #0]
 8017aea:	e7f5      	b.n	8017ad8 <_strtoul_l.constprop.0+0xc4>
 8017aec:	0801987c 	.word	0x0801987c

08017af0 <strtoul>:
 8017af0:	4613      	mov	r3, r2
 8017af2:	460a      	mov	r2, r1
 8017af4:	4601      	mov	r1, r0
 8017af6:	4802      	ldr	r0, [pc, #8]	@ (8017b00 <strtoul+0x10>)
 8017af8:	6800      	ldr	r0, [r0, #0]
 8017afa:	f7ff bf8b 	b.w	8017a14 <_strtoul_l.constprop.0>
 8017afe:	bf00      	nop
 8017b00:	240000c4 	.word	0x240000c4

08017b04 <std>:
 8017b04:	2300      	movs	r3, #0
 8017b06:	b510      	push	{r4, lr}
 8017b08:	4604      	mov	r4, r0
 8017b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8017b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b12:	6083      	str	r3, [r0, #8]
 8017b14:	8181      	strh	r1, [r0, #12]
 8017b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8017b18:	81c2      	strh	r2, [r0, #14]
 8017b1a:	6183      	str	r3, [r0, #24]
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	2208      	movs	r2, #8
 8017b20:	305c      	adds	r0, #92	@ 0x5c
 8017b22:	f000 f961 	bl	8017de8 <memset>
 8017b26:	4b0d      	ldr	r3, [pc, #52]	@ (8017b5c <std+0x58>)
 8017b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017b60 <std+0x5c>)
 8017b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b64 <std+0x60>)
 8017b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b32:	4b0d      	ldr	r3, [pc, #52]	@ (8017b68 <std+0x64>)
 8017b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b36:	4b0d      	ldr	r3, [pc, #52]	@ (8017b6c <std+0x68>)
 8017b38:	6224      	str	r4, [r4, #32]
 8017b3a:	429c      	cmp	r4, r3
 8017b3c:	d006      	beq.n	8017b4c <std+0x48>
 8017b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017b42:	4294      	cmp	r4, r2
 8017b44:	d002      	beq.n	8017b4c <std+0x48>
 8017b46:	33d0      	adds	r3, #208	@ 0xd0
 8017b48:	429c      	cmp	r4, r3
 8017b4a:	d105      	bne.n	8017b58 <std+0x54>
 8017b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b54:	f000 ba5c 	b.w	8018010 <__retarget_lock_init_recursive>
 8017b58:	bd10      	pop	{r4, pc}
 8017b5a:	bf00      	nop
 8017b5c:	08017cf1 	.word	0x08017cf1
 8017b60:	08017d13 	.word	0x08017d13
 8017b64:	08017d4b 	.word	0x08017d4b
 8017b68:	08017d6f 	.word	0x08017d6f
 8017b6c:	240686d0 	.word	0x240686d0

08017b70 <stdio_exit_handler>:
 8017b70:	4a02      	ldr	r2, [pc, #8]	@ (8017b7c <stdio_exit_handler+0xc>)
 8017b72:	4903      	ldr	r1, [pc, #12]	@ (8017b80 <stdio_exit_handler+0x10>)
 8017b74:	4803      	ldr	r0, [pc, #12]	@ (8017b84 <stdio_exit_handler+0x14>)
 8017b76:	f000 b869 	b.w	8017c4c <_fwalk_sglue>
 8017b7a:	bf00      	nop
 8017b7c:	240000b8 	.word	0x240000b8
 8017b80:	08018811 	.word	0x08018811
 8017b84:	240000c8 	.word	0x240000c8

08017b88 <cleanup_stdio>:
 8017b88:	6841      	ldr	r1, [r0, #4]
 8017b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8017bbc <cleanup_stdio+0x34>)
 8017b8c:	4299      	cmp	r1, r3
 8017b8e:	b510      	push	{r4, lr}
 8017b90:	4604      	mov	r4, r0
 8017b92:	d001      	beq.n	8017b98 <cleanup_stdio+0x10>
 8017b94:	f000 fe3c 	bl	8018810 <_fflush_r>
 8017b98:	68a1      	ldr	r1, [r4, #8]
 8017b9a:	4b09      	ldr	r3, [pc, #36]	@ (8017bc0 <cleanup_stdio+0x38>)
 8017b9c:	4299      	cmp	r1, r3
 8017b9e:	d002      	beq.n	8017ba6 <cleanup_stdio+0x1e>
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	f000 fe35 	bl	8018810 <_fflush_r>
 8017ba6:	68e1      	ldr	r1, [r4, #12]
 8017ba8:	4b06      	ldr	r3, [pc, #24]	@ (8017bc4 <cleanup_stdio+0x3c>)
 8017baa:	4299      	cmp	r1, r3
 8017bac:	d004      	beq.n	8017bb8 <cleanup_stdio+0x30>
 8017bae:	4620      	mov	r0, r4
 8017bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bb4:	f000 be2c 	b.w	8018810 <_fflush_r>
 8017bb8:	bd10      	pop	{r4, pc}
 8017bba:	bf00      	nop
 8017bbc:	240686d0 	.word	0x240686d0
 8017bc0:	24068738 	.word	0x24068738
 8017bc4:	240687a0 	.word	0x240687a0

08017bc8 <global_stdio_init.part.0>:
 8017bc8:	b510      	push	{r4, lr}
 8017bca:	4b0b      	ldr	r3, [pc, #44]	@ (8017bf8 <global_stdio_init.part.0+0x30>)
 8017bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8017bfc <global_stdio_init.part.0+0x34>)
 8017bce:	4a0c      	ldr	r2, [pc, #48]	@ (8017c00 <global_stdio_init.part.0+0x38>)
 8017bd0:	601a      	str	r2, [r3, #0]
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	2104      	movs	r1, #4
 8017bd8:	f7ff ff94 	bl	8017b04 <std>
 8017bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017be0:	2201      	movs	r2, #1
 8017be2:	2109      	movs	r1, #9
 8017be4:	f7ff ff8e 	bl	8017b04 <std>
 8017be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017bec:	2202      	movs	r2, #2
 8017bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bf2:	2112      	movs	r1, #18
 8017bf4:	f7ff bf86 	b.w	8017b04 <std>
 8017bf8:	24068808 	.word	0x24068808
 8017bfc:	240686d0 	.word	0x240686d0
 8017c00:	08017b71 	.word	0x08017b71

08017c04 <__sfp_lock_acquire>:
 8017c04:	4801      	ldr	r0, [pc, #4]	@ (8017c0c <__sfp_lock_acquire+0x8>)
 8017c06:	f000 ba04 	b.w	8018012 <__retarget_lock_acquire_recursive>
 8017c0a:	bf00      	nop
 8017c0c:	24068812 	.word	0x24068812

08017c10 <__sfp_lock_release>:
 8017c10:	4801      	ldr	r0, [pc, #4]	@ (8017c18 <__sfp_lock_release+0x8>)
 8017c12:	f000 b9ff 	b.w	8018014 <__retarget_lock_release_recursive>
 8017c16:	bf00      	nop
 8017c18:	24068812 	.word	0x24068812

08017c1c <__sinit>:
 8017c1c:	b510      	push	{r4, lr}
 8017c1e:	4604      	mov	r4, r0
 8017c20:	f7ff fff0 	bl	8017c04 <__sfp_lock_acquire>
 8017c24:	6a23      	ldr	r3, [r4, #32]
 8017c26:	b11b      	cbz	r3, 8017c30 <__sinit+0x14>
 8017c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c2c:	f7ff bff0 	b.w	8017c10 <__sfp_lock_release>
 8017c30:	4b04      	ldr	r3, [pc, #16]	@ (8017c44 <__sinit+0x28>)
 8017c32:	6223      	str	r3, [r4, #32]
 8017c34:	4b04      	ldr	r3, [pc, #16]	@ (8017c48 <__sinit+0x2c>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d1f5      	bne.n	8017c28 <__sinit+0xc>
 8017c3c:	f7ff ffc4 	bl	8017bc8 <global_stdio_init.part.0>
 8017c40:	e7f2      	b.n	8017c28 <__sinit+0xc>
 8017c42:	bf00      	nop
 8017c44:	08017b89 	.word	0x08017b89
 8017c48:	24068808 	.word	0x24068808

08017c4c <_fwalk_sglue>:
 8017c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c50:	4607      	mov	r7, r0
 8017c52:	4688      	mov	r8, r1
 8017c54:	4614      	mov	r4, r2
 8017c56:	2600      	movs	r6, #0
 8017c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8017c60:	d505      	bpl.n	8017c6e <_fwalk_sglue+0x22>
 8017c62:	6824      	ldr	r4, [r4, #0]
 8017c64:	2c00      	cmp	r4, #0
 8017c66:	d1f7      	bne.n	8017c58 <_fwalk_sglue+0xc>
 8017c68:	4630      	mov	r0, r6
 8017c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c6e:	89ab      	ldrh	r3, [r5, #12]
 8017c70:	2b01      	cmp	r3, #1
 8017c72:	d907      	bls.n	8017c84 <_fwalk_sglue+0x38>
 8017c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	d003      	beq.n	8017c84 <_fwalk_sglue+0x38>
 8017c7c:	4629      	mov	r1, r5
 8017c7e:	4638      	mov	r0, r7
 8017c80:	47c0      	blx	r8
 8017c82:	4306      	orrs	r6, r0
 8017c84:	3568      	adds	r5, #104	@ 0x68
 8017c86:	e7e9      	b.n	8017c5c <_fwalk_sglue+0x10>

08017c88 <sniprintf>:
 8017c88:	b40c      	push	{r2, r3}
 8017c8a:	b530      	push	{r4, r5, lr}
 8017c8c:	4b17      	ldr	r3, [pc, #92]	@ (8017cec <sniprintf+0x64>)
 8017c8e:	1e0c      	subs	r4, r1, #0
 8017c90:	681d      	ldr	r5, [r3, #0]
 8017c92:	b09d      	sub	sp, #116	@ 0x74
 8017c94:	da08      	bge.n	8017ca8 <sniprintf+0x20>
 8017c96:	238b      	movs	r3, #139	@ 0x8b
 8017c98:	602b      	str	r3, [r5, #0]
 8017c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c9e:	b01d      	add	sp, #116	@ 0x74
 8017ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ca4:	b002      	add	sp, #8
 8017ca6:	4770      	bx	lr
 8017ca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017cac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cb0:	bf14      	ite	ne
 8017cb2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017cb6:	4623      	moveq	r3, r4
 8017cb8:	9304      	str	r3, [sp, #16]
 8017cba:	9307      	str	r3, [sp, #28]
 8017cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017cc0:	9002      	str	r0, [sp, #8]
 8017cc2:	9006      	str	r0, [sp, #24]
 8017cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017cc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017cca:	ab21      	add	r3, sp, #132	@ 0x84
 8017ccc:	a902      	add	r1, sp, #8
 8017cce:	4628      	mov	r0, r5
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	f000 fa8f 	bl	80181f4 <_svfiprintf_r>
 8017cd6:	1c43      	adds	r3, r0, #1
 8017cd8:	bfbc      	itt	lt
 8017cda:	238b      	movlt	r3, #139	@ 0x8b
 8017cdc:	602b      	strlt	r3, [r5, #0]
 8017cde:	2c00      	cmp	r4, #0
 8017ce0:	d0dd      	beq.n	8017c9e <sniprintf+0x16>
 8017ce2:	9b02      	ldr	r3, [sp, #8]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	701a      	strb	r2, [r3, #0]
 8017ce8:	e7d9      	b.n	8017c9e <sniprintf+0x16>
 8017cea:	bf00      	nop
 8017cec:	240000c4 	.word	0x240000c4

08017cf0 <__sread>:
 8017cf0:	b510      	push	{r4, lr}
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf8:	f000 f92c 	bl	8017f54 <_read_r>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	bfab      	itete	ge
 8017d00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017d02:	89a3      	ldrhlt	r3, [r4, #12]
 8017d04:	181b      	addge	r3, r3, r0
 8017d06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017d0a:	bfac      	ite	ge
 8017d0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017d0e:	81a3      	strhlt	r3, [r4, #12]
 8017d10:	bd10      	pop	{r4, pc}

08017d12 <__swrite>:
 8017d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d16:	461f      	mov	r7, r3
 8017d18:	898b      	ldrh	r3, [r1, #12]
 8017d1a:	05db      	lsls	r3, r3, #23
 8017d1c:	4605      	mov	r5, r0
 8017d1e:	460c      	mov	r4, r1
 8017d20:	4616      	mov	r6, r2
 8017d22:	d505      	bpl.n	8017d30 <__swrite+0x1e>
 8017d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d28:	2302      	movs	r3, #2
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f000 f900 	bl	8017f30 <_lseek_r>
 8017d30:	89a3      	ldrh	r3, [r4, #12]
 8017d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017d3a:	81a3      	strh	r3, [r4, #12]
 8017d3c:	4632      	mov	r2, r6
 8017d3e:	463b      	mov	r3, r7
 8017d40:	4628      	mov	r0, r5
 8017d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d46:	f000 b927 	b.w	8017f98 <_write_r>

08017d4a <__sseek>:
 8017d4a:	b510      	push	{r4, lr}
 8017d4c:	460c      	mov	r4, r1
 8017d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d52:	f000 f8ed 	bl	8017f30 <_lseek_r>
 8017d56:	1c43      	adds	r3, r0, #1
 8017d58:	89a3      	ldrh	r3, [r4, #12]
 8017d5a:	bf15      	itete	ne
 8017d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017d66:	81a3      	strheq	r3, [r4, #12]
 8017d68:	bf18      	it	ne
 8017d6a:	81a3      	strhne	r3, [r4, #12]
 8017d6c:	bd10      	pop	{r4, pc}

08017d6e <__sclose>:
 8017d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d72:	f000 b877 	b.w	8017e64 <_close_r>

08017d76 <_vsniprintf_r>:
 8017d76:	b530      	push	{r4, r5, lr}
 8017d78:	4614      	mov	r4, r2
 8017d7a:	2c00      	cmp	r4, #0
 8017d7c:	b09b      	sub	sp, #108	@ 0x6c
 8017d7e:	4605      	mov	r5, r0
 8017d80:	461a      	mov	r2, r3
 8017d82:	da05      	bge.n	8017d90 <_vsniprintf_r+0x1a>
 8017d84:	238b      	movs	r3, #139	@ 0x8b
 8017d86:	6003      	str	r3, [r0, #0]
 8017d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d8c:	b01b      	add	sp, #108	@ 0x6c
 8017d8e:	bd30      	pop	{r4, r5, pc}
 8017d90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017d94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d98:	bf14      	ite	ne
 8017d9a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017d9e:	4623      	moveq	r3, r4
 8017da0:	9302      	str	r3, [sp, #8]
 8017da2:	9305      	str	r3, [sp, #20]
 8017da4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017da8:	9100      	str	r1, [sp, #0]
 8017daa:	9104      	str	r1, [sp, #16]
 8017dac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017db0:	4669      	mov	r1, sp
 8017db2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017db4:	f000 fa1e 	bl	80181f4 <_svfiprintf_r>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	bfbc      	itt	lt
 8017dbc:	238b      	movlt	r3, #139	@ 0x8b
 8017dbe:	602b      	strlt	r3, [r5, #0]
 8017dc0:	2c00      	cmp	r4, #0
 8017dc2:	d0e3      	beq.n	8017d8c <_vsniprintf_r+0x16>
 8017dc4:	9b00      	ldr	r3, [sp, #0]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	701a      	strb	r2, [r3, #0]
 8017dca:	e7df      	b.n	8017d8c <_vsniprintf_r+0x16>

08017dcc <vsniprintf>:
 8017dcc:	b507      	push	{r0, r1, r2, lr}
 8017dce:	9300      	str	r3, [sp, #0]
 8017dd0:	4613      	mov	r3, r2
 8017dd2:	460a      	mov	r2, r1
 8017dd4:	4601      	mov	r1, r0
 8017dd6:	4803      	ldr	r0, [pc, #12]	@ (8017de4 <vsniprintf+0x18>)
 8017dd8:	6800      	ldr	r0, [r0, #0]
 8017dda:	f7ff ffcc 	bl	8017d76 <_vsniprintf_r>
 8017dde:	b003      	add	sp, #12
 8017de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017de4:	240000c4 	.word	0x240000c4

08017de8 <memset>:
 8017de8:	4402      	add	r2, r0
 8017dea:	4603      	mov	r3, r0
 8017dec:	4293      	cmp	r3, r2
 8017dee:	d100      	bne.n	8017df2 <memset+0xa>
 8017df0:	4770      	bx	lr
 8017df2:	f803 1b01 	strb.w	r1, [r3], #1
 8017df6:	e7f9      	b.n	8017dec <memset+0x4>

08017df8 <strchr>:
 8017df8:	b2c9      	uxtb	r1, r1
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e02:	b112      	cbz	r2, 8017e0a <strchr+0x12>
 8017e04:	428a      	cmp	r2, r1
 8017e06:	d1f9      	bne.n	8017dfc <strchr+0x4>
 8017e08:	4770      	bx	lr
 8017e0a:	2900      	cmp	r1, #0
 8017e0c:	bf18      	it	ne
 8017e0e:	2000      	movne	r0, #0
 8017e10:	4770      	bx	lr

08017e12 <strncmp>:
 8017e12:	b510      	push	{r4, lr}
 8017e14:	b16a      	cbz	r2, 8017e32 <strncmp+0x20>
 8017e16:	3901      	subs	r1, #1
 8017e18:	1884      	adds	r4, r0, r2
 8017e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d103      	bne.n	8017e2e <strncmp+0x1c>
 8017e26:	42a0      	cmp	r0, r4
 8017e28:	d001      	beq.n	8017e2e <strncmp+0x1c>
 8017e2a:	2a00      	cmp	r2, #0
 8017e2c:	d1f5      	bne.n	8017e1a <strncmp+0x8>
 8017e2e:	1ad0      	subs	r0, r2, r3
 8017e30:	bd10      	pop	{r4, pc}
 8017e32:	4610      	mov	r0, r2
 8017e34:	e7fc      	b.n	8017e30 <strncmp+0x1e>

08017e36 <strstr>:
 8017e36:	780a      	ldrb	r2, [r1, #0]
 8017e38:	b570      	push	{r4, r5, r6, lr}
 8017e3a:	b96a      	cbnz	r2, 8017e58 <strstr+0x22>
 8017e3c:	bd70      	pop	{r4, r5, r6, pc}
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d109      	bne.n	8017e56 <strstr+0x20>
 8017e42:	460c      	mov	r4, r1
 8017e44:	4605      	mov	r5, r0
 8017e46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d0f6      	beq.n	8017e3c <strstr+0x6>
 8017e4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017e52:	429e      	cmp	r6, r3
 8017e54:	d0f7      	beq.n	8017e46 <strstr+0x10>
 8017e56:	3001      	adds	r0, #1
 8017e58:	7803      	ldrb	r3, [r0, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1ef      	bne.n	8017e3e <strstr+0x8>
 8017e5e:	4618      	mov	r0, r3
 8017e60:	e7ec      	b.n	8017e3c <strstr+0x6>
	...

08017e64 <_close_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d06      	ldr	r5, [pc, #24]	@ (8017e80 <_close_r+0x1c>)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	602b      	str	r3, [r5, #0]
 8017e70:	f7e9 fe48 	bl	8001b04 <_close>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_close_r+0x1a>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_close_r+0x1a>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	2406880c 	.word	0x2406880c

08017e84 <_reclaim_reent>:
 8017e84:	4b29      	ldr	r3, [pc, #164]	@ (8017f2c <_reclaim_reent+0xa8>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	4283      	cmp	r3, r0
 8017e8a:	b570      	push	{r4, r5, r6, lr}
 8017e8c:	4604      	mov	r4, r0
 8017e8e:	d04b      	beq.n	8017f28 <_reclaim_reent+0xa4>
 8017e90:	69c3      	ldr	r3, [r0, #28]
 8017e92:	b1ab      	cbz	r3, 8017ec0 <_reclaim_reent+0x3c>
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	b16b      	cbz	r3, 8017eb4 <_reclaim_reent+0x30>
 8017e98:	2500      	movs	r5, #0
 8017e9a:	69e3      	ldr	r3, [r4, #28]
 8017e9c:	68db      	ldr	r3, [r3, #12]
 8017e9e:	5959      	ldr	r1, [r3, r5]
 8017ea0:	2900      	cmp	r1, #0
 8017ea2:	d13b      	bne.n	8017f1c <_reclaim_reent+0x98>
 8017ea4:	3504      	adds	r5, #4
 8017ea6:	2d80      	cmp	r5, #128	@ 0x80
 8017ea8:	d1f7      	bne.n	8017e9a <_reclaim_reent+0x16>
 8017eaa:	69e3      	ldr	r3, [r4, #28]
 8017eac:	4620      	mov	r0, r4
 8017eae:	68d9      	ldr	r1, [r3, #12]
 8017eb0:	f000 f8f2 	bl	8018098 <_free_r>
 8017eb4:	69e3      	ldr	r3, [r4, #28]
 8017eb6:	6819      	ldr	r1, [r3, #0]
 8017eb8:	b111      	cbz	r1, 8017ec0 <_reclaim_reent+0x3c>
 8017eba:	4620      	mov	r0, r4
 8017ebc:	f000 f8ec 	bl	8018098 <_free_r>
 8017ec0:	6961      	ldr	r1, [r4, #20]
 8017ec2:	b111      	cbz	r1, 8017eca <_reclaim_reent+0x46>
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f000 f8e7 	bl	8018098 <_free_r>
 8017eca:	69e1      	ldr	r1, [r4, #28]
 8017ecc:	b111      	cbz	r1, 8017ed4 <_reclaim_reent+0x50>
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f000 f8e2 	bl	8018098 <_free_r>
 8017ed4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017ed6:	b111      	cbz	r1, 8017ede <_reclaim_reent+0x5a>
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f000 f8dd 	bl	8018098 <_free_r>
 8017ede:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ee0:	b111      	cbz	r1, 8017ee8 <_reclaim_reent+0x64>
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f000 f8d8 	bl	8018098 <_free_r>
 8017ee8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017eea:	b111      	cbz	r1, 8017ef2 <_reclaim_reent+0x6e>
 8017eec:	4620      	mov	r0, r4
 8017eee:	f000 f8d3 	bl	8018098 <_free_r>
 8017ef2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017ef4:	b111      	cbz	r1, 8017efc <_reclaim_reent+0x78>
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f000 f8ce 	bl	8018098 <_free_r>
 8017efc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017efe:	b111      	cbz	r1, 8017f06 <_reclaim_reent+0x82>
 8017f00:	4620      	mov	r0, r4
 8017f02:	f000 f8c9 	bl	8018098 <_free_r>
 8017f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017f08:	b111      	cbz	r1, 8017f10 <_reclaim_reent+0x8c>
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	f000 f8c4 	bl	8018098 <_free_r>
 8017f10:	6a23      	ldr	r3, [r4, #32]
 8017f12:	b14b      	cbz	r3, 8017f28 <_reclaim_reent+0xa4>
 8017f14:	4620      	mov	r0, r4
 8017f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f1a:	4718      	bx	r3
 8017f1c:	680e      	ldr	r6, [r1, #0]
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f000 f8ba 	bl	8018098 <_free_r>
 8017f24:	4631      	mov	r1, r6
 8017f26:	e7bb      	b.n	8017ea0 <_reclaim_reent+0x1c>
 8017f28:	bd70      	pop	{r4, r5, r6, pc}
 8017f2a:	bf00      	nop
 8017f2c:	240000c4 	.word	0x240000c4

08017f30 <_lseek_r>:
 8017f30:	b538      	push	{r3, r4, r5, lr}
 8017f32:	4d07      	ldr	r5, [pc, #28]	@ (8017f50 <_lseek_r+0x20>)
 8017f34:	4604      	mov	r4, r0
 8017f36:	4608      	mov	r0, r1
 8017f38:	4611      	mov	r1, r2
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	602a      	str	r2, [r5, #0]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	f7e9 fe07 	bl	8001b52 <_lseek>
 8017f44:	1c43      	adds	r3, r0, #1
 8017f46:	d102      	bne.n	8017f4e <_lseek_r+0x1e>
 8017f48:	682b      	ldr	r3, [r5, #0]
 8017f4a:	b103      	cbz	r3, 8017f4e <_lseek_r+0x1e>
 8017f4c:	6023      	str	r3, [r4, #0]
 8017f4e:	bd38      	pop	{r3, r4, r5, pc}
 8017f50:	2406880c 	.word	0x2406880c

08017f54 <_read_r>:
 8017f54:	b538      	push	{r3, r4, r5, lr}
 8017f56:	4d07      	ldr	r5, [pc, #28]	@ (8017f74 <_read_r+0x20>)
 8017f58:	4604      	mov	r4, r0
 8017f5a:	4608      	mov	r0, r1
 8017f5c:	4611      	mov	r1, r2
 8017f5e:	2200      	movs	r2, #0
 8017f60:	602a      	str	r2, [r5, #0]
 8017f62:	461a      	mov	r2, r3
 8017f64:	f7e9 fd95 	bl	8001a92 <_read>
 8017f68:	1c43      	adds	r3, r0, #1
 8017f6a:	d102      	bne.n	8017f72 <_read_r+0x1e>
 8017f6c:	682b      	ldr	r3, [r5, #0]
 8017f6e:	b103      	cbz	r3, 8017f72 <_read_r+0x1e>
 8017f70:	6023      	str	r3, [r4, #0]
 8017f72:	bd38      	pop	{r3, r4, r5, pc}
 8017f74:	2406880c 	.word	0x2406880c

08017f78 <_sbrk_r>:
 8017f78:	b538      	push	{r3, r4, r5, lr}
 8017f7a:	4d06      	ldr	r5, [pc, #24]	@ (8017f94 <_sbrk_r+0x1c>)
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	4604      	mov	r4, r0
 8017f80:	4608      	mov	r0, r1
 8017f82:	602b      	str	r3, [r5, #0]
 8017f84:	f7e9 fdf2 	bl	8001b6c <_sbrk>
 8017f88:	1c43      	adds	r3, r0, #1
 8017f8a:	d102      	bne.n	8017f92 <_sbrk_r+0x1a>
 8017f8c:	682b      	ldr	r3, [r5, #0]
 8017f8e:	b103      	cbz	r3, 8017f92 <_sbrk_r+0x1a>
 8017f90:	6023      	str	r3, [r4, #0]
 8017f92:	bd38      	pop	{r3, r4, r5, pc}
 8017f94:	2406880c 	.word	0x2406880c

08017f98 <_write_r>:
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4d07      	ldr	r5, [pc, #28]	@ (8017fb8 <_write_r+0x20>)
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	4608      	mov	r0, r1
 8017fa0:	4611      	mov	r1, r2
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	602a      	str	r2, [r5, #0]
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	f7e9 fd90 	bl	8001acc <_write>
 8017fac:	1c43      	adds	r3, r0, #1
 8017fae:	d102      	bne.n	8017fb6 <_write_r+0x1e>
 8017fb0:	682b      	ldr	r3, [r5, #0]
 8017fb2:	b103      	cbz	r3, 8017fb6 <_write_r+0x1e>
 8017fb4:	6023      	str	r3, [r4, #0]
 8017fb6:	bd38      	pop	{r3, r4, r5, pc}
 8017fb8:	2406880c 	.word	0x2406880c

08017fbc <__errno>:
 8017fbc:	4b01      	ldr	r3, [pc, #4]	@ (8017fc4 <__errno+0x8>)
 8017fbe:	6818      	ldr	r0, [r3, #0]
 8017fc0:	4770      	bx	lr
 8017fc2:	bf00      	nop
 8017fc4:	240000c4 	.word	0x240000c4

08017fc8 <__libc_init_array>:
 8017fc8:	b570      	push	{r4, r5, r6, lr}
 8017fca:	4d0d      	ldr	r5, [pc, #52]	@ (8018000 <__libc_init_array+0x38>)
 8017fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8018004 <__libc_init_array+0x3c>)
 8017fce:	1b64      	subs	r4, r4, r5
 8017fd0:	10a4      	asrs	r4, r4, #2
 8017fd2:	2600      	movs	r6, #0
 8017fd4:	42a6      	cmp	r6, r4
 8017fd6:	d109      	bne.n	8017fec <__libc_init_array+0x24>
 8017fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8018008 <__libc_init_array+0x40>)
 8017fda:	4c0c      	ldr	r4, [pc, #48]	@ (801800c <__libc_init_array+0x44>)
 8017fdc:	f000 ff10 	bl	8018e00 <_init>
 8017fe0:	1b64      	subs	r4, r4, r5
 8017fe2:	10a4      	asrs	r4, r4, #2
 8017fe4:	2600      	movs	r6, #0
 8017fe6:	42a6      	cmp	r6, r4
 8017fe8:	d105      	bne.n	8017ff6 <__libc_init_array+0x2e>
 8017fea:	bd70      	pop	{r4, r5, r6, pc}
 8017fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ff0:	4798      	blx	r3
 8017ff2:	3601      	adds	r6, #1
 8017ff4:	e7ee      	b.n	8017fd4 <__libc_init_array+0xc>
 8017ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ffa:	4798      	blx	r3
 8017ffc:	3601      	adds	r6, #1
 8017ffe:	e7f2      	b.n	8017fe6 <__libc_init_array+0x1e>
 8018000:	080199f4 	.word	0x080199f4
 8018004:	080199f4 	.word	0x080199f4
 8018008:	080199f4 	.word	0x080199f4
 801800c:	080199fc 	.word	0x080199fc

08018010 <__retarget_lock_init_recursive>:
 8018010:	4770      	bx	lr

08018012 <__retarget_lock_acquire_recursive>:
 8018012:	4770      	bx	lr

08018014 <__retarget_lock_release_recursive>:
 8018014:	4770      	bx	lr

08018016 <strcpy>:
 8018016:	4603      	mov	r3, r0
 8018018:	f811 2b01 	ldrb.w	r2, [r1], #1
 801801c:	f803 2b01 	strb.w	r2, [r3], #1
 8018020:	2a00      	cmp	r2, #0
 8018022:	d1f9      	bne.n	8018018 <strcpy+0x2>
 8018024:	4770      	bx	lr

08018026 <memcpy>:
 8018026:	440a      	add	r2, r1
 8018028:	4291      	cmp	r1, r2
 801802a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801802e:	d100      	bne.n	8018032 <memcpy+0xc>
 8018030:	4770      	bx	lr
 8018032:	b510      	push	{r4, lr}
 8018034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801803c:	4291      	cmp	r1, r2
 801803e:	d1f9      	bne.n	8018034 <memcpy+0xe>
 8018040:	bd10      	pop	{r4, pc}
	...

08018044 <__assert_func>:
 8018044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018046:	4614      	mov	r4, r2
 8018048:	461a      	mov	r2, r3
 801804a:	4b09      	ldr	r3, [pc, #36]	@ (8018070 <__assert_func+0x2c>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	4605      	mov	r5, r0
 8018050:	68d8      	ldr	r0, [r3, #12]
 8018052:	b954      	cbnz	r4, 801806a <__assert_func+0x26>
 8018054:	4b07      	ldr	r3, [pc, #28]	@ (8018074 <__assert_func+0x30>)
 8018056:	461c      	mov	r4, r3
 8018058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801805c:	9100      	str	r1, [sp, #0]
 801805e:	462b      	mov	r3, r5
 8018060:	4905      	ldr	r1, [pc, #20]	@ (8018078 <__assert_func+0x34>)
 8018062:	f000 fbfd 	bl	8018860 <fiprintf>
 8018066:	f000 fc27 	bl	80188b8 <abort>
 801806a:	4b04      	ldr	r3, [pc, #16]	@ (801807c <__assert_func+0x38>)
 801806c:	e7f4      	b.n	8018058 <__assert_func+0x14>
 801806e:	bf00      	nop
 8018070:	240000c4 	.word	0x240000c4
 8018074:	080199b7 	.word	0x080199b7
 8018078:	08019989 	.word	0x08019989
 801807c:	0801997c 	.word	0x0801997c

08018080 <__env_lock>:
 8018080:	4801      	ldr	r0, [pc, #4]	@ (8018088 <__env_lock+0x8>)
 8018082:	f7ff bfc6 	b.w	8018012 <__retarget_lock_acquire_recursive>
 8018086:	bf00      	nop
 8018088:	24068810 	.word	0x24068810

0801808c <__env_unlock>:
 801808c:	4801      	ldr	r0, [pc, #4]	@ (8018094 <__env_unlock+0x8>)
 801808e:	f7ff bfc1 	b.w	8018014 <__retarget_lock_release_recursive>
 8018092:	bf00      	nop
 8018094:	24068810 	.word	0x24068810

08018098 <_free_r>:
 8018098:	b538      	push	{r3, r4, r5, lr}
 801809a:	4605      	mov	r5, r0
 801809c:	2900      	cmp	r1, #0
 801809e:	d041      	beq.n	8018124 <_free_r+0x8c>
 80180a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180a4:	1f0c      	subs	r4, r1, #4
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	bfb8      	it	lt
 80180aa:	18e4      	addlt	r4, r4, r3
 80180ac:	f7ff fc04 	bl	80178b8 <__malloc_lock>
 80180b0:	4a1d      	ldr	r2, [pc, #116]	@ (8018128 <_free_r+0x90>)
 80180b2:	6813      	ldr	r3, [r2, #0]
 80180b4:	b933      	cbnz	r3, 80180c4 <_free_r+0x2c>
 80180b6:	6063      	str	r3, [r4, #4]
 80180b8:	6014      	str	r4, [r2, #0]
 80180ba:	4628      	mov	r0, r5
 80180bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180c0:	f7ff bc00 	b.w	80178c4 <__malloc_unlock>
 80180c4:	42a3      	cmp	r3, r4
 80180c6:	d908      	bls.n	80180da <_free_r+0x42>
 80180c8:	6820      	ldr	r0, [r4, #0]
 80180ca:	1821      	adds	r1, r4, r0
 80180cc:	428b      	cmp	r3, r1
 80180ce:	bf01      	itttt	eq
 80180d0:	6819      	ldreq	r1, [r3, #0]
 80180d2:	685b      	ldreq	r3, [r3, #4]
 80180d4:	1809      	addeq	r1, r1, r0
 80180d6:	6021      	streq	r1, [r4, #0]
 80180d8:	e7ed      	b.n	80180b6 <_free_r+0x1e>
 80180da:	461a      	mov	r2, r3
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	b10b      	cbz	r3, 80180e4 <_free_r+0x4c>
 80180e0:	42a3      	cmp	r3, r4
 80180e2:	d9fa      	bls.n	80180da <_free_r+0x42>
 80180e4:	6811      	ldr	r1, [r2, #0]
 80180e6:	1850      	adds	r0, r2, r1
 80180e8:	42a0      	cmp	r0, r4
 80180ea:	d10b      	bne.n	8018104 <_free_r+0x6c>
 80180ec:	6820      	ldr	r0, [r4, #0]
 80180ee:	4401      	add	r1, r0
 80180f0:	1850      	adds	r0, r2, r1
 80180f2:	4283      	cmp	r3, r0
 80180f4:	6011      	str	r1, [r2, #0]
 80180f6:	d1e0      	bne.n	80180ba <_free_r+0x22>
 80180f8:	6818      	ldr	r0, [r3, #0]
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	6053      	str	r3, [r2, #4]
 80180fe:	4408      	add	r0, r1
 8018100:	6010      	str	r0, [r2, #0]
 8018102:	e7da      	b.n	80180ba <_free_r+0x22>
 8018104:	d902      	bls.n	801810c <_free_r+0x74>
 8018106:	230c      	movs	r3, #12
 8018108:	602b      	str	r3, [r5, #0]
 801810a:	e7d6      	b.n	80180ba <_free_r+0x22>
 801810c:	6820      	ldr	r0, [r4, #0]
 801810e:	1821      	adds	r1, r4, r0
 8018110:	428b      	cmp	r3, r1
 8018112:	bf04      	itt	eq
 8018114:	6819      	ldreq	r1, [r3, #0]
 8018116:	685b      	ldreq	r3, [r3, #4]
 8018118:	6063      	str	r3, [r4, #4]
 801811a:	bf04      	itt	eq
 801811c:	1809      	addeq	r1, r1, r0
 801811e:	6021      	streq	r1, [r4, #0]
 8018120:	6054      	str	r4, [r2, #4]
 8018122:	e7ca      	b.n	80180ba <_free_r+0x22>
 8018124:	bd38      	pop	{r3, r4, r5, pc}
 8018126:	bf00      	nop
 8018128:	240686cc 	.word	0x240686cc

0801812c <_malloc_usable_size_r>:
 801812c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018130:	1f18      	subs	r0, r3, #4
 8018132:	2b00      	cmp	r3, #0
 8018134:	bfbc      	itt	lt
 8018136:	580b      	ldrlt	r3, [r1, r0]
 8018138:	18c0      	addlt	r0, r0, r3
 801813a:	4770      	bx	lr

0801813c <__ssputs_r>:
 801813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018140:	688e      	ldr	r6, [r1, #8]
 8018142:	461f      	mov	r7, r3
 8018144:	42be      	cmp	r6, r7
 8018146:	680b      	ldr	r3, [r1, #0]
 8018148:	4682      	mov	sl, r0
 801814a:	460c      	mov	r4, r1
 801814c:	4690      	mov	r8, r2
 801814e:	d82d      	bhi.n	80181ac <__ssputs_r+0x70>
 8018150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018158:	d026      	beq.n	80181a8 <__ssputs_r+0x6c>
 801815a:	6965      	ldr	r5, [r4, #20]
 801815c:	6909      	ldr	r1, [r1, #16]
 801815e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018162:	eba3 0901 	sub.w	r9, r3, r1
 8018166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801816a:	1c7b      	adds	r3, r7, #1
 801816c:	444b      	add	r3, r9
 801816e:	106d      	asrs	r5, r5, #1
 8018170:	429d      	cmp	r5, r3
 8018172:	bf38      	it	cc
 8018174:	461d      	movcc	r5, r3
 8018176:	0553      	lsls	r3, r2, #21
 8018178:	d527      	bpl.n	80181ca <__ssputs_r+0x8e>
 801817a:	4629      	mov	r1, r5
 801817c:	f7ff fb1c 	bl	80177b8 <_malloc_r>
 8018180:	4606      	mov	r6, r0
 8018182:	b360      	cbz	r0, 80181de <__ssputs_r+0xa2>
 8018184:	6921      	ldr	r1, [r4, #16]
 8018186:	464a      	mov	r2, r9
 8018188:	f7ff ff4d 	bl	8018026 <memcpy>
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018196:	81a3      	strh	r3, [r4, #12]
 8018198:	6126      	str	r6, [r4, #16]
 801819a:	6165      	str	r5, [r4, #20]
 801819c:	444e      	add	r6, r9
 801819e:	eba5 0509 	sub.w	r5, r5, r9
 80181a2:	6026      	str	r6, [r4, #0]
 80181a4:	60a5      	str	r5, [r4, #8]
 80181a6:	463e      	mov	r6, r7
 80181a8:	42be      	cmp	r6, r7
 80181aa:	d900      	bls.n	80181ae <__ssputs_r+0x72>
 80181ac:	463e      	mov	r6, r7
 80181ae:	6820      	ldr	r0, [r4, #0]
 80181b0:	4632      	mov	r2, r6
 80181b2:	4641      	mov	r1, r8
 80181b4:	f000 fb66 	bl	8018884 <memmove>
 80181b8:	68a3      	ldr	r3, [r4, #8]
 80181ba:	1b9b      	subs	r3, r3, r6
 80181bc:	60a3      	str	r3, [r4, #8]
 80181be:	6823      	ldr	r3, [r4, #0]
 80181c0:	4433      	add	r3, r6
 80181c2:	6023      	str	r3, [r4, #0]
 80181c4:	2000      	movs	r0, #0
 80181c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ca:	462a      	mov	r2, r5
 80181cc:	f7ff fbf4 	bl	80179b8 <_realloc_r>
 80181d0:	4606      	mov	r6, r0
 80181d2:	2800      	cmp	r0, #0
 80181d4:	d1e0      	bne.n	8018198 <__ssputs_r+0x5c>
 80181d6:	6921      	ldr	r1, [r4, #16]
 80181d8:	4650      	mov	r0, sl
 80181da:	f7ff ff5d 	bl	8018098 <_free_r>
 80181de:	230c      	movs	r3, #12
 80181e0:	f8ca 3000 	str.w	r3, [sl]
 80181e4:	89a3      	ldrh	r3, [r4, #12]
 80181e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181ea:	81a3      	strh	r3, [r4, #12]
 80181ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181f0:	e7e9      	b.n	80181c6 <__ssputs_r+0x8a>
	...

080181f4 <_svfiprintf_r>:
 80181f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f8:	4698      	mov	r8, r3
 80181fa:	898b      	ldrh	r3, [r1, #12]
 80181fc:	061b      	lsls	r3, r3, #24
 80181fe:	b09d      	sub	sp, #116	@ 0x74
 8018200:	4607      	mov	r7, r0
 8018202:	460d      	mov	r5, r1
 8018204:	4614      	mov	r4, r2
 8018206:	d510      	bpl.n	801822a <_svfiprintf_r+0x36>
 8018208:	690b      	ldr	r3, [r1, #16]
 801820a:	b973      	cbnz	r3, 801822a <_svfiprintf_r+0x36>
 801820c:	2140      	movs	r1, #64	@ 0x40
 801820e:	f7ff fad3 	bl	80177b8 <_malloc_r>
 8018212:	6028      	str	r0, [r5, #0]
 8018214:	6128      	str	r0, [r5, #16]
 8018216:	b930      	cbnz	r0, 8018226 <_svfiprintf_r+0x32>
 8018218:	230c      	movs	r3, #12
 801821a:	603b      	str	r3, [r7, #0]
 801821c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018220:	b01d      	add	sp, #116	@ 0x74
 8018222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018226:	2340      	movs	r3, #64	@ 0x40
 8018228:	616b      	str	r3, [r5, #20]
 801822a:	2300      	movs	r3, #0
 801822c:	9309      	str	r3, [sp, #36]	@ 0x24
 801822e:	2320      	movs	r3, #32
 8018230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018234:	f8cd 800c 	str.w	r8, [sp, #12]
 8018238:	2330      	movs	r3, #48	@ 0x30
 801823a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80183d8 <_svfiprintf_r+0x1e4>
 801823e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018242:	f04f 0901 	mov.w	r9, #1
 8018246:	4623      	mov	r3, r4
 8018248:	469a      	mov	sl, r3
 801824a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801824e:	b10a      	cbz	r2, 8018254 <_svfiprintf_r+0x60>
 8018250:	2a25      	cmp	r2, #37	@ 0x25
 8018252:	d1f9      	bne.n	8018248 <_svfiprintf_r+0x54>
 8018254:	ebba 0b04 	subs.w	fp, sl, r4
 8018258:	d00b      	beq.n	8018272 <_svfiprintf_r+0x7e>
 801825a:	465b      	mov	r3, fp
 801825c:	4622      	mov	r2, r4
 801825e:	4629      	mov	r1, r5
 8018260:	4638      	mov	r0, r7
 8018262:	f7ff ff6b 	bl	801813c <__ssputs_r>
 8018266:	3001      	adds	r0, #1
 8018268:	f000 80a7 	beq.w	80183ba <_svfiprintf_r+0x1c6>
 801826c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801826e:	445a      	add	r2, fp
 8018270:	9209      	str	r2, [sp, #36]	@ 0x24
 8018272:	f89a 3000 	ldrb.w	r3, [sl]
 8018276:	2b00      	cmp	r3, #0
 8018278:	f000 809f 	beq.w	80183ba <_svfiprintf_r+0x1c6>
 801827c:	2300      	movs	r3, #0
 801827e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018286:	f10a 0a01 	add.w	sl, sl, #1
 801828a:	9304      	str	r3, [sp, #16]
 801828c:	9307      	str	r3, [sp, #28]
 801828e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018292:	931a      	str	r3, [sp, #104]	@ 0x68
 8018294:	4654      	mov	r4, sl
 8018296:	2205      	movs	r2, #5
 8018298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801829c:	484e      	ldr	r0, [pc, #312]	@ (80183d8 <_svfiprintf_r+0x1e4>)
 801829e:	f7e8 f837 	bl	8000310 <memchr>
 80182a2:	9a04      	ldr	r2, [sp, #16]
 80182a4:	b9d8      	cbnz	r0, 80182de <_svfiprintf_r+0xea>
 80182a6:	06d0      	lsls	r0, r2, #27
 80182a8:	bf44      	itt	mi
 80182aa:	2320      	movmi	r3, #32
 80182ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182b0:	0711      	lsls	r1, r2, #28
 80182b2:	bf44      	itt	mi
 80182b4:	232b      	movmi	r3, #43	@ 0x2b
 80182b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80182ba:	f89a 3000 	ldrb.w	r3, [sl]
 80182be:	2b2a      	cmp	r3, #42	@ 0x2a
 80182c0:	d015      	beq.n	80182ee <_svfiprintf_r+0xfa>
 80182c2:	9a07      	ldr	r2, [sp, #28]
 80182c4:	4654      	mov	r4, sl
 80182c6:	2000      	movs	r0, #0
 80182c8:	f04f 0c0a 	mov.w	ip, #10
 80182cc:	4621      	mov	r1, r4
 80182ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182d2:	3b30      	subs	r3, #48	@ 0x30
 80182d4:	2b09      	cmp	r3, #9
 80182d6:	d94b      	bls.n	8018370 <_svfiprintf_r+0x17c>
 80182d8:	b1b0      	cbz	r0, 8018308 <_svfiprintf_r+0x114>
 80182da:	9207      	str	r2, [sp, #28]
 80182dc:	e014      	b.n	8018308 <_svfiprintf_r+0x114>
 80182de:	eba0 0308 	sub.w	r3, r0, r8
 80182e2:	fa09 f303 	lsl.w	r3, r9, r3
 80182e6:	4313      	orrs	r3, r2
 80182e8:	9304      	str	r3, [sp, #16]
 80182ea:	46a2      	mov	sl, r4
 80182ec:	e7d2      	b.n	8018294 <_svfiprintf_r+0xa0>
 80182ee:	9b03      	ldr	r3, [sp, #12]
 80182f0:	1d19      	adds	r1, r3, #4
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	9103      	str	r1, [sp, #12]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	bfbb      	ittet	lt
 80182fa:	425b      	neglt	r3, r3
 80182fc:	f042 0202 	orrlt.w	r2, r2, #2
 8018300:	9307      	strge	r3, [sp, #28]
 8018302:	9307      	strlt	r3, [sp, #28]
 8018304:	bfb8      	it	lt
 8018306:	9204      	strlt	r2, [sp, #16]
 8018308:	7823      	ldrb	r3, [r4, #0]
 801830a:	2b2e      	cmp	r3, #46	@ 0x2e
 801830c:	d10a      	bne.n	8018324 <_svfiprintf_r+0x130>
 801830e:	7863      	ldrb	r3, [r4, #1]
 8018310:	2b2a      	cmp	r3, #42	@ 0x2a
 8018312:	d132      	bne.n	801837a <_svfiprintf_r+0x186>
 8018314:	9b03      	ldr	r3, [sp, #12]
 8018316:	1d1a      	adds	r2, r3, #4
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	9203      	str	r2, [sp, #12]
 801831c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018320:	3402      	adds	r4, #2
 8018322:	9305      	str	r3, [sp, #20]
 8018324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80183e8 <_svfiprintf_r+0x1f4>
 8018328:	7821      	ldrb	r1, [r4, #0]
 801832a:	2203      	movs	r2, #3
 801832c:	4650      	mov	r0, sl
 801832e:	f7e7 ffef 	bl	8000310 <memchr>
 8018332:	b138      	cbz	r0, 8018344 <_svfiprintf_r+0x150>
 8018334:	9b04      	ldr	r3, [sp, #16]
 8018336:	eba0 000a 	sub.w	r0, r0, sl
 801833a:	2240      	movs	r2, #64	@ 0x40
 801833c:	4082      	lsls	r2, r0
 801833e:	4313      	orrs	r3, r2
 8018340:	3401      	adds	r4, #1
 8018342:	9304      	str	r3, [sp, #16]
 8018344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018348:	4824      	ldr	r0, [pc, #144]	@ (80183dc <_svfiprintf_r+0x1e8>)
 801834a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801834e:	2206      	movs	r2, #6
 8018350:	f7e7 ffde 	bl	8000310 <memchr>
 8018354:	2800      	cmp	r0, #0
 8018356:	d036      	beq.n	80183c6 <_svfiprintf_r+0x1d2>
 8018358:	4b21      	ldr	r3, [pc, #132]	@ (80183e0 <_svfiprintf_r+0x1ec>)
 801835a:	bb1b      	cbnz	r3, 80183a4 <_svfiprintf_r+0x1b0>
 801835c:	9b03      	ldr	r3, [sp, #12]
 801835e:	3307      	adds	r3, #7
 8018360:	f023 0307 	bic.w	r3, r3, #7
 8018364:	3308      	adds	r3, #8
 8018366:	9303      	str	r3, [sp, #12]
 8018368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801836a:	4433      	add	r3, r6
 801836c:	9309      	str	r3, [sp, #36]	@ 0x24
 801836e:	e76a      	b.n	8018246 <_svfiprintf_r+0x52>
 8018370:	fb0c 3202 	mla	r2, ip, r2, r3
 8018374:	460c      	mov	r4, r1
 8018376:	2001      	movs	r0, #1
 8018378:	e7a8      	b.n	80182cc <_svfiprintf_r+0xd8>
 801837a:	2300      	movs	r3, #0
 801837c:	3401      	adds	r4, #1
 801837e:	9305      	str	r3, [sp, #20]
 8018380:	4619      	mov	r1, r3
 8018382:	f04f 0c0a 	mov.w	ip, #10
 8018386:	4620      	mov	r0, r4
 8018388:	f810 2b01 	ldrb.w	r2, [r0], #1
 801838c:	3a30      	subs	r2, #48	@ 0x30
 801838e:	2a09      	cmp	r2, #9
 8018390:	d903      	bls.n	801839a <_svfiprintf_r+0x1a6>
 8018392:	2b00      	cmp	r3, #0
 8018394:	d0c6      	beq.n	8018324 <_svfiprintf_r+0x130>
 8018396:	9105      	str	r1, [sp, #20]
 8018398:	e7c4      	b.n	8018324 <_svfiprintf_r+0x130>
 801839a:	fb0c 2101 	mla	r1, ip, r1, r2
 801839e:	4604      	mov	r4, r0
 80183a0:	2301      	movs	r3, #1
 80183a2:	e7f0      	b.n	8018386 <_svfiprintf_r+0x192>
 80183a4:	ab03      	add	r3, sp, #12
 80183a6:	9300      	str	r3, [sp, #0]
 80183a8:	462a      	mov	r2, r5
 80183aa:	4b0e      	ldr	r3, [pc, #56]	@ (80183e4 <_svfiprintf_r+0x1f0>)
 80183ac:	a904      	add	r1, sp, #16
 80183ae:	4638      	mov	r0, r7
 80183b0:	f3af 8000 	nop.w
 80183b4:	1c42      	adds	r2, r0, #1
 80183b6:	4606      	mov	r6, r0
 80183b8:	d1d6      	bne.n	8018368 <_svfiprintf_r+0x174>
 80183ba:	89ab      	ldrh	r3, [r5, #12]
 80183bc:	065b      	lsls	r3, r3, #25
 80183be:	f53f af2d 	bmi.w	801821c <_svfiprintf_r+0x28>
 80183c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80183c4:	e72c      	b.n	8018220 <_svfiprintf_r+0x2c>
 80183c6:	ab03      	add	r3, sp, #12
 80183c8:	9300      	str	r3, [sp, #0]
 80183ca:	462a      	mov	r2, r5
 80183cc:	4b05      	ldr	r3, [pc, #20]	@ (80183e4 <_svfiprintf_r+0x1f0>)
 80183ce:	a904      	add	r1, sp, #16
 80183d0:	4638      	mov	r0, r7
 80183d2:	f000 f879 	bl	80184c8 <_printf_i>
 80183d6:	e7ed      	b.n	80183b4 <_svfiprintf_r+0x1c0>
 80183d8:	080199b8 	.word	0x080199b8
 80183dc:	080199c2 	.word	0x080199c2
 80183e0:	00000000 	.word	0x00000000
 80183e4:	0801813d 	.word	0x0801813d
 80183e8:	080199be 	.word	0x080199be

080183ec <_printf_common>:
 80183ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183f0:	4616      	mov	r6, r2
 80183f2:	4698      	mov	r8, r3
 80183f4:	688a      	ldr	r2, [r1, #8]
 80183f6:	690b      	ldr	r3, [r1, #16]
 80183f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80183fc:	4293      	cmp	r3, r2
 80183fe:	bfb8      	it	lt
 8018400:	4613      	movlt	r3, r2
 8018402:	6033      	str	r3, [r6, #0]
 8018404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018408:	4607      	mov	r7, r0
 801840a:	460c      	mov	r4, r1
 801840c:	b10a      	cbz	r2, 8018412 <_printf_common+0x26>
 801840e:	3301      	adds	r3, #1
 8018410:	6033      	str	r3, [r6, #0]
 8018412:	6823      	ldr	r3, [r4, #0]
 8018414:	0699      	lsls	r1, r3, #26
 8018416:	bf42      	ittt	mi
 8018418:	6833      	ldrmi	r3, [r6, #0]
 801841a:	3302      	addmi	r3, #2
 801841c:	6033      	strmi	r3, [r6, #0]
 801841e:	6825      	ldr	r5, [r4, #0]
 8018420:	f015 0506 	ands.w	r5, r5, #6
 8018424:	d106      	bne.n	8018434 <_printf_common+0x48>
 8018426:	f104 0a19 	add.w	sl, r4, #25
 801842a:	68e3      	ldr	r3, [r4, #12]
 801842c:	6832      	ldr	r2, [r6, #0]
 801842e:	1a9b      	subs	r3, r3, r2
 8018430:	42ab      	cmp	r3, r5
 8018432:	dc26      	bgt.n	8018482 <_printf_common+0x96>
 8018434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018438:	6822      	ldr	r2, [r4, #0]
 801843a:	3b00      	subs	r3, #0
 801843c:	bf18      	it	ne
 801843e:	2301      	movne	r3, #1
 8018440:	0692      	lsls	r2, r2, #26
 8018442:	d42b      	bmi.n	801849c <_printf_common+0xb0>
 8018444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018448:	4641      	mov	r1, r8
 801844a:	4638      	mov	r0, r7
 801844c:	47c8      	blx	r9
 801844e:	3001      	adds	r0, #1
 8018450:	d01e      	beq.n	8018490 <_printf_common+0xa4>
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	6922      	ldr	r2, [r4, #16]
 8018456:	f003 0306 	and.w	r3, r3, #6
 801845a:	2b04      	cmp	r3, #4
 801845c:	bf02      	ittt	eq
 801845e:	68e5      	ldreq	r5, [r4, #12]
 8018460:	6833      	ldreq	r3, [r6, #0]
 8018462:	1aed      	subeq	r5, r5, r3
 8018464:	68a3      	ldr	r3, [r4, #8]
 8018466:	bf0c      	ite	eq
 8018468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801846c:	2500      	movne	r5, #0
 801846e:	4293      	cmp	r3, r2
 8018470:	bfc4      	itt	gt
 8018472:	1a9b      	subgt	r3, r3, r2
 8018474:	18ed      	addgt	r5, r5, r3
 8018476:	2600      	movs	r6, #0
 8018478:	341a      	adds	r4, #26
 801847a:	42b5      	cmp	r5, r6
 801847c:	d11a      	bne.n	80184b4 <_printf_common+0xc8>
 801847e:	2000      	movs	r0, #0
 8018480:	e008      	b.n	8018494 <_printf_common+0xa8>
 8018482:	2301      	movs	r3, #1
 8018484:	4652      	mov	r2, sl
 8018486:	4641      	mov	r1, r8
 8018488:	4638      	mov	r0, r7
 801848a:	47c8      	blx	r9
 801848c:	3001      	adds	r0, #1
 801848e:	d103      	bne.n	8018498 <_printf_common+0xac>
 8018490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018498:	3501      	adds	r5, #1
 801849a:	e7c6      	b.n	801842a <_printf_common+0x3e>
 801849c:	18e1      	adds	r1, r4, r3
 801849e:	1c5a      	adds	r2, r3, #1
 80184a0:	2030      	movs	r0, #48	@ 0x30
 80184a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80184a6:	4422      	add	r2, r4
 80184a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80184ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80184b0:	3302      	adds	r3, #2
 80184b2:	e7c7      	b.n	8018444 <_printf_common+0x58>
 80184b4:	2301      	movs	r3, #1
 80184b6:	4622      	mov	r2, r4
 80184b8:	4641      	mov	r1, r8
 80184ba:	4638      	mov	r0, r7
 80184bc:	47c8      	blx	r9
 80184be:	3001      	adds	r0, #1
 80184c0:	d0e6      	beq.n	8018490 <_printf_common+0xa4>
 80184c2:	3601      	adds	r6, #1
 80184c4:	e7d9      	b.n	801847a <_printf_common+0x8e>
	...

080184c8 <_printf_i>:
 80184c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80184cc:	7e0f      	ldrb	r7, [r1, #24]
 80184ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80184d0:	2f78      	cmp	r7, #120	@ 0x78
 80184d2:	4691      	mov	r9, r2
 80184d4:	4680      	mov	r8, r0
 80184d6:	460c      	mov	r4, r1
 80184d8:	469a      	mov	sl, r3
 80184da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80184de:	d807      	bhi.n	80184f0 <_printf_i+0x28>
 80184e0:	2f62      	cmp	r7, #98	@ 0x62
 80184e2:	d80a      	bhi.n	80184fa <_printf_i+0x32>
 80184e4:	2f00      	cmp	r7, #0
 80184e6:	f000 80d2 	beq.w	801868e <_printf_i+0x1c6>
 80184ea:	2f58      	cmp	r7, #88	@ 0x58
 80184ec:	f000 80b9 	beq.w	8018662 <_printf_i+0x19a>
 80184f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80184f8:	e03a      	b.n	8018570 <_printf_i+0xa8>
 80184fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80184fe:	2b15      	cmp	r3, #21
 8018500:	d8f6      	bhi.n	80184f0 <_printf_i+0x28>
 8018502:	a101      	add	r1, pc, #4	@ (adr r1, 8018508 <_printf_i+0x40>)
 8018504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018508:	08018561 	.word	0x08018561
 801850c:	08018575 	.word	0x08018575
 8018510:	080184f1 	.word	0x080184f1
 8018514:	080184f1 	.word	0x080184f1
 8018518:	080184f1 	.word	0x080184f1
 801851c:	080184f1 	.word	0x080184f1
 8018520:	08018575 	.word	0x08018575
 8018524:	080184f1 	.word	0x080184f1
 8018528:	080184f1 	.word	0x080184f1
 801852c:	080184f1 	.word	0x080184f1
 8018530:	080184f1 	.word	0x080184f1
 8018534:	08018675 	.word	0x08018675
 8018538:	0801859f 	.word	0x0801859f
 801853c:	0801862f 	.word	0x0801862f
 8018540:	080184f1 	.word	0x080184f1
 8018544:	080184f1 	.word	0x080184f1
 8018548:	08018697 	.word	0x08018697
 801854c:	080184f1 	.word	0x080184f1
 8018550:	0801859f 	.word	0x0801859f
 8018554:	080184f1 	.word	0x080184f1
 8018558:	080184f1 	.word	0x080184f1
 801855c:	08018637 	.word	0x08018637
 8018560:	6833      	ldr	r3, [r6, #0]
 8018562:	1d1a      	adds	r2, r3, #4
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	6032      	str	r2, [r6, #0]
 8018568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801856c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018570:	2301      	movs	r3, #1
 8018572:	e09d      	b.n	80186b0 <_printf_i+0x1e8>
 8018574:	6833      	ldr	r3, [r6, #0]
 8018576:	6820      	ldr	r0, [r4, #0]
 8018578:	1d19      	adds	r1, r3, #4
 801857a:	6031      	str	r1, [r6, #0]
 801857c:	0606      	lsls	r6, r0, #24
 801857e:	d501      	bpl.n	8018584 <_printf_i+0xbc>
 8018580:	681d      	ldr	r5, [r3, #0]
 8018582:	e003      	b.n	801858c <_printf_i+0xc4>
 8018584:	0645      	lsls	r5, r0, #25
 8018586:	d5fb      	bpl.n	8018580 <_printf_i+0xb8>
 8018588:	f9b3 5000 	ldrsh.w	r5, [r3]
 801858c:	2d00      	cmp	r5, #0
 801858e:	da03      	bge.n	8018598 <_printf_i+0xd0>
 8018590:	232d      	movs	r3, #45	@ 0x2d
 8018592:	426d      	negs	r5, r5
 8018594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018598:	4859      	ldr	r0, [pc, #356]	@ (8018700 <_printf_i+0x238>)
 801859a:	230a      	movs	r3, #10
 801859c:	e011      	b.n	80185c2 <_printf_i+0xfa>
 801859e:	6821      	ldr	r1, [r4, #0]
 80185a0:	6833      	ldr	r3, [r6, #0]
 80185a2:	0608      	lsls	r0, r1, #24
 80185a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80185a8:	d402      	bmi.n	80185b0 <_printf_i+0xe8>
 80185aa:	0649      	lsls	r1, r1, #25
 80185ac:	bf48      	it	mi
 80185ae:	b2ad      	uxthmi	r5, r5
 80185b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80185b2:	4853      	ldr	r0, [pc, #332]	@ (8018700 <_printf_i+0x238>)
 80185b4:	6033      	str	r3, [r6, #0]
 80185b6:	bf14      	ite	ne
 80185b8:	230a      	movne	r3, #10
 80185ba:	2308      	moveq	r3, #8
 80185bc:	2100      	movs	r1, #0
 80185be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80185c2:	6866      	ldr	r6, [r4, #4]
 80185c4:	60a6      	str	r6, [r4, #8]
 80185c6:	2e00      	cmp	r6, #0
 80185c8:	bfa2      	ittt	ge
 80185ca:	6821      	ldrge	r1, [r4, #0]
 80185cc:	f021 0104 	bicge.w	r1, r1, #4
 80185d0:	6021      	strge	r1, [r4, #0]
 80185d2:	b90d      	cbnz	r5, 80185d8 <_printf_i+0x110>
 80185d4:	2e00      	cmp	r6, #0
 80185d6:	d04b      	beq.n	8018670 <_printf_i+0x1a8>
 80185d8:	4616      	mov	r6, r2
 80185da:	fbb5 f1f3 	udiv	r1, r5, r3
 80185de:	fb03 5711 	mls	r7, r3, r1, r5
 80185e2:	5dc7      	ldrb	r7, [r0, r7]
 80185e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80185e8:	462f      	mov	r7, r5
 80185ea:	42bb      	cmp	r3, r7
 80185ec:	460d      	mov	r5, r1
 80185ee:	d9f4      	bls.n	80185da <_printf_i+0x112>
 80185f0:	2b08      	cmp	r3, #8
 80185f2:	d10b      	bne.n	801860c <_printf_i+0x144>
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	07df      	lsls	r7, r3, #31
 80185f8:	d508      	bpl.n	801860c <_printf_i+0x144>
 80185fa:	6923      	ldr	r3, [r4, #16]
 80185fc:	6861      	ldr	r1, [r4, #4]
 80185fe:	4299      	cmp	r1, r3
 8018600:	bfde      	ittt	le
 8018602:	2330      	movle	r3, #48	@ 0x30
 8018604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018608:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801860c:	1b92      	subs	r2, r2, r6
 801860e:	6122      	str	r2, [r4, #16]
 8018610:	f8cd a000 	str.w	sl, [sp]
 8018614:	464b      	mov	r3, r9
 8018616:	aa03      	add	r2, sp, #12
 8018618:	4621      	mov	r1, r4
 801861a:	4640      	mov	r0, r8
 801861c:	f7ff fee6 	bl	80183ec <_printf_common>
 8018620:	3001      	adds	r0, #1
 8018622:	d14a      	bne.n	80186ba <_printf_i+0x1f2>
 8018624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018628:	b004      	add	sp, #16
 801862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801862e:	6823      	ldr	r3, [r4, #0]
 8018630:	f043 0320 	orr.w	r3, r3, #32
 8018634:	6023      	str	r3, [r4, #0]
 8018636:	4833      	ldr	r0, [pc, #204]	@ (8018704 <_printf_i+0x23c>)
 8018638:	2778      	movs	r7, #120	@ 0x78
 801863a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801863e:	6823      	ldr	r3, [r4, #0]
 8018640:	6831      	ldr	r1, [r6, #0]
 8018642:	061f      	lsls	r7, r3, #24
 8018644:	f851 5b04 	ldr.w	r5, [r1], #4
 8018648:	d402      	bmi.n	8018650 <_printf_i+0x188>
 801864a:	065f      	lsls	r7, r3, #25
 801864c:	bf48      	it	mi
 801864e:	b2ad      	uxthmi	r5, r5
 8018650:	6031      	str	r1, [r6, #0]
 8018652:	07d9      	lsls	r1, r3, #31
 8018654:	bf44      	itt	mi
 8018656:	f043 0320 	orrmi.w	r3, r3, #32
 801865a:	6023      	strmi	r3, [r4, #0]
 801865c:	b11d      	cbz	r5, 8018666 <_printf_i+0x19e>
 801865e:	2310      	movs	r3, #16
 8018660:	e7ac      	b.n	80185bc <_printf_i+0xf4>
 8018662:	4827      	ldr	r0, [pc, #156]	@ (8018700 <_printf_i+0x238>)
 8018664:	e7e9      	b.n	801863a <_printf_i+0x172>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	f023 0320 	bic.w	r3, r3, #32
 801866c:	6023      	str	r3, [r4, #0]
 801866e:	e7f6      	b.n	801865e <_printf_i+0x196>
 8018670:	4616      	mov	r6, r2
 8018672:	e7bd      	b.n	80185f0 <_printf_i+0x128>
 8018674:	6833      	ldr	r3, [r6, #0]
 8018676:	6825      	ldr	r5, [r4, #0]
 8018678:	6961      	ldr	r1, [r4, #20]
 801867a:	1d18      	adds	r0, r3, #4
 801867c:	6030      	str	r0, [r6, #0]
 801867e:	062e      	lsls	r6, r5, #24
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	d501      	bpl.n	8018688 <_printf_i+0x1c0>
 8018684:	6019      	str	r1, [r3, #0]
 8018686:	e002      	b.n	801868e <_printf_i+0x1c6>
 8018688:	0668      	lsls	r0, r5, #25
 801868a:	d5fb      	bpl.n	8018684 <_printf_i+0x1bc>
 801868c:	8019      	strh	r1, [r3, #0]
 801868e:	2300      	movs	r3, #0
 8018690:	6123      	str	r3, [r4, #16]
 8018692:	4616      	mov	r6, r2
 8018694:	e7bc      	b.n	8018610 <_printf_i+0x148>
 8018696:	6833      	ldr	r3, [r6, #0]
 8018698:	1d1a      	adds	r2, r3, #4
 801869a:	6032      	str	r2, [r6, #0]
 801869c:	681e      	ldr	r6, [r3, #0]
 801869e:	6862      	ldr	r2, [r4, #4]
 80186a0:	2100      	movs	r1, #0
 80186a2:	4630      	mov	r0, r6
 80186a4:	f7e7 fe34 	bl	8000310 <memchr>
 80186a8:	b108      	cbz	r0, 80186ae <_printf_i+0x1e6>
 80186aa:	1b80      	subs	r0, r0, r6
 80186ac:	6060      	str	r0, [r4, #4]
 80186ae:	6863      	ldr	r3, [r4, #4]
 80186b0:	6123      	str	r3, [r4, #16]
 80186b2:	2300      	movs	r3, #0
 80186b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80186b8:	e7aa      	b.n	8018610 <_printf_i+0x148>
 80186ba:	6923      	ldr	r3, [r4, #16]
 80186bc:	4632      	mov	r2, r6
 80186be:	4649      	mov	r1, r9
 80186c0:	4640      	mov	r0, r8
 80186c2:	47d0      	blx	sl
 80186c4:	3001      	adds	r0, #1
 80186c6:	d0ad      	beq.n	8018624 <_printf_i+0x15c>
 80186c8:	6823      	ldr	r3, [r4, #0]
 80186ca:	079b      	lsls	r3, r3, #30
 80186cc:	d413      	bmi.n	80186f6 <_printf_i+0x22e>
 80186ce:	68e0      	ldr	r0, [r4, #12]
 80186d0:	9b03      	ldr	r3, [sp, #12]
 80186d2:	4298      	cmp	r0, r3
 80186d4:	bfb8      	it	lt
 80186d6:	4618      	movlt	r0, r3
 80186d8:	e7a6      	b.n	8018628 <_printf_i+0x160>
 80186da:	2301      	movs	r3, #1
 80186dc:	4632      	mov	r2, r6
 80186de:	4649      	mov	r1, r9
 80186e0:	4640      	mov	r0, r8
 80186e2:	47d0      	blx	sl
 80186e4:	3001      	adds	r0, #1
 80186e6:	d09d      	beq.n	8018624 <_printf_i+0x15c>
 80186e8:	3501      	adds	r5, #1
 80186ea:	68e3      	ldr	r3, [r4, #12]
 80186ec:	9903      	ldr	r1, [sp, #12]
 80186ee:	1a5b      	subs	r3, r3, r1
 80186f0:	42ab      	cmp	r3, r5
 80186f2:	dcf2      	bgt.n	80186da <_printf_i+0x212>
 80186f4:	e7eb      	b.n	80186ce <_printf_i+0x206>
 80186f6:	2500      	movs	r5, #0
 80186f8:	f104 0619 	add.w	r6, r4, #25
 80186fc:	e7f5      	b.n	80186ea <_printf_i+0x222>
 80186fe:	bf00      	nop
 8018700:	080199c9 	.word	0x080199c9
 8018704:	080199da 	.word	0x080199da

08018708 <__sflush_r>:
 8018708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018710:	0716      	lsls	r6, r2, #28
 8018712:	4605      	mov	r5, r0
 8018714:	460c      	mov	r4, r1
 8018716:	d454      	bmi.n	80187c2 <__sflush_r+0xba>
 8018718:	684b      	ldr	r3, [r1, #4]
 801871a:	2b00      	cmp	r3, #0
 801871c:	dc02      	bgt.n	8018724 <__sflush_r+0x1c>
 801871e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018720:	2b00      	cmp	r3, #0
 8018722:	dd48      	ble.n	80187b6 <__sflush_r+0xae>
 8018724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018726:	2e00      	cmp	r6, #0
 8018728:	d045      	beq.n	80187b6 <__sflush_r+0xae>
 801872a:	2300      	movs	r3, #0
 801872c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018730:	682f      	ldr	r7, [r5, #0]
 8018732:	6a21      	ldr	r1, [r4, #32]
 8018734:	602b      	str	r3, [r5, #0]
 8018736:	d030      	beq.n	801879a <__sflush_r+0x92>
 8018738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801873a:	89a3      	ldrh	r3, [r4, #12]
 801873c:	0759      	lsls	r1, r3, #29
 801873e:	d505      	bpl.n	801874c <__sflush_r+0x44>
 8018740:	6863      	ldr	r3, [r4, #4]
 8018742:	1ad2      	subs	r2, r2, r3
 8018744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018746:	b10b      	cbz	r3, 801874c <__sflush_r+0x44>
 8018748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801874a:	1ad2      	subs	r2, r2, r3
 801874c:	2300      	movs	r3, #0
 801874e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018750:	6a21      	ldr	r1, [r4, #32]
 8018752:	4628      	mov	r0, r5
 8018754:	47b0      	blx	r6
 8018756:	1c43      	adds	r3, r0, #1
 8018758:	89a3      	ldrh	r3, [r4, #12]
 801875a:	d106      	bne.n	801876a <__sflush_r+0x62>
 801875c:	6829      	ldr	r1, [r5, #0]
 801875e:	291d      	cmp	r1, #29
 8018760:	d82b      	bhi.n	80187ba <__sflush_r+0xb2>
 8018762:	4a2a      	ldr	r2, [pc, #168]	@ (801880c <__sflush_r+0x104>)
 8018764:	410a      	asrs	r2, r1
 8018766:	07d6      	lsls	r6, r2, #31
 8018768:	d427      	bmi.n	80187ba <__sflush_r+0xb2>
 801876a:	2200      	movs	r2, #0
 801876c:	6062      	str	r2, [r4, #4]
 801876e:	04d9      	lsls	r1, r3, #19
 8018770:	6922      	ldr	r2, [r4, #16]
 8018772:	6022      	str	r2, [r4, #0]
 8018774:	d504      	bpl.n	8018780 <__sflush_r+0x78>
 8018776:	1c42      	adds	r2, r0, #1
 8018778:	d101      	bne.n	801877e <__sflush_r+0x76>
 801877a:	682b      	ldr	r3, [r5, #0]
 801877c:	b903      	cbnz	r3, 8018780 <__sflush_r+0x78>
 801877e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018782:	602f      	str	r7, [r5, #0]
 8018784:	b1b9      	cbz	r1, 80187b6 <__sflush_r+0xae>
 8018786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801878a:	4299      	cmp	r1, r3
 801878c:	d002      	beq.n	8018794 <__sflush_r+0x8c>
 801878e:	4628      	mov	r0, r5
 8018790:	f7ff fc82 	bl	8018098 <_free_r>
 8018794:	2300      	movs	r3, #0
 8018796:	6363      	str	r3, [r4, #52]	@ 0x34
 8018798:	e00d      	b.n	80187b6 <__sflush_r+0xae>
 801879a:	2301      	movs	r3, #1
 801879c:	4628      	mov	r0, r5
 801879e:	47b0      	blx	r6
 80187a0:	4602      	mov	r2, r0
 80187a2:	1c50      	adds	r0, r2, #1
 80187a4:	d1c9      	bne.n	801873a <__sflush_r+0x32>
 80187a6:	682b      	ldr	r3, [r5, #0]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d0c6      	beq.n	801873a <__sflush_r+0x32>
 80187ac:	2b1d      	cmp	r3, #29
 80187ae:	d001      	beq.n	80187b4 <__sflush_r+0xac>
 80187b0:	2b16      	cmp	r3, #22
 80187b2:	d11e      	bne.n	80187f2 <__sflush_r+0xea>
 80187b4:	602f      	str	r7, [r5, #0]
 80187b6:	2000      	movs	r0, #0
 80187b8:	e022      	b.n	8018800 <__sflush_r+0xf8>
 80187ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187be:	b21b      	sxth	r3, r3
 80187c0:	e01b      	b.n	80187fa <__sflush_r+0xf2>
 80187c2:	690f      	ldr	r7, [r1, #16]
 80187c4:	2f00      	cmp	r7, #0
 80187c6:	d0f6      	beq.n	80187b6 <__sflush_r+0xae>
 80187c8:	0793      	lsls	r3, r2, #30
 80187ca:	680e      	ldr	r6, [r1, #0]
 80187cc:	bf08      	it	eq
 80187ce:	694b      	ldreq	r3, [r1, #20]
 80187d0:	600f      	str	r7, [r1, #0]
 80187d2:	bf18      	it	ne
 80187d4:	2300      	movne	r3, #0
 80187d6:	eba6 0807 	sub.w	r8, r6, r7
 80187da:	608b      	str	r3, [r1, #8]
 80187dc:	f1b8 0f00 	cmp.w	r8, #0
 80187e0:	dde9      	ble.n	80187b6 <__sflush_r+0xae>
 80187e2:	6a21      	ldr	r1, [r4, #32]
 80187e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80187e6:	4643      	mov	r3, r8
 80187e8:	463a      	mov	r2, r7
 80187ea:	4628      	mov	r0, r5
 80187ec:	47b0      	blx	r6
 80187ee:	2800      	cmp	r0, #0
 80187f0:	dc08      	bgt.n	8018804 <__sflush_r+0xfc>
 80187f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187fa:	81a3      	strh	r3, [r4, #12]
 80187fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018804:	4407      	add	r7, r0
 8018806:	eba8 0800 	sub.w	r8, r8, r0
 801880a:	e7e7      	b.n	80187dc <__sflush_r+0xd4>
 801880c:	dfbffffe 	.word	0xdfbffffe

08018810 <_fflush_r>:
 8018810:	b538      	push	{r3, r4, r5, lr}
 8018812:	690b      	ldr	r3, [r1, #16]
 8018814:	4605      	mov	r5, r0
 8018816:	460c      	mov	r4, r1
 8018818:	b913      	cbnz	r3, 8018820 <_fflush_r+0x10>
 801881a:	2500      	movs	r5, #0
 801881c:	4628      	mov	r0, r5
 801881e:	bd38      	pop	{r3, r4, r5, pc}
 8018820:	b118      	cbz	r0, 801882a <_fflush_r+0x1a>
 8018822:	6a03      	ldr	r3, [r0, #32]
 8018824:	b90b      	cbnz	r3, 801882a <_fflush_r+0x1a>
 8018826:	f7ff f9f9 	bl	8017c1c <__sinit>
 801882a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d0f3      	beq.n	801881a <_fflush_r+0xa>
 8018832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018834:	07d0      	lsls	r0, r2, #31
 8018836:	d404      	bmi.n	8018842 <_fflush_r+0x32>
 8018838:	0599      	lsls	r1, r3, #22
 801883a:	d402      	bmi.n	8018842 <_fflush_r+0x32>
 801883c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801883e:	f7ff fbe8 	bl	8018012 <__retarget_lock_acquire_recursive>
 8018842:	4628      	mov	r0, r5
 8018844:	4621      	mov	r1, r4
 8018846:	f7ff ff5f 	bl	8018708 <__sflush_r>
 801884a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801884c:	07da      	lsls	r2, r3, #31
 801884e:	4605      	mov	r5, r0
 8018850:	d4e4      	bmi.n	801881c <_fflush_r+0xc>
 8018852:	89a3      	ldrh	r3, [r4, #12]
 8018854:	059b      	lsls	r3, r3, #22
 8018856:	d4e1      	bmi.n	801881c <_fflush_r+0xc>
 8018858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801885a:	f7ff fbdb 	bl	8018014 <__retarget_lock_release_recursive>
 801885e:	e7dd      	b.n	801881c <_fflush_r+0xc>

08018860 <fiprintf>:
 8018860:	b40e      	push	{r1, r2, r3}
 8018862:	b503      	push	{r0, r1, lr}
 8018864:	4601      	mov	r1, r0
 8018866:	ab03      	add	r3, sp, #12
 8018868:	4805      	ldr	r0, [pc, #20]	@ (8018880 <fiprintf+0x20>)
 801886a:	f853 2b04 	ldr.w	r2, [r3], #4
 801886e:	6800      	ldr	r0, [r0, #0]
 8018870:	9301      	str	r3, [sp, #4]
 8018872:	f000 f851 	bl	8018918 <_vfiprintf_r>
 8018876:	b002      	add	sp, #8
 8018878:	f85d eb04 	ldr.w	lr, [sp], #4
 801887c:	b003      	add	sp, #12
 801887e:	4770      	bx	lr
 8018880:	240000c4 	.word	0x240000c4

08018884 <memmove>:
 8018884:	4288      	cmp	r0, r1
 8018886:	b510      	push	{r4, lr}
 8018888:	eb01 0402 	add.w	r4, r1, r2
 801888c:	d902      	bls.n	8018894 <memmove+0x10>
 801888e:	4284      	cmp	r4, r0
 8018890:	4623      	mov	r3, r4
 8018892:	d807      	bhi.n	80188a4 <memmove+0x20>
 8018894:	1e43      	subs	r3, r0, #1
 8018896:	42a1      	cmp	r1, r4
 8018898:	d008      	beq.n	80188ac <memmove+0x28>
 801889a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801889e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80188a2:	e7f8      	b.n	8018896 <memmove+0x12>
 80188a4:	4402      	add	r2, r0
 80188a6:	4601      	mov	r1, r0
 80188a8:	428a      	cmp	r2, r1
 80188aa:	d100      	bne.n	80188ae <memmove+0x2a>
 80188ac:	bd10      	pop	{r4, pc}
 80188ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80188b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80188b6:	e7f7      	b.n	80188a8 <memmove+0x24>

080188b8 <abort>:
 80188b8:	b508      	push	{r3, lr}
 80188ba:	2006      	movs	r0, #6
 80188bc:	f000 fa00 	bl	8018cc0 <raise>
 80188c0:	2001      	movs	r0, #1
 80188c2:	f7e9 f8db 	bl	8001a7c <_exit>

080188c6 <__sfputc_r>:
 80188c6:	6893      	ldr	r3, [r2, #8]
 80188c8:	3b01      	subs	r3, #1
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	b410      	push	{r4}
 80188ce:	6093      	str	r3, [r2, #8]
 80188d0:	da08      	bge.n	80188e4 <__sfputc_r+0x1e>
 80188d2:	6994      	ldr	r4, [r2, #24]
 80188d4:	42a3      	cmp	r3, r4
 80188d6:	db01      	blt.n	80188dc <__sfputc_r+0x16>
 80188d8:	290a      	cmp	r1, #10
 80188da:	d103      	bne.n	80188e4 <__sfputc_r+0x1e>
 80188dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188e0:	f000 b932 	b.w	8018b48 <__swbuf_r>
 80188e4:	6813      	ldr	r3, [r2, #0]
 80188e6:	1c58      	adds	r0, r3, #1
 80188e8:	6010      	str	r0, [r2, #0]
 80188ea:	7019      	strb	r1, [r3, #0]
 80188ec:	4608      	mov	r0, r1
 80188ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188f2:	4770      	bx	lr

080188f4 <__sfputs_r>:
 80188f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188f6:	4606      	mov	r6, r0
 80188f8:	460f      	mov	r7, r1
 80188fa:	4614      	mov	r4, r2
 80188fc:	18d5      	adds	r5, r2, r3
 80188fe:	42ac      	cmp	r4, r5
 8018900:	d101      	bne.n	8018906 <__sfputs_r+0x12>
 8018902:	2000      	movs	r0, #0
 8018904:	e007      	b.n	8018916 <__sfputs_r+0x22>
 8018906:	f814 1b01 	ldrb.w	r1, [r4], #1
 801890a:	463a      	mov	r2, r7
 801890c:	4630      	mov	r0, r6
 801890e:	f7ff ffda 	bl	80188c6 <__sfputc_r>
 8018912:	1c43      	adds	r3, r0, #1
 8018914:	d1f3      	bne.n	80188fe <__sfputs_r+0xa>
 8018916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018918 <_vfiprintf_r>:
 8018918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891c:	460d      	mov	r5, r1
 801891e:	b09d      	sub	sp, #116	@ 0x74
 8018920:	4614      	mov	r4, r2
 8018922:	4698      	mov	r8, r3
 8018924:	4606      	mov	r6, r0
 8018926:	b118      	cbz	r0, 8018930 <_vfiprintf_r+0x18>
 8018928:	6a03      	ldr	r3, [r0, #32]
 801892a:	b90b      	cbnz	r3, 8018930 <_vfiprintf_r+0x18>
 801892c:	f7ff f976 	bl	8017c1c <__sinit>
 8018930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018932:	07d9      	lsls	r1, r3, #31
 8018934:	d405      	bmi.n	8018942 <_vfiprintf_r+0x2a>
 8018936:	89ab      	ldrh	r3, [r5, #12]
 8018938:	059a      	lsls	r2, r3, #22
 801893a:	d402      	bmi.n	8018942 <_vfiprintf_r+0x2a>
 801893c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801893e:	f7ff fb68 	bl	8018012 <__retarget_lock_acquire_recursive>
 8018942:	89ab      	ldrh	r3, [r5, #12]
 8018944:	071b      	lsls	r3, r3, #28
 8018946:	d501      	bpl.n	801894c <_vfiprintf_r+0x34>
 8018948:	692b      	ldr	r3, [r5, #16]
 801894a:	b99b      	cbnz	r3, 8018974 <_vfiprintf_r+0x5c>
 801894c:	4629      	mov	r1, r5
 801894e:	4630      	mov	r0, r6
 8018950:	f000 f938 	bl	8018bc4 <__swsetup_r>
 8018954:	b170      	cbz	r0, 8018974 <_vfiprintf_r+0x5c>
 8018956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018958:	07dc      	lsls	r4, r3, #31
 801895a:	d504      	bpl.n	8018966 <_vfiprintf_r+0x4e>
 801895c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018960:	b01d      	add	sp, #116	@ 0x74
 8018962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018966:	89ab      	ldrh	r3, [r5, #12]
 8018968:	0598      	lsls	r0, r3, #22
 801896a:	d4f7      	bmi.n	801895c <_vfiprintf_r+0x44>
 801896c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801896e:	f7ff fb51 	bl	8018014 <__retarget_lock_release_recursive>
 8018972:	e7f3      	b.n	801895c <_vfiprintf_r+0x44>
 8018974:	2300      	movs	r3, #0
 8018976:	9309      	str	r3, [sp, #36]	@ 0x24
 8018978:	2320      	movs	r3, #32
 801897a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801897e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018982:	2330      	movs	r3, #48	@ 0x30
 8018984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018b34 <_vfiprintf_r+0x21c>
 8018988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801898c:	f04f 0901 	mov.w	r9, #1
 8018990:	4623      	mov	r3, r4
 8018992:	469a      	mov	sl, r3
 8018994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018998:	b10a      	cbz	r2, 801899e <_vfiprintf_r+0x86>
 801899a:	2a25      	cmp	r2, #37	@ 0x25
 801899c:	d1f9      	bne.n	8018992 <_vfiprintf_r+0x7a>
 801899e:	ebba 0b04 	subs.w	fp, sl, r4
 80189a2:	d00b      	beq.n	80189bc <_vfiprintf_r+0xa4>
 80189a4:	465b      	mov	r3, fp
 80189a6:	4622      	mov	r2, r4
 80189a8:	4629      	mov	r1, r5
 80189aa:	4630      	mov	r0, r6
 80189ac:	f7ff ffa2 	bl	80188f4 <__sfputs_r>
 80189b0:	3001      	adds	r0, #1
 80189b2:	f000 80a7 	beq.w	8018b04 <_vfiprintf_r+0x1ec>
 80189b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189b8:	445a      	add	r2, fp
 80189ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80189bc:	f89a 3000 	ldrb.w	r3, [sl]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	f000 809f 	beq.w	8018b04 <_vfiprintf_r+0x1ec>
 80189c6:	2300      	movs	r3, #0
 80189c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80189cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189d0:	f10a 0a01 	add.w	sl, sl, #1
 80189d4:	9304      	str	r3, [sp, #16]
 80189d6:	9307      	str	r3, [sp, #28]
 80189d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80189dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80189de:	4654      	mov	r4, sl
 80189e0:	2205      	movs	r2, #5
 80189e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189e6:	4853      	ldr	r0, [pc, #332]	@ (8018b34 <_vfiprintf_r+0x21c>)
 80189e8:	f7e7 fc92 	bl	8000310 <memchr>
 80189ec:	9a04      	ldr	r2, [sp, #16]
 80189ee:	b9d8      	cbnz	r0, 8018a28 <_vfiprintf_r+0x110>
 80189f0:	06d1      	lsls	r1, r2, #27
 80189f2:	bf44      	itt	mi
 80189f4:	2320      	movmi	r3, #32
 80189f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80189fa:	0713      	lsls	r3, r2, #28
 80189fc:	bf44      	itt	mi
 80189fe:	232b      	movmi	r3, #43	@ 0x2b
 8018a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a04:	f89a 3000 	ldrb.w	r3, [sl]
 8018a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a0a:	d015      	beq.n	8018a38 <_vfiprintf_r+0x120>
 8018a0c:	9a07      	ldr	r2, [sp, #28]
 8018a0e:	4654      	mov	r4, sl
 8018a10:	2000      	movs	r0, #0
 8018a12:	f04f 0c0a 	mov.w	ip, #10
 8018a16:	4621      	mov	r1, r4
 8018a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a1c:	3b30      	subs	r3, #48	@ 0x30
 8018a1e:	2b09      	cmp	r3, #9
 8018a20:	d94b      	bls.n	8018aba <_vfiprintf_r+0x1a2>
 8018a22:	b1b0      	cbz	r0, 8018a52 <_vfiprintf_r+0x13a>
 8018a24:	9207      	str	r2, [sp, #28]
 8018a26:	e014      	b.n	8018a52 <_vfiprintf_r+0x13a>
 8018a28:	eba0 0308 	sub.w	r3, r0, r8
 8018a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8018a30:	4313      	orrs	r3, r2
 8018a32:	9304      	str	r3, [sp, #16]
 8018a34:	46a2      	mov	sl, r4
 8018a36:	e7d2      	b.n	80189de <_vfiprintf_r+0xc6>
 8018a38:	9b03      	ldr	r3, [sp, #12]
 8018a3a:	1d19      	adds	r1, r3, #4
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	9103      	str	r1, [sp, #12]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	bfbb      	ittet	lt
 8018a44:	425b      	neglt	r3, r3
 8018a46:	f042 0202 	orrlt.w	r2, r2, #2
 8018a4a:	9307      	strge	r3, [sp, #28]
 8018a4c:	9307      	strlt	r3, [sp, #28]
 8018a4e:	bfb8      	it	lt
 8018a50:	9204      	strlt	r2, [sp, #16]
 8018a52:	7823      	ldrb	r3, [r4, #0]
 8018a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a56:	d10a      	bne.n	8018a6e <_vfiprintf_r+0x156>
 8018a58:	7863      	ldrb	r3, [r4, #1]
 8018a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a5c:	d132      	bne.n	8018ac4 <_vfiprintf_r+0x1ac>
 8018a5e:	9b03      	ldr	r3, [sp, #12]
 8018a60:	1d1a      	adds	r2, r3, #4
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	9203      	str	r2, [sp, #12]
 8018a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018a6a:	3402      	adds	r4, #2
 8018a6c:	9305      	str	r3, [sp, #20]
 8018a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018b44 <_vfiprintf_r+0x22c>
 8018a72:	7821      	ldrb	r1, [r4, #0]
 8018a74:	2203      	movs	r2, #3
 8018a76:	4650      	mov	r0, sl
 8018a78:	f7e7 fc4a 	bl	8000310 <memchr>
 8018a7c:	b138      	cbz	r0, 8018a8e <_vfiprintf_r+0x176>
 8018a7e:	9b04      	ldr	r3, [sp, #16]
 8018a80:	eba0 000a 	sub.w	r0, r0, sl
 8018a84:	2240      	movs	r2, #64	@ 0x40
 8018a86:	4082      	lsls	r2, r0
 8018a88:	4313      	orrs	r3, r2
 8018a8a:	3401      	adds	r4, #1
 8018a8c:	9304      	str	r3, [sp, #16]
 8018a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a92:	4829      	ldr	r0, [pc, #164]	@ (8018b38 <_vfiprintf_r+0x220>)
 8018a94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018a98:	2206      	movs	r2, #6
 8018a9a:	f7e7 fc39 	bl	8000310 <memchr>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	d03f      	beq.n	8018b22 <_vfiprintf_r+0x20a>
 8018aa2:	4b26      	ldr	r3, [pc, #152]	@ (8018b3c <_vfiprintf_r+0x224>)
 8018aa4:	bb1b      	cbnz	r3, 8018aee <_vfiprintf_r+0x1d6>
 8018aa6:	9b03      	ldr	r3, [sp, #12]
 8018aa8:	3307      	adds	r3, #7
 8018aaa:	f023 0307 	bic.w	r3, r3, #7
 8018aae:	3308      	adds	r3, #8
 8018ab0:	9303      	str	r3, [sp, #12]
 8018ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ab4:	443b      	add	r3, r7
 8018ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ab8:	e76a      	b.n	8018990 <_vfiprintf_r+0x78>
 8018aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8018abe:	460c      	mov	r4, r1
 8018ac0:	2001      	movs	r0, #1
 8018ac2:	e7a8      	b.n	8018a16 <_vfiprintf_r+0xfe>
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	3401      	adds	r4, #1
 8018ac8:	9305      	str	r3, [sp, #20]
 8018aca:	4619      	mov	r1, r3
 8018acc:	f04f 0c0a 	mov.w	ip, #10
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ad6:	3a30      	subs	r2, #48	@ 0x30
 8018ad8:	2a09      	cmp	r2, #9
 8018ada:	d903      	bls.n	8018ae4 <_vfiprintf_r+0x1cc>
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d0c6      	beq.n	8018a6e <_vfiprintf_r+0x156>
 8018ae0:	9105      	str	r1, [sp, #20]
 8018ae2:	e7c4      	b.n	8018a6e <_vfiprintf_r+0x156>
 8018ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ae8:	4604      	mov	r4, r0
 8018aea:	2301      	movs	r3, #1
 8018aec:	e7f0      	b.n	8018ad0 <_vfiprintf_r+0x1b8>
 8018aee:	ab03      	add	r3, sp, #12
 8018af0:	9300      	str	r3, [sp, #0]
 8018af2:	462a      	mov	r2, r5
 8018af4:	4b12      	ldr	r3, [pc, #72]	@ (8018b40 <_vfiprintf_r+0x228>)
 8018af6:	a904      	add	r1, sp, #16
 8018af8:	4630      	mov	r0, r6
 8018afa:	f3af 8000 	nop.w
 8018afe:	4607      	mov	r7, r0
 8018b00:	1c78      	adds	r0, r7, #1
 8018b02:	d1d6      	bne.n	8018ab2 <_vfiprintf_r+0x19a>
 8018b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b06:	07d9      	lsls	r1, r3, #31
 8018b08:	d405      	bmi.n	8018b16 <_vfiprintf_r+0x1fe>
 8018b0a:	89ab      	ldrh	r3, [r5, #12]
 8018b0c:	059a      	lsls	r2, r3, #22
 8018b0e:	d402      	bmi.n	8018b16 <_vfiprintf_r+0x1fe>
 8018b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b12:	f7ff fa7f 	bl	8018014 <__retarget_lock_release_recursive>
 8018b16:	89ab      	ldrh	r3, [r5, #12]
 8018b18:	065b      	lsls	r3, r3, #25
 8018b1a:	f53f af1f 	bmi.w	801895c <_vfiprintf_r+0x44>
 8018b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b20:	e71e      	b.n	8018960 <_vfiprintf_r+0x48>
 8018b22:	ab03      	add	r3, sp, #12
 8018b24:	9300      	str	r3, [sp, #0]
 8018b26:	462a      	mov	r2, r5
 8018b28:	4b05      	ldr	r3, [pc, #20]	@ (8018b40 <_vfiprintf_r+0x228>)
 8018b2a:	a904      	add	r1, sp, #16
 8018b2c:	4630      	mov	r0, r6
 8018b2e:	f7ff fccb 	bl	80184c8 <_printf_i>
 8018b32:	e7e4      	b.n	8018afe <_vfiprintf_r+0x1e6>
 8018b34:	080199b8 	.word	0x080199b8
 8018b38:	080199c2 	.word	0x080199c2
 8018b3c:	00000000 	.word	0x00000000
 8018b40:	080188f5 	.word	0x080188f5
 8018b44:	080199be 	.word	0x080199be

08018b48 <__swbuf_r>:
 8018b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b4a:	460e      	mov	r6, r1
 8018b4c:	4614      	mov	r4, r2
 8018b4e:	4605      	mov	r5, r0
 8018b50:	b118      	cbz	r0, 8018b5a <__swbuf_r+0x12>
 8018b52:	6a03      	ldr	r3, [r0, #32]
 8018b54:	b90b      	cbnz	r3, 8018b5a <__swbuf_r+0x12>
 8018b56:	f7ff f861 	bl	8017c1c <__sinit>
 8018b5a:	69a3      	ldr	r3, [r4, #24]
 8018b5c:	60a3      	str	r3, [r4, #8]
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	071a      	lsls	r2, r3, #28
 8018b62:	d501      	bpl.n	8018b68 <__swbuf_r+0x20>
 8018b64:	6923      	ldr	r3, [r4, #16]
 8018b66:	b943      	cbnz	r3, 8018b7a <__swbuf_r+0x32>
 8018b68:	4621      	mov	r1, r4
 8018b6a:	4628      	mov	r0, r5
 8018b6c:	f000 f82a 	bl	8018bc4 <__swsetup_r>
 8018b70:	b118      	cbz	r0, 8018b7a <__swbuf_r+0x32>
 8018b72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018b76:	4638      	mov	r0, r7
 8018b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b7a:	6823      	ldr	r3, [r4, #0]
 8018b7c:	6922      	ldr	r2, [r4, #16]
 8018b7e:	1a98      	subs	r0, r3, r2
 8018b80:	6963      	ldr	r3, [r4, #20]
 8018b82:	b2f6      	uxtb	r6, r6
 8018b84:	4283      	cmp	r3, r0
 8018b86:	4637      	mov	r7, r6
 8018b88:	dc05      	bgt.n	8018b96 <__swbuf_r+0x4e>
 8018b8a:	4621      	mov	r1, r4
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	f7ff fe3f 	bl	8018810 <_fflush_r>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d1ed      	bne.n	8018b72 <__swbuf_r+0x2a>
 8018b96:	68a3      	ldr	r3, [r4, #8]
 8018b98:	3b01      	subs	r3, #1
 8018b9a:	60a3      	str	r3, [r4, #8]
 8018b9c:	6823      	ldr	r3, [r4, #0]
 8018b9e:	1c5a      	adds	r2, r3, #1
 8018ba0:	6022      	str	r2, [r4, #0]
 8018ba2:	701e      	strb	r6, [r3, #0]
 8018ba4:	6962      	ldr	r2, [r4, #20]
 8018ba6:	1c43      	adds	r3, r0, #1
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	d004      	beq.n	8018bb6 <__swbuf_r+0x6e>
 8018bac:	89a3      	ldrh	r3, [r4, #12]
 8018bae:	07db      	lsls	r3, r3, #31
 8018bb0:	d5e1      	bpl.n	8018b76 <__swbuf_r+0x2e>
 8018bb2:	2e0a      	cmp	r6, #10
 8018bb4:	d1df      	bne.n	8018b76 <__swbuf_r+0x2e>
 8018bb6:	4621      	mov	r1, r4
 8018bb8:	4628      	mov	r0, r5
 8018bba:	f7ff fe29 	bl	8018810 <_fflush_r>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	d0d9      	beq.n	8018b76 <__swbuf_r+0x2e>
 8018bc2:	e7d6      	b.n	8018b72 <__swbuf_r+0x2a>

08018bc4 <__swsetup_r>:
 8018bc4:	b538      	push	{r3, r4, r5, lr}
 8018bc6:	4b29      	ldr	r3, [pc, #164]	@ (8018c6c <__swsetup_r+0xa8>)
 8018bc8:	4605      	mov	r5, r0
 8018bca:	6818      	ldr	r0, [r3, #0]
 8018bcc:	460c      	mov	r4, r1
 8018bce:	b118      	cbz	r0, 8018bd8 <__swsetup_r+0x14>
 8018bd0:	6a03      	ldr	r3, [r0, #32]
 8018bd2:	b90b      	cbnz	r3, 8018bd8 <__swsetup_r+0x14>
 8018bd4:	f7ff f822 	bl	8017c1c <__sinit>
 8018bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bdc:	0719      	lsls	r1, r3, #28
 8018bde:	d422      	bmi.n	8018c26 <__swsetup_r+0x62>
 8018be0:	06da      	lsls	r2, r3, #27
 8018be2:	d407      	bmi.n	8018bf4 <__swsetup_r+0x30>
 8018be4:	2209      	movs	r2, #9
 8018be6:	602a      	str	r2, [r5, #0]
 8018be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018bec:	81a3      	strh	r3, [r4, #12]
 8018bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018bf2:	e033      	b.n	8018c5c <__swsetup_r+0x98>
 8018bf4:	0758      	lsls	r0, r3, #29
 8018bf6:	d512      	bpl.n	8018c1e <__swsetup_r+0x5a>
 8018bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018bfa:	b141      	cbz	r1, 8018c0e <__swsetup_r+0x4a>
 8018bfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c00:	4299      	cmp	r1, r3
 8018c02:	d002      	beq.n	8018c0a <__swsetup_r+0x46>
 8018c04:	4628      	mov	r0, r5
 8018c06:	f7ff fa47 	bl	8018098 <_free_r>
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c0e:	89a3      	ldrh	r3, [r4, #12]
 8018c10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018c14:	81a3      	strh	r3, [r4, #12]
 8018c16:	2300      	movs	r3, #0
 8018c18:	6063      	str	r3, [r4, #4]
 8018c1a:	6923      	ldr	r3, [r4, #16]
 8018c1c:	6023      	str	r3, [r4, #0]
 8018c1e:	89a3      	ldrh	r3, [r4, #12]
 8018c20:	f043 0308 	orr.w	r3, r3, #8
 8018c24:	81a3      	strh	r3, [r4, #12]
 8018c26:	6923      	ldr	r3, [r4, #16]
 8018c28:	b94b      	cbnz	r3, 8018c3e <__swsetup_r+0x7a>
 8018c2a:	89a3      	ldrh	r3, [r4, #12]
 8018c2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c34:	d003      	beq.n	8018c3e <__swsetup_r+0x7a>
 8018c36:	4621      	mov	r1, r4
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f000 f883 	bl	8018d44 <__smakebuf_r>
 8018c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c42:	f013 0201 	ands.w	r2, r3, #1
 8018c46:	d00a      	beq.n	8018c5e <__swsetup_r+0x9a>
 8018c48:	2200      	movs	r2, #0
 8018c4a:	60a2      	str	r2, [r4, #8]
 8018c4c:	6962      	ldr	r2, [r4, #20]
 8018c4e:	4252      	negs	r2, r2
 8018c50:	61a2      	str	r2, [r4, #24]
 8018c52:	6922      	ldr	r2, [r4, #16]
 8018c54:	b942      	cbnz	r2, 8018c68 <__swsetup_r+0xa4>
 8018c56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018c5a:	d1c5      	bne.n	8018be8 <__swsetup_r+0x24>
 8018c5c:	bd38      	pop	{r3, r4, r5, pc}
 8018c5e:	0799      	lsls	r1, r3, #30
 8018c60:	bf58      	it	pl
 8018c62:	6962      	ldrpl	r2, [r4, #20]
 8018c64:	60a2      	str	r2, [r4, #8]
 8018c66:	e7f4      	b.n	8018c52 <__swsetup_r+0x8e>
 8018c68:	2000      	movs	r0, #0
 8018c6a:	e7f7      	b.n	8018c5c <__swsetup_r+0x98>
 8018c6c:	240000c4 	.word	0x240000c4

08018c70 <_raise_r>:
 8018c70:	291f      	cmp	r1, #31
 8018c72:	b538      	push	{r3, r4, r5, lr}
 8018c74:	4605      	mov	r5, r0
 8018c76:	460c      	mov	r4, r1
 8018c78:	d904      	bls.n	8018c84 <_raise_r+0x14>
 8018c7a:	2316      	movs	r3, #22
 8018c7c:	6003      	str	r3, [r0, #0]
 8018c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c82:	bd38      	pop	{r3, r4, r5, pc}
 8018c84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018c86:	b112      	cbz	r2, 8018c8e <_raise_r+0x1e>
 8018c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c8c:	b94b      	cbnz	r3, 8018ca2 <_raise_r+0x32>
 8018c8e:	4628      	mov	r0, r5
 8018c90:	f000 f830 	bl	8018cf4 <_getpid_r>
 8018c94:	4622      	mov	r2, r4
 8018c96:	4601      	mov	r1, r0
 8018c98:	4628      	mov	r0, r5
 8018c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c9e:	f000 b817 	b.w	8018cd0 <_kill_r>
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	d00a      	beq.n	8018cbc <_raise_r+0x4c>
 8018ca6:	1c59      	adds	r1, r3, #1
 8018ca8:	d103      	bne.n	8018cb2 <_raise_r+0x42>
 8018caa:	2316      	movs	r3, #22
 8018cac:	6003      	str	r3, [r0, #0]
 8018cae:	2001      	movs	r0, #1
 8018cb0:	e7e7      	b.n	8018c82 <_raise_r+0x12>
 8018cb2:	2100      	movs	r1, #0
 8018cb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018cb8:	4620      	mov	r0, r4
 8018cba:	4798      	blx	r3
 8018cbc:	2000      	movs	r0, #0
 8018cbe:	e7e0      	b.n	8018c82 <_raise_r+0x12>

08018cc0 <raise>:
 8018cc0:	4b02      	ldr	r3, [pc, #8]	@ (8018ccc <raise+0xc>)
 8018cc2:	4601      	mov	r1, r0
 8018cc4:	6818      	ldr	r0, [r3, #0]
 8018cc6:	f7ff bfd3 	b.w	8018c70 <_raise_r>
 8018cca:	bf00      	nop
 8018ccc:	240000c4 	.word	0x240000c4

08018cd0 <_kill_r>:
 8018cd0:	b538      	push	{r3, r4, r5, lr}
 8018cd2:	4d07      	ldr	r5, [pc, #28]	@ (8018cf0 <_kill_r+0x20>)
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	4608      	mov	r0, r1
 8018cda:	4611      	mov	r1, r2
 8018cdc:	602b      	str	r3, [r5, #0]
 8018cde:	f7e8 febd 	bl	8001a5c <_kill>
 8018ce2:	1c43      	adds	r3, r0, #1
 8018ce4:	d102      	bne.n	8018cec <_kill_r+0x1c>
 8018ce6:	682b      	ldr	r3, [r5, #0]
 8018ce8:	b103      	cbz	r3, 8018cec <_kill_r+0x1c>
 8018cea:	6023      	str	r3, [r4, #0]
 8018cec:	bd38      	pop	{r3, r4, r5, pc}
 8018cee:	bf00      	nop
 8018cf0:	2406880c 	.word	0x2406880c

08018cf4 <_getpid_r>:
 8018cf4:	f7e8 beaa 	b.w	8001a4c <_getpid>

08018cf8 <__swhatbuf_r>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	460c      	mov	r4, r1
 8018cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d00:	2900      	cmp	r1, #0
 8018d02:	b096      	sub	sp, #88	@ 0x58
 8018d04:	4615      	mov	r5, r2
 8018d06:	461e      	mov	r6, r3
 8018d08:	da0d      	bge.n	8018d26 <__swhatbuf_r+0x2e>
 8018d0a:	89a3      	ldrh	r3, [r4, #12]
 8018d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d10:	f04f 0100 	mov.w	r1, #0
 8018d14:	bf14      	ite	ne
 8018d16:	2340      	movne	r3, #64	@ 0x40
 8018d18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018d1c:	2000      	movs	r0, #0
 8018d1e:	6031      	str	r1, [r6, #0]
 8018d20:	602b      	str	r3, [r5, #0]
 8018d22:	b016      	add	sp, #88	@ 0x58
 8018d24:	bd70      	pop	{r4, r5, r6, pc}
 8018d26:	466a      	mov	r2, sp
 8018d28:	f000 f848 	bl	8018dbc <_fstat_r>
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	dbec      	blt.n	8018d0a <__swhatbuf_r+0x12>
 8018d30:	9901      	ldr	r1, [sp, #4]
 8018d32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d3a:	4259      	negs	r1, r3
 8018d3c:	4159      	adcs	r1, r3
 8018d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d42:	e7eb      	b.n	8018d1c <__swhatbuf_r+0x24>

08018d44 <__smakebuf_r>:
 8018d44:	898b      	ldrh	r3, [r1, #12]
 8018d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d48:	079d      	lsls	r5, r3, #30
 8018d4a:	4606      	mov	r6, r0
 8018d4c:	460c      	mov	r4, r1
 8018d4e:	d507      	bpl.n	8018d60 <__smakebuf_r+0x1c>
 8018d50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018d54:	6023      	str	r3, [r4, #0]
 8018d56:	6123      	str	r3, [r4, #16]
 8018d58:	2301      	movs	r3, #1
 8018d5a:	6163      	str	r3, [r4, #20]
 8018d5c:	b003      	add	sp, #12
 8018d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d60:	ab01      	add	r3, sp, #4
 8018d62:	466a      	mov	r2, sp
 8018d64:	f7ff ffc8 	bl	8018cf8 <__swhatbuf_r>
 8018d68:	9f00      	ldr	r7, [sp, #0]
 8018d6a:	4605      	mov	r5, r0
 8018d6c:	4639      	mov	r1, r7
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f7fe fd22 	bl	80177b8 <_malloc_r>
 8018d74:	b948      	cbnz	r0, 8018d8a <__smakebuf_r+0x46>
 8018d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d7a:	059a      	lsls	r2, r3, #22
 8018d7c:	d4ee      	bmi.n	8018d5c <__smakebuf_r+0x18>
 8018d7e:	f023 0303 	bic.w	r3, r3, #3
 8018d82:	f043 0302 	orr.w	r3, r3, #2
 8018d86:	81a3      	strh	r3, [r4, #12]
 8018d88:	e7e2      	b.n	8018d50 <__smakebuf_r+0xc>
 8018d8a:	89a3      	ldrh	r3, [r4, #12]
 8018d8c:	6020      	str	r0, [r4, #0]
 8018d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d92:	81a3      	strh	r3, [r4, #12]
 8018d94:	9b01      	ldr	r3, [sp, #4]
 8018d96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018d9a:	b15b      	cbz	r3, 8018db4 <__smakebuf_r+0x70>
 8018d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018da0:	4630      	mov	r0, r6
 8018da2:	f000 f81d 	bl	8018de0 <_isatty_r>
 8018da6:	b128      	cbz	r0, 8018db4 <__smakebuf_r+0x70>
 8018da8:	89a3      	ldrh	r3, [r4, #12]
 8018daa:	f023 0303 	bic.w	r3, r3, #3
 8018dae:	f043 0301 	orr.w	r3, r3, #1
 8018db2:	81a3      	strh	r3, [r4, #12]
 8018db4:	89a3      	ldrh	r3, [r4, #12]
 8018db6:	431d      	orrs	r5, r3
 8018db8:	81a5      	strh	r5, [r4, #12]
 8018dba:	e7cf      	b.n	8018d5c <__smakebuf_r+0x18>

08018dbc <_fstat_r>:
 8018dbc:	b538      	push	{r3, r4, r5, lr}
 8018dbe:	4d07      	ldr	r5, [pc, #28]	@ (8018ddc <_fstat_r+0x20>)
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	4608      	mov	r0, r1
 8018dc6:	4611      	mov	r1, r2
 8018dc8:	602b      	str	r3, [r5, #0]
 8018dca:	f7e8 fea7 	bl	8001b1c <_fstat>
 8018dce:	1c43      	adds	r3, r0, #1
 8018dd0:	d102      	bne.n	8018dd8 <_fstat_r+0x1c>
 8018dd2:	682b      	ldr	r3, [r5, #0]
 8018dd4:	b103      	cbz	r3, 8018dd8 <_fstat_r+0x1c>
 8018dd6:	6023      	str	r3, [r4, #0]
 8018dd8:	bd38      	pop	{r3, r4, r5, pc}
 8018dda:	bf00      	nop
 8018ddc:	2406880c 	.word	0x2406880c

08018de0 <_isatty_r>:
 8018de0:	b538      	push	{r3, r4, r5, lr}
 8018de2:	4d06      	ldr	r5, [pc, #24]	@ (8018dfc <_isatty_r+0x1c>)
 8018de4:	2300      	movs	r3, #0
 8018de6:	4604      	mov	r4, r0
 8018de8:	4608      	mov	r0, r1
 8018dea:	602b      	str	r3, [r5, #0]
 8018dec:	f7e8 fea6 	bl	8001b3c <_isatty>
 8018df0:	1c43      	adds	r3, r0, #1
 8018df2:	d102      	bne.n	8018dfa <_isatty_r+0x1a>
 8018df4:	682b      	ldr	r3, [r5, #0]
 8018df6:	b103      	cbz	r3, 8018dfa <_isatty_r+0x1a>
 8018df8:	6023      	str	r3, [r4, #0]
 8018dfa:	bd38      	pop	{r3, r4, r5, pc}
 8018dfc:	2406880c 	.word	0x2406880c

08018e00 <_init>:
 8018e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e02:	bf00      	nop
 8018e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e06:	bc08      	pop	{r3}
 8018e08:	469e      	mov	lr, r3
 8018e0a:	4770      	bx	lr

08018e0c <_fini>:
 8018e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0e:	bf00      	nop
 8018e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e12:	bc08      	pop	{r3}
 8018e14:	469e      	mov	lr, r3
 8018e16:	4770      	bx	lr
