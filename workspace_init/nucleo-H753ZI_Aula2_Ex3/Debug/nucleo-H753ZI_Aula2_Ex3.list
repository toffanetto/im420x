
nucleo-H753ZI_Aula2_Ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067b0  080067b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067b8  080067b8  000077b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080067c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080067d0  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006830  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08006890  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08006890  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aff  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5b  00000000  00000000  0001fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00022a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c17  00000000  00000000  00023a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003858a  00000000  00000000  0002462f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb1  00000000  00000000  0005cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001605bf  00000000  00000000  0007276a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d2d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  001d2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001d6f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006760 	.word	0x08006760

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006760 	.word	0x08006760

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f000 fed4 	bl	80013c4 <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa7d 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f006 f86b 	bl	8006706 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f001 fa5b 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f001 fa4b 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f001 fa3a 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f001 fa29 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	4b6c      	ldr	r3, [pc, #432]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a6a      	ldr	r2, [pc, #424]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b68      	ldr	r3, [pc, #416]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0310 	and.w	r3, r3, #16
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000830:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a63      	ldr	r2, [pc, #396]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b60      	ldr	r3, [pc, #384]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a5b      	ldr	r2, [pc, #364]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b59      	ldr	r3, [pc, #356]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b55      	ldr	r3, [pc, #340]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a54      	ldr	r2, [pc, #336]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b51      	ldr	r3, [pc, #324]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b4e      	ldr	r3, [pc, #312]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a4c      	ldr	r2, [pc, #304]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b4a      	ldr	r3, [pc, #296]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a8:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a45      	ldr	r2, [pc, #276]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b42      	ldr	r3, [pc, #264]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c6:	4b3f      	ldr	r3, [pc, #252]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a3d      	ldr	r2, [pc, #244]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b3b      	ldr	r3, [pc, #236]	@ (80009c4 <MX_GPIO_Init+0x1c8>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	4837      	ldr	r0, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0x1cc>)
 80008ec:	f001 fb4e 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	4835      	ldr	r0, [pc, #212]	@ (80009cc <MX_GPIO_Init+0x1d0>)
 80008f8:	f001 fb48 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4833      	ldr	r0, [pc, #204]	@ (80009d0 <MX_GPIO_Init+0x1d4>)
 8000902:	f001 fb43 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_PE2_EXTIF_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_PE2_EXTIF_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	482d      	ldr	r0, [pc, #180]	@ (80009d0 <MX_GPIO_Init+0x1d4>)
 800091c:	f001 f986 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4827      	ldr	r0, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0x1d8>)
 8000936:	f001 f979 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800093a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	481d      	ldr	r0, [pc, #116]	@ (80009c8 <MX_GPIO_Init+0x1cc>)
 8000954:	f001 f96a 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4816      	ldr	r0, [pc, #88]	@ (80009cc <MX_GPIO_Init+0x1d0>)
 8000972:	f001 f95b 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <MX_GPIO_Init+0x1dc>)
 800098c:	f001 f94e 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <MX_GPIO_Init+0x1d4>)
 80009a8:	f001 f940 	bl	8001c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2008      	movs	r0, #8
 80009b2:	f000 fcd2 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009b6:	2008      	movs	r0, #8
 80009b8:	f000 fce9 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	@ 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	58024400 	.word	0x58024400
 80009c8:	58020400 	.word	0x58020400
 80009cc:	58020c00 	.word	0x58020c00
 80009d0:	58021000 	.word	0x58021000
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58021800 	.word	0x58021800

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fb0a 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f80a 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff ff08 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009ec:	f7ff fdec 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 f974 	bl	8000cdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009f4:	f000 fa28 	bl	8000e48 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <main+0x1c>

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	@ 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	224c      	movs	r2, #76	@ 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fe7b 	bl	8006706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fe75 	bl	8006706 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f001 fc33 	bl	8002288 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a32:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a44:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a58:	bf00      	nop
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <SystemClock_Config+0xfc>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a66:	d1f8      	bne.n	8000a5a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a76:	2340      	movs	r3, #64	@ 0x40
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a86:	2318      	movs	r3, #24
 8000a88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a96:	230c      	movs	r3, #12
 8000a98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fc38 	bl	800231c <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ab2:	f000 f835 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	233f      	movs	r3, #63	@ 0x3f
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 f878 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000ae6:	f000 f81b 	bl	8000b20 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3770      	adds	r7, #112	@ 0x70
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58000400 	.word	0x58000400
 8000af8:	58024800 	.word	0x58024800

08000afc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

  // Definition of HAL_GPIO_EXTI_Callback function. Prototype available in stm32h7xx_hal_gpio.h
  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == B1_PE2_EXTIF_Pin)
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d103      	bne.n	8000b14 <HAL_GPIO_EXTI_Callback+0x18>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x20>)
 8000b10:	f001 fa55 	bl	8001fbe <HAL_GPIO_TogglePin>
	  }
  }
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58021000 	.word	0x58021000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb6:	f000 fa91 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PE2_EXTIF_Pin);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f001 fa15 	bl	8001ff2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <SystemInit+0xe4>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a36      	ldr	r2, [pc, #216]	@ (8000cb0 <SystemInit+0xe4>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be0:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <SystemInit+0xe8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d807      	bhi.n	8000bfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bec:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <SystemInit+0xe8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f023 030f 	bic.w	r3, r3, #15
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <SystemInit+0xe8>)
 8000bf6:	f043 0307 	orr.w	r3, r3, #7
 8000bfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <SystemInit+0xec>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb8 <SystemInit+0xec>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <SystemInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb8 <SystemInit+0xec>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4929      	ldr	r1, [pc, #164]	@ (8000cb8 <SystemInit+0xec>)
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <SystemInit+0xf0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <SystemInit+0xe8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c26:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <SystemInit+0xe8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f023 030f 	bic.w	r3, r3, #15
 8000c2e:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <SystemInit+0xe8>)
 8000c30:	f043 0307 	orr.w	r3, r3, #7
 8000c34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <SystemInit+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <SystemInit+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <SystemInit+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <SystemInit+0xec>)
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <SystemInit+0xf4>)
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <SystemInit+0xec>)
 8000c50:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <SystemInit+0xf8>)
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <SystemInit+0xec>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <SystemInit+0xfc>)
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <SystemInit+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <SystemInit+0xec>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <SystemInit+0xfc>)
 8000c64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <SystemInit+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <SystemInit+0xec>)
 8000c6e:	4a16      	ldr	r2, [pc, #88]	@ (8000cc8 <SystemInit+0xfc>)
 8000c70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <SystemInit+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <SystemInit+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <SystemInit+0xec>)
 8000c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <SystemInit+0xec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <SystemInit+0x100>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <SystemInit+0x104>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c96:	d202      	bcs.n	8000c9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <SystemInit+0x108>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <SystemInit+0x10c>)
 8000ca0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ca4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	52002000 	.word	0x52002000
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cc0:	02020200 	.word	0x02020200
 8000cc4:	01ff0000 	.word	0x01ff0000
 8000cc8:	01010280 	.word	0x01010280
 8000ccc:	5c001000 	.word	0x5c001000
 8000cd0:	ffff0000 	.word	0xffff0000
 8000cd4:	51008108 	.word	0x51008108
 8000cd8:	52004000 	.word	0x52004000

08000cdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000ce2:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <MX_USART3_UART_Init+0x94>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d26:	f004 f90b 	bl	8004f40 <HAL_UART_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d30:	f7ff fef6 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d38:	f005 f913 	bl	8005f62 <HAL_UARTEx_SetTxFifoThreshold>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d42:	f7ff feed 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d46:	2100      	movs	r1, #0
 8000d48:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d4a:	f005 f948 	bl	8005fde <HAL_UARTEx_SetRxFifoThreshold>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f7ff fee4 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_USART3_UART_Init+0x90>)
 8000d5a:	f005 f8c9 	bl	8005ef0 <HAL_UARTEx_DisableFifoMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f7ff fedc 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240001dc 	.word	0x240001dc
 8000d70:	40004800 	.word	0x40004800

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ba      	sub	sp, #232	@ 0xe8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	22c0      	movs	r2, #192	@ 0xc0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f005 fcb6 	bl	8006706 <memset>
  if(uartHandle->Instance==USART3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a27      	ldr	r2, [pc, #156]	@ (8000e3c <HAL_UART_MspInit+0xc8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d146      	bne.n	8000e32 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da4:	f04f 0202 	mov.w	r2, #2
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fa94 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dc6:	f7ff feab 	bl	8000b20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000dd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_UART_MspInit+0xcc>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_UART_MspInit+0xd0>)
 8000e2e:	f000 fefd 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	37e8      	adds	r7, #232	@ 0xe8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004800 	.word	0x40004800
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020c00 	.word	0x58020c00

08000e48 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e54:	2209      	movs	r2, #9
 8000e56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e90:	f001 f8c9 	bl	8002026 <HAL_PCD_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e9a:	f7ff fe41 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000270 	.word	0x24000270
 8000ea8:	40080000 	.word	0x40080000

08000eac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ba      	sub	sp, #232	@ 0xe8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	22c0      	movs	r2, #192	@ 0xc0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 fc1a 	bl	8006706 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a30      	ldr	r2, [pc, #192]	@ (8000f98 <HAL_PCD_MspInit+0xec>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d159      	bne.n	8000f90 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000edc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ee8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 f9f7 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f00:	f7ff fe0e 	bl	8000b20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f04:	f001 f9fa 	bl	80022fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f18:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f26:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <HAL_PCD_MspInit+0xf4>)
 8000f4e:	f000 fe6d 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <HAL_PCD_MspInit+0xf4>)
 8000f6e:	f000 fe5d 	bl	8001c2c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f78:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_PCD_MspInit+0xf0>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	37e8      	adds	r7, #232	@ 0xe8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40080000 	.word	0x40080000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff fe10 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f005 fba1 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fd01 	bl	80009dc <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe8:	080067c0 	.word	0x080067c0
  ldr r2, =_sbss
 8000fec:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ff0:	24000758 	.word	0x24000758

08000ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC3_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f9a0 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001004:	f001 ff9a 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fd6b 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	08006778 	.word	0x08006778
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f985 	bl	80013aa <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b8:	f000 f94f 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	24000754 	.word	0x24000754

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	24000754 	.word	0x24000754

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c

08001164 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetREVID+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0c1b      	lsrs	r3, r3, #16
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	5c001000 	.word	0x5c001000

0800117c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800118c:	4904      	ldr	r1, [pc, #16]	@ (80011a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	58000400 	.word	0x58000400

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0000 	.word	0x05fa0000

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	@ (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff40 	bl	80011ec <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff33 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa4 	bl	8001300 <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0e3      	b.n	800159e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2223      	movs	r2, #35	@ 0x23
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff f939 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <HAL_ETH_Init+0x1e4>)
 80013f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f4:	4a6c      	ldr	r2, [pc, #432]	@ (80015a8 <HAL_ETH_Init+0x1e4>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013fe:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <HAL_ETH_Init+0x1e4>)
 8001400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a1b      	ldrb	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff feb1 	bl	800117c <HAL_SYSCFG_ETHInterfaceSelect>
 800141a:	e003      	b.n	8001424 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800141c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001420:	f7ff feac 	bl	800117c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001424:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <HAL_ETH_Init+0x1e8>)
 8001426:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800143e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001440:	f7ff fe60 	bl	8001104 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001446:	e011      	b.n	800146c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001448:	f7ff fe5c 	bl	8001104 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001456:	d909      	bls.n	800146c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2204      	movs	r2, #4
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22e0      	movs	r2, #224	@ 0xe0
 8001464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e098      	b.n	800159e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e4      	bne.n	8001448 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f89e 	bl	80015c0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001484:	f001 fed4 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8001488:	4603      	mov	r3, r0
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <HAL_ETH_Init+0x1ec>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0c9a      	lsrs	r2, r3, #18
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3a01      	subs	r2, #1
 8001498:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fa81 	bl	80019a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80014ae:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014be:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	22e0      	movs	r2, #224	@ 0xe0
 80014da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e05d      	b.n	800159e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80014ee:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <HAL_ETH_Init+0x1f0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6952      	ldr	r2, [r2, #20]
 80014f6:	0051      	lsls	r1, r2, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001502:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fae9 	bl	8001ade <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fb2f 	bl	8001b70 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	3305      	adds	r3, #5
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021a      	lsls	r2, r3, #8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	3303      	adds	r3, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	061a      	lsls	r2, r3, #24
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	3302      	adds	r3, #2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001550:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800155e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001560:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_ETH_Init+0x1f4>)
 8001572:	430b      	orrs	r3, r1
 8001574:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_ETH_Init+0x1f8>)
 8001586:	430b      	orrs	r3, r1
 8001588:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2210      	movs	r2, #16
 8001598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	58024400 	.word	0x58024400
 80015ac:	58000400 	.word	0x58000400
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	ffff8001 	.word	0xffff8001
 80015b8:	0c020060 	.word	0x0c020060
 80015bc:	0c20c000 	.word	0x0c20c000

080015c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015da:	f001 fe29 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 80015de:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4a1a      	ldr	r2, [pc, #104]	@ (800164c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d804      	bhi.n	80015f2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e022      	b.n	8001638 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4a16      	ldr	r2, [pc, #88]	@ (8001650 <HAL_ETH_SetMDIOClockRange+0x90>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d204      	bcs.n	8001604 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e019      	b.n	8001638 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d915      	bls.n	8001638 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d804      	bhi.n	800161e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e00c      	b.n	8001638 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d804      	bhi.n	8001630 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e003      	b.n	8001638 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001636:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	02160ebf 	.word	0x02160ebf
 8001650:	03938700 	.word	0x03938700
 8001654:	05f5e0ff 	.word	0x05f5e0ff
 8001658:	08f0d17f 	.word	0x08f0d17f
 800165c:	0ee6b27f 	.word	0x0ee6b27f

08001660 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800167a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	7b5b      	ldrb	r3, [r3, #13]
 8001688:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800168a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7b9b      	ldrb	r3, [r3, #14]
 8001690:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	7bdb      	ldrb	r3, [r3, #15]
 8001698:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800169a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	7c12      	ldrb	r2, [r2, #16]
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d102      	bne.n	80016aa <ETH_SetMACConfig+0x4a>
 80016a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016a8:	e000      	b.n	80016ac <ETH_SetMACConfig+0x4c>
 80016aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	7c52      	ldrb	r2, [r2, #17]
 80016b2:	2a00      	cmp	r2, #0
 80016b4:	d102      	bne.n	80016bc <ETH_SetMACConfig+0x5c>
 80016b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016ba:	e000      	b.n	80016be <ETH_SetMACConfig+0x5e>
 80016bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	7c9b      	ldrb	r3, [r3, #18]
 80016c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80016cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80016d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7f5b      	ldrb	r3, [r3, #29]
 80016e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	7f92      	ldrb	r2, [r2, #30]
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d102      	bne.n	80016f2 <ETH_SetMACConfig+0x92>
 80016ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f0:	e000      	b.n	80016f4 <ETH_SetMACConfig+0x94>
 80016f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	7fdb      	ldrb	r3, [r3, #31]
 80016fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001704:	2a00      	cmp	r2, #0
 8001706:	d102      	bne.n	800170e <ETH_SetMACConfig+0xae>
 8001708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170c:	e000      	b.n	8001710 <ETH_SetMACConfig+0xb0>
 800170e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001710:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800171e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001720:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b56      	ldr	r3, [pc, #344]	@ (800188c <ETH_SetMACConfig+0x22c>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	430b      	orrs	r3, r1
 800173c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001742:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800174a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800174c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001754:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800175e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001760:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001768:	2a00      	cmp	r2, #0
 800176a:	d102      	bne.n	8001772 <ETH_SetMACConfig+0x112>
 800176c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001770:	e000      	b.n	8001774 <ETH_SetMACConfig+0x114>
 8001772:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001774:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4b42      	ldr	r3, [pc, #264]	@ (8001890 <ETH_SetMACConfig+0x230>)
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	430b      	orrs	r3, r1
 8001790:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001798:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <ETH_SetMACConfig+0x234>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	68f9      	ldr	r1, [r7, #12]
 80017b2:	430b      	orrs	r3, r1
 80017b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d101      	bne.n	80017d2 <ETH_SetMACConfig+0x172>
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x174>
 80017d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017e6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80017fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001804:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	f023 0103 	bic.w	r1, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	430a      	orrs	r2, r1
 800181e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800182a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001846:	2a00      	cmp	r2, #0
 8001848:	d101      	bne.n	800184e <ETH_SetMACConfig+0x1ee>
 800184a:	2240      	movs	r2, #64	@ 0x40
 800184c:	e000      	b.n	8001850 <ETH_SetMACConfig+0x1f0>
 800184e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001850:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001858:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001862:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001870:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	430a      	orrs	r2, r1
 800187c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	00048083 	.word	0x00048083
 8001890:	c0f88000 	.word	0xc0f88000
 8001894:	fffffef0 	.word	0xfffffef0

08001898 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <ETH_SetDMAConfig+0xf8>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	6811      	ldr	r1, [r2, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	791b      	ldrb	r3, [r3, #4]
 80018c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7b1b      	ldrb	r3, [r3, #12]
 80018d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <ETH_SetDMAConfig+0xfc>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001908:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <ETH_SetDMAConfig+0x100>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	68f9      	ldr	r1, [r7, #12]
 8001916:	430b      	orrs	r3, r1
 8001918:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800191c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	7d1b      	ldrb	r3, [r3, #20]
 8001928:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7f5b      	ldrb	r3, [r3, #29]
 8001930:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <ETH_SetDMAConfig+0x104>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	430b      	orrs	r3, r1
 800194e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001952:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7f1b      	ldrb	r3, [r3, #28]
 800195a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001960:	4313      	orrs	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <ETH_SetDMAConfig+0x108>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	430b      	orrs	r3, r1
 800197c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001980:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	ffff87fd 	.word	0xffff87fd
 8001994:	ffff2ffe 	.word	0xffff2ffe
 8001998:	fffec000 	.word	0xfffec000
 800199c:	ffc0efef 	.word	0xffc0efef
 80019a0:	7fc0ffff 	.word	0x7fc0ffff

080019a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0a4      	sub	sp, #144	@ 0x90
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019b2:	2300      	movs	r3, #0
 80019b4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80019fc:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a00:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a4e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a58:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fde6 	bl	8001660 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ab2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ab8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001abc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ac4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fee1 	bl	8001898 <ETH_SetDMAConfig>
}
 8001ad6:	bf00      	nop
 8001ad8:	3790      	adds	r7, #144	@ 0x90
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e01d      	b.n	8001b28 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68d9      	ldr	r1, [r3, #12]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	3206      	adds	r2, #6
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3301      	adds	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d9de      	bls.n	8001aec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2303      	movs	r3, #3
 8001b40:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b50:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b60:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e023      	b.n	8001bc6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	3212      	adds	r2, #18
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d9d8      	bls.n	8001b7e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c3a:	4b89      	ldr	r3, [pc, #548]	@ (8001e60 <HAL_GPIO_Init+0x234>)
 8001c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c3e:	e194      	b.n	8001f6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8186 	beq.w	8001f64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x44>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	69b9      	ldr	r1, [r7, #24]
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80e0 	beq.w	8001f64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <HAL_GPIO_Init+0x238>)
 8001da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001daa:	4a2e      	ldr	r2, [pc, #184]	@ (8001e64 <HAL_GPIO_Init+0x238>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <HAL_GPIO_Init+0x238>)
 8001db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc2:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HAL_GPIO_Init+0x23c>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <HAL_GPIO_Init+0x240>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d052      	beq.n	8001e94 <HAL_GPIO_Init+0x268>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e70 <HAL_GPIO_Init+0x244>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d031      	beq.n	8001e5a <HAL_GPIO_Init+0x22e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_GPIO_Init+0x248>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02b      	beq.n	8001e56 <HAL_GPIO_Init+0x22a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_GPIO_Init+0x24c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d025      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_GPIO_Init+0x250>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01f      	beq.n	8001e4e <HAL_GPIO_Init+0x222>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_GPIO_Init+0x254>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x21e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	@ (8001e84 <HAL_GPIO_Init+0x258>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_GPIO_Init+0x25c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_GPIO_Init+0x260>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_GPIO_Init+0x264>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e36:	2309      	movs	r3, #9
 8001e38:	e02d      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	e02b      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e3e:	2308      	movs	r3, #8
 8001e40:	e029      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e027      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e46:	2306      	movs	r3, #6
 8001e48:	e025      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	e023      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e021      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e01f      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e01d      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01b      	b.n	8001e96 <HAL_GPIO_Init+0x26a>
 8001e5e:	bf00      	nop
 8001e60:	58000080 	.word	0x58000080
 8001e64:	58024400 	.word	0x58024400
 8001e68:	58000400 	.word	0x58000400
 8001e6c:	58020000 	.word	0x58020000
 8001e70:	58020400 	.word	0x58020400
 8001e74:	58020800 	.word	0x58020800
 8001e78:	58020c00 	.word	0x58020c00
 8001e7c:	58021000 	.word	0x58021000
 8001e80:	58021400 	.word	0x58021400
 8001e84:	58021800 	.word	0x58021800
 8001e88:	58021c00 	.word	0x58021c00
 8001e8c:	58022000 	.word	0x58022000
 8001e90:	58022400 	.word	0x58022400
 8001e94:	2300      	movs	r3, #0
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea6:	4938      	ldr	r1, [pc, #224]	@ (8001f88 <HAL_GPIO_Init+0x35c>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f ae63 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3724      	adds	r7, #36	@ 0x24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fd0:	887a      	ldrh	r2, [r7, #2]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	041a      	lsls	r2, r3, #16
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	400b      	ands	r3, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002000:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fd6f 	bl	8000afc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af02      	add	r7, sp, #8
 800202c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0fe      	b.n	8002236 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe ff2d 	bl	8000eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f8bc 	bl	80061dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7c1a      	ldrb	r2, [r3, #16]
 800206c:	f88d 2000 	strb.w	r2, [sp]
 8002070:	3304      	adds	r3, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	f004 f840 	bl	80060f8 <USB_CoreInit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0d5      	b.n	8002236 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f8b4 	bl	80061fe <USB_SetCurrentMode>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0c6      	b.n	8002236 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e04a      	b.n	8002144 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3315      	adds	r3, #21
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3314      	adds	r3, #20
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	b298      	uxth	r0, r3
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	332e      	adds	r3, #46	@ 0x2e
 80020ea:	4602      	mov	r2, r0
 80020ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3318      	adds	r3, #24
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	331c      	adds	r3, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3320      	adds	r3, #32
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3324      	adds	r3, #36	@ 0x24
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3af      	bcc.n	80020ae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e044      	b.n	80021de <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3b5      	bcc.n	8002154 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7c1a      	ldrb	r2, [r3, #16]
 80021f0:	f88d 2000 	strb.w	r2, [sp]
 80021f4:	3304      	adds	r3, #4
 80021f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f8:	f004 f84e 	bl	8006298 <USB_DevInit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e013      	b.n	8002236 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7b1b      	ldrb	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d102      	bne.n	800222a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f80b 	bl	8002240 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fa09 	bl	8006646 <USB_DevDisconnect>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_PCDEx_ActivateLPM+0x44>)
 8002270:	4313      	orrs	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	10000003 	.word	0x10000003

08002288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00a      	beq.n	80022b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01f      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e01d      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	490f      	ldr	r1, [pc, #60]	@ (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022c2:	f7fe ff1f 	bl	8001104 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c8:	e009      	b.n	80022de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ca:	f7fe ff1b 	bl	8001104 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d8:	d901      	bls.n	80022de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ea:	d1ee      	bne.n	80022ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	58024800 	.word	0x58024800

080022fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	58024800 	.word	0x58024800

0800231c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	@ 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f000 bc48 	b.w	8002bc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8088 	beq.w	800244e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233e:	4b99      	ldr	r3, [pc, #612]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002348:	4b96      	ldr	r3, [pc, #600]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002350:	2b10      	cmp	r3, #16
 8002352:	d007      	beq.n	8002364 <HAL_RCC_OscConfig+0x48>
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	2b18      	cmp	r3, #24
 8002358:	d111      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4b8f      	ldr	r3, [pc, #572]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d06d      	beq.n	800244c <HAL_RCC_OscConfig+0x130>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d169      	bne.n	800244c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f000 bc21 	b.w	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x7a>
 8002388:	4b86      	ldr	r3, [pc, #536]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a85      	ldr	r2, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e02e      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x9c>
 800239e:	4b81      	ldr	r3, [pc, #516]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a80      	ldr	r2, [pc, #512]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xc0>
 80023c2:	4b78      	ldr	r3, [pc, #480]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a77      	ldr	r2, [pc, #476]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b75      	ldr	r3, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a74      	ldr	r2, [pc, #464]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023dc:	4b71      	ldr	r3, [pc, #452]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a70      	ldr	r2, [pc, #448]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b6e      	ldr	r3, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6d      	ldr	r2, [pc, #436]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fe82 	bl	8001104 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fe7e 	bl	8001104 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e3d4      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xe8>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fe6e 	bl	8001104 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fe6a 	bl	8001104 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e3c0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243e:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x110>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80ca 	beq.w	80025f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245c:	4b51      	ldr	r3, [pc, #324]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002464:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002466:	4b4f      	ldr	r3, [pc, #316]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_RCC_OscConfig+0x166>
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b18      	cmp	r3, #24
 8002476:	d156      	bne.n	8002526 <HAL_RCC_OscConfig+0x20a>
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d151      	bne.n	8002526 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002482:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x17e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e392      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0219 	bic.w	r2, r3, #25
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	493f      	ldr	r1, [pc, #252]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fe2a 	bl	8001104 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fe26 	bl	8001104 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e37c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c6:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	f7fe fe47 	bl	8001164 <HAL_GetREVID>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024dc:	4293      	cmp	r3, r2
 80024de:	d817      	bhi.n	8002510 <HAL_RCC_OscConfig+0x1f4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b40      	cmp	r3, #64	@ 0x40
 80024e6:	d108      	bne.n	80024fa <HAL_RCC_OscConfig+0x1de>
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024f0:	4a2c      	ldr	r2, [pc, #176]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f8:	e07a      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	031b      	lsls	r3, r3, #12
 8002508:	4926      	ldr	r1, [pc, #152]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250e:	e06f      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	4921      	ldr	r1, [pc, #132]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	e064      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d047      	beq.n	80025be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0219 	bic.w	r2, r3, #25
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	491a      	ldr	r1, [pc, #104]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fde0 	bl	8001104 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fddc 	bl	8001104 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e332      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	f7fe fdfd 	bl	8001164 <HAL_GetREVID>
 800256a:	4603      	mov	r3, r0
 800256c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002570:	4293      	cmp	r3, r2
 8002572:	d819      	bhi.n	80025a8 <HAL_RCC_OscConfig+0x28c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b40      	cmp	r3, #64	@ 0x40
 800257a:	d108      	bne.n	800258e <HAL_RCC_OscConfig+0x272>
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002584:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258a:	6053      	str	r3, [r2, #4]
 800258c:	e030      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	4901      	ldr	r1, [pc, #4]	@ (80025a4 <HAL_RCC_OscConfig+0x288>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
 80025a2:	e025      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
 80025a4:	58024400 	.word	0x58024400
 80025a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4997      	ldr	r1, [pc, #604]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e018      	b.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b95      	ldr	r3, [pc, #596]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a94      	ldr	r2, [pc, #592]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fd9b 	bl	8001104 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe fd97 	bl	8001104 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2ed      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a9 	beq.w	8002750 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b85      	ldr	r3, [pc, #532]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002606:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002608:	4b82      	ldr	r3, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d007      	beq.n	8002624 <HAL_RCC_OscConfig+0x308>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b18      	cmp	r3, #24
 8002618:	d13a      	bne.n	8002690 <HAL_RCC_OscConfig+0x374>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d135      	bne.n	8002690 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002624:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_OscConfig+0x320>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e2c1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263c:	f7fe fd92 	bl	8001164 <HAL_GetREVID>
 8002640:	4603      	mov	r3, r0
 8002642:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002646:	4293      	cmp	r3, r2
 8002648:	d817      	bhi.n	800267a <HAL_RCC_OscConfig+0x35e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2b20      	cmp	r3, #32
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x348>
 8002652:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800265a:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002660:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002662:	e075      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	4968      	ldr	r1, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002678:	e06a      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267a:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	4962      	ldr	r1, [pc, #392]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	4313      	orrs	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268e:	e05f      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d042      	beq.n	800271e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002698:	4b5e      	ldr	r3, [pc, #376]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5d      	ldr	r2, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fd2e 	bl	8001104 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026ac:	f7fe fd2a 	bl	8001104 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e280      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026be:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ca:	f7fe fd4b 	bl	8001164 <HAL_GetREVID>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d817      	bhi.n	8002708 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3d6>
 80026e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026ee:	6053      	str	r3, [r2, #4]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
 80026f2:	4b48      	ldr	r3, [pc, #288]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	4944      	ldr	r1, [pc, #272]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	e023      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
 8002708:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	493f      	ldr	r1, [pc, #252]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
 800271c:	e018      	b.n	8002750 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3c      	ldr	r2, [pc, #240]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fceb 	bl	8001104 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002732:	f7fe fce7 	bl	8001104 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e23d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002744:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d036      	beq.n	80027ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d019      	beq.n	8002798 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002764:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002768:	4a2a      	ldr	r2, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fcc8 	bl	8001104 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fcc4 	bl	8001104 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e21a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278a:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x45c>
 8002796:	e018      	b.n	80027ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe fcae 	bl	8001104 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe fcaa 	bl	8001104 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e200      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d039      	beq.n	800284a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01c      	beq.n	8002818 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fc8b 	bl	8001104 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f2:	f7fe fc87 	bl	8001104 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1dd      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4d6>
 8002810:	e01b      	b.n	800284a <HAL_RCC_OscConfig+0x52e>
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002818:	4b9b      	ldr	r3, [pc, #620]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a9a      	ldr	r2, [pc, #616]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 800281e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002822:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002824:	f7fe fc6e 	bl	8001104 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282c:	f7fe fc6a 	bl	8001104 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1c0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800283e:	4b92      	ldr	r3, [pc, #584]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8081 	beq.w	800295a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002858:	4b8c      	ldr	r3, [pc, #560]	@ (8002a8c <HAL_RCC_OscConfig+0x770>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x770>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002864:	f7fe fc4e 	bl	8001104 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fc4a 	bl	8001104 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1a0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287e:	4b83      	ldr	r3, [pc, #524]	@ (8002a8c <HAL_RCC_OscConfig+0x770>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x584>
 8002892:	4b7d      	ldr	r3, [pc, #500]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a7c      	ldr	r2, [pc, #496]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	e02d      	b.n	80028fc <HAL_RCC_OscConfig+0x5e0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5a6>
 80028a8:	4b77      	ldr	r3, [pc, #476]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a76      	ldr	r2, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	4b74      	ldr	r3, [pc, #464]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a73      	ldr	r2, [pc, #460]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x5e0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x5c8>
 80028ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	4a6b      	ldr	r2, [pc, #428]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x5e0>
 80028e4:	4b68      	ldr	r3, [pc, #416]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a67      	ldr	r2, [pc, #412]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f0:	4b65      	ldr	r3, [pc, #404]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f4:	4a64      	ldr	r2, [pc, #400]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fbfe 	bl	8001104 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe fbfa 	bl	8001104 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e14e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002922:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <HAL_RCC_OscConfig+0x5f0>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fbe8 	bl	8001104 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fbe4 	bl	8001104 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e138      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 812d 	beq.w	8002bbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002964:	4b48      	ldr	r3, [pc, #288]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800296c:	2b18      	cmp	r3, #24
 800296e:	f000 80bd 	beq.w	8002aec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b02      	cmp	r3, #2
 8002978:	f040 809e 	bne.w	8002ab8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b42      	ldr	r3, [pc, #264]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a41      	ldr	r2, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fbbc 	bl	8001104 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fbb8 	bl	8001104 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e10e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a2:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ae:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_OscConfig+0x774>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4931      	ldr	r1, [pc, #196]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	3b01      	subs	r3, #1
 80029ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	3b01      	subs	r3, #1
 80029d8:	025b      	lsls	r3, r3, #9
 80029da:	b29b      	uxth	r3, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e2:	3b01      	subs	r3, #1
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	3b01      	subs	r3, #1
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029f8:	4923      	ldr	r1, [pc, #140]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029fe:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	4a21      	ldr	r2, [pc, #132]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_RCC_OscConfig+0x778>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a16:	00d2      	lsls	r2, r2, #3
 8002a18:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	4917      	ldr	r1, [pc, #92]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f023 0202 	bic.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	4912      	ldr	r1, [pc, #72]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb41 	bl	8001104 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a84:	e011      	b.n	8002aaa <HAL_RCC_OscConfig+0x78e>
 8002a86:	bf00      	nop
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58024800 	.word	0x58024800
 8002a90:	fffffc0c 	.word	0xfffffc0c
 8002a94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fb34 	bl	8001104 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e08a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x77c>
 8002ab6:	e082      	b.n	8002bbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b43      	ldr	r3, [pc, #268]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a42      	ldr	r2, [pc, #264]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fb1e 	bl	8001104 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fb1a 	bl	8001104 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e070      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x7b0>
 8002aea:	e068      	b.n	8002bbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002aec:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002af2:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d031      	beq.n	8002b64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d12a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d122      	bne.n	8002b64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0e1b      	lsrs	r3, r3, #24
 8002b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e02b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d01f      	beq.n	8002bbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8a:	f7fe fabb 	bl	8001104 <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b90:	bf00      	nop
 8002b92:	f7fe fab7 	bl	8001104 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d0f9      	beq.n	8002b92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_RCC_OscConfig+0x8b0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	4906      	ldr	r1, [pc, #24]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3730      	adds	r7, #48	@ 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	ffff0007 	.word	0xffff0007

08002bd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e19c      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d910      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b87      	ldr	r3, [pc, #540]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	4985      	ldr	r1, [pc, #532]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b83      	ldr	r3, [pc, #524]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e184      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	4b7b      	ldr	r3, [pc, #492]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d908      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c30:	4b78      	ldr	r3, [pc, #480]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4975      	ldr	r1, [pc, #468]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b70      	ldr	r3, [pc, #448]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	496a      	ldr	r1, [pc, #424]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	4b64      	ldr	r3, [pc, #400]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d908      	bls.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c8c:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	495e      	ldr	r1, [pc, #376]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d908      	bls.n	8002ccc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cba:	4b56      	ldr	r3, [pc, #344]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4953      	ldr	r1, [pc, #332]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d908      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f023 020f 	bic.w	r2, r3, #15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4947      	ldr	r1, [pc, #284]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d055      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d06:	4b43      	ldr	r3, [pc, #268]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4940      	ldr	r1, [pc, #256]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d20:	4b3c      	ldr	r3, [pc, #240]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0f6      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d115      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0ea      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d50:	4b30      	ldr	r3, [pc, #192]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0de      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0d6      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f023 0207 	bic.w	r2, r3, #7
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4925      	ldr	r1, [pc, #148]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d82:	f7fe f9bf 	bl	8001104 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	f7fe f9bb 	bl	8001104 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0be      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d1eb      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d208      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f023 020f 	bic.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d214      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 020f 	bic.w	r2, r3, #15
 8002df6:	4906      	ldr	r1, [pc, #24]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e086      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
 8002e10:	52002000 	.word	0x52002000
 8002e14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d208      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e34:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4939      	ldr	r1, [pc, #228]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	492e      	ldr	r1, [pc, #184]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d208      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4922      	ldr	r1, [pc, #136]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d208      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4917      	ldr	r1, [pc, #92]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ed0:	f000 f834 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	4912      	ldr	r1, [pc, #72]	@ (8002f2c <HAL_RCC_ClockConfig+0x35c>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_RCC_ClockConfig+0x35c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x360>)
 8002f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x364>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_ClockConfig+0x368>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe f8ac 	bl	8001070 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	08006778 	.word	0x08006778
 8002f30:	24000004 	.word	0x24000004
 8002f34:	24000000 	.word	0x24000000
 8002f38:	24000008 	.word	0x24000008

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f42:	4bb3      	ldr	r3, [pc, #716]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4a:	2b18      	cmp	r3, #24
 8002f4c:	f200 8155 	bhi.w	80031fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	080031fb 	.word	0x080031fb
 8002f60:	080031fb 	.word	0x080031fb
 8002f64:	080031fb 	.word	0x080031fb
 8002f68:	080031fb 	.word	0x080031fb
 8002f6c:	080031fb 	.word	0x080031fb
 8002f70:	080031fb 	.word	0x080031fb
 8002f74:	080031fb 	.word	0x080031fb
 8002f78:	08002fe3 	.word	0x08002fe3
 8002f7c:	080031fb 	.word	0x080031fb
 8002f80:	080031fb 	.word	0x080031fb
 8002f84:	080031fb 	.word	0x080031fb
 8002f88:	080031fb 	.word	0x080031fb
 8002f8c:	080031fb 	.word	0x080031fb
 8002f90:	080031fb 	.word	0x080031fb
 8002f94:	080031fb 	.word	0x080031fb
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	080031fb 	.word	0x080031fb
 8002fa0:	080031fb 	.word	0x080031fb
 8002fa4:	080031fb 	.word	0x080031fb
 8002fa8:	080031fb 	.word	0x080031fb
 8002fac:	080031fb 	.word	0x080031fb
 8002fb0:	080031fb 	.word	0x080031fb
 8002fb4:	080031fb 	.word	0x080031fb
 8002fb8:	08002fef 	.word	0x08002fef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fbc:	4b94      	ldr	r3, [pc, #592]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fc8:	4b91      	ldr	r3, [pc, #580]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	4a90      	ldr	r2, [pc, #576]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fda:	e111      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fde:	61bb      	str	r3, [r7, #24]
      break;
 8002fe0:	e10e      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe4:	61bb      	str	r3, [r7, #24]
      break;
 8002fe6:	e10b      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fea:	61bb      	str	r3, [r7, #24]
      break;
 8002fec:	e108      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fee:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ff8:	4b85      	ldr	r3, [pc, #532]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003002:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003004:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800300e:	4b80      	ldr	r3, [pc, #512]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80e1 	beq.w	80031f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b02      	cmp	r3, #2
 8003036:	f000 8083 	beq.w	8003140 <HAL_RCC_GetSysClockFreq+0x204>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f200 80a1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x248>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x114>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d056      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800304e:	e099      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003050:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800305c:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	4a6b      	ldr	r2, [pc, #428]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003086:	4b62      	ldr	r3, [pc, #392]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003096:	ed97 6a02 	vldr	s12, [r7, #8]
 800309a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800309e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030b6:	e087      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ca:	4b51      	ldr	r3, [pc, #324]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030da:	ed97 6a02 	vldr	s12, [r7, #8]
 80030de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fa:	e065      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2ec>
 800310a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310e:	4b40      	ldr	r3, [pc, #256]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003122:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800313e:	e043      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2f0>
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003162:	ed97 6a02 	vldr	s12, [r7, #8]
 8003166:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003182:	e021      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	0a5b      	lsrs	r3, r3, #9
 80031ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d2:	3301      	adds	r3, #1
 80031d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ec:	ee17 3a90 	vmov	r3, s15
 80031f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
      break;
 80031f8:	e002      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031fa:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031fc:	61bb      	str	r3, [r7, #24]
      break;
 80031fe:	bf00      	nop
  }

  return sysclockfreq;
 8003200:	69bb      	ldr	r3, [r7, #24]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	@ 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	03d09000 	.word	0x03d09000
 8003218:	003d0900 	.word	0x003d0900
 800321c:	007a1200 	.word	0x007a1200
 8003220:	46000000 	.word	0x46000000
 8003224:	4c742400 	.word	0x4c742400
 8003228:	4a742400 	.word	0x4a742400
 800322c:	4af42400 	.word	0x4af42400

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003236:	f7ff fe81 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x50>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490f      	ldr	r1, [pc, #60]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x54>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003254:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x50>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x54>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x58>)
 800326c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326e:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x58>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	58024400 	.word	0x58024400
 8003284:	08006778 	.word	0x08006778
 8003288:	24000004 	.word	0x24000004
 800328c:	24000000 	.word	0x24000000

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003294:	f7ff ffcc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400
 80032b8:	08006778 	.word	0x08006778

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032c0:	f7ff ffb6 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4904      	ldr	r1, [pc, #16]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58024400 	.word	0x58024400
 80032e4:	08006778 	.word	0x08006778

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0ca      	sub	sp, #296	@ 0x128
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800330c:	2500      	movs	r5, #0
 800330e:	ea54 0305 	orrs.w	r3, r4, r5
 8003312:	d049      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800331e:	d02f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003320:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003324:	d828      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332a:	d01a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800332c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003330:	d822      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333a:	d007      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800333c:	e01c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333e:	4bb8      	ldr	r3, [pc, #736]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	4ab7      	ldr	r2, [pc, #732]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334a:	e01a      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	3308      	adds	r3, #8
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fc8f 	bl	8004c78 <RCCEx_PLL2_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003360:	e00f      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	3328      	adds	r3, #40	@ 0x28
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f001 fd36 	bl	8004ddc <RCCEx_PLL3_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003376:	e004      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800338a:	4ba5      	ldr	r3, [pc, #660]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003398:	4aa1      	ldr	r2, [pc, #644]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339a:	430b      	orrs	r3, r1
 800339c:	6513      	str	r3, [r2, #80]	@ 0x50
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b4:	f04f 0900 	mov.w	r9, #0
 80033b8:	ea58 0309 	orrs.w	r3, r8, r9
 80033bc:	d047      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d82a      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e5 	.word	0x080033e5
 80033d4:	080033f3 	.word	0x080033f3
 80033d8:	08003409 	.word	0x08003409
 80033dc:	08003427 	.word	0x08003427
 80033e0:	08003427 	.word	0x08003427
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	4a8d      	ldr	r2, [pc, #564]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f0:	e01a      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f6:	3308      	adds	r3, #8
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 fc3c 	bl	8004c78 <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003406:	e00f      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	3328      	adds	r3, #40	@ 0x28
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f001 fce3 	bl	8004ddc <RCCEx_PLL3_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800341c:	e004      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003430:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003434:	f023 0107 	bic.w	r1, r3, #7
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	4a78      	ldr	r2, [pc, #480]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6513      	str	r3, [r2, #80]	@ 0x50
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800345a:	f04f 0b00 	mov.w	fp, #0
 800345e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003462:	d04c      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	d030      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003474:	d829      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003476:	2bc0      	cmp	r3, #192	@ 0xc0
 8003478:	d02d      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800347a:	2bc0      	cmp	r3, #192	@ 0xc0
 800347c:	d825      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800347e:	2b80      	cmp	r3, #128	@ 0x80
 8003480:	d018      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d821      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d007      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800348e:	e01c      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b63      	ldr	r3, [pc, #396]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4a62      	ldr	r2, [pc, #392]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800349c:	e01c      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3308      	adds	r3, #8
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fbe6 	bl	8004c78 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b2:	e011      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	3328      	adds	r3, #40	@ 0x28
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fc8d 	bl	8004ddc <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800350a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003514:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d053      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352a:	d035      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800352c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003530:	d82e      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003532:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003536:	d031      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003538:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800353c:	d828      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800353e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003542:	d01a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003548:	d822      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800354e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003552:	d007      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	4a31      	ldr	r2, [pc, #196]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003562:	e01c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3308      	adds	r3, #8
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fb83 	bl	8004c78 <RCCEx_PLL2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003578:	e011      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	3328      	adds	r3, #40	@ 0x28
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fc2a 	bl	8004ddc <RCCEx_PLL3_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800358e:	e006      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003596:	e002      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003598:	bf00      	nop
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800359c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035e0:	460b      	mov	r3, r1
 80035e2:	4313      	orrs	r3, r2
 80035e4:	d056      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f2:	d038      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f8:	d831      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035fe:	d034      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003600:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003604:	d82b      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800360a:	d01d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800360c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003610:	d825      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800361c:	e01f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800361e:	bf00      	nop
 8003620:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003624:	4ba2      	ldr	r3, [pc, #648]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	4aa1      	ldr	r2, [pc, #644]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003630:	e01c      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3308      	adds	r3, #8
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fb1c 	bl	8004c78 <RCCEx_PLL2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003646:	e011      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	3328      	adds	r3, #40	@ 0x28
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fbc3 	bl	8004ddc <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003664:	e002      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003674:	4b8e      	ldr	r3, [pc, #568]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003684:	4a8a      	ldr	r2, [pc, #552]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003686:	430b      	orrs	r3, r1
 8003688:	6593      	str	r3, [r2, #88]	@ 0x58
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	d03a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	2b30      	cmp	r3, #48	@ 0x30
 80036bc:	d01f      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036be:	2b30      	cmp	r3, #48	@ 0x30
 80036c0:	d819      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d00c      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d815      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d019      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d111      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d2:	4b77      	ldr	r3, [pc, #476]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	4a76      	ldr	r2, [pc, #472]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036de:	e011      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	3308      	adds	r3, #8
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fac5 	bl	8004c78 <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036fc:	e002      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800370c:	4b68      	ldr	r3, [pc, #416]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	4a65      	ldr	r2, [pc, #404]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371c:	430b      	orrs	r3, r1
 800371e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003740:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d051      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003754:	d035      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375a:	d82e      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800375c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003760:	d031      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003766:	d828      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376c:	d01a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d822      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377c:	d007      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800377e:	e01c      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b4b      	ldr	r3, [pc, #300]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	4a4a      	ldr	r2, [pc, #296]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800378c:	e01c      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3308      	adds	r3, #8
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fa6e 	bl	8004c78 <RCCEx_PLL2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a2:	e011      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	3328      	adds	r3, #40	@ 0x28
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 fb15 	bl	8004ddc <RCCEx_PLL3_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b8:	e006      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037d0:	4b37      	ldr	r3, [pc, #220]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037de:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e4:	e003      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003804:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003808:	460b      	mov	r3, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	d056      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003818:	d033      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800381a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381e:	d82c      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003820:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003824:	d02f      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003826:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800382a:	d826      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800382c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003830:	d02b      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003836:	d820      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800383c:	d012      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800383e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003842:	d81a      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d022      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384c:	d115      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	3308      	adds	r3, #8
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fa0e 	bl	8004c78 <RCCEx_PLL2_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003862:	e015      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003868:	3328      	adds	r3, #40	@ 0x28
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f001 fab5 	bl	8004ddc <RCCEx_PLL3_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003878:	e00a      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003882:	bf00      	nop
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a6:	4a02      	ldr	r2, [pc, #8]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038ae:	bf00      	nop
 80038b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d055      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e8:	d033      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ee:	d82c      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f4:	d02f      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fa:	d826      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003900:	d02b      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003902:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003906:	d820      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800390c:	d012      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d81a      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800391c:	d115      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f001 f9a6 	bl	8004c78 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003932:	e015      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	3328      	adds	r3, #40	@ 0x28
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fa4d 	bl	8004ddc <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003952:	bf00      	nop
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003968:	4ba3      	ldr	r3, [pc, #652]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003978:	4a9f      	ldr	r2, [pc, #636]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	430b      	orrs	r3, r1
 800397c:	6593      	str	r3, [r2, #88]	@ 0x58
 800397e:	e003      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800399e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d037      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b2:	d00e      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b8:	d816      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c2:	d111      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	4a8b      	ldr	r2, [pc, #556]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d0:	e00f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	3308      	adds	r3, #8
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f94c 	bl	8004c78 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a08:	4a7b      	ldr	r2, [pc, #492]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d039      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d81c      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a85 	.word	0x08003a85
 8003a4c:	08003a59 	.word	0x08003a59
 8003a50:	08003a67 	.word	0x08003a67
 8003a54:	08003a85 	.word	0x08003a85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	4a66      	ldr	r2, [pc, #408]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f902 	bl	8004c78 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	f023 0103 	bic.w	r1, r3, #3
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	4a56      	ldr	r2, [pc, #344]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f000 809f 	beq.w	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ace:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ada:	f7fd fb13 	bl	8001104 <HAL_GetTick>
 8003ade:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae2:	e00b      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fd fb0e 	bl	8001104 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	@ 0x64
 8003af2:	d903      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afc:	4b3f      	ldr	r3, [pc, #252]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ed      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d179      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1c:	4053      	eors	r3, r2
 8003b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d015      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b26:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b32:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a30      	ldr	r2, [pc, #192]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fad0 	bl	8001104 <HAL_GetTick>
 8003b64:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b68:	e00d      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd facb 	bl	8001104 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d903      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b84:	e005      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b86:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0eb      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d129      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	d10e      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bac:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bbc:	091a      	lsrs	r2, r3, #4
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6113      	str	r3, [r2, #16]
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bd4:	6113      	str	r3, [r2, #16]
 8003bd6:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	4a04      	ldr	r2, [pc, #16]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	e00e      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58024800 	.word	0x58024800
 8003c00:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f002 0301 	and.w	r3, r2, #1
 8003c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f000 8089 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c34:	2b28      	cmp	r3, #40	@ 0x28
 8003c36:	d86b      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003d19 	.word	0x08003d19
 8003c44:	08003d11 	.word	0x08003d11
 8003c48:	08003d11 	.word	0x08003d11
 8003c4c:	08003d11 	.word	0x08003d11
 8003c50:	08003d11 	.word	0x08003d11
 8003c54:	08003d11 	.word	0x08003d11
 8003c58:	08003d11 	.word	0x08003d11
 8003c5c:	08003d11 	.word	0x08003d11
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003d11 	.word	0x08003d11
 8003c68:	08003d11 	.word	0x08003d11
 8003c6c:	08003d11 	.word	0x08003d11
 8003c70:	08003d11 	.word	0x08003d11
 8003c74:	08003d11 	.word	0x08003d11
 8003c78:	08003d11 	.word	0x08003d11
 8003c7c:	08003d11 	.word	0x08003d11
 8003c80:	08003cfb 	.word	0x08003cfb
 8003c84:	08003d11 	.word	0x08003d11
 8003c88:	08003d11 	.word	0x08003d11
 8003c8c:	08003d11 	.word	0x08003d11
 8003c90:	08003d11 	.word	0x08003d11
 8003c94:	08003d11 	.word	0x08003d11
 8003c98:	08003d11 	.word	0x08003d11
 8003c9c:	08003d11 	.word	0x08003d11
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	08003d11 	.word	0x08003d11
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d11 	.word	0x08003d11
 8003cc8:	08003d11 	.word	0x08003d11
 8003ccc:	08003d11 	.word	0x08003d11
 8003cd0:	08003d11 	.word	0x08003d11
 8003cd4:	08003d11 	.word	0x08003d11
 8003cd8:	08003d11 	.word	0x08003d11
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d19 	.word	0x08003d19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	3308      	adds	r3, #8
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 ffc3 	bl	8004c78 <RCCEx_PLL2_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	3328      	adds	r3, #40	@ 0x28
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f86a 	bl	8004ddc <RCCEx_PLL3_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d22:	4bbf      	ldr	r3, [pc, #764]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d30:	4abb      	ldr	r2, [pc, #748]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f002 0302 	and.w	r3, r2, #2
 8003d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d041      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d824      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d9f 	.word	0x08003d9f
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 ff71 	bl	8004c78 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00f      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	3328      	adds	r3, #40	@ 0x28
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f818 	bl	8004ddc <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dc6:	4b96      	ldr	r3, [pc, #600]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f023 0107 	bic.w	r1, r3, #7
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd4:	4a92      	ldr	r2, [pc, #584]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dda:	e003      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f002 0304 	and.w	r3, r2, #4
 8003df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	d044      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d825      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e65 	.word	0x08003e65
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e47 	.word	0x08003e47
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e65 	.word	0x08003e65
 8003e2c:	08003e65 	.word	0x08003e65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	3308      	adds	r3, #8
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ff1d 	bl	8004c78 <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e44:	e00f      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	3328      	adds	r3, #40	@ 0x28
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 ffc4 	bl	8004ddc <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e5a:	e004      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e62:	e000      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f023 0107 	bic.w	r1, r3, #7
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7e:	4a68      	ldr	r2, [pc, #416]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f002 0320 	and.w	r3, r2, #32
 8003e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d055      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eba:	d033      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec0:	d82c      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d02f      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d826      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ece:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ed2:	d02b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ed4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ed8:	d820      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ede:	d012      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee4:	d81a      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d022      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eee:	d115      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 febd 	bl	8004c78 <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	3328      	adds	r3, #40	@ 0x28
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 ff64 	bl	8004ddc <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f22:	e006      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f24:	bf00      	nop
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	4a35      	ldr	r2, [pc, #212]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f50:	e003      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d058      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f86:	d033      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f8c:	d82c      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f92:	d02f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d826      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f9e:	d02b      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa4:	d820      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d012      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb0:	d81a      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d022      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d115      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fe57 	bl	8004c78 <RCCEx_PLL2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e015      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3328      	adds	r3, #40	@ 0x28
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fefe 	bl	8004ddc <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fee:	e006      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff0:	bf00      	nop
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e002      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10e      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004006:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004016:	4a02      	ldr	r2, [pc, #8]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800401e:	bf00      	nop
 8004020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004042:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004046:	460b      	mov	r3, r1
 8004048:	4313      	orrs	r3, r2
 800404a:	d055      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004054:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004058:	d033      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800405a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800405e:	d82c      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004064:	d02f      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406a:	d826      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800406c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004070:	d02b      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004072:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004076:	d820      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800407c:	d012      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800407e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004082:	d81a      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d022      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408c:	d115      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	3308      	adds	r3, #8
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fdee 	bl	8004c78 <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a2:	e015      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	3328      	adds	r3, #40	@ 0x28
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe95 	bl	8004ddc <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040b8:	e00a      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040c2:	bf00      	nop
 80040c4:	e004      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040e8:	4a9d      	ldr	r2, [pc, #628]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ee:	e003      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f002 0308 	and.w	r3, r2, #8
 8004104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800410e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004112:	460b      	mov	r3, r1
 8004114:	4313      	orrs	r3, r2
 8004116:	d01e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004124:	d10c      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	3328      	adds	r3, #40	@ 0x28
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fe54 	bl	8004ddc <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004140:	4b87      	ldr	r3, [pc, #540]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004150:	4a83      	ldr	r2, [pc, #524]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004152:	430b      	orrs	r3, r1
 8004154:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f002 0310 	and.w	r3, r2, #16
 8004162:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800416c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d01e      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	d10c      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	3328      	adds	r3, #40	@ 0x28
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fe25 	bl	8004ddc <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800419e:	4b70      	ldr	r3, [pc, #448]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c4:	2300      	movs	r3, #0
 80041c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041ce:	460b      	mov	r3, r1
 80041d0:	4313      	orrs	r3, r2
 80041d2:	d03e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e6:	d81b      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f0:	d00b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041f2:	e015      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	3308      	adds	r3, #8
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fd3b 	bl	8004c78 <RCCEx_PLL2_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004208:	e00f      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	3328      	adds	r3, #40	@ 0x28
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fde2 	bl	8004ddc <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004232:	4b4b      	ldr	r3, [pc, #300]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004242:	4a47      	ldr	r2, [pc, #284]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6593      	str	r3, [r2, #88]	@ 0x58
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800425e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004260:	2300      	movs	r3, #0
 8004262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004264:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d03b      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800427a:	d01f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800427c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004280:	d818      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004286:	d003      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800428c:	d007      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800428e:	e011      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004290:	4b33      	ldr	r3, [pc, #204]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a32      	ldr	r2, [pc, #200]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	3328      	adds	r3, #40	@ 0x28
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fd98 	bl	8004ddc <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c6:	4b26      	ldr	r3, [pc, #152]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	4a22      	ldr	r2, [pc, #136]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6553      	str	r3, [r2, #84]	@ 0x54
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042f4:	2300      	movs	r3, #0
 80042f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80042f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d034      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d007      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004314:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	4a11      	ldr	r2, [pc, #68]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004320:	e00e      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	3308      	adds	r3, #8
 8004328:	2102      	movs	r1, #2
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fca4 	bl	8004c78 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800433e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004348:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004356:	4a02      	ldr	r2, [pc, #8]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004358:	430b      	orrs	r3, r1
 800435a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800435e:	bf00      	nop
 8004360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437a:	2300      	movs	r3, #0
 800437c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800437e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d00c      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438c:	3328      	adds	r3, #40	@ 0x28
 800438e:	2102      	movs	r1, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fd23 	bl	8004ddc <RCCEx_PLL3_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b0:	2300      	movs	r3, #0
 80043b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d038      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ca:	d018      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d0:	d811      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d6:	d014      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043dc:	d80b      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e6:	d106      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e8:	4bc3      	ldr	r3, [pc, #780]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4ac2      	ldr	r2, [pc, #776]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004410:	4bb9      	ldr	r3, [pc, #740]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004420:	4ab5      	ldr	r2, [pc, #724]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6553      	str	r3, [r2, #84]	@ 0x54
 8004426:	e003      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800443c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800443e:	2300      	movs	r3, #0
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004442:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800444c:	4baa      	ldr	r3, [pc, #680]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	4aa7      	ldr	r2, [pc, #668]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445c:	430b      	orrs	r3, r1
 800445e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800446c:	653b      	str	r3, [r7, #80]	@ 0x50
 800446e:	2300      	movs	r3, #0
 8004470:	657b      	str	r3, [r7, #84]	@ 0x54
 8004472:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800447c:	4b9e      	ldr	r3, [pc, #632]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800448c:	4a9a      	ldr	r2, [pc, #616]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448e:	430b      	orrs	r3, r1
 8004490:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800449e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a0:	2300      	movs	r3, #0
 80044a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044ae:	4b92      	ldr	r3, [pc, #584]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044bc:	4a8e      	ldr	r2, [pc, #568]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d0:	2300      	movs	r3, #0
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044de:	4b86      	ldr	r3, [pc, #536]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	4a85      	ldr	r2, [pc, #532]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044e8:	6113      	str	r3, [r2, #16]
 80044ea:	4b83      	ldr	r3, [pc, #524]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044f6:	4a80      	ldr	r2, [pc, #512]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450a:	2300      	movs	r3, #0
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800450e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d009      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004518:	4b77      	ldr	r3, [pc, #476]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4a74      	ldr	r2, [pc, #464]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004528:	430b      	orrs	r3, r1
 800452a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004538:	633b      	str	r3, [r7, #48]	@ 0x30
 800453a:	2300      	movs	r3, #0
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
 800453e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004542:	460b      	mov	r3, r1
 8004544:	4313      	orrs	r3, r2
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004548:	4b6b      	ldr	r3, [pc, #428]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004558:	4a67      	ldr	r2, [pc, #412]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455a:	430b      	orrs	r3, r1
 800455c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	2100      	movs	r1, #0
 8004568:	62b9      	str	r1, [r7, #40]	@ 0x28
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004570:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3308      	adds	r3, #8
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb78 	bl	8004c78 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	2100      	movs	r1, #0
 80045a8:	6239      	str	r1, [r7, #32]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	3308      	adds	r3, #8
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb58 	bl	8004c78 <RCCEx_PLL2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	2100      	movs	r1, #0
 80045e8:	61b9      	str	r1, [r7, #24]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	3308      	adds	r3, #8
 8004600:	2102      	movs	r1, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fb38 	bl	8004c78 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	6139      	str	r1, [r7, #16]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	3328      	adds	r3, #40	@ 0x28
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fbca 	bl	8004ddc <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	2100      	movs	r1, #0
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	3328      	adds	r3, #40	@ 0x28
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fbaa 	bl	8004ddc <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	2100      	movs	r1, #0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3328      	adds	r3, #40	@ 0x28
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fb8a 	bl	8004ddc <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046f2:	46bd      	mov	sp, r7
 80046f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f8:	58024400 	.word	0x58024400

080046fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004700:	f7fe fd96 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8004704:	4602      	mov	r2, r0
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	4904      	ldr	r1, [pc, #16]	@ (8004724 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004712:	5ccb      	ldrb	r3, [r1, r3]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	58024400 	.word	0x58024400
 8004724:	08006778 	.word	0x08006778

08004728 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	@ 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004730:	4ba1      	ldr	r3, [pc, #644]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800473a:	4b9f      	ldr	r3, [pc, #636]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	0b1b      	lsrs	r3, r3, #12
 8004740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004744:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004746:	4b9c      	ldr	r3, [pc, #624]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004752:	4b99      	ldr	r3, [pc, #612]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8111 	beq.w	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f000 8083 	beq.w	8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	f200 80a1 	bhi.w	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d056      	beq.n	8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004792:	e099      	b.n	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004794:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02d      	beq.n	80047fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a0:	4b85      	ldr	r3, [pc, #532]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	4a84      	ldr	r2, [pc, #528]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	4b7b      	ldr	r3, [pc, #492]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a03 	vldr	s12, [r7, #12]
 80047de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047fa:	e087      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004822:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483e:	e065      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004882:	e043      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c6:	e021      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800490c:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	0a5b      	lsrs	r3, r3, #9
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004926:	edd7 6a07 	vldr	s13, [r7, #28]
 800492a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004932:	ee17 2a90 	vmov	r2, s15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004954:	edd7 6a07 	vldr	s13, [r7, #28]
 8004958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004960:	ee17 2a90 	vmov	r2, s15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004968:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004982:	edd7 6a07 	vldr	s13, [r7, #28]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004996:	e008      	b.n	80049aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
}
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	@ 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
 80049bc:	03d09000 	.word	0x03d09000
 80049c0:	46000000 	.word	0x46000000
 80049c4:	4c742400 	.word	0x4c742400
 80049c8:	4a742400 	.word	0x4a742400
 80049cc:	4af42400 	.word	0x4af42400

080049d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	@ 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	0d1b      	lsrs	r3, r3, #20
 80049e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049fa:	4b99      	ldr	r3, [pc, #612]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8111 	beq.w	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f000 8083 	beq.w	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	f200 80a1 	bhi.w	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d056      	beq.n	8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a3a:	e099      	b.n	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a3c:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02d      	beq.n	8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a48:	4b85      	ldr	r3, [pc, #532]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	4a84      	ldr	r2, [pc, #528]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b7b      	ldr	r3, [pc, #492]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aa2:	e087      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae6:	e065      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2a:	e043      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b48      	ldr	r3, [pc, #288]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6e:	e021      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	0a5b      	lsrs	r3, r3, #9
 8004bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bda:	ee17 2a90 	vmov	r2, s15
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004be2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c08:	ee17 2a90 	vmov	r2, s15
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c10:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c3e:	e008      	b.n	8004c52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
}
 8004c52:	bf00      	nop
 8004c54:	3724      	adds	r7, #36	@ 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	46000000 	.word	0x46000000
 8004c6c:	4c742400 	.word	0x4c742400
 8004c70:	4a742400 	.word	0x4a742400
 8004c74:	4af42400 	.word	0x4af42400

08004c78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c86:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d101      	bne.n	8004c96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e099      	b.n	8004dca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c96:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fa2f 	bl	8001104 <HAL_GetTick>
 8004ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004caa:	f7fc fa2b 	bl	8001104 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e086      	b.n	8004dca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cbc:	4b45      	ldr	r3, [pc, #276]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cc8:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	031b      	lsls	r3, r3, #12
 8004cd6:	493f      	ldr	r1, [pc, #252]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d0c:	4931      	ldr	r1, [pc, #196]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d12:	4b30      	ldr	r3, [pc, #192]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	492d      	ldr	r1, [pc, #180]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d24:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	f023 0220 	bic.w	r2, r3, #32
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4928      	ldr	r1, [pc, #160]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d36:	4b27      	ldr	r3, [pc, #156]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f023 0310 	bic.w	r3, r3, #16
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <RCCEx_PLL2_Config+0x160>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	69d2      	ldr	r2, [r2, #28]
 8004d4e:	00d2      	lsls	r2, r2, #3
 8004d50:	4920      	ldr	r1, [pc, #128]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d56:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f043 0310 	orr.w	r3, r3, #16
 8004d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d68:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d74:	e00f      	b.n	8004d96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d106      	bne.n	8004d8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d7c:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	4a14      	ldr	r2, [pc, #80]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d88:	e005      	b.n	8004d96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	4a11      	ldr	r2, [pc, #68]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d96:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da2:	f7fc f9af 	bl	8001104 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da8:	e008      	b.n	8004dbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004daa:	f7fc f9ab 	bl	8001104 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e006      	b.n	8004dca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dbc:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	ffff0007 	.word	0xffff0007

08004ddc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dea:	4b53      	ldr	r3, [pc, #332]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d101      	bne.n	8004dfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e099      	b.n	8004f2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e06:	f7fc f97d 	bl	8001104 <HAL_GetTick>
 8004e0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e0c:	e008      	b.n	8004e20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0e:	f7fc f979 	bl	8001104 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e086      	b.n	8004f2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e20:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f0      	bne.n	8004e0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e2c:	4b42      	ldr	r3, [pc, #264]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	051b      	lsls	r3, r3, #20
 8004e3a:	493f      	ldr	r1, [pc, #252]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	025b      	lsls	r3, r3, #9
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	041b      	lsls	r3, r3, #16
 8004e5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	061b      	lsls	r3, r3, #24
 8004e6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e70:	4931      	ldr	r1, [pc, #196]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e76:	4b30      	ldr	r3, [pc, #192]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	492d      	ldr	r1, [pc, #180]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e88:	4b2b      	ldr	r3, [pc, #172]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	4928      	ldr	r1, [pc, #160]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e9a:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <RCCEx_PLL3_Config+0x160>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	69d2      	ldr	r2, [r2, #28]
 8004eb2:	00d2      	lsls	r2, r2, #3
 8004eb4:	4920      	ldr	r1, [pc, #128]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eba:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ed8:	e00f      	b.n	8004efa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4a14      	ldr	r2, [pc, #80]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eec:	e005      	b.n	8004efa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eee:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	4a11      	ldr	r2, [pc, #68]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a0e      	ldr	r2, [pc, #56]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f06:	f7fc f8fd 	bl	8001104 <HAL_GetTick>
 8004f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f0e:	f7fc f8f9 	bl	8001104 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <RCCEx_PLL3_Config+0x15c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	ffff0007 	.word	0xffff0007

08004f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e042      	b.n	8004fd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fb ff05 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2224      	movs	r2, #36	@ 0x24
 8004f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fd90 	bl	8005ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f825 	bl	8004fe0 <UART_SetConfig>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01b      	b.n	8004fd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fe0f 	bl	8005bf4 <UART_CheckIdleState>
 8004fd6:	4603      	mov	r3, r0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b092      	sub	sp, #72	@ 0x48
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4313      	orrs	r3, r2
 8005006:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4bbe      	ldr	r3, [pc, #760]	@ (8005308 <UART_SetConfig+0x328>)
 8005010:	4013      	ands	r3, r2
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005018:	430b      	orrs	r3, r1
 800501a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4ab3      	ldr	r2, [pc, #716]	@ (800530c <UART_SetConfig+0x32c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005048:	4313      	orrs	r3, r2
 800504a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	4baf      	ldr	r3, [pc, #700]	@ (8005310 <UART_SetConfig+0x330>)
 8005054:	4013      	ands	r3, r2
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	f023 010f 	bic.w	r1, r3, #15
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4aa6      	ldr	r2, [pc, #664]	@ (8005314 <UART_SetConfig+0x334>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d177      	bne.n	8005170 <UART_SetConfig+0x190>
 8005080:	4ba5      	ldr	r3, [pc, #660]	@ (8005318 <UART_SetConfig+0x338>)
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005088:	2b28      	cmp	r3, #40	@ 0x28
 800508a:	d86d      	bhi.n	8005168 <UART_SetConfig+0x188>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <UART_SetConfig+0xb4>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	08005139 	.word	0x08005139
 8005098:	08005169 	.word	0x08005169
 800509c:	08005169 	.word	0x08005169
 80050a0:	08005169 	.word	0x08005169
 80050a4:	08005169 	.word	0x08005169
 80050a8:	08005169 	.word	0x08005169
 80050ac:	08005169 	.word	0x08005169
 80050b0:	08005169 	.word	0x08005169
 80050b4:	08005141 	.word	0x08005141
 80050b8:	08005169 	.word	0x08005169
 80050bc:	08005169 	.word	0x08005169
 80050c0:	08005169 	.word	0x08005169
 80050c4:	08005169 	.word	0x08005169
 80050c8:	08005169 	.word	0x08005169
 80050cc:	08005169 	.word	0x08005169
 80050d0:	08005169 	.word	0x08005169
 80050d4:	08005149 	.word	0x08005149
 80050d8:	08005169 	.word	0x08005169
 80050dc:	08005169 	.word	0x08005169
 80050e0:	08005169 	.word	0x08005169
 80050e4:	08005169 	.word	0x08005169
 80050e8:	08005169 	.word	0x08005169
 80050ec:	08005169 	.word	0x08005169
 80050f0:	08005169 	.word	0x08005169
 80050f4:	08005151 	.word	0x08005151
 80050f8:	08005169 	.word	0x08005169
 80050fc:	08005169 	.word	0x08005169
 8005100:	08005169 	.word	0x08005169
 8005104:	08005169 	.word	0x08005169
 8005108:	08005169 	.word	0x08005169
 800510c:	08005169 	.word	0x08005169
 8005110:	08005169 	.word	0x08005169
 8005114:	08005159 	.word	0x08005159
 8005118:	08005169 	.word	0x08005169
 800511c:	08005169 	.word	0x08005169
 8005120:	08005169 	.word	0x08005169
 8005124:	08005169 	.word	0x08005169
 8005128:	08005169 	.word	0x08005169
 800512c:	08005169 	.word	0x08005169
 8005130:	08005169 	.word	0x08005169
 8005134:	08005161 	.word	0x08005161
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e222      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e21e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e21a      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e216      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005158:	2320      	movs	r3, #32
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e212      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005160:	2340      	movs	r3, #64	@ 0x40
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e20e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516e:	e20a      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a69      	ldr	r2, [pc, #420]	@ (800531c <UART_SetConfig+0x33c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d130      	bne.n	80051dc <UART_SetConfig+0x1fc>
 800517a:	4b67      	ldr	r3, [pc, #412]	@ (8005318 <UART_SetConfig+0x338>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b05      	cmp	r3, #5
 8005184:	d826      	bhi.n	80051d4 <UART_SetConfig+0x1f4>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <UART_SetConfig+0x1ac>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e1ec      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e1e8      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e1e4      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e1e0      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051c4:	2320      	movs	r3, #32
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e1dc      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051cc:	2340      	movs	r3, #64	@ 0x40
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e1d8      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e1d4      	b.n	8005586 <UART_SetConfig+0x5a6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005320 <UART_SetConfig+0x340>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d130      	bne.n	8005248 <UART_SetConfig+0x268>
 80051e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005318 <UART_SetConfig+0x338>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d826      	bhi.n	8005240 <UART_SetConfig+0x260>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x218>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005211 	.word	0x08005211
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005221 	.word	0x08005221
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e1b6      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e1b2      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005226:	e1ae      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522e:	e1aa      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005230:	2320      	movs	r3, #32
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005236:	e1a6      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e1a2      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e19e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a35      	ldr	r2, [pc, #212]	@ (8005324 <UART_SetConfig+0x344>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d130      	bne.n	80052b4 <UART_SetConfig+0x2d4>
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <UART_SetConfig+0x338>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b05      	cmp	r3, #5
 800525c:	d826      	bhi.n	80052ac <UART_SetConfig+0x2cc>
 800525e:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0x284>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	0800527d 	.word	0x0800527d
 8005268:	08005285 	.word	0x08005285
 800526c:	0800528d 	.word	0x0800528d
 8005270:	08005295 	.word	0x08005295
 8005274:	0800529d 	.word	0x0800529d
 8005278:	080052a5 	.word	0x080052a5
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e180      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528a:	e17c      	b.n	8005586 <UART_SetConfig+0x5a6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005292:	e178      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529a:	e174      	b.n	8005586 <UART_SetConfig+0x5a6>
 800529c:	2320      	movs	r3, #32
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e170      	b.n	8005586 <UART_SetConfig+0x5a6>
 80052a4:	2340      	movs	r3, #64	@ 0x40
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e16c      	b.n	8005586 <UART_SetConfig+0x5a6>
 80052ac:	2380      	movs	r3, #128	@ 0x80
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e168      	b.n	8005586 <UART_SetConfig+0x5a6>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <UART_SetConfig+0x348>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d142      	bne.n	8005344 <UART_SetConfig+0x364>
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <UART_SetConfig+0x338>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d838      	bhi.n	800533c <UART_SetConfig+0x35c>
 80052ca:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <UART_SetConfig+0x2f0>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e9 	.word	0x080052e9
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	080052f9 	.word	0x080052f9
 80052dc:	08005301 	.word	0x08005301
 80052e0:	0800532d 	.word	0x0800532d
 80052e4:	08005335 	.word	0x08005335
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e14a      	b.n	8005586 <UART_SetConfig+0x5a6>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e146      	b.n	8005586 <UART_SetConfig+0x5a6>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fe:	e142      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005306:	e13e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005308:	cfff69f3 	.word	0xcfff69f3
 800530c:	58000c00 	.word	0x58000c00
 8005310:	11fff4ff 	.word	0x11fff4ff
 8005314:	40011000 	.word	0x40011000
 8005318:	58024400 	.word	0x58024400
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	2320      	movs	r3, #32
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e128      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005334:	2340      	movs	r3, #64	@ 0x40
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e124      	b.n	8005586 <UART_SetConfig+0x5a6>
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e120      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4acb      	ldr	r2, [pc, #812]	@ (8005678 <UART_SetConfig+0x698>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d176      	bne.n	800543c <UART_SetConfig+0x45c>
 800534e:	4bcb      	ldr	r3, [pc, #812]	@ (800567c <UART_SetConfig+0x69c>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005356:	2b28      	cmp	r3, #40	@ 0x28
 8005358:	d86c      	bhi.n	8005434 <UART_SetConfig+0x454>
 800535a:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <UART_SetConfig+0x380>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005405 	.word	0x08005405
 8005364:	08005435 	.word	0x08005435
 8005368:	08005435 	.word	0x08005435
 800536c:	08005435 	.word	0x08005435
 8005370:	08005435 	.word	0x08005435
 8005374:	08005435 	.word	0x08005435
 8005378:	08005435 	.word	0x08005435
 800537c:	08005435 	.word	0x08005435
 8005380:	0800540d 	.word	0x0800540d
 8005384:	08005435 	.word	0x08005435
 8005388:	08005435 	.word	0x08005435
 800538c:	08005435 	.word	0x08005435
 8005390:	08005435 	.word	0x08005435
 8005394:	08005435 	.word	0x08005435
 8005398:	08005435 	.word	0x08005435
 800539c:	08005435 	.word	0x08005435
 80053a0:	08005415 	.word	0x08005415
 80053a4:	08005435 	.word	0x08005435
 80053a8:	08005435 	.word	0x08005435
 80053ac:	08005435 	.word	0x08005435
 80053b0:	08005435 	.word	0x08005435
 80053b4:	08005435 	.word	0x08005435
 80053b8:	08005435 	.word	0x08005435
 80053bc:	08005435 	.word	0x08005435
 80053c0:	0800541d 	.word	0x0800541d
 80053c4:	08005435 	.word	0x08005435
 80053c8:	08005435 	.word	0x08005435
 80053cc:	08005435 	.word	0x08005435
 80053d0:	08005435 	.word	0x08005435
 80053d4:	08005435 	.word	0x08005435
 80053d8:	08005435 	.word	0x08005435
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005435 	.word	0x08005435
 80053e8:	08005435 	.word	0x08005435
 80053ec:	08005435 	.word	0x08005435
 80053f0:	08005435 	.word	0x08005435
 80053f4:	08005435 	.word	0x08005435
 80053f8:	08005435 	.word	0x08005435
 80053fc:	08005435 	.word	0x08005435
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e0bc      	b.n	8005586 <UART_SetConfig+0x5a6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e0b8      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e0b4      	b.n	8005586 <UART_SetConfig+0x5a6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e0b0      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e0ac      	b.n	8005586 <UART_SetConfig+0x5a6>
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e0a8      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e0a4      	b.n	8005586 <UART_SetConfig+0x5a6>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a8f      	ldr	r2, [pc, #572]	@ (8005680 <UART_SetConfig+0x6a0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d130      	bne.n	80054a8 <UART_SetConfig+0x4c8>
 8005446:	4b8d      	ldr	r3, [pc, #564]	@ (800567c <UART_SetConfig+0x69c>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b05      	cmp	r3, #5
 8005450:	d826      	bhi.n	80054a0 <UART_SetConfig+0x4c0>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x478>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005471 	.word	0x08005471
 800545c:	08005479 	.word	0x08005479
 8005460:	08005481 	.word	0x08005481
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e086      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e082      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e07e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e07a      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005490:	2320      	movs	r3, #32
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e076      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005498:	2340      	movs	r3, #64	@ 0x40
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e072      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a6:	e06e      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a75      	ldr	r2, [pc, #468]	@ (8005684 <UART_SetConfig+0x6a4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d130      	bne.n	8005514 <UART_SetConfig+0x534>
 80054b2:	4b72      	ldr	r3, [pc, #456]	@ (800567c <UART_SetConfig+0x69c>)
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d826      	bhi.n	800550c <UART_SetConfig+0x52c>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <UART_SetConfig+0x4e4>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054ed 	.word	0x080054ed
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005505 	.word	0x08005505
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e050      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e04c      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e048      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e044      	b.n	8005586 <UART_SetConfig+0x5a6>
 80054fc:	2320      	movs	r3, #32
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e040      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005504:	2340      	movs	r3, #64	@ 0x40
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e03c      	b.n	8005586 <UART_SetConfig+0x5a6>
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e038      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <UART_SetConfig+0x6a8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d130      	bne.n	8005580 <UART_SetConfig+0x5a0>
 800551e:	4b57      	ldr	r3, [pc, #348]	@ (800567c <UART_SetConfig+0x69c>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	2b05      	cmp	r3, #5
 8005528:	d826      	bhi.n	8005578 <UART_SetConfig+0x598>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0x550>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005549 	.word	0x08005549
 8005534:	08005551 	.word	0x08005551
 8005538:	08005559 	.word	0x08005559
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	2302      	movs	r3, #2
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e01a      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005556:	e016      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e012      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e00e      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005568:	2320      	movs	r3, #32
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e00a      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005570:	2340      	movs	r3, #64	@ 0x40
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e006      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557e:	e002      	b.n	8005586 <UART_SetConfig+0x5a6>
 8005580:	2380      	movs	r3, #128	@ 0x80
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3f      	ldr	r2, [pc, #252]	@ (8005688 <UART_SetConfig+0x6a8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	f040 80f8 	bne.w	8005782 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005592:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005596:	2b20      	cmp	r3, #32
 8005598:	dc46      	bgt.n	8005628 <UART_SetConfig+0x648>
 800559a:	2b02      	cmp	r3, #2
 800559c:	f2c0 8082 	blt.w	80056a4 <UART_SetConfig+0x6c4>
 80055a0:	3b02      	subs	r3, #2
 80055a2:	2b1e      	cmp	r3, #30
 80055a4:	d87e      	bhi.n	80056a4 <UART_SetConfig+0x6c4>
 80055a6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x5cc>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	0800562f 	.word	0x0800562f
 80055b0:	080056a5 	.word	0x080056a5
 80055b4:	08005637 	.word	0x08005637
 80055b8:	080056a5 	.word	0x080056a5
 80055bc:	080056a5 	.word	0x080056a5
 80055c0:	080056a5 	.word	0x080056a5
 80055c4:	08005647 	.word	0x08005647
 80055c8:	080056a5 	.word	0x080056a5
 80055cc:	080056a5 	.word	0x080056a5
 80055d0:	080056a5 	.word	0x080056a5
 80055d4:	080056a5 	.word	0x080056a5
 80055d8:	080056a5 	.word	0x080056a5
 80055dc:	080056a5 	.word	0x080056a5
 80055e0:	080056a5 	.word	0x080056a5
 80055e4:	08005657 	.word	0x08005657
 80055e8:	080056a5 	.word	0x080056a5
 80055ec:	080056a5 	.word	0x080056a5
 80055f0:	080056a5 	.word	0x080056a5
 80055f4:	080056a5 	.word	0x080056a5
 80055f8:	080056a5 	.word	0x080056a5
 80055fc:	080056a5 	.word	0x080056a5
 8005600:	080056a5 	.word	0x080056a5
 8005604:	080056a5 	.word	0x080056a5
 8005608:	080056a5 	.word	0x080056a5
 800560c:	080056a5 	.word	0x080056a5
 8005610:	080056a5 	.word	0x080056a5
 8005614:	080056a5 	.word	0x080056a5
 8005618:	080056a5 	.word	0x080056a5
 800561c:	080056a5 	.word	0x080056a5
 8005620:	080056a5 	.word	0x080056a5
 8005624:	08005697 	.word	0x08005697
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d037      	beq.n	800569c <UART_SetConfig+0x6bc>
 800562c:	e03a      	b.n	80056a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800562e:	f7ff f865 	bl	80046fc <HAL_RCCEx_GetD3PCLK1Freq>
 8005632:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005634:	e03c      	b.n	80056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f874 	bl	8004728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005644:	e034      	b.n	80056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005646:	f107 0318 	add.w	r3, r7, #24
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f9c0 	bl	80049d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005654:	e02c      	b.n	80056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <UART_SetConfig+0x69c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <UART_SetConfig+0x69c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	4a07      	ldr	r2, [pc, #28]	@ (800568c <UART_SetConfig+0x6ac>)
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005674:	e01c      	b.n	80056b0 <UART_SetConfig+0x6d0>
 8005676:	bf00      	nop
 8005678:	40011400 	.word	0x40011400
 800567c:	58024400 	.word	0x58024400
 8005680:	40007800 	.word	0x40007800
 8005684:	40007c00 	.word	0x40007c00
 8005688:	58000c00 	.word	0x58000c00
 800568c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005690:	4b9d      	ldr	r3, [pc, #628]	@ (8005908 <UART_SetConfig+0x928>)
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005694:	e00c      	b.n	80056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005696:	4b9d      	ldr	r3, [pc, #628]	@ (800590c <UART_SetConfig+0x92c>)
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569a:	e009      	b.n	80056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a2:	e005      	b.n	80056b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 81de 	beq.w	8005a74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	4a94      	ldr	r2, [pc, #592]	@ (8005910 <UART_SetConfig+0x930>)
 80056be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	429a      	cmp	r2, r3
 80056da:	d305      	bcc.n	80056e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056ee:	e1c1      	b.n	8005a74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f2:	2200      	movs	r2, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	60fa      	str	r2, [r7, #12]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	4a84      	ldr	r2, [pc, #528]	@ (8005910 <UART_SetConfig+0x930>)
 80056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005702:	b29b      	uxth	r3, r3
 8005704:	2200      	movs	r2, #0
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800570e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005712:	f7fa fde1 	bl	80002d8 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	020b      	lsls	r3, r1, #8
 8005728:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800572c:	0202      	lsls	r2, r0, #8
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	6849      	ldr	r1, [r1, #4]
 8005732:	0849      	lsrs	r1, r1, #1
 8005734:	2000      	movs	r0, #0
 8005736:	460c      	mov	r4, r1
 8005738:	4605      	mov	r5, r0
 800573a:	eb12 0804 	adds.w	r8, r2, r4
 800573e:	eb43 0905 	adc.w	r9, r3, r5
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	469a      	mov	sl, r3
 800574a:	4693      	mov	fp, r2
 800574c:	4652      	mov	r2, sl
 800574e:	465b      	mov	r3, fp
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fa fdc0 	bl	80002d8 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005766:	d308      	bcc.n	800577a <UART_SetConfig+0x79a>
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576e:	d204      	bcs.n	800577a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	e17c      	b.n	8005a74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005780:	e178      	b.n	8005a74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800578a:	f040 80c5 	bne.w	8005918 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800578e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005792:	2b20      	cmp	r3, #32
 8005794:	dc48      	bgt.n	8005828 <UART_SetConfig+0x848>
 8005796:	2b00      	cmp	r3, #0
 8005798:	db7b      	blt.n	8005892 <UART_SetConfig+0x8b2>
 800579a:	2b20      	cmp	r3, #32
 800579c:	d879      	bhi.n	8005892 <UART_SetConfig+0x8b2>
 800579e:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <UART_SetConfig+0x7c4>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	0800582f 	.word	0x0800582f
 80057a8:	08005837 	.word	0x08005837
 80057ac:	08005893 	.word	0x08005893
 80057b0:	08005893 	.word	0x08005893
 80057b4:	0800583f 	.word	0x0800583f
 80057b8:	08005893 	.word	0x08005893
 80057bc:	08005893 	.word	0x08005893
 80057c0:	08005893 	.word	0x08005893
 80057c4:	0800584f 	.word	0x0800584f
 80057c8:	08005893 	.word	0x08005893
 80057cc:	08005893 	.word	0x08005893
 80057d0:	08005893 	.word	0x08005893
 80057d4:	08005893 	.word	0x08005893
 80057d8:	08005893 	.word	0x08005893
 80057dc:	08005893 	.word	0x08005893
 80057e0:	08005893 	.word	0x08005893
 80057e4:	0800585f 	.word	0x0800585f
 80057e8:	08005893 	.word	0x08005893
 80057ec:	08005893 	.word	0x08005893
 80057f0:	08005893 	.word	0x08005893
 80057f4:	08005893 	.word	0x08005893
 80057f8:	08005893 	.word	0x08005893
 80057fc:	08005893 	.word	0x08005893
 8005800:	08005893 	.word	0x08005893
 8005804:	08005893 	.word	0x08005893
 8005808:	08005893 	.word	0x08005893
 800580c:	08005893 	.word	0x08005893
 8005810:	08005893 	.word	0x08005893
 8005814:	08005893 	.word	0x08005893
 8005818:	08005893 	.word	0x08005893
 800581c:	08005893 	.word	0x08005893
 8005820:	08005893 	.word	0x08005893
 8005824:	08005885 	.word	0x08005885
 8005828:	2b40      	cmp	r3, #64	@ 0x40
 800582a:	d02e      	beq.n	800588a <UART_SetConfig+0x8aa>
 800582c:	e031      	b.n	8005892 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582e:	f7fd fd2f 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8005832:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005834:	e033      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005836:	f7fd fd41 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 800583a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800583c:	e02f      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe ff70 	bl	8004728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800584c:	e027      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f8bc 	bl	80049d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800585c:	e01f      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800585e:	4b2d      	ldr	r3, [pc, #180]	@ (8005914 <UART_SetConfig+0x934>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800586a:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <UART_SetConfig+0x934>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	4a24      	ldr	r2, [pc, #144]	@ (8005908 <UART_SetConfig+0x928>)
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800587c:	e00f      	b.n	800589e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800587e:	4b22      	ldr	r3, [pc, #136]	@ (8005908 <UART_SetConfig+0x928>)
 8005880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005882:	e00c      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005884:	4b21      	ldr	r3, [pc, #132]	@ (800590c <UART_SetConfig+0x92c>)
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005888:	e009      	b.n	800589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005890:	e005      	b.n	800589e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800589c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80e7 	beq.w	8005a74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	4a19      	ldr	r2, [pc, #100]	@ (8005910 <UART_SetConfig+0x930>)
 80058ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b8:	005a      	lsls	r2, r3, #1
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d916      	bls.n	8005900 <UART_SetConfig+0x920>
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d212      	bcs.n	8005900 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f023 030f 	bic.w	r3, r3, #15
 80058e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058f2:	4313      	orrs	r3, r2
 80058f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80058fc:	60da      	str	r2, [r3, #12]
 80058fe:	e0b9      	b.n	8005a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005906:	e0b5      	b.n	8005a74 <UART_SetConfig+0xa94>
 8005908:	03d09000 	.word	0x03d09000
 800590c:	003d0900 	.word	0x003d0900
 8005910:	08006788 	.word	0x08006788
 8005914:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005918:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800591c:	2b20      	cmp	r3, #32
 800591e:	dc49      	bgt.n	80059b4 <UART_SetConfig+0x9d4>
 8005920:	2b00      	cmp	r3, #0
 8005922:	db7c      	blt.n	8005a1e <UART_SetConfig+0xa3e>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d87a      	bhi.n	8005a1e <UART_SetConfig+0xa3e>
 8005928:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <UART_SetConfig+0x950>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	080059bb 	.word	0x080059bb
 8005934:	080059c3 	.word	0x080059c3
 8005938:	08005a1f 	.word	0x08005a1f
 800593c:	08005a1f 	.word	0x08005a1f
 8005940:	080059cb 	.word	0x080059cb
 8005944:	08005a1f 	.word	0x08005a1f
 8005948:	08005a1f 	.word	0x08005a1f
 800594c:	08005a1f 	.word	0x08005a1f
 8005950:	080059db 	.word	0x080059db
 8005954:	08005a1f 	.word	0x08005a1f
 8005958:	08005a1f 	.word	0x08005a1f
 800595c:	08005a1f 	.word	0x08005a1f
 8005960:	08005a1f 	.word	0x08005a1f
 8005964:	08005a1f 	.word	0x08005a1f
 8005968:	08005a1f 	.word	0x08005a1f
 800596c:	08005a1f 	.word	0x08005a1f
 8005970:	080059eb 	.word	0x080059eb
 8005974:	08005a1f 	.word	0x08005a1f
 8005978:	08005a1f 	.word	0x08005a1f
 800597c:	08005a1f 	.word	0x08005a1f
 8005980:	08005a1f 	.word	0x08005a1f
 8005984:	08005a1f 	.word	0x08005a1f
 8005988:	08005a1f 	.word	0x08005a1f
 800598c:	08005a1f 	.word	0x08005a1f
 8005990:	08005a1f 	.word	0x08005a1f
 8005994:	08005a1f 	.word	0x08005a1f
 8005998:	08005a1f 	.word	0x08005a1f
 800599c:	08005a1f 	.word	0x08005a1f
 80059a0:	08005a1f 	.word	0x08005a1f
 80059a4:	08005a1f 	.word	0x08005a1f
 80059a8:	08005a1f 	.word	0x08005a1f
 80059ac:	08005a1f 	.word	0x08005a1f
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d02e      	beq.n	8005a16 <UART_SetConfig+0xa36>
 80059b8:	e031      	b.n	8005a1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ba:	f7fd fc69 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 80059be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059c0:	e033      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c2:	f7fd fc7b 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 80059c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059c8:	e02f      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe feaa 	bl	8004728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d8:	e027      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059da:	f107 0318 	add.w	r3, r7, #24
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fff6 	bl	80049d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e8:	e01f      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ea:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa0 <UART_SetConfig+0xac0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f6:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <UART_SetConfig+0xac0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	08db      	lsrs	r3, r3, #3
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	4a28      	ldr	r2, [pc, #160]	@ (8005aa4 <UART_SetConfig+0xac4>)
 8005a02:	fa22 f303 	lsr.w	r3, r2, r3
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a08:	e00f      	b.n	8005a2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <UART_SetConfig+0xac4>)
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0e:	e00c      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a10:	4b25      	ldr	r3, [pc, #148]	@ (8005aa8 <UART_SetConfig+0xac8>)
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a14:	e009      	b.n	8005a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1c:	e005      	b.n	8005a2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a28:	bf00      	nop
    }

    if (pclk != 0U)
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d021      	beq.n	8005a74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <UART_SetConfig+0xacc>)
 8005a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d909      	bls.n	8005a6e <UART_SetConfig+0xa8e>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d205      	bcs.n	8005a6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	e002      	b.n	8005a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2200      	movs	r2, #0
 8005a88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3748      	adds	r7, #72	@ 0x48
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	03d09000 	.word	0x03d09000
 8005aa8:	003d0900 	.word	0x003d0900
 8005aac:	08006788 	.word	0x08006788

08005ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bae:	d10a      	bne.n	8005bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b098      	sub	sp, #96	@ 0x60
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c04:	f7fb fa7e 	bl	8001104 <HAL_GetTick>
 8005c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d12f      	bne.n	8005c78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f88e 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d022      	beq.n	8005c78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e6      	bne.n	8005c32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e063      	b.n	8005d40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d149      	bne.n	8005d1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f857 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d03c      	beq.n	8005d1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	623b      	str	r3, [r7, #32]
   return(result);
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e6      	bne.n	8005ca0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf2:	61fa      	str	r2, [r7, #28]
 8005cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e5      	bne.n	8005cd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e012      	b.n	8005d40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3758      	adds	r7, #88	@ 0x58
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	e04f      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d60:	d04b      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d62:	f7fb f9cf 	bl	8001104 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e04e      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d037      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b80      	cmp	r3, #128	@ 0x80
 8005d8e:	d034      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d031      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d110      	bne.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2208      	movs	r2, #8
 8005daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f839 	bl	8005e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2208      	movs	r2, #8
 8005db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e029      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd4:	d111      	bne.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f81f 	bl	8005e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e00f      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d0a0      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b095      	sub	sp, #84	@ 0x54
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e6      	bne.n	8005e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	4b1e      	ldr	r3, [pc, #120]	@ (8005eec <UART_EndRxTransfer+0xc8>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e5      	bne.n	8005e5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d118      	bne.n	8005ecc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e6      	bne.n	8005e9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ee0:	bf00      	nop
 8005ee2:	3754      	adds	r7, #84	@ 0x54
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	effffffe 	.word	0xeffffffe

08005ef0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e027      	b.n	8005f56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2224      	movs	r2, #36	@ 0x24
 8005f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e02d      	b.n	8005fd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2224      	movs	r2, #36	@ 0x24
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f850 	bl	800605c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e02d      	b.n	8006052 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2224      	movs	r2, #36	@ 0x24
 8006002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f812 	bl	800605c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006068:	2b00      	cmp	r3, #0
 800606a:	d108      	bne.n	800607e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800607c:	e031      	b.n	80060e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800607e:	2310      	movs	r3, #16
 8006080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006082:	2310      	movs	r3, #16
 8006084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	0e5b      	lsrs	r3, r3, #25
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	0f5b      	lsrs	r3, r3, #29
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	7b3a      	ldrb	r2, [r7, #12]
 80060aa:	4911      	ldr	r1, [pc, #68]	@ (80060f0 <UARTEx_SetNbDataToProcess+0x94>)
 80060ac:	5c8a      	ldrb	r2, [r1, r2]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060b2:	7b3a      	ldrb	r2, [r7, #12]
 80060b4:	490f      	ldr	r1, [pc, #60]	@ (80060f4 <UARTEx_SetNbDataToProcess+0x98>)
 80060b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	7b7a      	ldrb	r2, [r7, #13]
 80060c8:	4909      	ldr	r1, [pc, #36]	@ (80060f0 <UARTEx_SetNbDataToProcess+0x94>)
 80060ca:	5c8a      	ldrb	r2, [r1, r2]
 80060cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060d0:	7b7a      	ldrb	r2, [r7, #13]
 80060d2:	4908      	ldr	r1, [pc, #32]	@ (80060f4 <UARTEx_SetNbDataToProcess+0x98>)
 80060d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	080067a0 	.word	0x080067a0
 80060f4:	080067a8 	.word	0x080067a8

080060f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f8:	b084      	sub	sp, #16
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	f107 001c 	add.w	r0, r7, #28
 8006106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800610a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800610e:	2b01      	cmp	r3, #1
 8006110:	d121      	bne.n	8006156 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	4b2c      	ldr	r3, [pc, #176]	@ (80061d4 <USB_CoreInit+0xdc>)
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 faaa 	bl	80066a4 <USB_CoreReset>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e01b      	b.n	800618e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa9e 	bl	80066a4 <USB_CoreReset>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800616c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006180:	e005      	b.n	800618e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006186:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800618e:	7fbb      	ldrb	r3, [r7, #30]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d116      	bne.n	80061c2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <USB_CoreInit+0xe0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f043 0206 	orr.w	r2, r3, #6
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ce:	b004      	add	sp, #16
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	ffbdffbf 	.word	0xffbdffbf
 80061d8:	03ee0000 	.word	0x03ee0000

080061dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 0201 	bic.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d115      	bne.n	800624c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800622c:	200a      	movs	r0, #10
 800622e:	f7fa ff75 	bl	800111c <HAL_Delay>
      ms += 10U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	330a      	adds	r3, #10
 8006236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa25 	bl	8006688 <USB_GetMode>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d01e      	beq.n	8006282 <USB_SetCurrentMode+0x84>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2bc7      	cmp	r3, #199	@ 0xc7
 8006248:	d9f0      	bls.n	800622c <USB_SetCurrentMode+0x2e>
 800624a:	e01a      	b.n	8006282 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d115      	bne.n	800627e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800625e:	200a      	movs	r0, #10
 8006260:	f7fa ff5c 	bl	800111c <HAL_Delay>
      ms += 10U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	330a      	adds	r3, #10
 8006268:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa0c 	bl	8006688 <USB_GetMode>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <USB_SetCurrentMode+0x84>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2bc7      	cmp	r3, #199	@ 0xc7
 800627a:	d9f0      	bls.n	800625e <USB_SetCurrentMode+0x60>
 800627c:	e001      	b.n	8006282 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e005      	b.n	800628e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2bc8      	cmp	r3, #200	@ 0xc8
 8006286:	d101      	bne.n	800628c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006298:	b084      	sub	sp, #16
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e009      	b.n	80062cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3340      	adds	r3, #64	@ 0x40
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b0e      	cmp	r3, #14
 80062d0:	d9f2      	bls.n	80062b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11c      	bne.n	8006314 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e8:	f043 0302 	orr.w	r3, r3, #2
 80062ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e005      	b.n	8006320 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006326:	461a      	mov	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800632c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10d      	bne.n	8006350 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800633c:	2100      	movs	r1, #0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f968 	bl	8006614 <USB_SetDevSpeed>
 8006344:	e008      	b.n	8006358 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006346:	2101      	movs	r1, #1
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f963 	bl	8006614 <USB_SetDevSpeed>
 800634e:	e003      	b.n	8006358 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006350:	2103      	movs	r1, #3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f95e 	bl	8006614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006358:	2110      	movs	r1, #16
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8fa 	bl	8006554 <USB_FlushTxFifo>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f924 	bl	80065b8 <USB_FlushRxFifo>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006380:	461a      	mov	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638c:	461a      	mov	r2, r3
 800638e:	2300      	movs	r3, #0
 8006390:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006398:	461a      	mov	r2, r3
 800639a:	2300      	movs	r3, #0
 800639c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e043      	b.n	800642c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ba:	d118      	bne.n	80063ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ce:	461a      	mov	r2, r3
 80063d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e013      	b.n	8006400 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	461a      	mov	r2, r3
 80063e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e008      	b.n	8006400 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fa:	461a      	mov	r2, r3
 80063fc:	2300      	movs	r3, #0
 80063fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640c:	461a      	mov	r2, r3
 800640e:	2300      	movs	r3, #0
 8006410:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641e:	461a      	mov	r2, r3
 8006420:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	3301      	adds	r3, #1
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006430:	461a      	mov	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4293      	cmp	r3, r2
 8006436:	d3b5      	bcc.n	80063a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e043      	b.n	80064c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006454:	d118      	bne.n	8006488 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e013      	b.n	800649a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	461a      	mov	r2, r3
 8006480:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e008      	b.n	800649a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	2300      	movs	r3, #0
 8006498:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b8:	461a      	mov	r2, r3
 80064ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064ca:	461a      	mov	r2, r3
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d3b5      	bcc.n	800643e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f043 0210 	orr.w	r2, r3, #16
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	4b0f      	ldr	r3, [pc, #60]	@ (800654c <USB_DevInit+0x2b4>)
 800650e:	4313      	orrs	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006514:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f043 0208 	orr.w	r2, r3, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006528:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <USB_DevInit+0x2b8>)
 8006536:	4313      	orrs	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	803c3800 	.word	0x803c3800
 8006550:	40000004 	.word	0x40000004

08006554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800656e:	d901      	bls.n	8006574 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e01b      	b.n	80065ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	daf2      	bge.n	8006562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	019b      	lsls	r3, r3, #6
 8006584:	f043 0220 	orr.w	r2, r3, #32
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006598:	d901      	bls.n	800659e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e006      	b.n	80065ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d0f0      	beq.n	800658c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065d0:	d901      	bls.n	80065d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e018      	b.n	8006608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	daf2      	bge.n	80065c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2210      	movs	r2, #16
 80065e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065f4:	d901      	bls.n	80065fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e006      	b.n	8006608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b10      	cmp	r3, #16
 8006604:	d0f0      	beq.n	80065e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006634:	4313      	orrs	r3, r2
 8006636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0301 	and.w	r3, r3, #1
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066bc:	d901      	bls.n	80066c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e01b      	b.n	80066fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	daf2      	bge.n	80066b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e6:	d901      	bls.n	80066ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e006      	b.n	80066fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d0f0      	beq.n	80066da <USB_CoreReset+0x36>

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <memset>:
 8006706:	4402      	add	r2, r0
 8006708:	4603      	mov	r3, r0
 800670a:	4293      	cmp	r3, r2
 800670c:	d100      	bne.n	8006710 <memset+0xa>
 800670e:	4770      	bx	lr
 8006710:	f803 1b01 	strb.w	r1, [r3], #1
 8006714:	e7f9      	b.n	800670a <memset+0x4>
	...

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	@ (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	@ (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	@ (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	@ (800675c <__libc_init_array+0x44>)
 800672c:	f000 f818 	bl	8006760 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	080067b8 	.word	0x080067b8
 8006754:	080067b8 	.word	0x080067b8
 8006758:	080067b8 	.word	0x080067b8
 800675c:	080067bc 	.word	0x080067bc

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
