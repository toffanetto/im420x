
nucleo-H753ZI_Aula3_Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006970  08006970  00007970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006980  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006990  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080069f0  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08006a50  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08006a50  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d9c  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e36  00000000  00000000  0001fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00022cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0b  00000000  00000000  00023c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003858b  00000000  00000000  0002488b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b96  00000000  00000000  0005ce16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001606d0  00000000  00000000  000729ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d307c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  001d30c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001d7220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006920 	.word	0x08006920

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006920 	.word	0x08006920

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <MX_ETH_Init+0x80>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ETH_Init+0x84>)
 80005d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ETH_Init+0x88>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ETH_Init+0x88>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e0:	22e1      	movs	r2, #225	@ 0xe1
 80005e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ETH_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ETH_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ETH_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ETH_Init+0x80>)
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_ETH_Init+0x88>)
 80005fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ETH_Init+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ETH_Init+0x80>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x8c>)
 8000606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ETH_Init+0x80>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_ETH_Init+0x90>)
 800060c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ETH_Init+0x80>)
 8000610:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_ETH_Init+0x80>)
 8000618:	f000 fe92 	bl	8001340 <HAL_ETH_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000622:	f000 fa6d 	bl	8000b00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_ETH_Init+0x94>)
 800062c:	f006 f94b 	bl	80068c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_ETH_Init+0x94>)
 8000632:	2221      	movs	r2, #33	@ 0x21
 8000634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_ETH_Init+0x94>)
 8000638:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_ETH_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	24000124 	.word	0x24000124
 800064c:	40028000 	.word	0x40028000
 8000650:	240001d4 	.word	0x240001d4
 8000654:	24000070 	.word	0x24000070
 8000658:	24000010 	.word	0x24000010
 800065c:	240000ec 	.word	0x240000ec

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <HAL_ETH_MspInit+0x184>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 80ab 	bne.w	80007da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800068a:	4a57      	ldr	r2, [pc, #348]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a8:	4a4f      	ldr	r2, [pc, #316]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <HAL_ETH_MspInit+0x18c>)
 8000772:	f001 fa19 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000776:	2386      	movs	r3, #134	@ 0x86
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <HAL_ETH_MspInit+0x190>)
 8000792:	f001 fa09 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <HAL_ETH_MspInit+0x194>)
 80007b4:	f001 f9f8 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <HAL_ETH_MspInit+0x198>)
 80007d6:	f001 f9e7 	bl	8001ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40028000 	.word	0x40028000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020000 	.word	0x58020000
 80007f4:	58020400 	.word	0x58020400
 80007f8:	58021800 	.word	0x58021800

080007fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b62      	ldr	r3, [pc, #392]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a51      	ldr	r2, [pc, #324]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000872:	4a4a      	ldr	r2, [pc, #296]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087c:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a42      	ldr	r2, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a3b      	ldr	r2, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ec:	f001 fb0c 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008f8:	f001 fb06 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000902:	f001 fb01 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800091c:	f001 f944 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000920:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800093a:	f001 f935 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000958:	f001 f926 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x1b4>)
 8000972:	f001 f919 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 f90b 	bl	8001ba8 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024400 	.word	0x58024400
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020c00 	.word	0x58020c00
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58021800 	.word	0x58021800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 fb07 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f81f 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f7ff ff1b 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80009c6:	f7ff fdff 	bl	80005c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ca:	f000 f971 	bl	8000cb0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009ce:	f000 fa25 	bl	8000e1c <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
	unsigned char ucMsg; // Message received by uart.
	unsigned char ucUartFlag; // Flag returned by HAL_UART_Receive()

	ucUartFlag = HAL_UART_Receive(&huart3, &ucMsg, 1, 10000);
 80009d2:	1db9      	adds	r1, r7, #6
 80009d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80009d8:	2201      	movs	r2, #1
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <main+0x48>)
 80009dc:	f004 fb18 	bl	8005010 <HAL_UART_Receive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK == ucUartFlag){
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f3      	bne.n	80009d2 <main+0x1e>
	  HAL_UART_Transmit(&huart3, &ucMsg, 1, 10000);
 80009ea:	1db9      	adds	r1, r7, #6
 80009ec:	f242 7310 	movw	r3, #10000	@ 0x2710
 80009f0:	2201      	movs	r2, #1
 80009f2:	4802      	ldr	r0, [pc, #8]	@ (80009fc <main+0x48>)
 80009f4:	f004 fa7e 	bl	8004ef4 <HAL_UART_Transmit>
  {
 80009f8:	e7eb      	b.n	80009d2 <main+0x1e>
 80009fa:	bf00      	nop
 80009fc:	240001dc 	.word	0x240001dc

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09c      	sub	sp, #112	@ 0x70
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	224c      	movs	r2, #76	@ 0x4c
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 ff59 	bl	80068c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 ff53 	bl	80068c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f001 fbbb 	bl	800219c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <SystemClock_Config+0xf8>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <SystemClock_Config+0xf8>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <SystemClock_Config+0xf8>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0xfc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a48:	4a2c      	ldr	r2, [pc, #176]	@ (8000afc <SystemClock_Config+0xfc>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <SystemClock_Config+0xfc>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5c:	bf00      	nop
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <SystemClock_Config+0xfc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a6a:	d1f8      	bne.n	8000a5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fbc0 	bl	8002230 <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ab6:	f000 f823 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	233f      	movs	r3, #63	@ 0x3f
 8000abc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 f800 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000aea:	f000 f809 	bl	8000b00 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3770      	adds	r7, #112	@ 0x70
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 fa8b 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <SystemInit+0xe4>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a36      	ldr	r2, [pc, #216]	@ (8000c84 <SystemInit+0xe4>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <SystemInit+0xe8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d807      	bhi.n	8000bd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc0:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <SystemInit+0xe8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 030f 	bic.w	r3, r3, #15
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c88 <SystemInit+0xe8>)
 8000bca:	f043 0307 	orr.w	r3, r3, #7
 8000bce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <SystemInit+0xec>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c8c <SystemInit+0xec>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <SystemInit+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <SystemInit+0xec>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4929      	ldr	r1, [pc, #164]	@ (8000c8c <SystemInit+0xec>)
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <SystemInit+0xf0>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <SystemInit+0xe8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <SystemInit+0xe8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f023 030f 	bic.w	r3, r3, #15
 8000c02:	4a21      	ldr	r2, [pc, #132]	@ (8000c88 <SystemInit+0xe8>)
 8000c04:	f043 0307 	orr.w	r3, r3, #7
 8000c08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <SystemInit+0xec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <SystemInit+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <SystemInit+0xec>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <SystemInit+0xec>)
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c94 <SystemInit+0xf4>)
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <SystemInit+0xec>)
 8000c24:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <SystemInit+0xf8>)
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <SystemInit+0xec>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <SystemInit+0xfc>)
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <SystemInit+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <SystemInit+0xec>)
 8000c36:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <SystemInit+0xfc>)
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <SystemInit+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <SystemInit+0xec>)
 8000c42:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <SystemInit+0xfc>)
 8000c44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <SystemInit+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <SystemInit+0xec>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <SystemInit+0xec>)
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <SystemInit+0xec>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <SystemInit+0x100>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <SystemInit+0x104>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c6a:	d202      	bcs.n	8000c72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <SystemInit+0x108>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <SystemInit+0x10c>)
 8000c74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	52002000 	.word	0x52002000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c94:	02020200 	.word	0x02020200
 8000c98:	01ff0000 	.word	0x01ff0000
 8000c9c:	01010280 	.word	0x01010280
 8000ca0:	5c001000 	.word	0x5c001000
 8000ca4:	ffff0000 	.word	0xffff0000
 8000ca8:	51008108 	.word	0x51008108
 8000cac:	52004000 	.word	0x52004000

08000cb0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <MX_USART3_UART_Init+0x94>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cba:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf8:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cfa:	f004 f8ab 	bl	8004e54 <HAL_UART_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d04:	f7ff fefc 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d0c:	f005 fa09 	bl	8006122 <HAL_UARTEx_SetTxFifoThreshold>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d16:	f7ff fef3 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d1e:	f005 fa3e 	bl	800619e <HAL_UARTEx_SetRxFifoThreshold>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d28:	f7ff feea 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f005 f9bf 	bl	80060b0 <HAL_UARTEx_DisableFifoMode>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f7ff fee2 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240001dc 	.word	0x240001dc
 8000d44:	40004800 	.word	0x40004800

08000d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	22c0      	movs	r2, #192	@ 0xc0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f005 fdac 	bl	80068c6 <memset>
  if(uartHandle->Instance==USART3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <HAL_UART_MspInit+0xc8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d146      	bne.n	8000e06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d78:	f04f 0202 	mov.w	r2, #2
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fa34 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d9a:	f7ff feb1 	bl	8000b00 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000da6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000daa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_UART_MspInit+0xcc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <HAL_UART_MspInit+0xd0>)
 8000e02:	f000 fed1 	bl	8001ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	37e8      	adds	r7, #232	@ 0xe8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004800 	.word	0x40004800
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58020c00 	.word	0x58020c00

08000e1c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e22:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e28:	2209      	movs	r2, #9
 8000e2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e64:	f001 f869 	bl	8001f3a <HAL_PCD_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e6e:	f7ff fe47 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000270 	.word	0x24000270
 8000e7c:	40080000 	.word	0x40080000

08000e80 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ba      	sub	sp, #232	@ 0xe8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	22c0      	movs	r2, #192	@ 0xc0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fd10 	bl	80068c6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a30      	ldr	r2, [pc, #192]	@ (8000f6c <HAL_PCD_MspInit+0xec>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d159      	bne.n	8000f64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ebc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f997 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000ed4:	f7ff fe14 	bl	8000b00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ed8:	f001 f99a 	bl	8002210 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eec:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000efa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f14:	230a      	movs	r3, #10
 8000f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <HAL_PCD_MspInit+0xf4>)
 8000f22:	f000 fe41 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <HAL_PCD_MspInit+0xf4>)
 8000f42:	f000 fe31 	bl	8001ba8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000f4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	37e8      	adds	r7, #232	@ 0xe8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40080000 	.word	0x40080000
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020000 	.word	0x58020000

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f7ff fe10 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f005 fc97 	bl	80068d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fd03 	bl	80009b4 <main>
  bx  lr
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fbc:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 8000fc0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fc4:	24000758 	.word	0x24000758

08000fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC3_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f982 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd8:	f001 ff3a 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 030f 	and.w	r3, r3, #15
 8000fe8:	4913      	ldr	r1, [pc, #76]	@ (8001038 <HAL_Init+0x6c>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_Init+0x68>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_Init+0x6c>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_Init+0x70>)
 800100e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_Init+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f814 	bl	8001044 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e002      	b.n	800102c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fd71 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58024400 	.word	0x58024400
 8001038:	08006938 	.word	0x08006938
 800103c:	24000004 	.word	0x24000004
 8001040:	24000000 	.word	0x24000000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_InitTick+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e021      	b.n	800109c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_InitTick+0x64>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f959 	bl	8001326 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800108c:	f000 f931 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_InitTick+0x68>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	24000000 	.word	0x24000000
 80010ac:	24000008 	.word	0x24000008

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000754 	.word	0x24000754

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	24000754 	.word	0x24000754

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400000c 	.word	0x2400000c

08001138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <HAL_GetREVID+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0c1b      	lsrs	r3, r3, #16
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	5c001000 	.word	0x5c001000

08001150 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001160:	4904      	ldr	r1, [pc, #16]	@ (8001174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	58000400 	.word	0x58000400

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff5e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb2 	bl	8001298 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0e3      	b.n	800151a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001358:	2b00      	cmp	r3, #0
 800135a:	d106      	bne.n	800136a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2223      	movs	r2, #35	@ 0x23
 8001360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f97b 	bl	8000660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	4b6e      	ldr	r3, [pc, #440]	@ (8001524 <HAL_ETH_Init+0x1e4>)
 800136c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001370:	4a6c      	ldr	r2, [pc, #432]	@ (8001524 <HAL_ETH_Init+0x1e4>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800137a:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <HAL_ETH_Init+0x1e4>)
 800137c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7a1b      	ldrb	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fedd 	bl	8001150 <HAL_SYSCFG_ETHInterfaceSelect>
 8001396:	e003      	b.n	80013a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001398:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800139c:	f7ff fed8 	bl	8001150 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013a0:	4b61      	ldr	r3, [pc, #388]	@ (8001528 <HAL_ETH_Init+0x1e8>)
 80013a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff fe8c 	bl	80010d8 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013c2:	e011      	b.n	80013e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013c4:	f7ff fe88 	bl	80010d8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013d2:	d909      	bls.n	80013e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2204      	movs	r2, #4
 80013d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	22e0      	movs	r2, #224	@ 0xe0
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e098      	b.n	800151a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e4      	bne.n	80013c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f89e 	bl	800153c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001400:	f001 fea0 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8001404:	4603      	mov	r3, r0
 8001406:	4a49      	ldr	r2, [pc, #292]	@ (800152c <HAL_ETH_Init+0x1ec>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9a      	lsrs	r2, r3, #18
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3a01      	subs	r2, #1
 8001414:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fa81 	bl	8001920 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001426:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800142a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800143a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	22e0      	movs	r2, #224	@ 0xe0
 8001456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e05d      	b.n	800151a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001466:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <HAL_ETH_Init+0x1f0>)
 800146c:	4013      	ands	r3, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6952      	ldr	r2, [r2, #20]
 8001472:	0051      	lsls	r1, r2, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	430b      	orrs	r3, r1
 800147a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800147e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fae9 	bl	8001a5a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fb2f 	bl	8001aec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	3305      	adds	r3, #5
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	021a      	lsls	r2, r3, #8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	3303      	adds	r3, #3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	061a      	lsls	r2, r3, #24
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	3302      	adds	r3, #2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014dc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_ETH_Init+0x1f4>)
 80014ee:	430b      	orrs	r3, r1
 80014f0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_ETH_Init+0x1f8>)
 8001502:	430b      	orrs	r3, r1
 8001504:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2210      	movs	r2, #16
 8001514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	58024400 	.word	0x58024400
 8001528:	58000400 	.word	0x58000400
 800152c:	431bde83 	.word	0x431bde83
 8001530:	ffff8001 	.word	0xffff8001
 8001534:	0c020060 	.word	0x0c020060
 8001538:	0c20c000 	.word	0x0c20c000

0800153c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800154c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001554:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001556:	f001 fdf5 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 800155a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d804      	bhi.n	800156e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e022      	b.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4a16      	ldr	r2, [pc, #88]	@ (80015cc <HAL_ETH_SetMDIOClockRange+0x90>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d204      	bcs.n	8001580 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e019      	b.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d915      	bls.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d804      	bhi.n	800159a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e00c      	b.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d804      	bhi.n	80015ac <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e003      	b.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	02160ebf 	.word	0x02160ebf
 80015cc:	03938700 	.word	0x03938700
 80015d0:	05f5e0ff 	.word	0x05f5e0ff
 80015d4:	08f0d17f 	.word	0x08f0d17f
 80015d8:	0ee6b27f 	.word	0x0ee6b27f

080015dc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
 80015fc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7b5b      	ldrb	r3, [r3, #13]
 8001604:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b9b      	ldrb	r3, [r3, #14]
 800160c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7bdb      	ldrb	r3, [r3, #15]
 8001614:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001616:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	7c12      	ldrb	r2, [r2, #16]
 800161c:	2a00      	cmp	r2, #0
 800161e:	d102      	bne.n	8001626 <ETH_SetMACConfig+0x4a>
 8001620:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001624:	e000      	b.n	8001628 <ETH_SetMACConfig+0x4c>
 8001626:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001628:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	7c52      	ldrb	r2, [r2, #17]
 800162e:	2a00      	cmp	r2, #0
 8001630:	d102      	bne.n	8001638 <ETH_SetMACConfig+0x5c>
 8001632:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001636:	e000      	b.n	800163a <ETH_SetMACConfig+0x5e>
 8001638:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800163a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	7c9b      	ldrb	r3, [r3, #18]
 8001640:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001642:	431a      	orrs	r2, r3
               macconf->Speed |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001648:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800164e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	7f1b      	ldrb	r3, [r3, #28]
 8001654:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7f5b      	ldrb	r3, [r3, #29]
 800165c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800165e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	7f92      	ldrb	r2, [r2, #30]
 8001664:	2a00      	cmp	r2, #0
 8001666:	d102      	bne.n	800166e <ETH_SetMACConfig+0x92>
 8001668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166c:	e000      	b.n	8001670 <ETH_SetMACConfig+0x94>
 800166e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001670:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7fdb      	ldrb	r3, [r3, #31]
 8001676:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001678:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001680:	2a00      	cmp	r2, #0
 8001682:	d102      	bne.n	800168a <ETH_SetMACConfig+0xae>
 8001684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001688:	e000      	b.n	800168c <ETH_SetMACConfig+0xb0>
 800168a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800168c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800169a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800169c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b56      	ldr	r3, [pc, #344]	@ (8001808 <ETH_SetMACConfig+0x22c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016be:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016c6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016d0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016da:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	d102      	bne.n	80016ee <ETH_SetMACConfig+0x112>
 80016e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016ec:	e000      	b.n	80016f0 <ETH_SetMACConfig+0x114>
 80016ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016f0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4b42      	ldr	r3, [pc, #264]	@ (800180c <ETH_SetMACConfig+0x230>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	430b      	orrs	r3, r1
 800170c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001714:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <ETH_SetMACConfig+0x234>)
 8001726:	4013      	ands	r3, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	430b      	orrs	r3, r1
 8001730:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001738:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800173e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001746:	2a00      	cmp	r2, #0
 8001748:	d101      	bne.n	800174e <ETH_SetMACConfig+0x172>
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	e000      	b.n	8001750 <ETH_SetMACConfig+0x174>
 800174e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001750:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001756:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001758:	4313      	orrs	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001762:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	430b      	orrs	r3, r1
 8001770:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001778:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001780:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178e:	f023 0103 	bic.w	r1, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	430a      	orrs	r2, r1
 800179a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017a6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d101      	bne.n	80017ca <ETH_SetMACConfig+0x1ee>
 80017c6:	2240      	movs	r2, #64	@ 0x40
 80017c8:	e000      	b.n	80017cc <ETH_SetMACConfig+0x1f0>
 80017ca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017d4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017de:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017ec:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	00048083 	.word	0x00048083
 800180c:	c0f88000 	.word	0xc0f88000
 8001810:	fffffef0 	.word	0xfffffef0

08001814 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b38      	ldr	r3, [pc, #224]	@ (800190c <ETH_SetDMAConfig+0xf8>)
 800182a:	4013      	ands	r3, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800183a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7b1b      	ldrb	r3, [r3, #12]
 800184c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <ETH_SetDMAConfig+0xfc>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	430b      	orrs	r3, r1
 8001868:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800186c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	7b5b      	ldrb	r3, [r3, #13]
 8001872:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001884:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001888:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <ETH_SetDMAConfig+0x100>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	430b      	orrs	r3, r1
 8001894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001898:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7d1b      	ldrb	r3, [r3, #20]
 80018a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7f5b      	ldrb	r3, [r3, #29]
 80018ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <ETH_SetDMAConfig+0x104>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7f1b      	ldrb	r3, [r3, #28]
 80018d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <ETH_SetDMAConfig+0x108>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	430b      	orrs	r3, r1
 80018f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018fc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	ffff87fd 	.word	0xffff87fd
 8001910:	ffff2ffe 	.word	0xffff2ffe
 8001914:	fffec000 	.word	0xfffec000
 8001918:	ffc0efef 	.word	0xffc0efef
 800191c:	7fc0ffff 	.word	0x7fc0ffff

08001920 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0a4      	sub	sp, #144	@ 0x90
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800192e:	2300      	movs	r3, #0
 8001930:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001968:	2300      	movs	r3, #0
 800196a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001978:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800197c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800199a:	2300      	movs	r3, #0
 800199c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019a2:	2300      	movs	r3, #0
 80019a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019b8:	2320      	movs	r3, #32
 80019ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019ca:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019fa:	2300      	movs	r3, #0
 80019fc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fde6 	bl	80015dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a14:	2301      	movs	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a2a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a40:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fee1 	bl	8001814 <ETH_SetDMAConfig>
}
 8001a52:	bf00      	nop
 8001a54:	3790      	adds	r7, #144	@ 0x90
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e01d      	b.n	8001aa4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	3206      	adds	r2, #6
 8001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d9de      	bls.n	8001a68 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2303      	movs	r3, #3
 8001abc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001acc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e023      	b.n	8001b42 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	3212      	adds	r2, #18
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d9d8      	bls.n	8001afa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2303      	movs	r3, #3
 8001b72:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b82:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b96:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bb6:	4b89      	ldr	r3, [pc, #548]	@ (8001ddc <HAL_GPIO_Init+0x234>)
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bba:	e194      	b.n	8001ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8186 	beq.w	8001ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x44>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	69b9      	ldr	r1, [r7, #24]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80e0 	beq.w	8001ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <HAL_GPIO_Init+0x238>)
 8001d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d26:	4a2e      	ldr	r2, [pc, #184]	@ (8001de0 <HAL_GPIO_Init+0x238>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <HAL_GPIO_Init+0x238>)
 8001d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <HAL_GPIO_Init+0x23c>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <HAL_GPIO_Init+0x240>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d052      	beq.n	8001e10 <HAL_GPIO_Init+0x268>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_GPIO_Init+0x244>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0x22e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <HAL_GPIO_Init+0x248>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x22a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <HAL_GPIO_Init+0x24c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	@ (8001df8 <HAL_GPIO_Init+0x250>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_GPIO_Init+0x254>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_GPIO_Init+0x258>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	@ (8001e04 <HAL_GPIO_Init+0x25c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x216>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <HAL_GPIO_Init+0x260>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x212>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_GPIO_Init+0x264>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x20e>
 8001db2:	2309      	movs	r3, #9
 8001db4:	e02d      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001db6:	230a      	movs	r3, #10
 8001db8:	e02b      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e029      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e027      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e025      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e023      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e021      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e01f      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e01d      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01b      	b.n	8001e12 <HAL_GPIO_Init+0x26a>
 8001dda:	bf00      	nop
 8001ddc:	58000080 	.word	0x58000080
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58000400 	.word	0x58000400
 8001de8:	58020000 	.word	0x58020000
 8001dec:	58020400 	.word	0x58020400
 8001df0:	58020800 	.word	0x58020800
 8001df4:	58020c00 	.word	0x58020c00
 8001df8:	58021000 	.word	0x58021000
 8001dfc:	58021400 	.word	0x58021400
 8001e00:	58021800 	.word	0x58021800
 8001e04:	58021c00 	.word	0x58021c00
 8001e08:	58022000 	.word	0x58022000
 8001e0c:	58022400 	.word	0x58022400
 8001e10:	2300      	movs	r3, #0
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e22:	4938      	ldr	r1, [pc, #224]	@ (8001f04 <HAL_GPIO_Init+0x35c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f ae63 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	@ 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	58000400 	.word	0x58000400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0fe      	b.n	800214a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe ff8d 	bl	8000e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fa12 	bl	800639c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7c1a      	ldrb	r2, [r3, #16]
 8001f80:	f88d 2000 	strb.w	r2, [sp]
 8001f84:	3304      	adds	r3, #4
 8001f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f88:	f004 f996 	bl	80062b8 <USB_CoreInit>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d5      	b.n	800214a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fa0a 	bl	80063be <USB_SetCurrentMode>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0c6      	b.n	800214a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e04a      	b.n	8002058 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3315      	adds	r3, #21
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3314      	adds	r3, #20
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	b298      	uxth	r0, r3
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	332e      	adds	r3, #46	@ 0x2e
 8001ffe:	4602      	mov	r2, r0
 8002000:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3318      	adds	r3, #24
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	331c      	adds	r3, #28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3320      	adds	r3, #32
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3324      	adds	r3, #36	@ 0x24
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3af      	bcc.n	8001fc2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e044      	b.n	80020f2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	3301      	adds	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d3b5      	bcc.n	8002068 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7c1a      	ldrb	r2, [r3, #16]
 8002104:	f88d 2000 	strb.w	r2, [sp]
 8002108:	3304      	adds	r3, #4
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	f004 f9a4 	bl	8006458 <USB_DevInit>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e013      	b.n	800214a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f80b 	bl	8002154 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fb5f 	bl	8006806 <USB_DevDisconnect>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_PCDEx_ActivateLPM+0x44>)
 8002184:	4313      	orrs	r3, r2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	10000003 	.word	0x10000003

0800219c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_PWREx_ConfigSupply+0x70>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00a      	beq.n	80021c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_PWREx_ConfigSupply+0x70>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e01f      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e01d      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_PWREx_ConfigSupply+0x70>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	490f      	ldr	r1, [pc, #60]	@ (800220c <HAL_PWREx_ConfigSupply+0x70>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021d6:	f7fe ff7f 	bl	80010d8 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021dc:	e009      	b.n	80021f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021de:	f7fe ff7b 	bl	80010d8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ec:	d901      	bls.n	80021f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e007      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_PWREx_ConfigSupply+0x70>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021fe:	d1ee      	bne.n	80021de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	58024800 	.word	0x58024800

08002210 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a04      	ldr	r2, [pc, #16]	@ (800222c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	58024800 	.word	0x58024800

08002230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 bc48 	b.w	8002ad4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8088 	beq.w	8002362 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b99      	ldr	r3, [pc, #612]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800225c:	4b96      	ldr	r3, [pc, #600]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	2b10      	cmp	r3, #16
 8002266:	d007      	beq.n	8002278 <HAL_RCC_OscConfig+0x48>
 8002268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226a:	2b18      	cmp	r3, #24
 800226c:	d111      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d06d      	beq.n	8002360 <HAL_RCC_OscConfig+0x130>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d169      	bne.n	8002360 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f000 bc21 	b.w	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x7a>
 800229c:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a85      	ldr	r2, [pc, #532]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x9c>
 80022b2:	4b81      	ldr	r3, [pc, #516]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7d      	ldr	r2, [pc, #500]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 80022d6:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a74      	ldr	r2, [pc, #464]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022f0:	4b71      	ldr	r3, [pc, #452]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b6e      	ldr	r3, [pc, #440]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6d      	ldr	r2, [pc, #436]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fee2 	bl	80010d8 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fede 	bl	80010d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e3d4      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fece 	bl	80010d8 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe feca 	bl	80010d8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e3c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002352:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x110>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80ca 	beq.w	8002504 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002370:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002378:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800237a:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_RCC_OscConfig+0x166>
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b18      	cmp	r3, #24
 800238a:	d156      	bne.n	800243a <HAL_RCC_OscConfig+0x20a>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d151      	bne.n	800243a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002396:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e392      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ae:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0219 	bic.w	r2, r3, #25
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	493f      	ldr	r1, [pc, #252]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe8a 	bl	80010d8 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe fe86 	bl	80010d8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e37c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	f7fe fea7 	bl	8001138 <HAL_GetREVID>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d817      	bhi.n	8002424 <HAL_RCC_OscConfig+0x1f4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d108      	bne.n	800240e <HAL_RCC_OscConfig+0x1de>
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002404:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240c:	e07a      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	031b      	lsls	r3, r3, #12
 800241c:	4926      	ldr	r1, [pc, #152]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002422:	e06f      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	4921      	ldr	r1, [pc, #132]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002438:	e064      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0219 	bic.w	r2, r3, #25
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	491a      	ldr	r1, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fe40 	bl	80010d8 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fe3c 	bl	80010d8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e332      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	f7fe fe5d 	bl	8001138 <HAL_GetREVID>
 800247e:	4603      	mov	r3, r0
 8002480:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002484:	4293      	cmp	r3, r2
 8002486:	d819      	bhi.n	80024bc <HAL_RCC_OscConfig+0x28c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_OscConfig+0x272>
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002498:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249e:	6053      	str	r3, [r2, #4]
 80024a0:	e030      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	4901      	ldr	r1, [pc, #4]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 80024b6:	e025      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
 80024b8:	58024400 	.word	0x58024400
 80024bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4997      	ldr	r1, [pc, #604]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e018      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b95      	ldr	r3, [pc, #596]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a94      	ldr	r2, [pc, #592]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fdfb 	bl	80010d8 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fdf7 	bl	80010d8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e2ed      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a9 	beq.w	8002664 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800251a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800251c:	4b82      	ldr	r3, [pc, #520]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d007      	beq.n	8002538 <HAL_RCC_OscConfig+0x308>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b18      	cmp	r3, #24
 800252c:	d13a      	bne.n	80025a4 <HAL_RCC_OscConfig+0x374>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d135      	bne.n	80025a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002538:	4b7b      	ldr	r3, [pc, #492]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x320>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b80      	cmp	r3, #128	@ 0x80
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e2c1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002550:	f7fe fdf2 	bl	8001138 <HAL_GetREVID>
 8002554:	4603      	mov	r3, r0
 8002556:	f241 0203 	movw	r2, #4099	@ 0x1003
 800255a:	4293      	cmp	r3, r2
 800255c:	d817      	bhi.n	800258e <HAL_RCC_OscConfig+0x35e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b20      	cmp	r3, #32
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x348>
 8002566:	4b70      	ldr	r3, [pc, #448]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800256e:	4a6e      	ldr	r2, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002574:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002576:	e075      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002578:	4b6b      	ldr	r3, [pc, #428]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	4968      	ldr	r1, [pc, #416]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800258c:	e06a      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800258e:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	4962      	ldr	r1, [pc, #392]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a2:	e05f      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d042      	beq.n	8002632 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fd8e 	bl	80010d8 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c0:	f7fe fd8a 	bl	80010d8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e280      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d2:	4b55      	ldr	r3, [pc, #340]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025de:	f7fe fdab 	bl	8001138 <HAL_GetREVID>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d817      	bhi.n	800261c <HAL_RCC_OscConfig+0x3ec>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d108      	bne.n	8002606 <HAL_RCC_OscConfig+0x3d6>
 80025f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002602:	6053      	str	r3, [r2, #4]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
 8002606:	4b48      	ldr	r3, [pc, #288]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	069b      	lsls	r3, r3, #26
 8002614:	4944      	ldr	r1, [pc, #272]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e023      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
 800261c:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	493f      	ldr	r1, [pc, #252]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	60cb      	str	r3, [r1, #12]
 8002630:	e018      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002632:	4b3d      	ldr	r3, [pc, #244]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3c      	ldr	r2, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fd4b 	bl	80010d8 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002646:	f7fe fd47 	bl	80010d8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e23d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002658:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d036      	beq.n	80026de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d019      	beq.n	80026ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267c:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe fd28 	bl	80010d8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe fd24 	bl	80010d8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e21a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x45c>
 80026aa:	e018      	b.n	80026de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fd0e 	bl	80010d8 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe fd0a 	bl	80010d8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e200      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d039      	beq.n	800275e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fceb 	bl	80010d8 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002706:	f7fe fce7 	bl	80010d8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1dd      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x4d6>
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
 8002726:	bf00      	nop
 8002728:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800272c:	4b9b      	ldr	r3, [pc, #620]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a9a      	ldr	r2, [pc, #616]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002732:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002738:	f7fe fcce 	bl	80010d8 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7fe fcca 	bl	80010d8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002752:	4b92      	ldr	r3, [pc, #584]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8081 	beq.w	800286e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800276c:	4b8c      	ldr	r3, [pc, #560]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a8b      	ldr	r2, [pc, #556]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002778:	f7fe fcae 	bl	80010d8 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fcaa 	bl	80010d8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1a0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b83      	ldr	r3, [pc, #524]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x584>
 80027a6:	4b7d      	ldr	r3, [pc, #500]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	4a7c      	ldr	r2, [pc, #496]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b2:	e02d      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5a6>
 80027bc:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a76      	ldr	r2, [pc, #472]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a73      	ldr	r2, [pc, #460]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d4:	e01c      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c8>
 80027de:	4b6f      	ldr	r3, [pc, #444]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a6e      	ldr	r2, [pc, #440]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	4b6c      	ldr	r3, [pc, #432]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	4a6b      	ldr	r2, [pc, #428]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a67      	ldr	r2, [pc, #412]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a64      	ldr	r2, [pc, #400]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fc5e 	bl	80010d8 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fc5a 	bl	80010d8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e14e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCC_OscConfig+0x5f0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fc48 	bl	80010d8 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fe fc44 	bl	80010d8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e138      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002862:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 812d 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002878:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002880:	2b18      	cmp	r3, #24
 8002882:	f000 80bd 	beq.w	8002a00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 809e 	bne.w	80029cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b42      	ldr	r3, [pc, #264]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a41      	ldr	r2, [pc, #260]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fc1c 	bl	80010d8 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc18 	bl	80010d8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e10e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_OscConfig+0x774>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4931      	ldr	r1, [pc, #196]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	628b      	str	r3, [r1, #40]	@ 0x28
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	3b01      	subs	r3, #1
 80028e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ea:	3b01      	subs	r3, #1
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	3b01      	subs	r3, #1
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800290c:	4923      	ldr	r1, [pc, #140]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800291e:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800292a:	00d2      	lsls	r2, r2, #3
 800292c:	491b      	ldr	r1, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	f023 020c 	bic.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4917      	ldr	r1, [pc, #92]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f023 0202 	bic.w	r2, r3, #2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	4912      	ldr	r1, [pc, #72]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	4a07      	ldr	r2, [pc, #28]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800298c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe fba1 	bl	80010d8 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002998:	e011      	b.n	80029be <HAL_RCC_OscConfig+0x78e>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
 80029a0:	58024800 	.word	0x58024800
 80029a4:	fffffc0c 	.word	0xfffffc0c
 80029a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe fb94 	bl	80010d8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e08a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x77c>
 80029ca:	e082      	b.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b43      	ldr	r3, [pc, #268]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a42      	ldr	r2, [pc, #264]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fb7e 	bl	80010d8 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fb7a 	bl	80010d8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e070      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f2:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x7b0>
 80029fe:	e068      	b.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a00:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a06:	4b35      	ldr	r3, [pc, #212]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d031      	beq.n	8002a78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0203 	and.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d12a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d122      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0a5b      	lsrs	r3, r3, #9
 8002a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d108      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0e1b      	lsrs	r3, r3, #24
 8002a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e02b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d01f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a11      	ldr	r2, [pc, #68]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9e:	f7fe fb1b 	bl	80010d8 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002aa4:	bf00      	nop
 8002aa6:	f7fe fb17 	bl	80010d8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d0f9      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_RCC_OscConfig+0x8b0>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abe:	00d2      	lsls	r2, r2, #3
 8002ac0:	4906      	ldr	r1, [pc, #24]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3730      	adds	r7, #48	@ 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	ffff0007 	.word	0xffff0007

08002ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e19c      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b8a      	ldr	r3, [pc, #552]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d910      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b87      	ldr	r3, [pc, #540]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 020f 	bic.w	r2, r3, #15
 8002b0e:	4985      	ldr	r1, [pc, #532]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b83      	ldr	r3, [pc, #524]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e184      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d908      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b44:	4b78      	ldr	r3, [pc, #480]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	4975      	ldr	r1, [pc, #468]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d908      	bls.n	8002b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b72:	4b6d      	ldr	r3, [pc, #436]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	496a      	ldr	r1, [pc, #424]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	4b64      	ldr	r3, [pc, #400]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d908      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ba0:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	495e      	ldr	r1, [pc, #376]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bce:	4b56      	ldr	r3, [pc, #344]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4953      	ldr	r1, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d908      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f023 020f 	bic.w	r2, r3, #15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4947      	ldr	r1, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d055      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4940      	ldr	r1, [pc, #256]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c34:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d121      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0f6      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0ea      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c64:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0de      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d6      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f023 0207 	bic.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4925      	ldr	r1, [pc, #148]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c96:	f7fe fa1f 	bl	80010d8 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9e:	f7fe fa1b 	bl	80010d8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0be      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d1eb      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d208      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d214      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 020f 	bic.w	r2, r3, #15
 8002d0a:	4906      	ldr	r1, [pc, #24]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e086      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
 8002d24:	52002000 	.word	0x52002000
 8002d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d208      	bcs.n	8002d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d48:	4b3c      	ldr	r3, [pc, #240]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4939      	ldr	r1, [pc, #228]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d208      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	492e      	ldr	r1, [pc, #184]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d208      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d208      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4917      	ldr	r1, [pc, #92]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002de4:	f000 f834 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	4912      	ldr	r1, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x35c>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e40 <HAL_RCC_ClockConfig+0x35c>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	4a0a      	ldr	r2, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x360>)
 8002e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x364>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_RCC_ClockConfig+0x368>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe f90c 	bl	8001044 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	08006938 	.word	0x08006938
 8002e44:	24000004 	.word	0x24000004
 8002e48:	24000000 	.word	0x24000000
 8002e4c:	24000008 	.word	0x24000008

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4bb3      	ldr	r3, [pc, #716]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e5e:	2b18      	cmp	r3, #24
 8002e60:	f200 8155 	bhi.w	800310e <HAL_RCC_GetSysClockFreq+0x2be>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	0800310f 	.word	0x0800310f
 8002e74:	0800310f 	.word	0x0800310f
 8002e78:	0800310f 	.word	0x0800310f
 8002e7c:	0800310f 	.word	0x0800310f
 8002e80:	0800310f 	.word	0x0800310f
 8002e84:	0800310f 	.word	0x0800310f
 8002e88:	0800310f 	.word	0x0800310f
 8002e8c:	08002ef7 	.word	0x08002ef7
 8002e90:	0800310f 	.word	0x0800310f
 8002e94:	0800310f 	.word	0x0800310f
 8002e98:	0800310f 	.word	0x0800310f
 8002e9c:	0800310f 	.word	0x0800310f
 8002ea0:	0800310f 	.word	0x0800310f
 8002ea4:	0800310f 	.word	0x0800310f
 8002ea8:	0800310f 	.word	0x0800310f
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	0800310f 	.word	0x0800310f
 8002eb4:	0800310f 	.word	0x0800310f
 8002eb8:	0800310f 	.word	0x0800310f
 8002ebc:	0800310f 	.word	0x0800310f
 8002ec0:	0800310f 	.word	0x0800310f
 8002ec4:	0800310f 	.word	0x0800310f
 8002ec8:	0800310f 	.word	0x0800310f
 8002ecc:	08002f03 	.word	0x08002f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed0:	4b94      	ldr	r3, [pc, #592]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002edc:	4b91      	ldr	r3, [pc, #580]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	4a90      	ldr	r2, [pc, #576]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eee:	e111      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef2:	61bb      	str	r3, [r7, #24]
      break;
 8002ef4:	e10e      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ef8:	61bb      	str	r3, [r7, #24]
      break;
 8002efa:	e10b      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002efc:	4b8c      	ldr	r3, [pc, #560]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002efe:	61bb      	str	r3, [r7, #24]
      break;
 8002f00:	e108      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f0c:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f18:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f22:	4b80      	ldr	r3, [pc, #512]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	08db      	lsrs	r3, r3, #3
 8002f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80e1 	beq.w	8003108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f000 8083 	beq.w	8003054 <HAL_RCC_GetSysClockFreq+0x204>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f200 80a1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x248>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x114>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d056      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f62:	e099      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02d      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f70:	4b6c      	ldr	r3, [pc, #432]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b62      	ldr	r3, [pc, #392]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fca:	e087      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800300e:	e065      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2ec>
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a02 	vldr	s12, [r7, #8]
 8003036:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003052:	e043      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003096:	e021      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80030be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	0a5b      	lsrs	r3, r3, #9
 80030e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e6:	3301      	adds	r3, #1
 80030e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80030f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003100:	ee17 3a90 	vmov	r3, s15
 8003104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800310e:	4b07      	ldr	r3, [pc, #28]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003110:	61bb      	str	r3, [r7, #24]
      break;
 8003112:	bf00      	nop
  }

  return sysclockfreq;
 8003114:	69bb      	ldr	r3, [r7, #24]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	03d09000 	.word	0x03d09000
 800312c:	003d0900 	.word	0x003d0900
 8003130:	007a1200 	.word	0x007a1200
 8003134:	46000000 	.word	0x46000000
 8003138:	4c742400 	.word	0x4c742400
 800313c:	4a742400 	.word	0x4a742400
 8003140:	4af42400 	.word	0x4af42400

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800314a:	f7ff fe81 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_RCC_GetHCLKFreq+0x50>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490f      	ldr	r1, [pc, #60]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x54>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_RCC_GetHCLKFreq+0x50>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x54>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	4a07      	ldr	r2, [pc, #28]	@ (800319c <HAL_RCC_GetHCLKFreq+0x58>)
 8003180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_RCC_GetHCLKFreq+0x58>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	58024400 	.word	0x58024400
 8003198:	08006938 	.word	0x08006938
 800319c:	24000004 	.word	0x24000004
 80031a0:	24000000 	.word	0x24000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031a8:	f7ff ffcc 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	58024400 	.word	0x58024400
 80031cc:	08006938 	.word	0x08006938

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031d4:	f7ff ffb6 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	58024400 	.word	0x58024400
 80031f8:	08006938 	.word	0x08006938

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b0ca      	sub	sp, #296	@ 0x128
 8003202:	af00      	add	r7, sp, #0
 8003204:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800320e:	2300      	movs	r3, #0
 8003210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003220:	2500      	movs	r5, #0
 8003222:	ea54 0305 	orrs.w	r3, r4, r5
 8003226:	d049      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800322e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003232:	d02f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003238:	d828      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800323a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800323e:	d01a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003244:	d822      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324e:	d007      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003250:	e01c      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003252:	4bb8      	ldr	r3, [pc, #736]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	4ab7      	ldr	r2, [pc, #732]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800325e:	e01a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	3308      	adds	r3, #8
 8003266:	2102      	movs	r1, #2
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fc8f 	bl	8004b8c <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003274:	e00f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	3328      	adds	r3, #40	@ 0x28
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fd36 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800329e:	4ba5      	ldr	r3, [pc, #660]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ac:	4aa1      	ldr	r2, [pc, #644]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032c8:	f04f 0900 	mov.w	r9, #0
 80032cc:	ea58 0309 	orrs.w	r3, r8, r9
 80032d0:	d047      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d82a      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032dc:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f9 	.word	0x080032f9
 80032e8:	08003307 	.word	0x08003307
 80032ec:	0800331d 	.word	0x0800331d
 80032f0:	0800333b 	.word	0x0800333b
 80032f4:	0800333b 	.word	0x0800333b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	4a8d      	ldr	r2, [pc, #564]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003304:	e01a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	3308      	adds	r3, #8
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fc3c 	bl	8004b8c <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800331a:	e00f      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	3328      	adds	r3, #40	@ 0x28
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fce3 	bl	8004cf0 <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003330:	e004      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800333a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003344:	4b7b      	ldr	r3, [pc, #492]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	f023 0107 	bic.w	r1, r3, #7
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	4a78      	ldr	r2, [pc, #480]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003354:	430b      	orrs	r3, r1
 8003356:	6513      	str	r3, [r2, #80]	@ 0x50
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800336e:	f04f 0b00 	mov.w	fp, #0
 8003372:	ea5a 030b 	orrs.w	r3, sl, fp
 8003376:	d04c      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003382:	d030      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003388:	d829      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800338a:	2bc0      	cmp	r3, #192	@ 0xc0
 800338c:	d02d      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800338e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003390:	d825      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003392:	2b80      	cmp	r3, #128	@ 0x80
 8003394:	d018      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003396:	2b80      	cmp	r3, #128	@ 0x80
 8003398:	d821      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d007      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033a2:	e01c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b63      	ldr	r3, [pc, #396]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4a62      	ldr	r2, [pc, #392]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033b0:	e01c      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b6:	3308      	adds	r3, #8
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fbe6 	bl	8004b8c <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033c6:	e011      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	3328      	adds	r3, #40	@ 0x28
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fc8d 	bl	8004cf0 <RCCEx_PLL3_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033dc:	e006      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033e4:	e002      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6513      	str	r3, [r2, #80]	@ 0x50
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800341e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003428:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800342c:	460b      	mov	r3, r1
 800342e:	4313      	orrs	r3, r2
 8003430:	d053      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800343a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800343e:	d035      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003440:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003444:	d82e      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003446:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800344a:	d031      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800344c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003450:	d828      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003456:	d01a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345c:	d822      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003466:	d007      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003468:	e01c      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346a:	4b32      	ldr	r3, [pc, #200]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	4a31      	ldr	r2, [pc, #196]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003476:	e01c      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347c:	3308      	adds	r3, #8
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fb83 	bl	8004b8c <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800348c:	e011      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fc2a 	bl	8004cf0 <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a2:	e006      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d056      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003506:	d038      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800350c:	d831      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800350e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003512:	d034      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003514:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003518:	d82b      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800351a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800351e:	d01d      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003524:	d825      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800352a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003530:	e01f      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4ba2      	ldr	r3, [pc, #648]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	4aa1      	ldr	r2, [pc, #644]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003544:	e01c      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	3308      	adds	r3, #8
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb1c 	bl	8004b8c <RCCEx_PLL2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800355a:	e011      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	3328      	adds	r3, #40	@ 0x28
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fbc3 	bl	8004cf0 <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003578:	e002      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800357e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003588:	4b8e      	ldr	r3, [pc, #568]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003594:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003598:	4a8a      	ldr	r2, [pc, #552]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359a:	430b      	orrs	r3, r1
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d03a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	2b30      	cmp	r3, #48	@ 0x30
 80035d0:	d01f      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035d2:	2b30      	cmp	r3, #48	@ 0x30
 80035d4:	d819      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d00c      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d815      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d111      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e6:	4b77      	ldr	r3, [pc, #476]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4a76      	ldr	r2, [pc, #472]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035f2:	e011      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	3308      	adds	r3, #8
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fac5 	bl	8004b8c <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003608:	e006      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003630:	430b      	orrs	r3, r1
 8003632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800364a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003654:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d051      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003668:	d035      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800366a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800366e:	d82e      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003670:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003674:	d031      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003676:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800367a:	d828      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003680:	d01a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003686:	d822      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003690:	d007      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003692:	e01c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	4a4a      	ldr	r2, [pc, #296]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e01c      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a6:	3308      	adds	r3, #8
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fa6e 	bl	8004b8c <RCCEx_PLL2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b6:	e011      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	3328      	adds	r3, #40	@ 0x28
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fb15 	bl	8004cf0 <RCCEx_PLL3_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036cc:	e006      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036e4:	4b37      	ldr	r3, [pc, #220]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	4a34      	ldr	r2, [pc, #208]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800370e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003718:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d056      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800372c:	d033      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800372e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003732:	d82c      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003738:	d02f      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800373a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373e:	d826      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003740:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003744:	d02b      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800374a:	d820      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800374c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003750:	d012      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003756:	d81a      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d022      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d115      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	3308      	adds	r3, #8
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fa0e 	bl	8004b8c <RCCEx_PLL2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003776:	e015      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	3328      	adds	r3, #40	@ 0x28
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fab5 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800378c:	e00a      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003796:	bf00      	nop
 8003798:	e004      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800379a:	bf00      	nop
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10d      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037ac:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ba:	4a02      	ldr	r2, [pc, #8]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037c2:	bf00      	nop
 80037c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d055      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fc:	d033      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003802:	d82c      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003808:	d02f      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380e:	d826      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003810:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003814:	d02b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800381a:	d820      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800381c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003820:	d012      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003826:	d81a      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d022      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800382c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003830:	d115      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3308      	adds	r3, #8
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f9a6 	bl	8004b8c <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003846:	e015      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	3328      	adds	r3, #40	@ 0x28
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fa4d 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800385c:	e00a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800387c:	4ba3      	ldr	r3, [pc, #652]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800388c:	4a9f      	ldr	r2, [pc, #636]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6593      	str	r3, [r2, #88]	@ 0x58
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038b6:	460b      	mov	r3, r1
 80038b8:	4313      	orrs	r3, r2
 80038ba:	d037      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c6:	d00e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038cc:	d816      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038d6:	d111      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4a8b      	ldr	r2, [pc, #556]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038e4:	e00f      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	3308      	adds	r3, #8
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f94c 	bl	8004b8c <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800390e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	4a7b      	ldr	r2, [pc, #492]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6513      	str	r3, [r2, #80]	@ 0x50
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003942:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d039      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	2b03      	cmp	r3, #3
 8003954:	d81c      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003956:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003999 	.word	0x08003999
 8003960:	0800396d 	.word	0x0800396d
 8003964:	0800397b 	.word	0x0800397b
 8003968:	08003999 	.word	0x08003999
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396c:	4b67      	ldr	r3, [pc, #412]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	4a66      	ldr	r2, [pc, #408]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003978:	e00f      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	3308      	adds	r3, #8
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f902 	bl	8004b8c <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039a2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	f023 0103 	bic.w	r1, r3, #3
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	4a56      	ldr	r2, [pc, #344]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	f000 809f 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fb73 	bl	80010d8 <HAL_GetTick>
 80039f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fb6e 	bl	80010d8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b64      	cmp	r3, #100	@ 0x64
 8003a06:	d903      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0e:	e005      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a10:	4b3f      	ldr	r3, [pc, #252]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ed      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d179      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a24:	4b39      	ldr	r3, [pc, #228]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a30:	4053      	eors	r3, r2
 8003a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a3a:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a46:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	4a30      	ldr	r2, [pc, #192]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a52:	4b2e      	ldr	r3, [pc, #184]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a2d      	ldr	r2, [pc, #180]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fb30 	bl	80010d8 <HAL_GetTick>
 8003a78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7c:	e00d      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fb2b 	bl	80010d8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d903      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003a98:	e005      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0eb      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d129      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003abe:	d10e      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ad0:	091a      	lsrs	r2, r3, #4
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6113      	str	r3, [r2, #16]
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ae8:	6113      	str	r3, [r2, #16]
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afa:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b00:	e00e      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b0a:	e009      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58024800 	.word	0x58024800
 8003b14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0301 	and.w	r3, r2, #1
 8003b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f000 8089 	beq.w	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b48:	2b28      	cmp	r3, #40	@ 0x28
 8003b4a:	d86b      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003c2d 	.word	0x08003c2d
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003c25 	.word	0x08003c25
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003c25 	.word	0x08003c25
 8003b74:	08003bf9 	.word	0x08003bf9
 8003b78:	08003c25 	.word	0x08003c25
 8003b7c:	08003c25 	.word	0x08003c25
 8003b80:	08003c25 	.word	0x08003c25
 8003b84:	08003c25 	.word	0x08003c25
 8003b88:	08003c25 	.word	0x08003c25
 8003b8c:	08003c25 	.word	0x08003c25
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c0f 	.word	0x08003c0f
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c25 	.word	0x08003c25
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c25 	.word	0x08003c25
 8003ba8:	08003c25 	.word	0x08003c25
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c2d 	.word	0x08003c2d
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003c25 	.word	0x08003c25
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c25 	.word	0x08003c25
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c2d 	.word	0x08003c2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 ffc3 	bl	8004b8c <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e00f      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f86a 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c36:	4bbf      	ldr	r3, [pc, #764]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c44:	4abb      	ldr	r2, [pc, #748]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f002 0302 	and.w	r3, r2, #2
 8003c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d041      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d824      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cd1 	.word	0x08003cd1
 8003c88:	08003c9d 	.word	0x08003c9d
 8003c8c:	08003cb3 	.word	0x08003cb3
 8003c90:	08003cd1 	.word	0x08003cd1
 8003c94:	08003cd1 	.word	0x08003cd1
 8003c98:	08003cd1 	.word	0x08003cd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 ff71 	bl	8004b8c <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e00f      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f818 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cda:	4b96      	ldr	r3, [pc, #600]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f023 0107 	bic.w	r1, r3, #7
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce8:	4a92      	ldr	r2, [pc, #584]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cea:	430b      	orrs	r3, r1
 8003cec:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f002 0304 	and.w	r3, r2, #4
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d044      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d825      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d24:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d45 	.word	0x08003d45
 8003d34:	08003d5b 	.word	0x08003d5b
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ff1d 	bl	8004b8c <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d58:	e00f      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2101      	movs	r1, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ffc4 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e004      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d82:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	f023 0107 	bic.w	r1, r3, #7
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d92:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f002 0320 	and.w	r3, r2, #32
 8003dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d055      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dce:	d033      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd4:	d82c      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d826      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003de6:	d02b      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003de8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dec:	d820      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003df2:	d012      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003df8:	d81a      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d022      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e02:	d115      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	3308      	adds	r3, #8
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 febd 	bl	8004b8c <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e18:	e015      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	3328      	adds	r3, #40	@ 0x28
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 ff64 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e36:	e006      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e38:	bf00      	nop
 8003e3a:	e004      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e4e:	4b39      	ldr	r3, [pc, #228]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a35      	ldr	r2, [pc, #212]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e64:	e003      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	d058      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e9a:	d033      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ea0:	d82c      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d02f      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eac:	d826      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb2:	d02b      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb8:	d820      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebe:	d012      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec4:	d81a      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d022      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ece:	d115      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fe57 	bl	8004b8c <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e015      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fefe 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003efa:	e00a      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f02:	e006      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f04:	bf00      	nop
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f08:	bf00      	nop
 8003f0a:	e002      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f0c:	bf00      	nop
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10e      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f2a:	4a02      	ldr	r2, [pc, #8]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f30:	e006      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f32:	bf00      	nop
 8003f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d055      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f6c:	d033      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f72:	d82c      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f78:	d02f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7e:	d826      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f84:	d02b      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f8a:	d820      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f90:	d012      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f96:	d81a      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d022      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa0:	d115      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fdee 	bl	8004b8c <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fb6:	e015      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	3328      	adds	r3, #40	@ 0x28
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fe95 	bl	8004cf0 <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fec:	4ba1      	ldr	r3, [pc, #644]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ffc:	4a9d      	ldr	r2, [pc, #628]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6593      	str	r3, [r2, #88]	@ 0x58
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0308 	and.w	r3, r2, #8
 8004018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004022:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	d01e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3328      	adds	r3, #40	@ 0x28
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe54 	bl	8004cf0 <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004054:	4b87      	ldr	r3, [pc, #540]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004064:	4a83      	ldr	r2, [pc, #524]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004066:	430b      	orrs	r3, r1
 8004068:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f002 0310 	and.w	r3, r2, #16
 8004076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004080:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d01e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d10c      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	3328      	adds	r3, #40	@ 0x28
 800409e:	2102      	movs	r1, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fe25 	bl	8004cf0 <RCCEx_PLL3_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040b2:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d03e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f4:	d022      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fa:	d81b      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004104:	d00b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004106:	e015      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410c:	3308      	adds	r3, #8
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fd3b 	bl	8004b8c <RCCEx_PLL2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800411c:	e00f      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	3328      	adds	r3, #40	@ 0x28
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fde2 	bl	8004cf0 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004146:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004156:	4a47      	ldr	r2, [pc, #284]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6593      	str	r3, [r2, #88]	@ 0x58
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004172:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004174:	2300      	movs	r3, #0
 8004176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004178:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800417c:	460b      	mov	r3, r1
 800417e:	4313      	orrs	r3, r2
 8004180:	d03b      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800418e:	d01f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004190:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004194:	d818      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419a:	d003      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800419c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041a0:	d007      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a4:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	4a32      	ldr	r2, [pc, #200]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041b0:	e00f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fd98 	bl	8004cf0 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c6:	e004      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ce:	e000      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041da:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004206:	673b      	str	r3, [r7, #112]	@ 0x70
 8004208:	2300      	movs	r3, #0
 800420a:	677b      	str	r3, [r7, #116]	@ 0x74
 800420c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d034      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d007      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800422e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004234:	e00e      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3308      	adds	r3, #8
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fca4 	bl	8004b8c <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10d      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800425e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004260:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426a:	4a02      	ldr	r2, [pc, #8]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426c:	430b      	orrs	r3, r1
 800426e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800428c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800428e:	2300      	movs	r3, #0
 8004290:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004292:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004296:	460b      	mov	r3, r1
 8004298:	4313      	orrs	r3, r2
 800429a:	d00c      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	3328      	adds	r3, #40	@ 0x28
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fd23 	bl	8004cf0 <RCCEx_PLL3_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c4:	2300      	movs	r3, #0
 80042c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042cc:	460b      	mov	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	d038      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042de:	d018      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e4:	d811      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ea:	d014      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f0:	d80b      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fa:	d106      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fc:	4bc3      	ldr	r3, [pc, #780]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	4ac2      	ldr	r2, [pc, #776]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004308:	e008      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004310:	e004      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800431a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004324:	4bb9      	ldr	r3, [pc, #740]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004334:	4ab5      	ldr	r2, [pc, #724]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6553      	str	r3, [r2, #84]	@ 0x54
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004350:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004352:	2300      	movs	r3, #0
 8004354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004356:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004360:	4baa      	ldr	r3, [pc, #680]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	4aa7      	ldr	r2, [pc, #668]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004370:	430b      	orrs	r3, r1
 8004372:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004380:	653b      	str	r3, [r7, #80]	@ 0x50
 8004382:	2300      	movs	r3, #0
 8004384:	657b      	str	r3, [r7, #84]	@ 0x54
 8004386:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004390:	4b9e      	ldr	r3, [pc, #632]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043a0:	4a9a      	ldr	r2, [pc, #616]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b4:	2300      	movs	r3, #0
 80043b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043c2:	4b92      	ldr	r3, [pc, #584]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d0:	4a8e      	ldr	r2, [pc, #568]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e4:	2300      	movs	r3, #0
 80043e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043ec:	460b      	mov	r3, r1
 80043ee:	4313      	orrs	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f2:	4b86      	ldr	r3, [pc, #536]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4a85      	ldr	r2, [pc, #532]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043fc:	6113      	str	r3, [r2, #16]
 80043fe:	4b83      	ldr	r3, [pc, #524]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800440a:	4a80      	ldr	r2, [pc, #512]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440c:	430b      	orrs	r3, r1
 800440e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800441c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800441e:	2300      	movs	r3, #0
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004422:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800442c:	4b77      	ldr	r3, [pc, #476]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004430:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	4a74      	ldr	r2, [pc, #464]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443c:	430b      	orrs	r3, r1
 800443e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800444c:	633b      	str	r3, [r7, #48]	@ 0x30
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	@ 0x34
 8004452:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800445c:	4b6b      	ldr	r3, [pc, #428]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800446c:	4a67      	ldr	r2, [pc, #412]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	2100      	movs	r1, #0
 800447c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004484:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d011      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	3308      	adds	r3, #8
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb78 	bl	8004b8c <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	2100      	movs	r1, #0
 80044bc:	6239      	str	r1, [r7, #32]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d011      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	3308      	adds	r3, #8
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb58 	bl	8004b8c <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	2100      	movs	r1, #0
 80044fc:	61b9      	str	r1, [r7, #24]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004508:	460b      	mov	r3, r1
 800450a:	4313      	orrs	r3, r2
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	3308      	adds	r3, #8
 8004514:	2102      	movs	r1, #2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fb38 	bl	8004b8c <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	2100      	movs	r1, #0
 800453c:	6139      	str	r1, [r7, #16]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d011      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	3328      	adds	r3, #40	@ 0x28
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fbca 	bl	8004cf0 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	2100      	movs	r1, #0
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d011      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	3328      	adds	r3, #40	@ 0x28
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fbaa 	bl	8004cf0 <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	2100      	movs	r1, #0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d011      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	3328      	adds	r3, #40	@ 0x28
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fb8a 	bl	8004cf0 <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80045f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
}
 8004600:	4618      	mov	r0, r3
 8004602:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004606:	46bd      	mov	sp, r7
 8004608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460c:	58024400 	.word	0x58024400

08004610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004614:	f7fe fd96 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4904      	ldr	r1, [pc, #16]	@ (8004638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	58024400 	.word	0x58024400
 8004638:	08006938 	.word	0x08006938

0800463c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	@ 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004644:	4ba1      	ldr	r3, [pc, #644]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800464e:	4b9f      	ldr	r3, [pc, #636]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	0b1b      	lsrs	r3, r3, #12
 8004654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800465a:	4b9c      	ldr	r3, [pc, #624]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004666:	4b99      	ldr	r3, [pc, #612]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466a:	08db      	lsrs	r3, r3, #3
 800466c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8111 	beq.w	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f000 8083 	beq.w	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b02      	cmp	r3, #2
 8004696:	f200 80a1 	bhi.w	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d056      	beq.n	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046a6:	e099      	b.n	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a8:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02d      	beq.n	8004710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046b4:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	4a84      	ldr	r2, [pc, #528]	@ (80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b7b      	ldr	r3, [pc, #492]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800470e:	e087      	b.n	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b6a      	ldr	r3, [pc, #424]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a03 	vldr	s12, [r7, #12]
 8004736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004752:	e065      	b.n	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004766:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	ed97 6a03 	vldr	s12, [r7, #12]
 800477a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800478a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004796:	e043      	b.n	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b48      	ldr	r3, [pc, #288]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047da:	e021      	b.n	8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ee:	4b37      	ldr	r3, [pc, #220]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004820:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	0a5b      	lsrs	r3, r3, #9
 8004826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483a:	edd7 6a07 	vldr	s13, [r7, #28]
 800483e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004846:	ee17 2a90 	vmov	r2, s15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800484e:	4b1f      	ldr	r3, [pc, #124]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004868:	edd7 6a07 	vldr	s13, [r7, #28]
 800486c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800487c:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004896:	edd7 6a07 	vldr	s13, [r7, #28]
 800489a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800489e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a2:	ee17 2a90 	vmov	r2, s15
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048aa:	e008      	b.n	80048be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
}
 80048be:	bf00      	nop
 80048c0:	3724      	adds	r7, #36	@ 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	46000000 	.word	0x46000000
 80048d8:	4c742400 	.word	0x4c742400
 80048dc:	4a742400 	.word	0x4a742400
 80048e0:	4af42400 	.word	0x4af42400

080048e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	@ 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	0d1b      	lsrs	r3, r3, #20
 80048fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004902:	4b9c      	ldr	r3, [pc, #624]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800490e:	4b99      	ldr	r3, [pc, #612]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8111 	beq.w	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b02      	cmp	r3, #2
 8004936:	f000 8083 	beq.w	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f200 80a1 	bhi.w	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d056      	beq.n	80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800494e:	e099      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004950:	4b88      	ldr	r3, [pc, #544]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02d      	beq.n	80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800495c:	4b85      	ldr	r3, [pc, #532]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	4a84      	ldr	r2, [pc, #528]	@ (8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b7b      	ldr	r3, [pc, #492]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a03 	vldr	s12, [r7, #12]
 800499a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049b6:	e087      	b.n	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049fa:	e065      	b.n	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b59      	ldr	r3, [pc, #356]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a3e:	e043      	b.n	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b48      	ldr	r3, [pc, #288]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a82:	e021      	b.n	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b37      	ldr	r3, [pc, #220]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aee:	ee17 2a90 	vmov	r2, s15
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 2a90 	vmov	r2, s15
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b24:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4a:	ee17 2a90 	vmov	r2, s15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
}
 8004b66:	bf00      	nop
 8004b68:	3724      	adds	r7, #36	@ 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
 8004b78:	03d09000 	.word	0x03d09000
 8004b7c:	46000000 	.word	0x46000000
 8004b80:	4c742400 	.word	0x4c742400
 8004b84:	4a742400 	.word	0x4a742400
 8004b88:	4af42400 	.word	0x4af42400

08004b8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b9a:	4b53      	ldr	r3, [pc, #332]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d101      	bne.n	8004baa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e099      	b.n	8004cde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004baa:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4e      	ldr	r2, [pc, #312]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb6:	f7fc fa8f 	bl	80010d8 <HAL_GetTick>
 8004bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bbe:	f7fc fa8b 	bl	80010d8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e086      	b.n	8004cde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bdc:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	493f      	ldr	r1, [pc, #252]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	025b      	lsls	r3, r3, #9
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c20:	4931      	ldr	r1, [pc, #196]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c26:	4b30      	ldr	r3, [pc, #192]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	492d      	ldr	r1, [pc, #180]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	f023 0220 	bic.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	4928      	ldr	r1, [pc, #160]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c56:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5a:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <RCCEx_PLL2_Config+0x160>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	69d2      	ldr	r2, [r2, #28]
 8004c62:	00d2      	lsls	r2, r2, #3
 8004c64:	4920      	ldr	r1, [pc, #128]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	f043 0310 	orr.w	r3, r3, #16
 8004c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c88:	e00f      	b.n	8004caa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c90:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c9c:	e005      	b.n	8004caa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004caa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fa0f 	bl	80010d8 <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cbc:	e008      	b.n	8004cd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cbe:	f7fc fa0b 	bl	80010d8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e006      	b.n	8004cde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	ffff0007 	.word	0xffff0007

08004cf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cfe:	4b53      	ldr	r3, [pc, #332]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d101      	bne.n	8004d0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e099      	b.n	8004e42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a4e      	ldr	r2, [pc, #312]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fc f9dd 	bl	80010d8 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d22:	f7fc f9d9 	bl	80010d8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e086      	b.n	8004e42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d34:	4b45      	ldr	r3, [pc, #276]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d40:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	051b      	lsls	r3, r3, #20
 8004d4e:	493f      	ldr	r1, [pc, #252]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d84:	4931      	ldr	r1, [pc, #196]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d8a:	4b30      	ldr	r3, [pc, #192]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	492d      	ldr	r1, [pc, #180]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	4928      	ldr	r1, [pc, #160]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dae:	4b27      	ldr	r3, [pc, #156]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4a26      	ldr	r2, [pc, #152]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dba:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dbe:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <RCCEx_PLL3_Config+0x160>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	69d2      	ldr	r2, [r2, #28]
 8004dc6:	00d2      	lsls	r2, r2, #3
 8004dc8:	4920      	ldr	r1, [pc, #128]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dce:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004de0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004de6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dec:	e00f      	b.n	8004e0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004df4:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e00:	e005      	b.n	8004e0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004e08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a0e      	ldr	r2, [pc, #56]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fc f95d 	bl	80010d8 <HAL_GetTick>
 8004e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e22:	f7fc f959 	bl	80010d8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e006      	b.n	8004e42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <RCCEx_PLL3_Config+0x15c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	ffff0007 	.word	0xffff0007

08004e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e042      	b.n	8004eec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fb ff65 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2224      	movs	r2, #36	@ 0x24
 8004e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fee6 	bl	8005c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f97b 	bl	80051a0 <UART_SetConfig>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e01b      	b.n	8004eec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 ff65 	bl	8005db4 <UART_CheckIdleState>
 8004eea:	4603      	mov	r3, r0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	@ 0x28
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d17b      	bne.n	8005006 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_UART_Transmit+0x26>
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e074      	b.n	8005008 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2221      	movs	r2, #33	@ 0x21
 8004f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f2e:	f7fc f8d3 	bl	80010d8 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4c:	d108      	bne.n	8004f60 <HAL_UART_Transmit+0x6c>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e003      	b.n	8004f68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f68:	e030      	b.n	8004fcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2180      	movs	r1, #128	@ 0x80
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 ffc7 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e03d      	b.n	8005008 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e007      	b.n	8004fba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1c8      	bne.n	8004f6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2140      	movs	r1, #64	@ 0x40
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 ff90 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e006      	b.n	8005008 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	@ 0x28
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005026:	2b20      	cmp	r3, #32
 8005028:	f040 80b5 	bne.w	8005196 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_UART_Receive+0x28>
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0ad      	b.n	8005198 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2222      	movs	r2, #34	@ 0x22
 8005048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005052:	f7fc f841 	bl	80010d8 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005070:	d10e      	bne.n	8005090 <HAL_UART_Receive+0x80>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_UART_Receive+0x76>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005080:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005084:	e02d      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800508e:	e028      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10d      	bne.n	80050b4 <HAL_UART_Receive+0xa4>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <HAL_UART_Receive+0x9a>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	22ff      	movs	r2, #255	@ 0xff
 80050a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050a8:	e01b      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	227f      	movs	r2, #127	@ 0x7f
 80050ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050b2:	e016      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050bc:	d10d      	bne.n	80050da <HAL_UART_Receive+0xca>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_UART_Receive+0xc0>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	227f      	movs	r2, #127	@ 0x7f
 80050ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050ce:	e008      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	223f      	movs	r2, #63	@ 0x3f
 80050d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050d8:	e003      	b.n	80050e2 <HAL_UART_Receive+0xd2>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050e8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	d108      	bne.n	8005106 <HAL_UART_Receive+0xf6>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e003      	b.n	800510e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800510e:	e036      	b.n	800517e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	2120      	movs	r1, #32
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fef4 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e032      	b.n	8005198 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10c      	bne.n	8005152 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	b29a      	uxth	r2, r3
 8005140:	8a7b      	ldrh	r3, [r7, #18]
 8005142:	4013      	ands	r3, r2
 8005144:	b29a      	uxth	r2, r3
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3302      	adds	r3, #2
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e00c      	b.n	800516c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	b2da      	uxtb	r2, r3
 800515a:	8a7b      	ldrh	r3, [r7, #18]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	4013      	ands	r3, r2
 8005160:	b2da      	uxtb	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1c2      	bne.n	8005110 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b092      	sub	sp, #72	@ 0x48
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	431a      	orrs	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4bbe      	ldr	r3, [pc, #760]	@ (80054c8 <UART_SetConfig+0x328>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051d8:	430b      	orrs	r3, r1
 80051da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4ab3      	ldr	r2, [pc, #716]	@ (80054cc <UART_SetConfig+0x32c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005208:	4313      	orrs	r3, r2
 800520a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	4baf      	ldr	r3, [pc, #700]	@ (80054d0 <UART_SetConfig+0x330>)
 8005214:	4013      	ands	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800521c:	430b      	orrs	r3, r1
 800521e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	f023 010f 	bic.w	r1, r3, #15
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4aa6      	ldr	r2, [pc, #664]	@ (80054d4 <UART_SetConfig+0x334>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d177      	bne.n	8005330 <UART_SetConfig+0x190>
 8005240:	4ba5      	ldr	r3, [pc, #660]	@ (80054d8 <UART_SetConfig+0x338>)
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005248:	2b28      	cmp	r3, #40	@ 0x28
 800524a:	d86d      	bhi.n	8005328 <UART_SetConfig+0x188>
 800524c:	a201      	add	r2, pc, #4	@ (adr r2, 8005254 <UART_SetConfig+0xb4>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	080052f9 	.word	0x080052f9
 8005258:	08005329 	.word	0x08005329
 800525c:	08005329 	.word	0x08005329
 8005260:	08005329 	.word	0x08005329
 8005264:	08005329 	.word	0x08005329
 8005268:	08005329 	.word	0x08005329
 800526c:	08005329 	.word	0x08005329
 8005270:	08005329 	.word	0x08005329
 8005274:	08005301 	.word	0x08005301
 8005278:	08005329 	.word	0x08005329
 800527c:	08005329 	.word	0x08005329
 8005280:	08005329 	.word	0x08005329
 8005284:	08005329 	.word	0x08005329
 8005288:	08005329 	.word	0x08005329
 800528c:	08005329 	.word	0x08005329
 8005290:	08005329 	.word	0x08005329
 8005294:	08005309 	.word	0x08005309
 8005298:	08005329 	.word	0x08005329
 800529c:	08005329 	.word	0x08005329
 80052a0:	08005329 	.word	0x08005329
 80052a4:	08005329 	.word	0x08005329
 80052a8:	08005329 	.word	0x08005329
 80052ac:	08005329 	.word	0x08005329
 80052b0:	08005329 	.word	0x08005329
 80052b4:	08005311 	.word	0x08005311
 80052b8:	08005329 	.word	0x08005329
 80052bc:	08005329 	.word	0x08005329
 80052c0:	08005329 	.word	0x08005329
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005329 	.word	0x08005329
 80052cc:	08005329 	.word	0x08005329
 80052d0:	08005329 	.word	0x08005329
 80052d4:	08005319 	.word	0x08005319
 80052d8:	08005329 	.word	0x08005329
 80052dc:	08005329 	.word	0x08005329
 80052e0:	08005329 	.word	0x08005329
 80052e4:	08005329 	.word	0x08005329
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005329 	.word	0x08005329
 80052f0:	08005329 	.word	0x08005329
 80052f4:	08005321 	.word	0x08005321
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fe:	e222      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005306:	e21e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e21a      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e216      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005318:	2320      	movs	r3, #32
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e212      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005320:	2340      	movs	r3, #64	@ 0x40
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e20e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e20a      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a69      	ldr	r2, [pc, #420]	@ (80054dc <UART_SetConfig+0x33c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d130      	bne.n	800539c <UART_SetConfig+0x1fc>
 800533a:	4b67      	ldr	r3, [pc, #412]	@ (80054d8 <UART_SetConfig+0x338>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b05      	cmp	r3, #5
 8005344:	d826      	bhi.n	8005394 <UART_SetConfig+0x1f4>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <UART_SetConfig+0x1ac>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005365 	.word	0x08005365
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005375 	.word	0x08005375
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536a:	e1ec      	b.n	8005746 <UART_SetConfig+0x5a6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005372:	e1e8      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e1e4      	b.n	8005746 <UART_SetConfig+0x5a6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e1e0      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005384:	2320      	movs	r3, #32
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e1dc      	b.n	8005746 <UART_SetConfig+0x5a6>
 800538c:	2340      	movs	r3, #64	@ 0x40
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e1d8      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e1d4      	b.n	8005746 <UART_SetConfig+0x5a6>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4f      	ldr	r2, [pc, #316]	@ (80054e0 <UART_SetConfig+0x340>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d130      	bne.n	8005408 <UART_SetConfig+0x268>
 80053a6:	4b4c      	ldr	r3, [pc, #304]	@ (80054d8 <UART_SetConfig+0x338>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d826      	bhi.n	8005400 <UART_SetConfig+0x260>
 80053b2:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <UART_SetConfig+0x218>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e1b6      	b.n	8005746 <UART_SetConfig+0x5a6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053de:	e1b2      	b.n	8005746 <UART_SetConfig+0x5a6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e6:	e1ae      	b.n	8005746 <UART_SetConfig+0x5a6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ee:	e1aa      	b.n	8005746 <UART_SetConfig+0x5a6>
 80053f0:	2320      	movs	r3, #32
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e1a6      	b.n	8005746 <UART_SetConfig+0x5a6>
 80053f8:	2340      	movs	r3, #64	@ 0x40
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e1a2      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e19e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a35      	ldr	r2, [pc, #212]	@ (80054e4 <UART_SetConfig+0x344>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d130      	bne.n	8005474 <UART_SetConfig+0x2d4>
 8005412:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <UART_SetConfig+0x338>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b05      	cmp	r3, #5
 800541c:	d826      	bhi.n	800546c <UART_SetConfig+0x2cc>
 800541e:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x284>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005442:	e180      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544a:	e17c      	b.n	8005746 <UART_SetConfig+0x5a6>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e178      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e174      	b.n	8005746 <UART_SetConfig+0x5a6>
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e170      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005464:	2340      	movs	r3, #64	@ 0x40
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e16c      	b.n	8005746 <UART_SetConfig+0x5a6>
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e168      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <UART_SetConfig+0x348>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d142      	bne.n	8005504 <UART_SetConfig+0x364>
 800547e:	4b16      	ldr	r3, [pc, #88]	@ (80054d8 <UART_SetConfig+0x338>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b05      	cmp	r3, #5
 8005488:	d838      	bhi.n	80054fc <UART_SetConfig+0x35c>
 800548a:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <UART_SetConfig+0x2f0>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054b1 	.word	0x080054b1
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	080054f5 	.word	0x080054f5
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e14a      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e146      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e142      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e13e      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054c8:	cfff69f3 	.word	0xcfff69f3
 80054cc:	58000c00 	.word	0x58000c00
 80054d0:	11fff4ff 	.word	0x11fff4ff
 80054d4:	40011000 	.word	0x40011000
 80054d8:	58024400 	.word	0x58024400
 80054dc:	40004400 	.word	0x40004400
 80054e0:	40004800 	.word	0x40004800
 80054e4:	40004c00 	.word	0x40004c00
 80054e8:	40005000 	.word	0x40005000
 80054ec:	2320      	movs	r3, #32
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e128      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e124      	b.n	8005746 <UART_SetConfig+0x5a6>
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e120      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4acb      	ldr	r2, [pc, #812]	@ (8005838 <UART_SetConfig+0x698>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d176      	bne.n	80055fc <UART_SetConfig+0x45c>
 800550e:	4bcb      	ldr	r3, [pc, #812]	@ (800583c <UART_SetConfig+0x69c>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005516:	2b28      	cmp	r3, #40	@ 0x28
 8005518:	d86c      	bhi.n	80055f4 <UART_SetConfig+0x454>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <UART_SetConfig+0x380>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	080055c5 	.word	0x080055c5
 8005524:	080055f5 	.word	0x080055f5
 8005528:	080055f5 	.word	0x080055f5
 800552c:	080055f5 	.word	0x080055f5
 8005530:	080055f5 	.word	0x080055f5
 8005534:	080055f5 	.word	0x080055f5
 8005538:	080055f5 	.word	0x080055f5
 800553c:	080055f5 	.word	0x080055f5
 8005540:	080055cd 	.word	0x080055cd
 8005544:	080055f5 	.word	0x080055f5
 8005548:	080055f5 	.word	0x080055f5
 800554c:	080055f5 	.word	0x080055f5
 8005550:	080055f5 	.word	0x080055f5
 8005554:	080055f5 	.word	0x080055f5
 8005558:	080055f5 	.word	0x080055f5
 800555c:	080055f5 	.word	0x080055f5
 8005560:	080055d5 	.word	0x080055d5
 8005564:	080055f5 	.word	0x080055f5
 8005568:	080055f5 	.word	0x080055f5
 800556c:	080055f5 	.word	0x080055f5
 8005570:	080055f5 	.word	0x080055f5
 8005574:	080055f5 	.word	0x080055f5
 8005578:	080055f5 	.word	0x080055f5
 800557c:	080055f5 	.word	0x080055f5
 8005580:	080055dd 	.word	0x080055dd
 8005584:	080055f5 	.word	0x080055f5
 8005588:	080055f5 	.word	0x080055f5
 800558c:	080055f5 	.word	0x080055f5
 8005590:	080055f5 	.word	0x080055f5
 8005594:	080055f5 	.word	0x080055f5
 8005598:	080055f5 	.word	0x080055f5
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	080055e5 	.word	0x080055e5
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055f5 	.word	0x080055f5
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	080055f5 	.word	0x080055f5
 80055b8:	080055f5 	.word	0x080055f5
 80055bc:	080055f5 	.word	0x080055f5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	e0bc      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055cc:	2304      	movs	r3, #4
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d2:	e0b8      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055d4:	2308      	movs	r3, #8
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e0b4      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055dc:	2310      	movs	r3, #16
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e0b0      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055e4:	2320      	movs	r3, #32
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e0ac      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055ec:	2340      	movs	r3, #64	@ 0x40
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e0a8      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055f4:	2380      	movs	r3, #128	@ 0x80
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e0a4      	b.n	8005746 <UART_SetConfig+0x5a6>
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a8f      	ldr	r2, [pc, #572]	@ (8005840 <UART_SetConfig+0x6a0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d130      	bne.n	8005668 <UART_SetConfig+0x4c8>
 8005606:	4b8d      	ldr	r3, [pc, #564]	@ (800583c <UART_SetConfig+0x69c>)
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	2b05      	cmp	r3, #5
 8005610:	d826      	bhi.n	8005660 <UART_SetConfig+0x4c0>
 8005612:	a201      	add	r2, pc, #4	@ (adr r2, 8005618 <UART_SetConfig+0x478>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005631 	.word	0x08005631
 800561c:	08005639 	.word	0x08005639
 8005620:	08005641 	.word	0x08005641
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e086      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e082      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e07e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e07a      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005650:	2320      	movs	r3, #32
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e076      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005658:	2340      	movs	r3, #64	@ 0x40
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e072      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005660:	2380      	movs	r3, #128	@ 0x80
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e06e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a75      	ldr	r2, [pc, #468]	@ (8005844 <UART_SetConfig+0x6a4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d130      	bne.n	80056d4 <UART_SetConfig+0x534>
 8005672:	4b72      	ldr	r3, [pc, #456]	@ (800583c <UART_SetConfig+0x69c>)
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b05      	cmp	r3, #5
 800567c:	d826      	bhi.n	80056cc <UART_SetConfig+0x52c>
 800567e:	a201      	add	r2, pc, #4	@ (adr r2, 8005684 <UART_SetConfig+0x4e4>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	0800569d 	.word	0x0800569d
 8005688:	080056a5 	.word	0x080056a5
 800568c:	080056ad 	.word	0x080056ad
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e050      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e04c      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e048      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e044      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056bc:	2320      	movs	r3, #32
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c2:	e040      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056c4:	2340      	movs	r3, #64	@ 0x40
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e03c      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e038      	b.n	8005746 <UART_SetConfig+0x5a6>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a5b      	ldr	r2, [pc, #364]	@ (8005848 <UART_SetConfig+0x6a8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d130      	bne.n	8005740 <UART_SetConfig+0x5a0>
 80056de:	4b57      	ldr	r3, [pc, #348]	@ (800583c <UART_SetConfig+0x69c>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d826      	bhi.n	8005738 <UART_SetConfig+0x598>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <UART_SetConfig+0x550>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	2302      	movs	r3, #2
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e01a      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e016      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e012      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e00e      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e00a      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005730:	2340      	movs	r3, #64	@ 0x40
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e006      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005738:	2380      	movs	r3, #128	@ 0x80
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e002      	b.n	8005746 <UART_SetConfig+0x5a6>
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	@ (8005848 <UART_SetConfig+0x6a8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	f040 80f8 	bne.w	8005942 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005752:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005756:	2b20      	cmp	r3, #32
 8005758:	dc46      	bgt.n	80057e8 <UART_SetConfig+0x648>
 800575a:	2b02      	cmp	r3, #2
 800575c:	f2c0 8082 	blt.w	8005864 <UART_SetConfig+0x6c4>
 8005760:	3b02      	subs	r3, #2
 8005762:	2b1e      	cmp	r3, #30
 8005764:	d87e      	bhi.n	8005864 <UART_SetConfig+0x6c4>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <UART_SetConfig+0x5cc>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	080057ef 	.word	0x080057ef
 8005770:	08005865 	.word	0x08005865
 8005774:	080057f7 	.word	0x080057f7
 8005778:	08005865 	.word	0x08005865
 800577c:	08005865 	.word	0x08005865
 8005780:	08005865 	.word	0x08005865
 8005784:	08005807 	.word	0x08005807
 8005788:	08005865 	.word	0x08005865
 800578c:	08005865 	.word	0x08005865
 8005790:	08005865 	.word	0x08005865
 8005794:	08005865 	.word	0x08005865
 8005798:	08005865 	.word	0x08005865
 800579c:	08005865 	.word	0x08005865
 80057a0:	08005865 	.word	0x08005865
 80057a4:	08005817 	.word	0x08005817
 80057a8:	08005865 	.word	0x08005865
 80057ac:	08005865 	.word	0x08005865
 80057b0:	08005865 	.word	0x08005865
 80057b4:	08005865 	.word	0x08005865
 80057b8:	08005865 	.word	0x08005865
 80057bc:	08005865 	.word	0x08005865
 80057c0:	08005865 	.word	0x08005865
 80057c4:	08005865 	.word	0x08005865
 80057c8:	08005865 	.word	0x08005865
 80057cc:	08005865 	.word	0x08005865
 80057d0:	08005865 	.word	0x08005865
 80057d4:	08005865 	.word	0x08005865
 80057d8:	08005865 	.word	0x08005865
 80057dc:	08005865 	.word	0x08005865
 80057e0:	08005865 	.word	0x08005865
 80057e4:	08005857 	.word	0x08005857
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d037      	beq.n	800585c <UART_SetConfig+0x6bc>
 80057ec:	e03a      	b.n	8005864 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057ee:	f7fe ff0f 	bl	8004610 <HAL_RCCEx_GetD3PCLK1Freq>
 80057f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057f4:	e03c      	b.n	8005870 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe ff1e 	bl	800463c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005804:	e034      	b.n	8005870 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005806:	f107 0318 	add.w	r3, r7, #24
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff f86a 	bl	80048e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005814:	e02c      	b.n	8005870 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <UART_SetConfig+0x69c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <UART_SetConfig+0x69c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	4a07      	ldr	r2, [pc, #28]	@ (800584c <UART_SetConfig+0x6ac>)
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005834:	e01c      	b.n	8005870 <UART_SetConfig+0x6d0>
 8005836:	bf00      	nop
 8005838:	40011400 	.word	0x40011400
 800583c:	58024400 	.word	0x58024400
 8005840:	40007800 	.word	0x40007800
 8005844:	40007c00 	.word	0x40007c00
 8005848:	58000c00 	.word	0x58000c00
 800584c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005850:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac8 <UART_SetConfig+0x928>)
 8005852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005854:	e00c      	b.n	8005870 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005856:	4b9d      	ldr	r3, [pc, #628]	@ (8005acc <UART_SetConfig+0x92c>)
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800585a:	e009      	b.n	8005870 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005862:	e005      	b.n	8005870 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800586e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 81de 	beq.w	8005c34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	4a94      	ldr	r2, [pc, #592]	@ (8005ad0 <UART_SetConfig+0x930>)
 800587e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005882:	461a      	mov	r2, r3
 8005884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005886:	fbb3 f3f2 	udiv	r3, r3, r2
 800588a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005898:	429a      	cmp	r2, r3
 800589a:	d305      	bcc.n	80058a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d903      	bls.n	80058b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058ae:	e1c1      	b.n	8005c34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b2:	2200      	movs	r2, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	60fa      	str	r2, [r7, #12]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	4a84      	ldr	r2, [pc, #528]	@ (8005ad0 <UART_SetConfig+0x930>)
 80058be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058d2:	f7fa fd01 	bl	80002d8 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4610      	mov	r0, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	020b      	lsls	r3, r1, #8
 80058e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ec:	0202      	lsls	r2, r0, #8
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	0849      	lsrs	r1, r1, #1
 80058f4:	2000      	movs	r0, #0
 80058f6:	460c      	mov	r4, r1
 80058f8:	4605      	mov	r5, r0
 80058fa:	eb12 0804 	adds.w	r8, r2, r4
 80058fe:	eb43 0905 	adc.w	r9, r3, r5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	469a      	mov	sl, r3
 800590a:	4693      	mov	fp, r2
 800590c:	4652      	mov	r2, sl
 800590e:	465b      	mov	r3, fp
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fa fce0 	bl	80002d8 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005926:	d308      	bcc.n	800593a <UART_SetConfig+0x79a>
 8005928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592e:	d204      	bcs.n	800593a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e17c      	b.n	8005c34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005940:	e178      	b.n	8005c34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800594a:	f040 80c5 	bne.w	8005ad8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800594e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005952:	2b20      	cmp	r3, #32
 8005954:	dc48      	bgt.n	80059e8 <UART_SetConfig+0x848>
 8005956:	2b00      	cmp	r3, #0
 8005958:	db7b      	blt.n	8005a52 <UART_SetConfig+0x8b2>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d879      	bhi.n	8005a52 <UART_SetConfig+0x8b2>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x7c4>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059ef 	.word	0x080059ef
 8005968:	080059f7 	.word	0x080059f7
 800596c:	08005a53 	.word	0x08005a53
 8005970:	08005a53 	.word	0x08005a53
 8005974:	080059ff 	.word	0x080059ff
 8005978:	08005a53 	.word	0x08005a53
 800597c:	08005a53 	.word	0x08005a53
 8005980:	08005a53 	.word	0x08005a53
 8005984:	08005a0f 	.word	0x08005a0f
 8005988:	08005a53 	.word	0x08005a53
 800598c:	08005a53 	.word	0x08005a53
 8005990:	08005a53 	.word	0x08005a53
 8005994:	08005a53 	.word	0x08005a53
 8005998:	08005a53 	.word	0x08005a53
 800599c:	08005a53 	.word	0x08005a53
 80059a0:	08005a53 	.word	0x08005a53
 80059a4:	08005a1f 	.word	0x08005a1f
 80059a8:	08005a53 	.word	0x08005a53
 80059ac:	08005a53 	.word	0x08005a53
 80059b0:	08005a53 	.word	0x08005a53
 80059b4:	08005a53 	.word	0x08005a53
 80059b8:	08005a53 	.word	0x08005a53
 80059bc:	08005a53 	.word	0x08005a53
 80059c0:	08005a53 	.word	0x08005a53
 80059c4:	08005a53 	.word	0x08005a53
 80059c8:	08005a53 	.word	0x08005a53
 80059cc:	08005a53 	.word	0x08005a53
 80059d0:	08005a53 	.word	0x08005a53
 80059d4:	08005a53 	.word	0x08005a53
 80059d8:	08005a53 	.word	0x08005a53
 80059dc:	08005a53 	.word	0x08005a53
 80059e0:	08005a53 	.word	0x08005a53
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	2b40      	cmp	r3, #64	@ 0x40
 80059ea:	d02e      	beq.n	8005a4a <UART_SetConfig+0x8aa>
 80059ec:	e031      	b.n	8005a52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ee:	f7fd fbd9 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80059f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059f4:	e033      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f6:	f7fd fbeb 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80059fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059fc:	e02f      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fe1a 	bl	800463c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0c:	e027      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a0e:	f107 0318 	add.w	r3, r7, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe ff66 	bl	80048e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1c:	e01f      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <UART_SetConfig+0x934>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad4 <UART_SetConfig+0x934>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	4a24      	ldr	r2, [pc, #144]	@ (8005ac8 <UART_SetConfig+0x928>)
 8005a36:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a3c:	e00f      	b.n	8005a5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <UART_SetConfig+0x928>)
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a42:	e00c      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a44:	4b21      	ldr	r3, [pc, #132]	@ (8005acc <UART_SetConfig+0x92c>)
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a48:	e009      	b.n	8005a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a50:	e005      	b.n	8005a5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80e7 	beq.w	8005c34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6a:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <UART_SetConfig+0x930>)
 8005a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a78:	005a      	lsls	r2, r3, #1
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	441a      	add	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	2b0f      	cmp	r3, #15
 8005a90:	d916      	bls.n	8005ac0 <UART_SetConfig+0x920>
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a98:	d212      	bcs.n	8005ac0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f023 030f 	bic.w	r3, r3, #15
 8005aa2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	e0b9      	b.n	8005c34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ac6:	e0b5      	b.n	8005c34 <UART_SetConfig+0xa94>
 8005ac8:	03d09000 	.word	0x03d09000
 8005acc:	003d0900 	.word	0x003d0900
 8005ad0:	08006948 	.word	0x08006948
 8005ad4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	dc49      	bgt.n	8005b74 <UART_SetConfig+0x9d4>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db7c      	blt.n	8005bde <UART_SetConfig+0xa3e>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d87a      	bhi.n	8005bde <UART_SetConfig+0xa3e>
 8005ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <UART_SetConfig+0x950>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b7b 	.word	0x08005b7b
 8005af4:	08005b83 	.word	0x08005b83
 8005af8:	08005bdf 	.word	0x08005bdf
 8005afc:	08005bdf 	.word	0x08005bdf
 8005b00:	08005b8b 	.word	0x08005b8b
 8005b04:	08005bdf 	.word	0x08005bdf
 8005b08:	08005bdf 	.word	0x08005bdf
 8005b0c:	08005bdf 	.word	0x08005bdf
 8005b10:	08005b9b 	.word	0x08005b9b
 8005b14:	08005bdf 	.word	0x08005bdf
 8005b18:	08005bdf 	.word	0x08005bdf
 8005b1c:	08005bdf 	.word	0x08005bdf
 8005b20:	08005bdf 	.word	0x08005bdf
 8005b24:	08005bdf 	.word	0x08005bdf
 8005b28:	08005bdf 	.word	0x08005bdf
 8005b2c:	08005bdf 	.word	0x08005bdf
 8005b30:	08005bab 	.word	0x08005bab
 8005b34:	08005bdf 	.word	0x08005bdf
 8005b38:	08005bdf 	.word	0x08005bdf
 8005b3c:	08005bdf 	.word	0x08005bdf
 8005b40:	08005bdf 	.word	0x08005bdf
 8005b44:	08005bdf 	.word	0x08005bdf
 8005b48:	08005bdf 	.word	0x08005bdf
 8005b4c:	08005bdf 	.word	0x08005bdf
 8005b50:	08005bdf 	.word	0x08005bdf
 8005b54:	08005bdf 	.word	0x08005bdf
 8005b58:	08005bdf 	.word	0x08005bdf
 8005b5c:	08005bdf 	.word	0x08005bdf
 8005b60:	08005bdf 	.word	0x08005bdf
 8005b64:	08005bdf 	.word	0x08005bdf
 8005b68:	08005bdf 	.word	0x08005bdf
 8005b6c:	08005bdf 	.word	0x08005bdf
 8005b70:	08005bd1 	.word	0x08005bd1
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d02e      	beq.n	8005bd6 <UART_SetConfig+0xa36>
 8005b78:	e031      	b.n	8005bde <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7a:	f7fd fb13 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8005b7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b80:	e033      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b82:	f7fd fb25 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8005b86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b88:	e02f      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fd54 	bl	800463c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b98:	e027      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b9a:	f107 0318 	add.w	r3, r7, #24
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fea0 	bl	80048e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba8:	e01f      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005baa:	4b2d      	ldr	r3, [pc, #180]	@ (8005c60 <UART_SetConfig+0xac0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <UART_SetConfig+0xac0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	08db      	lsrs	r3, r3, #3
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <UART_SetConfig+0xac4>)
 8005bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bc8:	e00f      	b.n	8005bea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bca:	4b26      	ldr	r3, [pc, #152]	@ (8005c64 <UART_SetConfig+0xac4>)
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bce:	e00c      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bd0:	4b25      	ldr	r3, [pc, #148]	@ (8005c68 <UART_SetConfig+0xac8>)
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd4:	e009      	b.n	8005bea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bdc:	e005      	b.n	8005bea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005be8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d021      	beq.n	8005c34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c6c <UART_SetConfig+0xacc>)
 8005bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	441a      	add	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d909      	bls.n	8005c2e <UART_SetConfig+0xa8e>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c20:	d205      	bcs.n	8005c2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	e002      	b.n	8005c34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3748      	adds	r7, #72	@ 0x48
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
 8005c64:	03d09000 	.word	0x03d09000
 8005c68:	003d0900 	.word	0x003d0900
 8005c6c:	08006948 	.word	0x08006948

08005c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6e:	d10a      	bne.n	8005d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b098      	sub	sp, #96	@ 0x60
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc4:	f7fb f988 	bl	80010d8 <HAL_GetTick>
 8005dc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d12f      	bne.n	8005e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f88e 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d022      	beq.n	8005e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e6      	bne.n	8005df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e063      	b.n	8005f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d149      	bne.n	8005eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f857 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d03c      	beq.n	8005eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb2:	61fa      	str	r2, [r7, #28]
 8005eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e012      	b.n	8005f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3758      	adds	r7, #88	@ 0x58
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f18:	e04f      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f20:	d04b      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f22:	f7fb f8d9 	bl	80010d8 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e04e      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d037      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b80      	cmp	r3, #128	@ 0x80
 8005f4e:	d034      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b40      	cmp	r3, #64	@ 0x40
 8005f54:	d031      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d110      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f839 	bl	8005fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2208      	movs	r2, #8
 8005f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e029      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f94:	d111      	bne.n	8005fba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f81f 	bl	8005fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e00f      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d0a0      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b095      	sub	sp, #84	@ 0x54
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	643b      	str	r3, [r7, #64]	@ 0x40
 800600c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	61fb      	str	r3, [r7, #28]
   return(result);
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	4b1e      	ldr	r3, [pc, #120]	@ (80060ac <UART_EndRxTransfer+0xc8>)
 8006032:	4013      	ands	r3, r2
 8006034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d118      	bne.n	800608c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60bb      	str	r3, [r7, #8]
   return(result);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	613b      	str	r3, [r7, #16]
   return(result);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060a0:	bf00      	nop
 80060a2:	3754      	adds	r7, #84	@ 0x54
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	effffffe 	.word	0xeffffffe

080060b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e027      	b.n	8006116 <HAL_UARTEx_DisableFifoMode+0x66>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2224      	movs	r2, #36	@ 0x24
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006136:	2302      	movs	r3, #2
 8006138:	e02d      	b.n	8006196 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2224      	movs	r2, #36	@ 0x24
 8006146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f850 	bl	800621c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e02d      	b.n	8006212 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2224      	movs	r2, #36	@ 0x24
 80061c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f812 	bl	800621c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800623c:	e031      	b.n	80062a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800623e:	2310      	movs	r3, #16
 8006240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006242:	2310      	movs	r3, #16
 8006244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	0e5b      	lsrs	r3, r3, #25
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	0f5b      	lsrs	r3, r3, #29
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	7b3a      	ldrb	r2, [r7, #12]
 800626a:	4911      	ldr	r1, [pc, #68]	@ (80062b0 <UARTEx_SetNbDataToProcess+0x94>)
 800626c:	5c8a      	ldrb	r2, [r1, r2]
 800626e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006272:	7b3a      	ldrb	r2, [r7, #12]
 8006274:	490f      	ldr	r1, [pc, #60]	@ (80062b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006278:	fb93 f3f2 	sdiv	r3, r3, r2
 800627c:	b29a      	uxth	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	7b7a      	ldrb	r2, [r7, #13]
 8006288:	4909      	ldr	r1, [pc, #36]	@ (80062b0 <UARTEx_SetNbDataToProcess+0x94>)
 800628a:	5c8a      	ldrb	r2, [r1, r2]
 800628c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006290:	7b7a      	ldrb	r2, [r7, #13]
 8006292:	4908      	ldr	r1, [pc, #32]	@ (80062b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006296:	fb93 f3f2 	sdiv	r3, r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	08006960 	.word	0x08006960
 80062b4:	08006968 	.word	0x08006968

080062b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062b8:	b084      	sub	sp, #16
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	f107 001c 	add.w	r0, r7, #28
 80062c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d121      	bne.n	8006316 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006394 <USB_CoreInit+0xdc>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d105      	bne.n	800630a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 faaa 	bl	8006864 <USB_CoreReset>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	e01b      	b.n	800634e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa9e 	bl	8006864 <USB_CoreReset>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800632c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006340:	e005      	b.n	800634e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006346:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800634e:	7fbb      	ldrb	r3, [r7, #30]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d116      	bne.n	8006382 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <USB_CoreInit+0xe0>)
 8006364:	4313      	orrs	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f043 0206 	orr.w	r2, r3, #6
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800638e:	b004      	add	sp, #16
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	ffbdffbf 	.word	0xffbdffbf
 8006398:	03ee0000 	.word	0x03ee0000

0800639c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f023 0201 	bic.w	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d115      	bne.n	800640c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063ec:	200a      	movs	r0, #10
 80063ee:	f7fa fe7f 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	330a      	adds	r3, #10
 80063f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fa25 	bl	8006848 <USB_GetMode>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d01e      	beq.n	8006442 <USB_SetCurrentMode+0x84>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2bc7      	cmp	r3, #199	@ 0xc7
 8006408:	d9f0      	bls.n	80063ec <USB_SetCurrentMode+0x2e>
 800640a:	e01a      	b.n	8006442 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d115      	bne.n	800643e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800641e:	200a      	movs	r0, #10
 8006420:	f7fa fe66 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	330a      	adds	r3, #10
 8006428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fa0c 	bl	8006848 <USB_GetMode>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <USB_SetCurrentMode+0x84>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2bc7      	cmp	r3, #199	@ 0xc7
 800643a:	d9f0      	bls.n	800641e <USB_SetCurrentMode+0x60>
 800643c:	e001      	b.n	8006442 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e005      	b.n	800644e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2bc8      	cmp	r3, #200	@ 0xc8
 8006446:	d101      	bne.n	800644c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006458:	b084      	sub	sp, #16
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e009      	b.n	800648c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3340      	adds	r3, #64	@ 0x40
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3301      	adds	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0e      	cmp	r3, #14
 8006490:	d9f2      	bls.n	8006478 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006492:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11c      	bne.n	80064d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064a8:	f043 0302 	orr.w	r3, r3, #2
 80064ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e005      	b.n	80064e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10d      	bne.n	8006510 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f968 	bl	80067d4 <USB_SetDevSpeed>
 8006504:	e008      	b.n	8006518 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006506:	2101      	movs	r1, #1
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f963 	bl	80067d4 <USB_SetDevSpeed>
 800650e:	e003      	b.n	8006518 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006510:	2103      	movs	r1, #3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f95e 	bl	80067d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006518:	2110      	movs	r1, #16
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8fa 	bl	8006714 <USB_FlushTxFifo>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f924 	bl	8006778 <USB_FlushRxFifo>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006558:	461a      	mov	r2, r3
 800655a:	2300      	movs	r3, #0
 800655c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	e043      	b.n	80065ec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800657a:	d118      	bne.n	80065ae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	461a      	mov	r2, r3
 8006590:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e013      	b.n	80065c0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	461a      	mov	r2, r3
 80065a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e008      	b.n	80065c0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ba:	461a      	mov	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065cc:	461a      	mov	r2, r3
 80065ce:	2300      	movs	r3, #0
 80065d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065de:	461a      	mov	r2, r3
 80065e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065f0:	461a      	mov	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d3b5      	bcc.n	8006564 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	e043      	b.n	8006686 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006614:	d118      	bne.n	8006648 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006628:	461a      	mov	r2, r3
 800662a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	e013      	b.n	800665a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e008      	b.n	800665a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	461a      	mov	r2, r3
 800667a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800667e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3301      	adds	r3, #1
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800668a:	461a      	mov	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4293      	cmp	r3, r2
 8006690:	d3b5      	bcc.n	80065fe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f043 0210 	orr.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <USB_DevInit+0x2b4>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f043 0208 	orr.w	r2, r3, #8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <USB_DevInit+0x2b8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006708:	b004      	add	sp, #16
 800670a:	4770      	bx	lr
 800670c:	803c3800 	.word	0x803c3800
 8006710:	40000004 	.word	0x40000004

08006714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800672e:	d901      	bls.n	8006734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e01b      	b.n	800676c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	daf2      	bge.n	8006722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	019b      	lsls	r3, r3, #6
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006758:	d901      	bls.n	800675e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d0f0      	beq.n	800674c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006790:	d901      	bls.n	8006796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e018      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	daf2      	bge.n	8006784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2210      	movs	r2, #16
 80067a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b4:	d901      	bls.n	80067ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e006      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d0f0      	beq.n	80067a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 0301 	and.w	r3, r3, #1
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800687c:	d901      	bls.n	8006882 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e01b      	b.n	80068ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	daf2      	bge.n	8006870 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f043 0201 	orr.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a6:	d901      	bls.n	80068ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e006      	b.n	80068ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d0f0      	beq.n	800689a <USB_CoreReset+0x36>

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <memset>:
 80068c6:	4402      	add	r2, r0
 80068c8:	4603      	mov	r3, r0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d100      	bne.n	80068d0 <memset+0xa>
 80068ce:	4770      	bx	lr
 80068d0:	f803 1b01 	strb.w	r1, [r3], #1
 80068d4:	e7f9      	b.n	80068ca <memset+0x4>
	...

080068d8 <__libc_init_array>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4d0d      	ldr	r5, [pc, #52]	@ (8006910 <__libc_init_array+0x38>)
 80068dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006914 <__libc_init_array+0x3c>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	2600      	movs	r6, #0
 80068e4:	42a6      	cmp	r6, r4
 80068e6:	d109      	bne.n	80068fc <__libc_init_array+0x24>
 80068e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006918 <__libc_init_array+0x40>)
 80068ea:	4c0c      	ldr	r4, [pc, #48]	@ (800691c <__libc_init_array+0x44>)
 80068ec:	f000 f818 	bl	8006920 <_init>
 80068f0:	1b64      	subs	r4, r4, r5
 80068f2:	10a4      	asrs	r4, r4, #2
 80068f4:	2600      	movs	r6, #0
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	d105      	bne.n	8006906 <__libc_init_array+0x2e>
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006900:	4798      	blx	r3
 8006902:	3601      	adds	r6, #1
 8006904:	e7ee      	b.n	80068e4 <__libc_init_array+0xc>
 8006906:	f855 3b04 	ldr.w	r3, [r5], #4
 800690a:	4798      	blx	r3
 800690c:	3601      	adds	r6, #1
 800690e:	e7f2      	b.n	80068f6 <__libc_init_array+0x1e>
 8006910:	08006978 	.word	0x08006978
 8006914:	08006978 	.word	0x08006978
 8006918:	08006978 	.word	0x08006978
 800691c:	0800697c 	.word	0x0800697c

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
