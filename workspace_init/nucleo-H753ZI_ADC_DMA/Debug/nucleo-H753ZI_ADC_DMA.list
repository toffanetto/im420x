
nucleo-H753ZI_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbc0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800de60  0800de60  0000ee60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df28  0800df28  0000ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df30  0800df30  0000ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800df34  0800df34  0000ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800df38  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00065784  24000064  0800df9c  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240657e8  0800df9c  0000f7e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cab7  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056b4  00000000  00000000  0003bb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e0  00000000  00000000  00041200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001970  00000000  00000000  000432e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dff1  00000000  00000000  00044c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b5cf  00000000  00000000  00082c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018651d  00000000  00000000  000ae210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023472d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f78  00000000  00000000  00234770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0023d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800de48 	.word	0x0800de48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800de48 	.word	0x0800de48

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80005f6:	4a38      	ldr	r2, [pc, #224]	@ (80006d8 <MX_ADC1_Init+0x108>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005fa:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80005fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000602:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000608:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800060a:	2201      	movs	r2, #1
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000610:	2204      	movs	r2, #4
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000616:	2200      	movs	r2, #0
 8000618:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061a:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800061c:	2200      	movs	r2, #0
 800061e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000622:	2202      	movs	r2, #2
 8000624:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000654:	f001 fa68 	bl	8001b28 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065e:	f000 fd19 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4819      	ldr	r0, [pc, #100]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800066e:	f002 fa8b 	bl	8002b88 <HAL_ADCEx_MultiModeConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000678:	f000 fd0c 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC1_Init+0x10c>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2306      	movs	r3, #6
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000688:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068e:	2304      	movs	r3, #4
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80006a0:	f001 fcc6 	bl	8002030 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fcf3 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_ADC1_Init+0x110>)
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b2:	230c      	movs	r3, #12
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80006bc:	f001 fcb8 	bl	8002030 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006c6:	f000 fce5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	24000080 	.word	0x24000080
 80006d8:	40022000 	.word	0x40022000
 80006dc:	08600004 	.word	0x08600004
 80006e0:	19200040 	.word	0x19200040

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0ba      	sub	sp, #232	@ 0xe8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22c0      	movs	r2, #192	@ 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00d fab7 	bl	800dc78 <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a45      	ldr	r2, [pc, #276]	@ (8000824 <HAL_ADC_MspInit+0x140>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f040 8083 	bne.w	800081c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000716:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000726:	2312      	movs	r3, #18
 8000728:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000736:	23c0      	movs	r3, #192	@ 0xc0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800073a:	2320      	movs	r3, #32
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 800073e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f834 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800075a:	f000 fc9b 	bl	8001094 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000782:	4a29      	ldr	r2, [pc, #164]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800079a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481d      	ldr	r0, [pc, #116]	@ (800082c <HAL_ADC_MspInit+0x148>)
 80007b6:	f004 fc7d 	bl	80050b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <HAL_ADC_MspInit+0x150>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000802:	f002 fb7f 	bl	8002f04 <HAL_DMA_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800080c:	f000 fc42 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000814:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000816:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	37e8      	adds	r7, #232	@ 0xe8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40022000 	.word	0x40022000
 8000828:	58024400 	.word	0x58024400
 800082c:	58021400 	.word	0x58021400
 8000830:	240000e4 	.word	0x240000e4
 8000834:	40020010 	.word	0x40020010

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2105      	movs	r1, #5
 8000860:	200b      	movs	r0, #11
 8000862:	f002 fb27 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000866:	200b      	movs	r0, #11
 8000868:	f002 fb3e 	bl	8002ee8 <HAL_NVIC_EnableIRQ>

}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400

08000878 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]

  for(;;)
  {
    printf_("| StackOverflow detected!!!");
 8000882:	4802      	ldr	r0, [pc, #8]	@ (800088c <vApplicationStackOverflowHook+0x14>)
 8000884:	f000 fb48 	bl	8000f18 <printf_>
 8000888:	e7fb      	b.n	8000882 <vApplicationStackOverflowHook+0xa>
 800088a:	bf00      	nop
 800088c:	0800de6c 	.word	0x0800de6c

08000890 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  for(;;)
  {
	printf_("| HeapOverflow detected!!!");
 8000894:	4801      	ldr	r0, [pc, #4]	@ (800089c <vApplicationMallocFailedHook+0xc>)
 8000896:	f000 fb3f 	bl	8000f18 <printf_>
 800089a:	e7fb      	b.n	8000894 <vApplicationMallocFailedHook+0x4>
 800089c:	0800de88 	.word	0x0800de88

080008a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  HAL_ADC_Start_DMA(&hadc1, ucADC1Buffer, 2);
 80008a4:	2202      	movs	r2, #2
 80008a6:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <MX_FREERTOS_Init+0x24>)
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_FREERTOS_Init+0x28>)
 80008aa:	f001 fadf 	bl	8001e6c <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008ae:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <MX_FREERTOS_Init+0x2c>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_FREERTOS_Init+0x30>)
 80008b4:	f00a fc4e 	bl	800b154 <osThreadNew>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <MX_FREERTOS_Init+0x34>)
 80008bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2400015c 	.word	0x2400015c
 80008c8:	24000080 	.word	0x24000080
 80008cc:	0800dec4 	.word	0x0800dec4
 80008d0:	080008d9 	.word	0x080008d9
 80008d4:	24000164 	.word	0x24000164

080008d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	ucADC1Channel2 = ucADC1Buffer[0];
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <StartDefaultTask+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	617b      	str	r3, [r7, #20]
	ucADC1Channel6 = ucADC1Buffer[1];
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <StartDefaultTask+0x2c>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	613b      	str	r3, [r7, #16]
	unsigned int temp = HAL_GPIO_ReadPin(JoySW_GPIO_Port, JoySW_Pin);
 80008ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <StartDefaultTask+0x30>)
 80008f2:	f004 fd8f 	bl	8005414 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	60fb      	str	r3, [r7, #12]
    osDelay(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f00a fcbc 	bl	800b278 <osDelay>
  {
 8000900:	bf00      	nop
 8000902:	e7ed      	b.n	80008e0 <StartDefaultTask+0x8>
 8000904:	2400015c 	.word	0x2400015c
 8000908:	58021400 	.word	0x58021400

0800090c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b91      	ldr	r3, [pc, #580]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a8f      	ldr	r2, [pc, #572]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b8d      	ldr	r3, [pc, #564]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000940:	4b89      	ldr	r3, [pc, #548]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a88      	ldr	r2, [pc, #544]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b85      	ldr	r3, [pc, #532]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b82      	ldr	r3, [pc, #520]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a80      	ldr	r2, [pc, #512]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b7e      	ldr	r3, [pc, #504]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a79      	ldr	r2, [pc, #484]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b76      	ldr	r3, [pc, #472]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4b73      	ldr	r3, [pc, #460]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	4a71      	ldr	r2, [pc, #452]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009a2:	f043 0320 	orr.w	r3, r3, #32
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009aa:	4b6f      	ldr	r3, [pc, #444]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	f003 0320 	and.w	r3, r3, #32
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	4a6a      	ldr	r2, [pc, #424]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c8:	4b67      	ldr	r3, [pc, #412]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b64      	ldr	r3, [pc, #400]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a62      	ldr	r2, [pc, #392]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b60      	ldr	r3, [pc, #384]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	4a5b      	ldr	r2, [pc, #364]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a04:	4b58      	ldr	r3, [pc, #352]	@ (8000b68 <MX_GPIO_Init+0x25c>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a18:	4854      	ldr	r0, [pc, #336]	@ (8000b6c <MX_GPIO_Init+0x260>)
 8000a1a:	f004 fd13 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4852      	ldr	r0, [pc, #328]	@ (8000b70 <MX_GPIO_Init+0x264>)
 8000a26:	f004 fd0d 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4851      	ldr	r0, [pc, #324]	@ (8000b74 <MX_GPIO_Init+0x268>)
 8000a30:	f004 fd08 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	484b      	ldr	r0, [pc, #300]	@ (8000b78 <MX_GPIO_Init+0x26c>)
 8000a4a:	f004 fb33 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a4e:	2332      	movs	r3, #50	@ 0x32
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	4843      	ldr	r0, [pc, #268]	@ (8000b78 <MX_GPIO_Init+0x26c>)
 8000a6a:	f004 fb23 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a6e:	2386      	movs	r3, #134	@ 0x86
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7e:	230b      	movs	r3, #11
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	483c      	ldr	r0, [pc, #240]	@ (8000b7c <MX_GPIO_Init+0x270>)
 8000a8a:	f004 fb13 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a8e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4831      	ldr	r0, [pc, #196]	@ (8000b6c <MX_GPIO_Init+0x260>)
 8000aa8:	f004 fb04 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <MX_GPIO_Init+0x274>)
 8000ac2:	f004 faf7 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x260>)
 8000ae4:	f004 fae6 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	@ (8000b70 <MX_GPIO_Init+0x264>)
 8000b02:	f004 fad7 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <MX_GPIO_Init+0x278>)
 8000b1c:	f004 faca 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <MX_GPIO_Init+0x278>)
 8000b3e:	f004 fab9 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2302      	movs	r3, #2
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <MX_GPIO_Init+0x268>)
 8000b5a:	f004 faab 	bl	80050b4 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	@ 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	58020400 	.word	0x58020400
 8000b70:	58020c00 	.word	0x58020c00
 8000b74:	58021000 	.word	0x58021000
 8000b78:	58020800 	.word	0x58020800
 8000b7c:	58020000 	.word	0x58020000
 8000b80:	58021400 	.word	0x58021400
 8000b84:	58021800 	.word	0x58021800

08000b88 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	if (str) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00a      	beq.n	8000bae <printchar_+0x26>
		**str = (char)c;
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000bac:	e005      	b.n	8000bba <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000bae:	4639      	mov	r1, r7
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <printchar_+0x3c>)
 8000bb6:	f008 fe1d 	bl	80097f4 <HAL_UART_Transmit>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	240001b4 	.word	0x240001b4

08000bc8 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000bd8:	2400      	movs	r4, #0
 8000bda:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dd17      	ble.n	8000c14 <prints_+0x4c>
		register int len = 0;
 8000be4:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000be6:	68be      	ldr	r6, [r7, #8]
 8000be8:	e001      	b.n	8000bee <prints_+0x26>
 8000bea:	3501      	adds	r5, #1
 8000bec:	3601      	adds	r6, #1
 8000bee:	7833      	ldrb	r3, [r6, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1fa      	bne.n	8000bea <prints_+0x22>
		if (len >= width) width = 0;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	429d      	cmp	r5, r3
 8000bf8:	db02      	blt.n	8000c00 <prints_+0x38>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	e002      	b.n	8000c06 <prints_+0x3e>
		else width -= len;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1b5b      	subs	r3, r3, r5
 8000c04:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <prints_+0x4c>
 8000c10:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <prints_+0x84>
		for ( ; width > 0; --width) {
 8000c1e:	e007      	b.n	8000c30 <prints_+0x68>
			printchar_(out, padchar);
 8000c20:	4641      	mov	r1, r8
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff ffb0 	bl	8000b88 <printchar_>
			++pc;
 8000c28:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	dcf4      	bgt.n	8000c20 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000c36:	e009      	b.n	8000c4c <prints_+0x84>
		printchar_(out, *string);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff ffa2 	bl	8000b88 <printchar_>
		++pc;
 8000c44:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f1      	bne.n	8000c38 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000c54:	e007      	b.n	8000c66 <prints_+0x9e>
		printchar_(out, padchar);
 8000c56:	4641      	mov	r1, r8
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff95 	bl	8000b88 <printchar_>
		++pc;
 8000c5e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dcf4      	bgt.n	8000c56 <prints_+0x8e>
	}

	return pc;
 8000c6c:	4623      	mov	r3, r4
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c78 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c7c:	b089      	sub	sp, #36	@ 0x24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000c88:	f04f 0900 	mov.w	r9, #0
 8000c8c:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000c8e:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10c      	bne.n	8000cb0 <printi_+0x38>
		print_buf[0] = '0';
 8000c96:	2330      	movs	r3, #48	@ 0x30
 8000c98:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000c9e:	f107 0114 	add.w	r1, r7, #20
 8000ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <prints_>
 8000cac:	4603      	mov	r3, r0
 8000cae:	e04a      	b.n	8000d46 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <printi_+0x54>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0a      	cmp	r3, #10
 8000cba:	d107      	bne.n	8000ccc <printi_+0x54>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da04      	bge.n	8000ccc <printi_+0x54>
		neg = 1;
 8000cc2:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	425b      	negs	r3, r3
 8000cca:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000ccc:	f107 0414 	add.w	r4, r7, #20
 8000cd0:	340b      	adds	r4, #11
	*s = '\0';
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000cd6:	e015      	b.n	8000d04 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	fbb5 f2f3 	udiv	r2, r5, r3
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	1aeb      	subs	r3, r5, r3
 8000ce4:	4698      	mov	r8, r3
		if( t >= 10 )
 8000ce6:	f1b8 0f09 	cmp.w	r8, #9
 8000cea:	dd02      	ble.n	8000cf2 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cee:	3b3a      	subs	r3, #58	@ 0x3a
 8000cf0:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000cf2:	fa5f f388 	uxtb.w	r3, r8
 8000cf6:	3c01      	subs	r4, #1
 8000cf8:	3330      	adds	r3, #48	@ 0x30
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d1e7      	bne.n	8000cd8 <printi_+0x60>
	}

	if (neg) {
 8000d08:	f1b9 0f00 	cmp.w	r9, #0
 8000d0c:	d013      	beq.n	8000d36 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00d      	beq.n	8000d30 <printi_+0xb8>
 8000d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <printi_+0xb8>
			printchar_(out, '-');
 8000d1e:	212d      	movs	r1, #45	@ 0x2d
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff ff31 	bl	8000b88 <printchar_>
			++pc;
 8000d26:	3601      	adds	r6, #1
			--width;
 8000d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d2e:	e002      	b.n	8000d36 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000d30:	3c01      	subs	r4, #1
 8000d32:	232d      	movs	r3, #45	@ 0x2d
 8000d34:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff ff43 	bl	8000bc8 <prints_>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4433      	add	r3, r6
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	@ 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d50 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d54:	b08a      	sub	sp, #40	@ 0x28
 8000d56:	af04      	add	r7, sp, #16
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000d5e:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000d60:	e0c4      	b.n	8000eec <print_+0x19c>
		if (*format == '%') {
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b25      	cmp	r3, #37	@ 0x25
 8000d68:	f040 80b3 	bne.w	8000ed2 <print_+0x182>
			++format;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000d72:	2600      	movs	r6, #0
 8000d74:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80bc 	beq.w	8000ef8 <print_+0x1a8>
			if (*format == '%') goto out;
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b25      	cmp	r3, #37	@ 0x25
 8000d86:	f000 80a6 	beq.w	8000ed6 <print_+0x186>
			if (*format == '-') {
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d90:	d109      	bne.n	8000da6 <print_+0x56>
				++format;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000d98:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000d9a:	e004      	b.n	8000da6 <print_+0x56>
				++format;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000da2:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b30      	cmp	r3, #48	@ 0x30
 8000dac:	d0f6      	beq.n	8000d9c <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000dae:	e00b      	b.n	8000dc8 <print_+0x78>
				width *= 10;
 8000db0:	462b      	mov	r3, r5
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	461d      	mov	r5, r3
				width += *format - '0';
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3b30      	subs	r3, #48	@ 0x30
 8000dc0:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dce:	d903      	bls.n	8000dd8 <print_+0x88>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b39      	cmp	r3, #57	@ 0x39
 8000dd6:	d9eb      	bls.n	8000db0 <print_+0x60>
			}
			if( *format == 's' ) {
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b73      	cmp	r3, #115	@ 0x73
 8000dde:	d112      	bne.n	8000e06 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1d1a      	adds	r2, r3, #4
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000dea:	f1b8 0f00 	cmp.w	r8, #0
 8000dee:	d001      	beq.n	8000df4 <print_+0xa4>
 8000df0:	4641      	mov	r1, r8
 8000df2:	e000      	b.n	8000df6 <print_+0xa6>
 8000df4:	4947      	ldr	r1, [pc, #284]	@ (8000f14 <print_+0x1c4>)
 8000df6:	4633      	mov	r3, r6
 8000df8:	462a      	mov	r2, r5
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fee4 	bl	8000bc8 <prints_>
 8000e00:	4603      	mov	r3, r0
 8000e02:	441c      	add	r4, r3
				continue;
 8000e04:	e06f      	b.n	8000ee6 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b64      	cmp	r3, #100	@ 0x64
 8000e0c:	d10f      	bne.n	8000e2e <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	1d1a      	adds	r2, r3, #4
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	6819      	ldr	r1, [r3, #0]
 8000e16:	2361      	movs	r3, #97	@ 0x61
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	9601      	str	r6, [sp, #4]
 8000e1c:	9500      	str	r5, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	220a      	movs	r2, #10
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff ff28 	bl	8000c78 <printi_>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	441c      	add	r4, r3
				continue;
 8000e2c:	e05b      	b.n	8000ee6 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b78      	cmp	r3, #120	@ 0x78
 8000e34:	d10f      	bne.n	8000e56 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	1d1a      	adds	r2, r3, #4
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	2361      	movs	r3, #97	@ 0x61
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	9601      	str	r6, [sp, #4]
 8000e44:	9500      	str	r5, [sp, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	2210      	movs	r2, #16
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff ff14 	bl	8000c78 <printi_>
 8000e50:	4603      	mov	r3, r0
 8000e52:	441c      	add	r4, r3
				continue;
 8000e54:	e047      	b.n	8000ee6 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b58      	cmp	r3, #88	@ 0x58
 8000e5c:	d10f      	bne.n	8000e7e <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1d1a      	adds	r2, r3, #4
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	2341      	movs	r3, #65	@ 0x41
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	9601      	str	r6, [sp, #4]
 8000e6c:	9500      	str	r5, [sp, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2210      	movs	r2, #16
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff ff00 	bl	8000c78 <printi_>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	441c      	add	r4, r3
				continue;
 8000e7c:	e033      	b.n	8000ee6 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b75      	cmp	r3, #117	@ 0x75
 8000e84:	d10f      	bne.n	8000ea6 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	2361      	movs	r3, #97	@ 0x61
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	9601      	str	r6, [sp, #4]
 8000e94:	9500      	str	r5, [sp, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	220a      	movs	r2, #10
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff feec 	bl	8000c78 <printi_>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	441c      	add	r4, r3
				continue;
 8000ea4:	e01f      	b.n	8000ee6 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b63      	cmp	r3, #99	@ 0x63
 8000eac:	d11b      	bne.n	8000ee6 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	1d1a      	adds	r2, r3, #4
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000eba:	2300      	movs	r3, #0
 8000ebc:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000ebe:	f107 0114 	add.w	r1, r7, #20
 8000ec2:	4633      	mov	r3, r6
 8000ec4:	462a      	mov	r2, r5
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff fe7e 	bl	8000bc8 <prints_>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	441c      	add	r4, r3
				continue;
 8000ed0:	e009      	b.n	8000ee6 <print_+0x196>
			}
		}
		else {
		out:
 8000ed2:	bf00      	nop
 8000ed4:	e000      	b.n	8000ed8 <print_+0x188>
			if (*format == '%') goto out;
 8000ed6:	bf00      	nop
			printchar_(out, *format);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff fe52 	bl	8000b88 <printchar_>
			++pc;
 8000ee4:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f af36 	bne.w	8000d62 <print_+0x12>
 8000ef6:	e000      	b.n	8000efa <print_+0x1aa>
			if (*format == '\0') break;
 8000ef8:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <print_+0x1b8>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000f08:	4623      	mov	r3, r4
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f14:	0800dea4 	.word	0x0800dea4

08000f18 <printf_>:

int printf_(const char *format, ...)
{
 8000f18:	b40f      	push	{r0, r1, r2, r3}
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ff10 	bl	8000d50 <print_>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4770      	bx	lr

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fb7c 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f812 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f7ff fcde 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f7ff fc72 	bl	8000838 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f54:	f000 f9e6 	bl	8001324 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f58:	f000 fa9a 	bl	8001490 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000f5c:	f7ff fb38 	bl	80005d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f60:	f00a f8ae 	bl	800b0c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f64:	f7ff fc9c 	bl	80008a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f68:	f00a f8ce 	bl	800b108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <main+0x2c>

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b09c      	sub	sp, #112	@ 0x70
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	224c      	movs	r2, #76	@ 0x4c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00c fe7a 	bl	800dc78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2220      	movs	r2, #32
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00c fe74 	bl	800dc78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f004 fba1 	bl	80056d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <SystemClock_Config+0xf8>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9e:	4a32      	ldr	r2, [pc, #200]	@ (8001068 <SystemClock_Config+0xf8>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fa6:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <SystemClock_Config+0xf8>)
 8000fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <SystemClock_Config+0xfc>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800106c <SystemClock_Config+0xfc>)
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <SystemClock_Config+0xfc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fcc:	bf00      	nop
 8000fce:	4b27      	ldr	r3, [pc, #156]	@ (800106c <SystemClock_Config+0xfc>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fda:	d1f8      	bne.n	8000fce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fe0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2340      	movs	r3, #64	@ 0x40
 8000fec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001002:	2303      	movs	r3, #3
 8001004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800100a:	230c      	movs	r3, #12
 800100c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800100e:	2302      	movs	r3, #2
 8001010:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001012:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001016:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fba5 	bl	800576c <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001028:	f000 f834 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	233f      	movs	r3, #63	@ 0x3f
 800102e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f004 ffe5 	bl	8006020 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800105c:	f000 f81a 	bl	8001094 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3770      	adds	r7, #112	@ 0x70
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58000400 	.word	0x58000400
 800106c:	58024800 	.word	0x58024800

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 fb19 	bl	80016b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40001000 	.word	0x40001000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_MspInit+0x38>)
 80010a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_MspInit+0x38>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_MspInit+0x38>)
 80010b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	210f      	movs	r1, #15
 80010c8:	f06f 0001 	mvn.w	r0, #1
 80010cc:	f001 fef2 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	@ 0x40
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	d827      	bhi.n	800113a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010ea:	2200      	movs	r2, #0
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	2036      	movs	r0, #54	@ 0x36
 80010f0:	f001 fee0 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f4:	2036      	movs	r0, #54	@ 0x36
 80010f6:	f001 fef7 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010fa:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <HAL_InitTick+0xc4>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <HAL_InitTick+0xc8>)
 8001102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001106:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <HAL_InitTick+0xc8>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_InitTick+0xc8>)
 8001112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111e:	f107 0210 	add.w	r2, r7, #16
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fb05 	bl	8006738 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800112e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <HAL_InitTick+0x6a>
 8001138:	e001      	b.n	800113e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e02b      	b.n	8001196 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800113e:	f005 facf 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8001142:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001144:	e004      	b.n	8001150 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001146:	f005 facb 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 800114a:	4603      	mov	r3, r0
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <HAL_InitTick+0xcc>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	0c9b      	lsrs	r3, r3, #18
 800115a:	3b01      	subs	r3, #1
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_InitTick+0xd0>)
 8001160:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <HAL_InitTick+0xd4>)
 8001162:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_InitTick+0xd0>)
 8001166:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800116a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800116c:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <HAL_InitTick+0xd0>)
 800116e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001170:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_InitTick+0xd0>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_InitTick+0xd0>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800117e:	480b      	ldr	r0, [pc, #44]	@ (80011ac <HAL_InitTick+0xd0>)
 8001180:	f008 f81a 	bl	80091b8 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800118a:	4808      	ldr	r0, [pc, #32]	@ (80011ac <HAL_InitTick+0xd0>)
 800118c:	f008 f876 	bl	800927c <HAL_TIM_Base_Start_IT>
 8001190:	4603      	mov	r3, r0
 8001192:	e000      	b.n	8001196 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
}
 8001196:	4618      	mov	r0, r3
 8001198:	3740      	adds	r7, #64	@ 0x40
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000008 	.word	0x24000008
 80011a4:	58024400 	.word	0x58024400
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	24000168 	.word	0x24000168
 80011b0:	40001000 	.word	0x40001000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <UsageFault_Handler+0x4>

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <DMA1_Stream0_IRQHandler+0x10>)
 80011f2:	f002 fc4d 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240000e4 	.word	0x240000e4

08001200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <TIM6_DAC_IRQHandler+0x10>)
 8001206:	f008 f8b1 	bl	800936c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	24000168 	.word	0x24000168

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <SystemInit+0xe4>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121e:	4a36      	ldr	r2, [pc, #216]	@ (80012f8 <SystemInit+0xe4>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001228:	4b34      	ldr	r3, [pc, #208]	@ (80012fc <SystemInit+0xe8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	2b06      	cmp	r3, #6
 8001232:	d807      	bhi.n	8001244 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001234:	4b31      	ldr	r3, [pc, #196]	@ (80012fc <SystemInit+0xe8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 030f 	bic.w	r3, r3, #15
 800123c:	4a2f      	ldr	r2, [pc, #188]	@ (80012fc <SystemInit+0xe8>)
 800123e:	f043 0307 	orr.w	r3, r3, #7
 8001242:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001244:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <SystemInit+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <SystemInit+0xec>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <SystemInit+0xec>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4929      	ldr	r1, [pc, #164]	@ (8001300 <SystemInit+0xec>)
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <SystemInit+0xf0>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <SystemInit+0xe8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <SystemInit+0xe8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 030f 	bic.w	r3, r3, #15
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <SystemInit+0xe8>)
 8001278:	f043 0307 	orr.w	r3, r3, #7
 800127c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <SystemInit+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <SystemInit+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <SystemInit+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <SystemInit+0xec>)
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <SystemInit+0xf4>)
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <SystemInit+0xec>)
 8001298:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <SystemInit+0xf8>)
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <SystemInit+0xec>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <SystemInit+0xfc>)
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <SystemInit+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <SystemInit+0xec>)
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <SystemInit+0xfc>)
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <SystemInit+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <SystemInit+0xec>)
 80012b6:	4a16      	ldr	r2, [pc, #88]	@ (8001310 <SystemInit+0xfc>)
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <SystemInit+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <SystemInit+0xec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <SystemInit+0xec>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <SystemInit+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <SystemInit+0x100>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <SystemInit+0x104>)
 80012d8:	4013      	ands	r3, r2
 80012da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012de:	d202      	bcs.n	80012e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <SystemInit+0x108>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <SystemInit+0x10c>)
 80012e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	52002000 	.word	0x52002000
 8001300:	58024400 	.word	0x58024400
 8001304:	eaf6ed7f 	.word	0xeaf6ed7f
 8001308:	02020200 	.word	0x02020200
 800130c:	01ff0000 	.word	0x01ff0000
 8001310:	01010280 	.word	0x01010280
 8001314:	5c001000 	.word	0x5c001000
 8001318:	ffff0000 	.word	0xffff0000
 800131c:	51008108 	.word	0x51008108
 8001320:	52004000 	.word	0x52004000

08001324 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <MX_USART3_UART_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 800136e:	f008 f9f1 	bl	8009754 <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001378:	f7ff fe8c 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001380:	f009 fa87 	bl	800a892 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800138a:	f7ff fe83 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 8001392:	f009 fabc 	bl	800a90e <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800139c:	f7ff fe7a 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_USART3_UART_Init+0x90>)
 80013a2:	f009 fa3d 	bl	800a820 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f7ff fe72 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	240001b4 	.word	0x240001b4
 80013b8:	40004800 	.word	0x40004800

080013bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ba      	sub	sp, #232	@ 0xe8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	@ 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00c fc4b 	bl	800dc78 <memset>
  if(uartHandle->Instance==USART3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_UART_MspInit+0xc8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d146      	bne.n	800147a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ec:	f04f 0202 	mov.w	r2, #2
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f005 f9da 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800140e:	f7ff fe41 	bl	8001094 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 8001414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 8001424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_UART_MspInit+0xcc>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800144e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001468:	2307      	movs	r3, #7
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <HAL_UART_MspInit+0xd0>)
 8001476:	f003 fe1d 	bl	80050b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	37e8      	adds	r7, #232	@ 0xe8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40004800 	.word	0x40004800
 8001488:	58024400 	.word	0x58024400
 800148c:	58020c00 	.word	0x58020c00

08001490 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001498:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800149c:	2209      	movs	r2, #9
 800149e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d8:	f003 ffcd 	bl	8005476 <HAL_PCD_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80014e2:	f7ff fdd7 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000248 	.word	0x24000248
 80014f0:	40080000 	.word	0x40080000

080014f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ba      	sub	sp, #232	@ 0xe8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	22c0      	movs	r2, #192	@ 0xc0
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f00c fbaf 	bl	800dc78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <HAL_PCD_MspInit+0xec>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d159      	bne.n	80015d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001524:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001530:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4618      	mov	r0, r3
 800153e:	f005 f93d 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001548:	f7ff fda4 	bl	8001094 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800154c:	f004 f8fe 	bl	800574c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800156e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001588:	230a      	movs	r3, #10
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001592:	4619      	mov	r1, r3
 8001594:	4814      	ldr	r0, [pc, #80]	@ (80015e8 <HAL_PCD_MspInit+0xf4>)
 8001596:	f003 fd8d 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <HAL_PCD_MspInit+0xf4>)
 80015b6:	f003 fd7d 	bl	80050b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 80015bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 80015c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_PCD_MspInit+0xf0>)
 80015cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015d8:	bf00      	nop
 80015da:	37e8      	adds	r7, #232	@ 0xe8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40080000 	.word	0x40080000
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58020000 	.word	0x58020000

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001624 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f0:	f7ff fe10 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f00c fb8b 	bl	800dd34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff fc8f 	bl	8000f40 <main>
  bx  lr
 8001622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001628:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800162c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001630:	0800df38 	.word	0x0800df38
  ldr r2, =_sbss
 8001634:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001638:	240657e8 	.word	0x240657e8

0800163c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC3_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f001 fc29 	bl	8002e9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800164c:	f004 fe9e 	bl	800638c <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4913      	ldr	r1, [pc, #76]	@ (80016ac <HAL_Init+0x6c>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_Init+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <HAL_Init+0x70>)
 8001682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_Init+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff fd26 	bl	80010dc <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e002      	b.n	80016a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800169a:	f7ff fd01 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	0800dee8 	.word	0x0800dee8
 80016b0:	24000004 	.word	0x24000004
 80016b4:	24000000 	.word	0x24000000

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2400000c 	.word	0x2400000c
 80016dc:	2400072c 	.word	0x2400072c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2400072c 	.word	0x2400072c

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2400000c 	.word	0x2400000c

08001740 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetREVID+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0c1b      	lsrs	r3, r3, #16
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	5c001000 	.word	0x5c001000

08001758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3360      	adds	r3, #96	@ 0x60
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	431a      	orrs	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	611a      	str	r2, [r3, #16]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3360      	adds	r3, #96	@ 0x60
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
  }
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800188e:	b480      	push	{r7}
 8001890:	b087      	sub	sp, #28
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3330      	adds	r3, #48	@ 0x30
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	211f      	movs	r1, #31
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0e9b      	lsrs	r3, r3, #26
 80018c6:	f003 011f 	and.w	r1, r3, #31
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f023 0203 	bic.w	r2, r3, #3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3314      	adds	r3, #20
 800191c:	461a      	mov	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	0e5b      	lsrs	r3, r3, #25
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0d1b      	lsrs	r3, r3, #20
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	2107      	movs	r1, #7
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	401a      	ands	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	0d1b      	lsrs	r3, r3, #20
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0318 	and.w	r3, r3, #24
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001988:	40d9      	lsrs	r1, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	400b      	ands	r3, r1
 800198e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001992:	431a      	orrs	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	000fffff 	.word	0x000fffff

080019ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6093      	str	r3, [r2, #8]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	5fffffc0 	.word	0x5fffffc0

080019ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	6fffffc0 	.word	0x6fffffc0

08001a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <LL_ADC_Enable+0x24>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	7fffffc0 	.word	0x7fffffc0

08001a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_IsEnabled+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_IsEnabled+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <LL_ADC_REG_StartConversion+0x24>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	7fffffc0 	.word	0x7fffffc0

08001adc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e18f      	b.n	8001e62 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fdc7 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff3f 	bl	80019ec <LL_ADC_IsDeepPowerDownEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff25 	bl	80019c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff5a 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d114      	bne.n	8001bb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff3e 	bl	8001a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b98:	4b87      	ldr	r3, [pc, #540]	@ (8001db8 <HAL_ADC_Init+0x290>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	4a87      	ldr	r2, [pc, #540]	@ (8001dbc <HAL_ADC_Init+0x294>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001baa:	e002      	b.n	8001bb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff3d 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff77 	bl	8001adc <LL_ADC_REG_IsConversionOngoing>
 8001bee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8129 	bne.w	8001e50 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8125 	bne.w	8001e50 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c0e:	f043 0202 	orr.w	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff36 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d136      	bne.n	8001c94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_ADC_Init+0x298>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d004      	beq.n	8001c3a <HAL_ADC_Init+0x112>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a63      	ldr	r2, [pc, #396]	@ (8001dc4 <HAL_ADC_Init+0x29c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_ADC_Init+0x130>
 8001c3a:	4861      	ldr	r0, [pc, #388]	@ (8001dc0 <HAL_ADC_Init+0x298>)
 8001c3c:	f7ff ff26 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c40:	4604      	mov	r4, r0
 8001c42:	4860      	ldr	r0, [pc, #384]	@ (8001dc4 <HAL_ADC_Init+0x29c>)
 8001c44:	f7ff ff22 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4323      	orrs	r3, r4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_ADC_Init+0x142>
 8001c58:	485b      	ldr	r0, [pc, #364]	@ (8001dc8 <HAL_ADC_Init+0x2a0>)
 8001c5a:	f7ff ff17 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a53      	ldr	r2, [pc, #332]	@ (8001dc0 <HAL_ADC_Init+0x298>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_Init+0x15a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a51      	ldr	r2, [pc, #324]	@ (8001dc4 <HAL_ADC_Init+0x29c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Init+0x15e>
 8001c82:	4a52      	ldr	r2, [pc, #328]	@ (8001dcc <HAL_ADC_Init+0x2a4>)
 8001c84:	e000      	b.n	8001c88 <HAL_ADC_Init+0x160>
 8001c86:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_ADC_Init+0x2a8>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f7ff fd62 	bl	8001758 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c94:	f7ff fd54 	bl	8001740 <HAL_GetREVID>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d914      	bls.n	8001ccc <HAL_ADC_Init+0x1a4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d110      	bne.n	8001ccc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7d5b      	ldrb	r3, [r3, #21]
 8001cae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cc4:	f043 030c 	orr.w	r3, r3, #12
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e00d      	b.n	8001ce8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7d5b      	ldrb	r3, [r3, #21]
 8001cd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cdc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7f1b      	ldrb	r3, [r3, #28]
 8001ce2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7f1b      	ldrb	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	045b      	lsls	r3, r3, #17
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_ADC_Init+0x2ac>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fed2 	bl	8001adc <LL_ADC_REG_IsConversionOngoing>
 8001d38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fedf 	bl	8001b02 <LL_ADC_INJ_IsConversionOngoing>
 8001d44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d15f      	bne.n	8001e0c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d15c      	bne.n	8001e0c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7d1b      	ldrb	r3, [r3, #20]
 8001d56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_ADC_Init+0x2b0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d130      	bne.n	8001de0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <HAL_ADC_Init+0x2b4>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0411      	lsls	r1, r2, #16
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001da6:	430a      	orrs	r2, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	e01c      	b.n	8001df0 <HAL_ADC_Init+0x2c8>
 8001db6:	bf00      	nop
 8001db8:	24000000 	.word	0x24000000
 8001dbc:	053e2d63 	.word	0x053e2d63
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40022100 	.word	0x40022100
 8001dc8:	58026000 	.word	0x58026000
 8001dcc:	40022300 	.word	0x40022300
 8001dd0:	58026300 	.word	0x58026300
 8001dd4:	fff0c003 	.word	0xfff0c003
 8001dd8:	ffffbffc 	.word	0xffffbffc
 8001ddc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fd8c 	bl	8002924 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10c      	bne.n	8001e2e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f023 010f 	bic.w	r1, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e2c:	e007      	b.n	8001e3e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 020f 	bic.w	r2, r2, #15
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e4e:	e007      	b.n	8001e60 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	f043 0210 	orr.w	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}
 8001e6a:	bf00      	nop

08001e6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a55      	ldr	r2, [pc, #340]	@ (8001fd4 <HAL_ADC_Start_DMA+0x168>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_Start_DMA+0x20>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a54      	ldr	r2, [pc, #336]	@ (8001fd8 <HAL_ADC_Start_DMA+0x16c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_Start_DMA+0x24>
 8001e8c:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <HAL_ADC_Start_DMA+0x170>)
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_Start_DMA+0x26>
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_ADC_Start_DMA+0x174>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fd8a 	bl	80019ac <LL_ADC_GetMultimode>
 8001e98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe1c 	bl	8001adc <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 808c 	bne.w	8001fc4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Start_DMA+0x4e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e087      	b.n	8001fca <HAL_ADC_Start_DMA+0x15e>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d002      	beq.n	8001ed4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b09      	cmp	r3, #9
 8001ed2:	d170      	bne.n	8001fb6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fc07 	bl	80026e8 <ADC_Enable>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d163      	bne.n	8001fac <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_ADC_Start_DMA+0x178>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a37      	ldr	r2, [pc, #220]	@ (8001fd8 <HAL_ADC_Start_DMA+0x16c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d002      	beq.n	8001f04 <HAL_ADC_Start_DMA+0x98>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_Start_DMA+0x9a>
 8001f04:	4b33      	ldr	r3, [pc, #204]	@ (8001fd4 <HAL_ADC_Start_DMA+0x168>)
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	f023 0206 	bic.w	r2, r3, #6
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f44:	4a28      	ldr	r2, [pc, #160]	@ (8001fe8 <HAL_ADC_Start_DMA+0x17c>)
 8001f46:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <HAL_ADC_Start_DMA+0x180>)
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <HAL_ADC_Start_DMA+0x184>)
 8001f56:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	221c      	movs	r2, #28
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0210 	orr.w	r2, r2, #16
 8001f76:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7ff fcaf 	bl	80018e6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3340      	adds	r3, #64	@ 0x40
 8001f92:	4619      	mov	r1, r3
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f001 fb10 	bl	80035bc <HAL_DMA_Start_IT>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fd85 	bl	8001ab4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001faa:	e00d      	b.n	8001fc8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001fb4:	e008      	b.n	8001fc8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fc2:	e001      	b.n	8001fc8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40022100 	.word	0x40022100
 8001fdc:	40022300 	.word	0x40022300
 8001fe0:	58026300 	.word	0x58026300
 8001fe4:	fffff0fe 	.word	0xfffff0fe
 8001fe8:	080027fd 	.word	0x080027fd
 8001fec:	080028d5 	.word	0x080028d5
 8001ff0:	080028f1 	.word	0x080028f1

08001ff4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b0a1      	sub	sp, #132	@ 0x84
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_ADC_ConfigChannel+0x1b0>)
 800204a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x2a>
 8002056:	2302      	movs	r3, #2
 8002058:	e32e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x688>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fd38 	bl	8001adc <LL_ADC_REG_IsConversionOngoing>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 8313 	bne.w	800269a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db2c      	blt.n	80020d6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <HAL_ADC_ConfigChannel+0x6a>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2201      	movs	r2, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	e016      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x98>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020aa:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80020b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	69d1      	ldr	r1, [r2, #28]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	430b      	orrs	r3, r1
 80020d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fbd3 	bl	800188e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fcf5 	bl	8001adc <LL_ADC_REG_IsConversionOngoing>
 80020f2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fd02 	bl	8001b02 <LL_ADC_INJ_IsConversionOngoing>
 80020fe:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80b8 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80b4 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	461a      	mov	r2, r3
 800211e:	f7ff fbf5 	bl	800190c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002122:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800212a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800212e:	d10b      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x118>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	e01d      	b.n	8002184 <HAL_ADC_ConfigChannel+0x154>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_ADC_ConfigChannel+0x13e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	e00a      	b.n	8002184 <HAL_ADC_ConfigChannel+0x154>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d02c      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800219c:	f7ff fb10 	bl	80017c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7e5b      	ldrb	r3, [r3, #25]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x186>
 80021b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x188>
 80021b6:	2300      	movs	r3, #0
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7ff fb3a 	bl	8001832 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7e1b      	ldrb	r3, [r3, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1a4>
 80021ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1a6>
 80021d4:	2300      	movs	r3, #0
 80021d6:	461a      	mov	r2, r3
 80021d8:	f7ff fb12 	bl	8001800 <LL_ADC_SetDataRightShift>
 80021dc:	e04c      	b.n	8002278 <HAL_ADC_ConfigChannel+0x248>
 80021de:	bf00      	nop
 80021e0:	47ff0000 	.word	0x47ff0000
 80021e4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800220a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800222e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002252:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	069b      	lsls	r3, r3, #26
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002276:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc05 	bl	8001a8c <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 8211 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fb64 	bl	8001964 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4aa1      	ldr	r2, [pc, #644]	@ (8002528 <HAL_ADC_ConfigChannel+0x4f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 812e 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x2a0>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e019      	b.n	8002304 <HAL_ADC_ConfigChannel+0x2d4>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80022ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	bf94      	ite	ls
 80022fe:	2301      	movls	r3, #1
 8002300:	2300      	movhi	r3, #0
 8002302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002304:	2b00      	cmp	r3, #0
 8002306:	d079      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x2f4>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	3301      	adds	r3, #1
 800231c:	069b      	lsls	r3, r3, #26
 800231e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002322:	e015      	b.n	8002350 <HAL_ADC_ConfigChannel+0x320>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002334:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x340>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	e017      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x370>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800237e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800238c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	ea42 0103 	orr.w	r1, r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x396>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	e018      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x3c8>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	e07e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x3e8>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002416:	e015      	b.n	8002444 <HAL_ADC_ConfigChannel+0x414>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800242a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x434>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	e017      	b.n	8002494 <HAL_ADC_ConfigChannel+0x464>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	61bb      	str	r3, [r7, #24]
  return result;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e003      	b.n	8002488 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x490>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	3b1e      	subs	r3, #30
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024be:	e01b      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x4c8>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	60fb      	str	r3, [r7, #12]
  return result;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	051b      	lsls	r3, r3, #20
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f8:	430b      	orrs	r3, r1
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	4619      	mov	r1, r3
 8002500:	f7ff fa04 	bl	800190c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f280 80cf 	bge.w	80026ac <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a06      	ldr	r2, [pc, #24]	@ (800252c <HAL_ADC_ConfigChannel+0x4fc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x4f2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <HAL_ADC_ConfigChannel+0x500>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x508>
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <HAL_ADC_ConfigChannel+0x504>)
 8002524:	e009      	b.n	800253a <HAL_ADC_ConfigChannel+0x50a>
 8002526:	bf00      	nop
 8002528:	47ff0000 	.word	0x47ff0000
 800252c:	40022000 	.word	0x40022000
 8002530:	40022100 	.word	0x40022100
 8002534:	40022300 	.word	0x40022300
 8002538:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <HAL_ADC_ConfigChannel+0x690>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f932 	bl	80017a4 <LL_ADC_GetCommonPathInternalCh>
 8002540:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5f      	ldr	r2, [pc, #380]	@ (80026c4 <HAL_ADC_ConfigChannel+0x694>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x526>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_ADC_ConfigChannel+0x698>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10e      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x544>
 8002556:	485b      	ldr	r0, [pc, #364]	@ (80026c4 <HAL_ADC_ConfigChannel+0x694>)
 8002558:	f7ff fa98 	bl	8001a8c <LL_ADC_IsEnabled>
 800255c:	4604      	mov	r4, r0
 800255e:	485a      	ldr	r0, [pc, #360]	@ (80026c8 <HAL_ADC_ConfigChannel+0x698>)
 8002560:	f7ff fa94 	bl	8001a8c <LL_ADC_IsEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	4323      	orrs	r3, r4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e008      	b.n	8002586 <HAL_ADC_ConfigChannel+0x556>
 8002574:	4855      	ldr	r0, [pc, #340]	@ (80026cc <HAL_ADC_ConfigChannel+0x69c>)
 8002576:	f7ff fa89 	bl	8001a8c <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07d      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a50      	ldr	r2, [pc, #320]	@ (80026d0 <HAL_ADC_ConfigChannel+0x6a0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d130      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x5c6>
 8002594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d12b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a4a      	ldr	r2, [pc, #296]	@ (80026cc <HAL_ADC_ConfigChannel+0x69c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f040 8081 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a45      	ldr	r2, [pc, #276]	@ (80026c4 <HAL_ADC_ConfigChannel+0x694>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_ADC_ConfigChannel+0x58e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <HAL_ADC_ConfigChannel+0x698>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x592>
 80025be:	4a45      	ldr	r2, [pc, #276]	@ (80026d4 <HAL_ADC_ConfigChannel+0x6a4>)
 80025c0:	e000      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x594>
 80025c2:	4a3f      	ldr	r2, [pc, #252]	@ (80026c0 <HAL_ADC_ConfigChannel+0x690>)
 80025c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7ff f8d6 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d2:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_ADC_ConfigChannel+0x6a8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	4a40      	ldr	r2, [pc, #256]	@ (80026dc <HAL_ADC_ConfigChannel+0x6ac>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	3301      	adds	r3, #1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025e6:	e002      	b.n	80025ee <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f9      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f4:	e05a      	b.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a39      	ldr	r2, [pc, #228]	@ (80026e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d11e      	bne.n	800263e <HAL_ADC_ConfigChannel+0x60e>
 8002600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2f      	ldr	r2, [pc, #188]	@ (80026cc <HAL_ADC_ConfigChannel+0x69c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d14b      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <HAL_ADC_ConfigChannel+0x694>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x5f8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a29      	ldr	r2, [pc, #164]	@ (80026c8 <HAL_ADC_ConfigChannel+0x698>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x5fc>
 8002628:	4a2a      	ldr	r2, [pc, #168]	@ (80026d4 <HAL_ADC_ConfigChannel+0x6a4>)
 800262a:	e000      	b.n	800262e <HAL_ADC_ConfigChannel+0x5fe>
 800262c:	4a24      	ldr	r2, [pc, #144]	@ (80026c0 <HAL_ADC_ConfigChannel+0x690>)
 800262e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7ff f8a1 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800263c:	e036      	b.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d131      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
 8002648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d12c      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_ADC_ConfigChannel+0x69c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d127      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_ADC_ConfigChannel+0x694>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x640>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <HAL_ADC_ConfigChannel+0x698>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x644>
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002672:	e000      	b.n	8002676 <HAL_ADC_ConfigChannel+0x646>
 8002674:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <HAL_ADC_ConfigChannel+0x690>)
 8002676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f7ff f87d 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
 8002684:	e012      	b.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002698:	e008      	b.n	80026ac <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3784      	adds	r7, #132	@ 0x84
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	58026300 	.word	0x58026300
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40022100 	.word	0x40022100
 80026cc:	58026000 	.word	0x58026000
 80026d0:	cb840000 	.word	0xcb840000
 80026d4:	40022300 	.word	0x40022300
 80026d8:	24000000 	.word	0x24000000
 80026dc:	053e2d63 	.word	0x053e2d63
 80026e0:	c7520000 	.word	0xc7520000
 80026e4:	cfb80000 	.word	0xcfb80000

080026e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f9c9 	bl	8001a8c <LL_ADC_IsEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d16e      	bne.n	80027de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	4b38      	ldr	r3, [pc, #224]	@ (80027e8 <ADC_Enable+0x100>)
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e05a      	b.n	80027e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f998 	bl	8001a64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002734:	f7fe ffd4 	bl	80016e0 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <ADC_Enable+0x104>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <ADC_Enable+0x66>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <ADC_Enable+0x108>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <ADC_Enable+0x6a>
 800274e:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <ADC_Enable+0x10c>)
 8002750:	e000      	b.n	8002754 <ADC_Enable+0x6c>
 8002752:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <ADC_Enable+0x110>)
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f929 	bl	80019ac <LL_ADC_GetMultimode>
 800275a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <ADC_Enable+0x108>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d002      	beq.n	800276c <ADC_Enable+0x84>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e000      	b.n	800276e <ADC_Enable+0x86>
 800276c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ec <ADC_Enable+0x104>)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d130      	bne.n	80027de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800277c:	e028      	b.n	80027d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f982 	bl	8001a8c <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f966 	bl	8001a64 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002798:	f7fe ffa2 	bl	80016e0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d914      	bls.n	80027d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d00d      	beq.n	80027d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d1cf      	bne.n	800277e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	8000003f 	.word	0x8000003f
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022100 	.word	0x40022100
 80027f4:	40022300 	.word	0x40022300
 80027f8:	58026300 	.word	0x58026300

080027fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002808:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d14b      	bne.n	80028ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f817 	bl	8001868 <LL_ADC_REG_IsTriggerSourceSWStart>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d032      	beq.n	80028a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12b      	bne.n	80028a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	@ 0x54
 8002872:	e018      	b.n	80028a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d111      	bne.n	80028a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fba4 	bl	8001ff4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ac:	e00e      	b.n	80028cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff fbae 	bl	800201c <HAL_ADC_ErrorCallback>
}
 80028c0:	e004      	b.n	80028cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff fb90 	bl	8002008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff fb80 	bl	800201c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7a      	ldr	r2, [pc, #488]	@ (8002b1c <ADC_ConfigureBoostMode+0x1f8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <ADC_ConfigureBoostMode+0x1c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a79      	ldr	r2, [pc, #484]	@ (8002b20 <ADC_ConfigureBoostMode+0x1fc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d109      	bne.n	8002954 <ADC_ConfigureBoostMode+0x30>
 8002940:	4b78      	ldr	r3, [pc, #480]	@ (8002b24 <ADC_ConfigureBoostMode+0x200>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e008      	b.n	8002966 <ADC_ConfigureBoostMode+0x42>
 8002954:	4b74      	ldr	r3, [pc, #464]	@ (8002b28 <ADC_ConfigureBoostMode+0x204>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800296a:	f003 fe89 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 800296e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002978:	d010      	beq.n	800299c <ADC_ConfigureBoostMode+0x78>
 800297a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800297e:	d873      	bhi.n	8002a68 <ADC_ConfigureBoostMode+0x144>
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002984:	d002      	beq.n	800298c <ADC_ConfigureBoostMode+0x68>
 8002986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800298a:	d16d      	bne.n	8002a68 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	60fb      	str	r3, [r7, #12]
        break;
 800299a:	e068      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
        break;
 80029a2:	e064      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f005 f910 	bl	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80029b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029ba:	d051      	beq.n	8002a60 <ADC_ConfigureBoostMode+0x13c>
 80029bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029c0:	d854      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029c2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029c6:	d047      	beq.n	8002a58 <ADC_ConfigureBoostMode+0x134>
 80029c8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029cc:	d84e      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029ce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029d2:	d03d      	beq.n	8002a50 <ADC_ConfigureBoostMode+0x12c>
 80029d4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029d8:	d848      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029de:	d033      	beq.n	8002a48 <ADC_ConfigureBoostMode+0x124>
 80029e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029e4:	d842      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029ea:	d029      	beq.n	8002a40 <ADC_ConfigureBoostMode+0x11c>
 80029ec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029f0:	d83c      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029f6:	d01a      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 80029f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029fc:	d836      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a02:	d014      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a04:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a08:	d830      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0e:	d00e      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a14:	d82a      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a1a:	d008      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a20:	d824      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a26:	d002      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a2c:	d11e      	bne.n	8002a6c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
        break;
 8002a3e:	e016      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
        break;
 8002a46:	e012      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	60fb      	str	r3, [r7, #12]
        break;
 8002a4e:	e00e      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	60fb      	str	r3, [r7, #12]
        break;
 8002a56:	e00a      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	09db      	lsrs	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
        break;
 8002a5e:	e006      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	60fb      	str	r3, [r7, #12]
        break;
 8002a66:	e002      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a68:	bf00      	nop
 8002a6a:	e000      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a6e:	f7fe fe67 	bl	8001740 <HAL_GetREVID>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d815      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b2c <ADC_ConfigureBoostMode+0x208>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d908      	bls.n	8002a96 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a94:	e03e      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	e035      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <ADC_ConfigureBoostMode+0x20c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d808      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	e025      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <ADC_ConfigureBoostMode+0x210>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d80a      	bhi.n	8002ae6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	e016      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	@ (8002b38 <ADC_ConfigureBoostMode+0x214>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d80a      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e007      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022100 	.word	0x40022100
 8002b24:	40022300 	.word	0x40022300
 8002b28:	58026300 	.word	0x58026300
 8002b2c:	01312d00 	.word	0x01312d00
 8002b30:	005f5e10 	.word	0x005f5e10
 8002b34:	00bebc20 	.word	0x00bebc20
 8002b38:	017d7840 	.word	0x017d7840

08002b3c <LL_ADC_IsEnabled>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <LL_ADC_IsEnabled+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_ADC_IsEnabled+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b09f      	sub	sp, #124	@ 0x7c
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0be      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5c      	ldr	r2, [pc, #368]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e001      	b.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e09d      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ffb9 	bl	8002b62 <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ffb3 	bl	8002b62 <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d17f      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d17c      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c1c:	4b45      	ldr	r3, [pc, #276]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c20:	4b45      	ldr	r3, [pc, #276]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c22:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a38      	ldr	r2, [pc, #224]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10e      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c52:	4836      	ldr	r0, [pc, #216]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c54:	f7ff ff72 	bl	8002b3c <LL_ADC_IsEnabled>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4835      	ldr	r0, [pc, #212]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c5c:	f7ff ff6e 	bl	8002b3c <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4323      	orrs	r3, r4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c70:	4832      	ldr	r0, [pc, #200]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c72:	f7ff ff63 	bl	8002b3c <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d047      	beq.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9e:	e03a      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002caa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1d      	ldr	r2, [pc, #116]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10e      	bne.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002cc0:	481a      	ldr	r0, [pc, #104]	@ (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cc2:	f7ff ff3b 	bl	8002b3c <LL_ADC_IsEnabled>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4819      	ldr	r0, [pc, #100]	@ (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cca:	f7ff ff37 	bl	8002b3c <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4323      	orrs	r3, r4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e008      	b.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cde:	4817      	ldr	r0, [pc, #92]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ce0:	f7ff ff2c 	bl	8002b3c <LL_ADC_IsEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cfe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d00:	e009      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d14:	e000      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	377c      	adds	r7, #124	@ 0x7c
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022100 	.word	0x40022100
 8002d34:	40022300 	.word	0x40022300
 8002d38:	58026300 	.word	0x58026300
 8002d3c:	58026000 	.word	0x58026000
 8002d40:	fffff0e0 	.word	0xfffff0e0

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <__NVIC_SetPriorityGrouping+0x40>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <__NVIC_SetPriorityGrouping+0x40>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00
 8002d88:	05fa0000 	.word	0x05fa0000

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	@ (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	@ (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	@ (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff4c 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec2:	f7ff ff63 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002ec6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	6978      	ldr	r0, [r7, #20]
 8002ece:	f7ff ffb3 	bl	8002e38 <NVIC_EncodePriority>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff82 	bl	8002de4 <__NVIC_SetPriority>
}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff56 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7fe fbe8 	bl	80016e0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e316      	b.n	800354a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a66      	ldr	r2, [pc, #408]	@ (80030bc <HAL_DMA_Init+0x1b8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d04a      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_DMA_Init+0x1bc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d045      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a63      	ldr	r2, [pc, #396]	@ (80030c4 <HAL_DMA_Init+0x1c0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d040      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a62      	ldr	r2, [pc, #392]	@ (80030c8 <HAL_DMA_Init+0x1c4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d03b      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a60      	ldr	r2, [pc, #384]	@ (80030cc <HAL_DMA_Init+0x1c8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d036      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5f      	ldr	r2, [pc, #380]	@ (80030d0 <HAL_DMA_Init+0x1cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d031      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80030d4 <HAL_DMA_Init+0x1d0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02c      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5c      	ldr	r2, [pc, #368]	@ (80030d8 <HAL_DMA_Init+0x1d4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d027      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5a      	ldr	r2, [pc, #360]	@ (80030dc <HAL_DMA_Init+0x1d8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	@ (80030e0 <HAL_DMA_Init+0x1dc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d01d      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <HAL_DMA_Init+0x1e0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_DMA_Init+0x1e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a54      	ldr	r2, [pc, #336]	@ (80030ec <HAL_DMA_Init+0x1e8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a53      	ldr	r2, [pc, #332]	@ (80030f0 <HAL_DMA_Init+0x1ec>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a51      	ldr	r2, [pc, #324]	@ (80030f4 <HAL_DMA_Init+0x1f0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_DMA_Init+0xb8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <HAL_DMA_Init+0x1f4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_DMA_Init+0xbc>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_DMA_Init+0xbe>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 813b 	beq.w	800323e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a37      	ldr	r2, [pc, #220]	@ (80030bc <HAL_DMA_Init+0x1b8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d04a      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a36      	ldr	r2, [pc, #216]	@ (80030c0 <HAL_DMA_Init+0x1bc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d045      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a34      	ldr	r2, [pc, #208]	@ (80030c4 <HAL_DMA_Init+0x1c0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d040      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a33      	ldr	r2, [pc, #204]	@ (80030c8 <HAL_DMA_Init+0x1c4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d03b      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a31      	ldr	r2, [pc, #196]	@ (80030cc <HAL_DMA_Init+0x1c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d036      	beq.n	8003078 <HAL_DMA_Init+0x174>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a30      	ldr	r2, [pc, #192]	@ (80030d0 <HAL_DMA_Init+0x1cc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d031      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2e      	ldr	r2, [pc, #184]	@ (80030d4 <HAL_DMA_Init+0x1d0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d02c      	beq.n	8003078 <HAL_DMA_Init+0x174>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2d      	ldr	r2, [pc, #180]	@ (80030d8 <HAL_DMA_Init+0x1d4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d027      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <HAL_DMA_Init+0x1d8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d022      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_DMA_Init+0x1dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d01d      	beq.n	8003078 <HAL_DMA_Init+0x174>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <HAL_DMA_Init+0x1e0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d018      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <HAL_DMA_Init+0x1e4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a25      	ldr	r2, [pc, #148]	@ (80030ec <HAL_DMA_Init+0x1e8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_DMA_Init+0x174>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a24      	ldr	r2, [pc, #144]	@ (80030f0 <HAL_DMA_Init+0x1ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_DMA_Init+0x174>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_DMA_Init+0x1f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_DMA_Init+0x174>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <HAL_DMA_Init+0x1f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <HAL_DMA_Init+0x186>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e007      	b.n	800309a <HAL_DMA_Init+0x196>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800309a:	e02f      	b.n	80030fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309c:	f7fe fb20 	bl	80016e0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d928      	bls.n	80030fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e246      	b.n	800354a <HAL_DMA_Init+0x646>
 80030bc:	40020010 	.word	0x40020010
 80030c0:	40020028 	.word	0x40020028
 80030c4:	40020040 	.word	0x40020040
 80030c8:	40020058 	.word	0x40020058
 80030cc:	40020070 	.word	0x40020070
 80030d0:	40020088 	.word	0x40020088
 80030d4:	400200a0 	.word	0x400200a0
 80030d8:	400200b8 	.word	0x400200b8
 80030dc:	40020410 	.word	0x40020410
 80030e0:	40020428 	.word	0x40020428
 80030e4:	40020440 	.word	0x40020440
 80030e8:	40020458 	.word	0x40020458
 80030ec:	40020470 	.word	0x40020470
 80030f0:	40020488 	.word	0x40020488
 80030f4:	400204a0 	.word	0x400204a0
 80030f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1c8      	bne.n	800309c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4b83      	ldr	r3, [pc, #524]	@ (8003324 <HAL_DMA_Init+0x420>)
 8003116:	4013      	ands	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003122:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	4313      	orrs	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003160:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <HAL_DMA_Init+0x424>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b71      	ldr	r3, [pc, #452]	@ (800332c <HAL_DMA_Init+0x428>)
 8003166:	4013      	ands	r3, r2
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316c:	d328      	bcc.n	80031c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b28      	cmp	r3, #40	@ 0x28
 8003174:	d903      	bls.n	800317e <HAL_DMA_Init+0x27a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b2e      	cmp	r3, #46	@ 0x2e
 800317c:	d917      	bls.n	80031ae <HAL_DMA_Init+0x2aa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b3e      	cmp	r3, #62	@ 0x3e
 8003184:	d903      	bls.n	800318e <HAL_DMA_Init+0x28a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b42      	cmp	r3, #66	@ 0x42
 800318c:	d90f      	bls.n	80031ae <HAL_DMA_Init+0x2aa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b46      	cmp	r3, #70	@ 0x46
 8003194:	d903      	bls.n	800319e <HAL_DMA_Init+0x29a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b48      	cmp	r3, #72	@ 0x48
 800319c:	d907      	bls.n	80031ae <HAL_DMA_Init+0x2aa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80031a4:	d905      	bls.n	80031b2 <HAL_DMA_Init+0x2ae>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b52      	cmp	r3, #82	@ 0x52
 80031ac:	d801      	bhi.n	80031b2 <HAL_DMA_Init+0x2ae>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_DMA_Init+0x2b0>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0307 	bic.w	r3, r3, #7
 80031d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d117      	bne.n	800321a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f001 fdcf 	bl	8004da0 <DMA_CheckFifoParam>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e197      	b.n	800354a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f001 fd0a 	bl	8004c3c <DMA_CalcBaseAndBitshift>
 8003228:	4603      	mov	r3, r0
 800322a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	223f      	movs	r2, #63	@ 0x3f
 8003236:	409a      	lsls	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	e0cd      	b.n	80033da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3b      	ldr	r2, [pc, #236]	@ (8003330 <HAL_DMA_Init+0x42c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_Init+0x38a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a39      	ldr	r2, [pc, #228]	@ (8003334 <HAL_DMA_Init+0x430>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_Init+0x38a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <HAL_DMA_Init+0x434>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_Init+0x38a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a36      	ldr	r2, [pc, #216]	@ (800333c <HAL_DMA_Init+0x438>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_Init+0x38a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a35      	ldr	r2, [pc, #212]	@ (8003340 <HAL_DMA_Init+0x43c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Init+0x38a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_DMA_Init+0x440>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_Init+0x38a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <HAL_DMA_Init+0x444>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Init+0x38a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_DMA_Init+0x448>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_DMA_Init+0x38e>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_DMA_Init+0x390>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8097 	beq.w	80033c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a24      	ldr	r2, [pc, #144]	@ (8003330 <HAL_DMA_Init+0x42c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d021      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	@ (8003334 <HAL_DMA_Init+0x430>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01c      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a21      	ldr	r2, [pc, #132]	@ (8003338 <HAL_DMA_Init+0x434>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d017      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1f      	ldr	r2, [pc, #124]	@ (800333c <HAL_DMA_Init+0x438>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d012      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003340 <HAL_DMA_Init+0x43c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00d      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_DMA_Init+0x440>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d008      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <HAL_DMA_Init+0x444>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <HAL_DMA_Init+0x3e4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a19      	ldr	r2, [pc, #100]	@ (800334c <HAL_DMA_Init+0x448>)
 80032e6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_DMA_Init+0x44c>)
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	d021      	beq.n	8003354 <HAL_DMA_Init+0x450>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b80      	cmp	r3, #128	@ 0x80
 8003316:	d102      	bne.n	800331e <HAL_DMA_Init+0x41a>
 8003318:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800331c:	e01b      	b.n	8003356 <HAL_DMA_Init+0x452>
 800331e:	2300      	movs	r3, #0
 8003320:	e019      	b.n	8003356 <HAL_DMA_Init+0x452>
 8003322:	bf00      	nop
 8003324:	fe10803f 	.word	0xfe10803f
 8003328:	5c001000 	.word	0x5c001000
 800332c:	ffff0000 	.word	0xffff0000
 8003330:	58025408 	.word	0x58025408
 8003334:	5802541c 	.word	0x5802541c
 8003338:	58025430 	.word	0x58025430
 800333c:	58025444 	.word	0x58025444
 8003340:	58025458 	.word	0x58025458
 8003344:	5802546c 	.word	0x5802546c
 8003348:	58025480 	.word	0x58025480
 800334c:	58025494 	.word	0x58025494
 8003350:	fffe000f 	.word	0xfffe000f
 8003354:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800335c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800336c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800337c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003384:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b6e      	ldr	r3, [pc, #440]	@ (8003554 <HAL_DMA_Init+0x650>)
 800339c:	4413      	add	r3, r2
 800339e:	4a6e      	ldr	r2, [pc, #440]	@ (8003558 <HAL_DMA_Init+0x654>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	009a      	lsls	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f001 fc45 	bl	8004c3c <DMA_CalcBaseAndBitshift>
 80033b2:	4603      	mov	r3, r0
 80033b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	e008      	b.n	80033da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0b7      	b.n	800354a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5f      	ldr	r2, [pc, #380]	@ (800355c <HAL_DMA_Init+0x658>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d072      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_DMA_Init+0x65c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d06d      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003564 <HAL_DMA_Init+0x660>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d068      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003568 <HAL_DMA_Init+0x664>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d063      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a59      	ldr	r2, [pc, #356]	@ (800356c <HAL_DMA_Init+0x668>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d05e      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a57      	ldr	r2, [pc, #348]	@ (8003570 <HAL_DMA_Init+0x66c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d059      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a56      	ldr	r2, [pc, #344]	@ (8003574 <HAL_DMA_Init+0x670>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d054      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a54      	ldr	r2, [pc, #336]	@ (8003578 <HAL_DMA_Init+0x674>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04f      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a53      	ldr	r2, [pc, #332]	@ (800357c <HAL_DMA_Init+0x678>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d04a      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a51      	ldr	r2, [pc, #324]	@ (8003580 <HAL_DMA_Init+0x67c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d045      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a50      	ldr	r2, [pc, #320]	@ (8003584 <HAL_DMA_Init+0x680>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d040      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4e      	ldr	r2, [pc, #312]	@ (8003588 <HAL_DMA_Init+0x684>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d03b      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4d      	ldr	r2, [pc, #308]	@ (800358c <HAL_DMA_Init+0x688>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d036      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <HAL_DMA_Init+0x68c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d031      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4a      	ldr	r2, [pc, #296]	@ (8003594 <HAL_DMA_Init+0x690>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d02c      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a48      	ldr	r2, [pc, #288]	@ (8003598 <HAL_DMA_Init+0x694>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d027      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a47      	ldr	r2, [pc, #284]	@ (800359c <HAL_DMA_Init+0x698>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a45      	ldr	r2, [pc, #276]	@ (80035a0 <HAL_DMA_Init+0x69c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01d      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a44      	ldr	r2, [pc, #272]	@ (80035a4 <HAL_DMA_Init+0x6a0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a42      	ldr	r2, [pc, #264]	@ (80035a8 <HAL_DMA_Init+0x6a4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a41      	ldr	r2, [pc, #260]	@ (80035ac <HAL_DMA_Init+0x6a8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3f      	ldr	r2, [pc, #252]	@ (80035b0 <HAL_DMA_Init+0x6ac>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3e      	ldr	r2, [pc, #248]	@ (80035b4 <HAL_DMA_Init+0x6b0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_DMA_Init+0x5c6>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3c      	ldr	r2, [pc, #240]	@ (80035b8 <HAL_DMA_Init+0x6b4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_Init+0x5ca>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_Init+0x5cc>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d032      	beq.n	800353a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f001 fcdf 	bl	8004e98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d102      	bne.n	80034e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <HAL_DMA_Init+0x624>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d80c      	bhi.n	8003528 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f001 fd5c 	bl	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e008      	b.n	800353a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	a7fdabf8 	.word	0xa7fdabf8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494

080035bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e226      	b.n	8003a26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Start_IT+0x2a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e21f      	b.n	8003a26 <HAL_DMA_Start_IT+0x46a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f040 820a 	bne.w	8003a10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_DMA_Start_IT+0x1f4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04a      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a66      	ldr	r2, [pc, #408]	@ (80037b4 <HAL_DMA_Start_IT+0x1f8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d045      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a65      	ldr	r2, [pc, #404]	@ (80037b8 <HAL_DMA_Start_IT+0x1fc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d040      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a63      	ldr	r2, [pc, #396]	@ (80037bc <HAL_DMA_Start_IT+0x200>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a62      	ldr	r2, [pc, #392]	@ (80037c0 <HAL_DMA_Start_IT+0x204>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d036      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a60      	ldr	r2, [pc, #384]	@ (80037c4 <HAL_DMA_Start_IT+0x208>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5f      	ldr	r2, [pc, #380]	@ (80037c8 <HAL_DMA_Start_IT+0x20c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02c      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <HAL_DMA_Start_IT+0x210>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d027      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5c      	ldr	r2, [pc, #368]	@ (80037d0 <HAL_DMA_Start_IT+0x214>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5a      	ldr	r2, [pc, #360]	@ (80037d4 <HAL_DMA_Start_IT+0x218>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a59      	ldr	r2, [pc, #356]	@ (80037d8 <HAL_DMA_Start_IT+0x21c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_DMA_Start_IT+0x220>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_DMA_Start_IT+0x224>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a54      	ldr	r2, [pc, #336]	@ (80037e4 <HAL_DMA_Start_IT+0x228>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a53      	ldr	r2, [pc, #332]	@ (80037e8 <HAL_DMA_Start_IT+0x22c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_DMA_Start_IT+0xee>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a51      	ldr	r2, [pc, #324]	@ (80037ec <HAL_DMA_Start_IT+0x230>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d108      	bne.n	80036bc <HAL_DMA_Start_IT+0x100>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <HAL_DMA_Start_IT+0x110>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f001 f906 	bl	80048e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a34      	ldr	r2, [pc, #208]	@ (80037b0 <HAL_DMA_Start_IT+0x1f4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d04a      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a33      	ldr	r2, [pc, #204]	@ (80037b4 <HAL_DMA_Start_IT+0x1f8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d045      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <HAL_DMA_Start_IT+0x1fc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d040      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a30      	ldr	r2, [pc, #192]	@ (80037bc <HAL_DMA_Start_IT+0x200>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d03b      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2e      	ldr	r2, [pc, #184]	@ (80037c0 <HAL_DMA_Start_IT+0x204>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d036      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2d      	ldr	r2, [pc, #180]	@ (80037c4 <HAL_DMA_Start_IT+0x208>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d031      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2b      	ldr	r2, [pc, #172]	@ (80037c8 <HAL_DMA_Start_IT+0x20c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02c      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <HAL_DMA_Start_IT+0x210>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d027      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a28      	ldr	r2, [pc, #160]	@ (80037d0 <HAL_DMA_Start_IT+0x214>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a27      	ldr	r2, [pc, #156]	@ (80037d4 <HAL_DMA_Start_IT+0x218>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01d      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <HAL_DMA_Start_IT+0x21c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a24      	ldr	r2, [pc, #144]	@ (80037dc <HAL_DMA_Start_IT+0x220>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a22      	ldr	r2, [pc, #136]	@ (80037e0 <HAL_DMA_Start_IT+0x224>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a21      	ldr	r2, [pc, #132]	@ (80037e4 <HAL_DMA_Start_IT+0x228>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <HAL_DMA_Start_IT+0x22c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_DMA_Start_IT+0x1bc>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1e      	ldr	r2, [pc, #120]	@ (80037ec <HAL_DMA_Start_IT+0x230>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_DMA_Start_IT+0x1c0>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_DMA_Start_IT+0x1c2>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 021e 	bic.w	r2, r3, #30
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0216 	orr.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d03e      	beq.n	800381c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e035      	b.n	800381c <HAL_DMA_Start_IT+0x260>
 80037b0:	40020010 	.word	0x40020010
 80037b4:	40020028 	.word	0x40020028
 80037b8:	40020040 	.word	0x40020040
 80037bc:	40020058 	.word	0x40020058
 80037c0:	40020070 	.word	0x40020070
 80037c4:	40020088 	.word	0x40020088
 80037c8:	400200a0 	.word	0x400200a0
 80037cc:	400200b8 	.word	0x400200b8
 80037d0:	40020410 	.word	0x40020410
 80037d4:	40020428 	.word	0x40020428
 80037d8:	40020440 	.word	0x40020440
 80037dc:	40020458 	.word	0x40020458
 80037e0:	40020470 	.word	0x40020470
 80037e4:	40020488 	.word	0x40020488
 80037e8:	400204a0 	.word	0x400204a0
 80037ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 020e 	bic.w	r2, r3, #14
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 020a 	orr.w	r2, r2, #10
 8003802:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0204 	orr.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a83      	ldr	r2, [pc, #524]	@ (8003a30 <HAL_DMA_Start_IT+0x474>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d072      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a82      	ldr	r2, [pc, #520]	@ (8003a34 <HAL_DMA_Start_IT+0x478>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d06d      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a80      	ldr	r2, [pc, #512]	@ (8003a38 <HAL_DMA_Start_IT+0x47c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d068      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a3c <HAL_DMA_Start_IT+0x480>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d063      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7d      	ldr	r2, [pc, #500]	@ (8003a40 <HAL_DMA_Start_IT+0x484>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d05e      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7c      	ldr	r2, [pc, #496]	@ (8003a44 <HAL_DMA_Start_IT+0x488>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d059      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a48 <HAL_DMA_Start_IT+0x48c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d054      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a79      	ldr	r2, [pc, #484]	@ (8003a4c <HAL_DMA_Start_IT+0x490>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d04f      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a77      	ldr	r2, [pc, #476]	@ (8003a50 <HAL_DMA_Start_IT+0x494>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a76      	ldr	r2, [pc, #472]	@ (8003a54 <HAL_DMA_Start_IT+0x498>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a74      	ldr	r2, [pc, #464]	@ (8003a58 <HAL_DMA_Start_IT+0x49c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	@ (8003a5c <HAL_DMA_Start_IT+0x4a0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	@ (8003a60 <HAL_DMA_Start_IT+0x4a4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	@ (8003a64 <HAL_DMA_Start_IT+0x4a8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_DMA_Start_IT+0x4ac>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a6c <HAL_DMA_Start_IT+0x4b0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a70 <HAL_DMA_Start_IT+0x4b4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003a74 <HAL_DMA_Start_IT+0x4b8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	@ (8003a78 <HAL_DMA_Start_IT+0x4bc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a67      	ldr	r2, [pc, #412]	@ (8003a7c <HAL_DMA_Start_IT+0x4c0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	@ (8003a80 <HAL_DMA_Start_IT+0x4c4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a64      	ldr	r2, [pc, #400]	@ (8003a84 <HAL_DMA_Start_IT+0x4c8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a62      	ldr	r2, [pc, #392]	@ (8003a88 <HAL_DMA_Start_IT+0x4cc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_Start_IT+0x350>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a61      	ldr	r2, [pc, #388]	@ (8003a8c <HAL_DMA_Start_IT+0x4d0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_DMA_Start_IT+0x354>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_DMA_Start_IT+0x356>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01a      	beq.n	800394c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003932:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800394a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a37      	ldr	r2, [pc, #220]	@ (8003a30 <HAL_DMA_Start_IT+0x474>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d04a      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a36      	ldr	r2, [pc, #216]	@ (8003a34 <HAL_DMA_Start_IT+0x478>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d045      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a34      	ldr	r2, [pc, #208]	@ (8003a38 <HAL_DMA_Start_IT+0x47c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d040      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a33      	ldr	r2, [pc, #204]	@ (8003a3c <HAL_DMA_Start_IT+0x480>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d03b      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a31      	ldr	r2, [pc, #196]	@ (8003a40 <HAL_DMA_Start_IT+0x484>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d036      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a30      	ldr	r2, [pc, #192]	@ (8003a44 <HAL_DMA_Start_IT+0x488>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d031      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <HAL_DMA_Start_IT+0x48c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_DMA_Start_IT+0x490>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d027      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a50 <HAL_DMA_Start_IT+0x494>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <HAL_DMA_Start_IT+0x498>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01d      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_DMA_Start_IT+0x49c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_DMA_Start_IT+0x4a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_DMA_Start_IT+0x4a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_DMA_Start_IT+0x4a8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <HAL_DMA_Start_IT+0x4ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_DMA_Start_IT+0x430>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	@ (8003a6c <HAL_DMA_Start_IT+0x4b0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_DMA_Start_IT+0x442>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e012      	b.n	8003a24 <HAL_DMA_Start_IT+0x468>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e009      	b.n	8003a24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
 8003a70:	58025408 	.word	0x58025408
 8003a74:	5802541c 	.word	0x5802541c
 8003a78:	58025430 	.word	0x58025430
 8003a7c:	58025444 	.word	0x58025444
 8003a80:	58025458 	.word	0x58025458
 8003a84:	5802546c 	.word	0x5802546c
 8003a88:	58025480 	.word	0x58025480
 8003a8c:	58025494 	.word	0x58025494

08003a90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a9c:	4b67      	ldr	r3, [pc, #412]	@ (8003c3c <HAL_DMA_IRQHandler+0x1ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a67      	ldr	r2, [pc, #412]	@ (8003c40 <HAL_DMA_IRQHandler+0x1b0>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c44 <HAL_DMA_IRQHandler+0x1b4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c48 <HAL_DMA_IRQHandler+0x1b8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5c      	ldr	r2, [pc, #368]	@ (8003c4c <HAL_DMA_IRQHandler+0x1bc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c50 <HAL_DMA_IRQHandler+0x1c0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a59      	ldr	r2, [pc, #356]	@ (8003c54 <HAL_DMA_IRQHandler+0x1c4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a57      	ldr	r2, [pc, #348]	@ (8003c58 <HAL_DMA_IRQHandler+0x1c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a56      	ldr	r2, [pc, #344]	@ (8003c5c <HAL_DMA_IRQHandler+0x1cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a54      	ldr	r2, [pc, #336]	@ (8003c60 <HAL_DMA_IRQHandler+0x1d0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a53      	ldr	r2, [pc, #332]	@ (8003c64 <HAL_DMA_IRQHandler+0x1d4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a51      	ldr	r2, [pc, #324]	@ (8003c68 <HAL_DMA_IRQHandler+0x1d8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a50      	ldr	r2, [pc, #320]	@ (8003c6c <HAL_DMA_IRQHandler+0x1dc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4e      	ldr	r2, [pc, #312]	@ (8003c70 <HAL_DMA_IRQHandler+0x1e0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c74 <HAL_DMA_IRQHandler+0x1e4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4b      	ldr	r2, [pc, #300]	@ (8003c78 <HAL_DMA_IRQHandler+0x1e8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4a      	ldr	r2, [pc, #296]	@ (8003c7c <HAL_DMA_IRQHandler+0x1ec>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a48      	ldr	r2, [pc, #288]	@ (8003c80 <HAL_DMA_IRQHandler+0x1f0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_IRQHandler+0xd6>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_DMA_IRQHandler+0xd8>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 842b 	beq.w	80043c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2208      	movs	r2, #8
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80a2 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2e      	ldr	r2, [pc, #184]	@ (8003c44 <HAL_DMA_IRQHandler+0x1b4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d04a      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2d      	ldr	r2, [pc, #180]	@ (8003c48 <HAL_DMA_IRQHandler+0x1b8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d045      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c4c <HAL_DMA_IRQHandler+0x1bc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d040      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <HAL_DMA_IRQHandler+0x1c0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d03b      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <HAL_DMA_IRQHandler+0x1c4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d036      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <HAL_DMA_IRQHandler+0x1c8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d031      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a25      	ldr	r2, [pc, #148]	@ (8003c5c <HAL_DMA_IRQHandler+0x1cc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d02c      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <HAL_DMA_IRQHandler+0x1d0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d027      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	@ (8003c64 <HAL_DMA_IRQHandler+0x1d4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d022      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a21      	ldr	r2, [pc, #132]	@ (8003c68 <HAL_DMA_IRQHandler+0x1d8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d01d      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1f      	ldr	r2, [pc, #124]	@ (8003c6c <HAL_DMA_IRQHandler+0x1dc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d018      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c70 <HAL_DMA_IRQHandler+0x1e0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1c      	ldr	r2, [pc, #112]	@ (8003c74 <HAL_DMA_IRQHandler+0x1e4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <HAL_DMA_IRQHandler+0x1e8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_DMA_IRQHandler+0x1ec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x194>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <HAL_DMA_IRQHandler+0x1f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d12f      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x1f4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e02e      	b.n	8003c98 <HAL_DMA_IRQHandler+0x208>
 8003c3a:	bf00      	nop
 8003c3c:	24000000 	.word	0x24000000
 8003c40:	1b4e81b5 	.word	0x1b4e81b5
 8003c44:	40020010 	.word	0x40020010
 8003c48:	40020028 	.word	0x40020028
 8003c4c:	40020040 	.word	0x40020040
 8003c50:	40020058 	.word	0x40020058
 8003c54:	40020070 	.word	0x40020070
 8003c58:	40020088 	.word	0x40020088
 8003c5c:	400200a0 	.word	0x400200a0
 8003c60:	400200b8 	.word	0x400200b8
 8003c64:	40020410 	.word	0x40020410
 8003c68:	40020428 	.word	0x40020428
 8003c6c:	40020440 	.word	0x40020440
 8003c70:	40020458 	.word	0x40020458
 8003c74:	40020470 	.word	0x40020470
 8003c78:	40020488 	.word	0x40020488
 8003c7c:	400204a0 	.word	0x400204a0
 8003c80:	400204b8 	.word	0x400204b8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d015      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0204 	bic.w	r2, r2, #4
 8003caa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06e      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a69      	ldr	r2, [pc, #420]	@ (8003e88 <HAL_DMA_IRQHandler+0x3f8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a67      	ldr	r2, [pc, #412]	@ (8003e8c <HAL_DMA_IRQHandler+0x3fc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a66      	ldr	r2, [pc, #408]	@ (8003e90 <HAL_DMA_IRQHandler+0x400>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a64      	ldr	r2, [pc, #400]	@ (8003e94 <HAL_DMA_IRQHandler+0x404>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a63      	ldr	r2, [pc, #396]	@ (8003e98 <HAL_DMA_IRQHandler+0x408>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a61      	ldr	r2, [pc, #388]	@ (8003e9c <HAL_DMA_IRQHandler+0x40c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ea0 <HAL_DMA_IRQHandler+0x410>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea4 <HAL_DMA_IRQHandler+0x414>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5d      	ldr	r2, [pc, #372]	@ (8003ea8 <HAL_DMA_IRQHandler+0x418>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5b      	ldr	r2, [pc, #364]	@ (8003eac <HAL_DMA_IRQHandler+0x41c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb0 <HAL_DMA_IRQHandler+0x420>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_DMA_IRQHandler+0x424>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a57      	ldr	r2, [pc, #348]	@ (8003eb8 <HAL_DMA_IRQHandler+0x428>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a55      	ldr	r2, [pc, #340]	@ (8003ebc <HAL_DMA_IRQHandler+0x42c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a54      	ldr	r2, [pc, #336]	@ (8003ec0 <HAL_DMA_IRQHandler+0x430>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x2ee>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a52      	ldr	r2, [pc, #328]	@ (8003ec4 <HAL_DMA_IRQHandler+0x434>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10a      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x304>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2300      	moveq	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e003      	b.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f043 0202 	orr.w	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 808f 	beq.w	8003ef0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e88 <HAL_DMA_IRQHandler+0x3f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e8c <HAL_DMA_IRQHandler+0x3fc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a29      	ldr	r2, [pc, #164]	@ (8003e90 <HAL_DMA_IRQHandler+0x400>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <HAL_DMA_IRQHandler+0x404>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_DMA_IRQHandler+0x408>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <HAL_DMA_IRQHandler+0x40c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <HAL_DMA_IRQHandler+0x410>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <HAL_DMA_IRQHandler+0x414>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <HAL_DMA_IRQHandler+0x418>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	@ (8003eac <HAL_DMA_IRQHandler+0x41c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb0 <HAL_DMA_IRQHandler+0x420>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_DMA_IRQHandler+0x424>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb8 <HAL_DMA_IRQHandler+0x428>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_DMA_IRQHandler+0x42c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a17      	ldr	r2, [pc, #92]	@ (8003ec0 <HAL_DMA_IRQHandler+0x430>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x3e2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ec4 <HAL_DMA_IRQHandler+0x434>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d12a      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0x438>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e023      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x440>
 8003e88:	40020010 	.word	0x40020010
 8003e8c:	40020028 	.word	0x40020028
 8003e90:	40020040 	.word	0x40020040
 8003e94:	40020058 	.word	0x40020058
 8003e98:	40020070 	.word	0x40020070
 8003e9c:	40020088 	.word	0x40020088
 8003ea0:	400200a0 	.word	0x400200a0
 8003ea4:	400200b8 	.word	0x400200b8
 8003ea8:	40020410 	.word	0x40020410
 8003eac:	40020428 	.word	0x40020428
 8003eb0:	40020440 	.word	0x40020440
 8003eb4:	40020458 	.word	0x40020458
 8003eb8:	40020470 	.word	0x40020470
 8003ebc:	40020488 	.word	0x40020488
 8003ec0:	400204a0 	.word	0x400204a0
 8003ec4:	400204b8 	.word	0x400204b8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	2204      	movs	r2, #4
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2210      	movs	r2, #16
 8003efa:	409a      	lsls	r2, r3
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80a6 	beq.w	8004052 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a85      	ldr	r2, [pc, #532]	@ (8004120 <HAL_DMA_IRQHandler+0x690>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04a      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a83      	ldr	r2, [pc, #524]	@ (8004124 <HAL_DMA_IRQHandler+0x694>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d045      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a82      	ldr	r2, [pc, #520]	@ (8004128 <HAL_DMA_IRQHandler+0x698>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d040      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a80      	ldr	r2, [pc, #512]	@ (800412c <HAL_DMA_IRQHandler+0x69c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d03b      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7f      	ldr	r2, [pc, #508]	@ (8004130 <HAL_DMA_IRQHandler+0x6a0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d036      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a7d      	ldr	r2, [pc, #500]	@ (8004134 <HAL_DMA_IRQHandler+0x6a4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d031      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7c      	ldr	r2, [pc, #496]	@ (8004138 <HAL_DMA_IRQHandler+0x6a8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d02c      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7a      	ldr	r2, [pc, #488]	@ (800413c <HAL_DMA_IRQHandler+0x6ac>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d027      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a79      	ldr	r2, [pc, #484]	@ (8004140 <HAL_DMA_IRQHandler+0x6b0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a77      	ldr	r2, [pc, #476]	@ (8004144 <HAL_DMA_IRQHandler+0x6b4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a76      	ldr	r2, [pc, #472]	@ (8004148 <HAL_DMA_IRQHandler+0x6b8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a74      	ldr	r2, [pc, #464]	@ (800414c <HAL_DMA_IRQHandler+0x6bc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	@ (8004150 <HAL_DMA_IRQHandler+0x6c0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a71      	ldr	r2, [pc, #452]	@ (8004154 <HAL_DMA_IRQHandler+0x6c4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a70      	ldr	r2, [pc, #448]	@ (8004158 <HAL_DMA_IRQHandler+0x6c8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x516>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800415c <HAL_DMA_IRQHandler+0x6cc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10a      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x52c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e009      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x540>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03e      	beq.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2210      	movs	r2, #16
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d108      	bne.n	8004012 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d024      	beq.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
 8004010:	e01f      	b.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e016      	b.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d107      	bne.n	8004042 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2220      	movs	r2, #32
 800405c:	409a      	lsls	r2, r3
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8110 	beq.w	8004288 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <HAL_DMA_IRQHandler+0x690>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d04a      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2b      	ldr	r2, [pc, #172]	@ (8004124 <HAL_DMA_IRQHandler+0x694>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d045      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a29      	ldr	r2, [pc, #164]	@ (8004128 <HAL_DMA_IRQHandler+0x698>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d040      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a28      	ldr	r2, [pc, #160]	@ (800412c <HAL_DMA_IRQHandler+0x69c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d03b      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <HAL_DMA_IRQHandler+0x6a0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d036      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a25      	ldr	r2, [pc, #148]	@ (8004134 <HAL_DMA_IRQHandler+0x6a4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d031      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	@ (8004138 <HAL_DMA_IRQHandler+0x6a8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02c      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a22      	ldr	r2, [pc, #136]	@ (800413c <HAL_DMA_IRQHandler+0x6ac>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d027      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a20      	ldr	r2, [pc, #128]	@ (8004140 <HAL_DMA_IRQHandler+0x6b0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d022      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <HAL_DMA_IRQHandler+0x6b4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d01d      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <HAL_DMA_IRQHandler+0x6b8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d018      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1c      	ldr	r2, [pc, #112]	@ (800414c <HAL_DMA_IRQHandler+0x6bc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_DMA_IRQHandler+0x6c0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_DMA_IRQHandler+0x6c4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	@ (8004158 <HAL_DMA_IRQHandler+0x6c8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_DMA_IRQHandler+0x678>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a16      	ldr	r2, [pc, #88]	@ (800415c <HAL_DMA_IRQHandler+0x6cc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d12b      	bne.n	8004160 <HAL_DMA_IRQHandler+0x6d0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e02a      	b.n	8004174 <HAL_DMA_IRQHandler+0x6e4>
 800411e:	bf00      	nop
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8087 	beq.w	8004288 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2220      	movs	r2, #32
 8004184:	409a      	lsls	r2, r3
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b04      	cmp	r3, #4
 8004194:	d139      	bne.n	800420a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0216 	bic.w	r2, r2, #22
 80041a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x736>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0208 	bic.w	r2, r2, #8
 80041d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	223f      	movs	r2, #63	@ 0x3f
 80041e0:	409a      	lsls	r2, r3
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 834a 	beq.w	8004894 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
          }
          return;
 8004208:	e344      	b.n	8004894 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02c      	beq.n	8004288 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
 8004236:	e027      	b.n	8004288 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	e01e      	b.n	8004288 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8306 	beq.w	800489e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8088 	beq.w	80043b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7a      	ldr	r2, [pc, #488]	@ (8004498 <HAL_DMA_IRQHandler+0xa08>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d04a      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a79      	ldr	r2, [pc, #484]	@ (800449c <HAL_DMA_IRQHandler+0xa0c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d045      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a77      	ldr	r2, [pc, #476]	@ (80044a0 <HAL_DMA_IRQHandler+0xa10>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d040      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a76      	ldr	r2, [pc, #472]	@ (80044a4 <HAL_DMA_IRQHandler+0xa14>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d03b      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a74      	ldr	r2, [pc, #464]	@ (80044a8 <HAL_DMA_IRQHandler+0xa18>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d036      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a73      	ldr	r2, [pc, #460]	@ (80044ac <HAL_DMA_IRQHandler+0xa1c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d031      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a71      	ldr	r2, [pc, #452]	@ (80044b0 <HAL_DMA_IRQHandler+0xa20>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a70      	ldr	r2, [pc, #448]	@ (80044b4 <HAL_DMA_IRQHandler+0xa24>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d027      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6e      	ldr	r2, [pc, #440]	@ (80044b8 <HAL_DMA_IRQHandler+0xa28>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d022      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6d      	ldr	r2, [pc, #436]	@ (80044bc <HAL_DMA_IRQHandler+0xa2c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d01d      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6b      	ldr	r2, [pc, #428]	@ (80044c0 <HAL_DMA_IRQHandler+0xa30>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6a      	ldr	r2, [pc, #424]	@ (80044c4 <HAL_DMA_IRQHandler+0xa34>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_DMA_IRQHandler+0xa38>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a67      	ldr	r2, [pc, #412]	@ (80044cc <HAL_DMA_IRQHandler+0xa3c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a65      	ldr	r2, [pc, #404]	@ (80044d0 <HAL_DMA_IRQHandler+0xa40>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_DMA_IRQHandler+0x8b8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a64      	ldr	r2, [pc, #400]	@ (80044d4 <HAL_DMA_IRQHandler+0xa44>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <HAL_DMA_IRQHandler+0x8ca>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <HAL_DMA_IRQHandler+0x8da>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004372:	429a      	cmp	r2, r3
 8004374:	d307      	bcc.n	8004386 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f2      	bne.n	800436a <HAL_DMA_IRQHandler+0x8da>
 8004384:	e000      	b.n	8004388 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004386:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2203      	movs	r2, #3
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800439e:	e003      	b.n	80043a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8272 	beq.w	800489e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e26c      	b.n	800489e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a43      	ldr	r2, [pc, #268]	@ (80044d8 <HAL_DMA_IRQHandler+0xa48>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a42      	ldr	r2, [pc, #264]	@ (80044dc <HAL_DMA_IRQHandler+0xa4c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <HAL_DMA_IRQHandler+0xa50>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3f      	ldr	r2, [pc, #252]	@ (80044e4 <HAL_DMA_IRQHandler+0xa54>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3d      	ldr	r2, [pc, #244]	@ (80044e8 <HAL_DMA_IRQHandler+0xa58>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	@ (80044ec <HAL_DMA_IRQHandler+0xa5c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_DMA_IRQHandler+0xa60>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_IRQHandler+0x984>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a39      	ldr	r2, [pc, #228]	@ (80044f4 <HAL_DMA_IRQHandler+0xa64>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_DMA_IRQHandler+0x988>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_DMA_IRQHandler+0x98a>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 823f 	beq.w	800489e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2204      	movs	r2, #4
 8004432:	409a      	lsls	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80cd 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xb48>
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80c7 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2204      	movs	r2, #4
 8004454:	409a      	lsls	r2, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d049      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8210 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004480:	e20a      	b.n	8004898 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8206 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004494:	e200      	b.n	8004898 <HAL_DMA_IRQHandler+0xe08>
 8004496:	bf00      	nop
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d160      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7f      	ldr	r2, [pc, #508]	@ (8004704 <HAL_DMA_IRQHandler+0xc74>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7d      	ldr	r2, [pc, #500]	@ (8004708 <HAL_DMA_IRQHandler+0xc78>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7c      	ldr	r2, [pc, #496]	@ (800470c <HAL_DMA_IRQHandler+0xc7c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a7a      	ldr	r2, [pc, #488]	@ (8004710 <HAL_DMA_IRQHandler+0xc80>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a79      	ldr	r2, [pc, #484]	@ (8004714 <HAL_DMA_IRQHandler+0xc84>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a77      	ldr	r2, [pc, #476]	@ (8004718 <HAL_DMA_IRQHandler+0xc88>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a76      	ldr	r2, [pc, #472]	@ (800471c <HAL_DMA_IRQHandler+0xc8c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a74      	ldr	r2, [pc, #464]	@ (8004720 <HAL_DMA_IRQHandler+0xc90>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a73      	ldr	r2, [pc, #460]	@ (8004724 <HAL_DMA_IRQHandler+0xc94>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a71      	ldr	r2, [pc, #452]	@ (8004728 <HAL_DMA_IRQHandler+0xc98>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a70      	ldr	r2, [pc, #448]	@ (800472c <HAL_DMA_IRQHandler+0xc9c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6e      	ldr	r2, [pc, #440]	@ (8004730 <HAL_DMA_IRQHandler+0xca0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6d      	ldr	r2, [pc, #436]	@ (8004734 <HAL_DMA_IRQHandler+0xca4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6b      	ldr	r2, [pc, #428]	@ (8004738 <HAL_DMA_IRQHandler+0xca8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6a      	ldr	r2, [pc, #424]	@ (800473c <HAL_DMA_IRQHandler+0xcac>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb12>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a68      	ldr	r2, [pc, #416]	@ (8004740 <HAL_DMA_IRQHandler+0xcb0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <HAL_DMA_IRQHandler+0xb24>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0208 	bic.w	r2, r2, #8
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e007      	b.n	80045c4 <HAL_DMA_IRQHandler+0xb34>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8165 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d6:	e15f      	b.n	8004898 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2202      	movs	r2, #2
 80045e2:	409a      	lsls	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80c5 	beq.w	8004778 <HAL_DMA_IRQHandler+0xce8>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80bf 	beq.w	8004778 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2202      	movs	r2, #2
 8004604:	409a      	lsls	r2, r3
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d018      	beq.n	8004646 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 813a 	beq.w	800489c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004630:	e134      	b.n	800489c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8130 	beq.w	800489c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004644:	e12a      	b.n	800489c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 8089 	bne.w	8004764 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <HAL_DMA_IRQHandler+0xc74>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d04a      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a29      	ldr	r2, [pc, #164]	@ (8004708 <HAL_DMA_IRQHandler+0xc78>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d045      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a28      	ldr	r2, [pc, #160]	@ (800470c <HAL_DMA_IRQHandler+0xc7c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d040      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a26      	ldr	r2, [pc, #152]	@ (8004710 <HAL_DMA_IRQHandler+0xc80>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d03b      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a25      	ldr	r2, [pc, #148]	@ (8004714 <HAL_DMA_IRQHandler+0xc84>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d036      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <HAL_DMA_IRQHandler+0xc88>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d031      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a22      	ldr	r2, [pc, #136]	@ (800471c <HAL_DMA_IRQHandler+0xc8c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d02c      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <HAL_DMA_IRQHandler+0xc90>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d027      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <HAL_DMA_IRQHandler+0xc94>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <HAL_DMA_IRQHandler+0xc98>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01d      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <HAL_DMA_IRQHandler+0xc9c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <HAL_DMA_IRQHandler+0xca0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <HAL_DMA_IRQHandler+0xca4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_DMA_IRQHandler+0xca8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_DMA_IRQHandler+0xcac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xc62>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a14      	ldr	r2, [pc, #80]	@ (8004740 <HAL_DMA_IRQHandler+0xcb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d128      	bne.n	8004744 <HAL_DMA_IRQHandler+0xcb4>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0214 	bic.w	r2, r2, #20
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e027      	b.n	8004754 <HAL_DMA_IRQHandler+0xcc4>
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 020a 	bic.w	r2, r2, #10
 8004752:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8097 	beq.w	800489c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004776:	e091      	b.n	800489c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2208      	movs	r2, #8
 8004782:	409a      	lsls	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8088 	beq.w	800489e <HAL_DMA_IRQHandler+0xe0e>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8082 	beq.w	800489e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a41      	ldr	r2, [pc, #260]	@ (80048a4 <HAL_DMA_IRQHandler+0xe14>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3f      	ldr	r2, [pc, #252]	@ (80048a8 <HAL_DMA_IRQHandler+0xe18>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3e      	ldr	r2, [pc, #248]	@ (80048ac <HAL_DMA_IRQHandler+0xe1c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3c      	ldr	r2, [pc, #240]	@ (80048b0 <HAL_DMA_IRQHandler+0xe20>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	@ (80048b4 <HAL_DMA_IRQHandler+0xe24>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a39      	ldr	r2, [pc, #228]	@ (80048b8 <HAL_DMA_IRQHandler+0xe28>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a38      	ldr	r2, [pc, #224]	@ (80048bc <HAL_DMA_IRQHandler+0xe2c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a36      	ldr	r2, [pc, #216]	@ (80048c0 <HAL_DMA_IRQHandler+0xe30>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a35      	ldr	r2, [pc, #212]	@ (80048c4 <HAL_DMA_IRQHandler+0xe34>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a33      	ldr	r2, [pc, #204]	@ (80048c8 <HAL_DMA_IRQHandler+0xe38>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a32      	ldr	r2, [pc, #200]	@ (80048cc <HAL_DMA_IRQHandler+0xe3c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a30      	ldr	r2, [pc, #192]	@ (80048d0 <HAL_DMA_IRQHandler+0xe40>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2f      	ldr	r2, [pc, #188]	@ (80048d4 <HAL_DMA_IRQHandler+0xe44>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	@ (80048d8 <HAL_DMA_IRQHandler+0xe48>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2c      	ldr	r2, [pc, #176]	@ (80048dc <HAL_DMA_IRQHandler+0xe4c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_IRQHandler+0xdaa>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2a      	ldr	r2, [pc, #168]	@ (80048e0 <HAL_DMA_IRQHandler+0xe50>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <HAL_DMA_IRQHandler+0xdbc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 021c 	bic.w	r2, r2, #28
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e007      	b.n	800485c <HAL_DMA_IRQHandler+0xdcc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 020e 	bic.w	r2, r2, #14
 800485a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	e004      	b.n	800489e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800489e:	3728      	adds	r7, #40	@ 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8

080048e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7f      	ldr	r2, [pc, #508]	@ (8004b00 <DMA_SetConfig+0x21c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d072      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b04 <DMA_SetConfig+0x220>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d06d      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a7c      	ldr	r2, [pc, #496]	@ (8004b08 <DMA_SetConfig+0x224>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d068      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a7a      	ldr	r2, [pc, #488]	@ (8004b0c <DMA_SetConfig+0x228>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d063      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a79      	ldr	r2, [pc, #484]	@ (8004b10 <DMA_SetConfig+0x22c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d05e      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a77      	ldr	r2, [pc, #476]	@ (8004b14 <DMA_SetConfig+0x230>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d059      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a76      	ldr	r2, [pc, #472]	@ (8004b18 <DMA_SetConfig+0x234>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d054      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a74      	ldr	r2, [pc, #464]	@ (8004b1c <DMA_SetConfig+0x238>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04f      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a73      	ldr	r2, [pc, #460]	@ (8004b20 <DMA_SetConfig+0x23c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04a      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a71      	ldr	r2, [pc, #452]	@ (8004b24 <DMA_SetConfig+0x240>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d045      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a70      	ldr	r2, [pc, #448]	@ (8004b28 <DMA_SetConfig+0x244>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d040      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a6e      	ldr	r2, [pc, #440]	@ (8004b2c <DMA_SetConfig+0x248>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d03b      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b30 <DMA_SetConfig+0x24c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d036      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a6b      	ldr	r2, [pc, #428]	@ (8004b34 <DMA_SetConfig+0x250>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b38 <DMA_SetConfig+0x254>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d02c      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a68      	ldr	r2, [pc, #416]	@ (8004b3c <DMA_SetConfig+0x258>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d027      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a67      	ldr	r2, [pc, #412]	@ (8004b40 <DMA_SetConfig+0x25c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a65      	ldr	r2, [pc, #404]	@ (8004b44 <DMA_SetConfig+0x260>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a64      	ldr	r2, [pc, #400]	@ (8004b48 <DMA_SetConfig+0x264>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a62      	ldr	r2, [pc, #392]	@ (8004b4c <DMA_SetConfig+0x268>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a61      	ldr	r2, [pc, #388]	@ (8004b50 <DMA_SetConfig+0x26c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b54 <DMA_SetConfig+0x270>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5e      	ldr	r2, [pc, #376]	@ (8004b58 <DMA_SetConfig+0x274>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b5c <DMA_SetConfig+0x278>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <DMA_SetConfig+0x10e>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <DMA_SetConfig+0x110>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a39      	ldr	r2, [pc, #228]	@ (8004b00 <DMA_SetConfig+0x21c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d04a      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a38      	ldr	r2, [pc, #224]	@ (8004b04 <DMA_SetConfig+0x220>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d045      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a36      	ldr	r2, [pc, #216]	@ (8004b08 <DMA_SetConfig+0x224>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d040      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a35      	ldr	r2, [pc, #212]	@ (8004b0c <DMA_SetConfig+0x228>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d03b      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a33      	ldr	r2, [pc, #204]	@ (8004b10 <DMA_SetConfig+0x22c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d036      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a32      	ldr	r2, [pc, #200]	@ (8004b14 <DMA_SetConfig+0x230>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d031      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	@ (8004b18 <DMA_SetConfig+0x234>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02c      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b1c <DMA_SetConfig+0x238>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d027      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	@ (8004b20 <DMA_SetConfig+0x23c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2c      	ldr	r2, [pc, #176]	@ (8004b24 <DMA_SetConfig+0x240>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d01d      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <DMA_SetConfig+0x244>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a29      	ldr	r2, [pc, #164]	@ (8004b2c <DMA_SetConfig+0x248>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a27      	ldr	r2, [pc, #156]	@ (8004b30 <DMA_SetConfig+0x24c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <DMA_SetConfig+0x250>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <DMA_SetConfig+0x254>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a23      	ldr	r2, [pc, #140]	@ (8004b3c <DMA_SetConfig+0x258>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <DMA_SetConfig+0x1d4>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <DMA_SetConfig+0x1d6>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d059      	beq.n	8004b72 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	223f      	movs	r2, #63	@ 0x3f
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004adc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d138      	bne.n	8004b60 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004afe:	e086      	b.n	8004c0e <DMA_SetConfig+0x32a>
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
 8004b40:	58025408 	.word	0x58025408
 8004b44:	5802541c 	.word	0x5802541c
 8004b48:	58025430 	.word	0x58025430
 8004b4c:	58025444 	.word	0x58025444
 8004b50:	58025458 	.word	0x58025458
 8004b54:	5802546c 	.word	0x5802546c
 8004b58:	58025480 	.word	0x58025480
 8004b5c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
}
 8004b70:	e04d      	b.n	8004c0e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a29      	ldr	r2, [pc, #164]	@ (8004c1c <DMA_SetConfig+0x338>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a27      	ldr	r2, [pc, #156]	@ (8004c20 <DMA_SetConfig+0x33c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <DMA_SetConfig+0x340>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a24      	ldr	r2, [pc, #144]	@ (8004c28 <DMA_SetConfig+0x344>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <DMA_SetConfig+0x348>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	@ (8004c30 <DMA_SetConfig+0x34c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a20      	ldr	r2, [pc, #128]	@ (8004c34 <DMA_SetConfig+0x350>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <DMA_SetConfig+0x2de>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c38 <DMA_SetConfig+0x354>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <DMA_SetConfig+0x2e2>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <DMA_SetConfig+0x2e4>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d108      	bne.n	8004bfe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
}
 8004bfc:	e007      	b.n	8004c0e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	60da      	str	r2, [r3, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	58025408 	.word	0x58025408
 8004c20:	5802541c 	.word	0x5802541c
 8004c24:	58025430 	.word	0x58025430
 8004c28:	58025444 	.word	0x58025444
 8004c2c:	58025458 	.word	0x58025458
 8004c30:	5802546c 	.word	0x5802546c
 8004c34:	58025480 	.word	0x58025480
 8004c38:	58025494 	.word	0x58025494

08004c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a42      	ldr	r2, [pc, #264]	@ (8004d54 <DMA_CalcBaseAndBitshift+0x118>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d04a      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a41      	ldr	r2, [pc, #260]	@ (8004d58 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d045      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d5c <DMA_CalcBaseAndBitshift+0x120>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d040      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3e      	ldr	r2, [pc, #248]	@ (8004d60 <DMA_CalcBaseAndBitshift+0x124>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d03b      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3c      	ldr	r2, [pc, #240]	@ (8004d64 <DMA_CalcBaseAndBitshift+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d036      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d031      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a39      	ldr	r2, [pc, #228]	@ (8004d6c <DMA_CalcBaseAndBitshift+0x130>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02c      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a38      	ldr	r2, [pc, #224]	@ (8004d70 <DMA_CalcBaseAndBitshift+0x134>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d027      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a36      	ldr	r2, [pc, #216]	@ (8004d74 <DMA_CalcBaseAndBitshift+0x138>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a35      	ldr	r2, [pc, #212]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d01d      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a33      	ldr	r2, [pc, #204]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x140>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a32      	ldr	r2, [pc, #200]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x144>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x148>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x150>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x154>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <DMA_CalcBaseAndBitshift+0xac>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <DMA_CalcBaseAndBitshift+0xae>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d024      	beq.n	8004d38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3b10      	subs	r3, #16
 8004cf6:	4a27      	ldr	r2, [pc, #156]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x158>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d908      	bls.n	8004d28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x160>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d26:	e00d      	b.n	8004d44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x160>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d36:	e005      	b.n	8004d44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40020010 	.word	0x40020010
 8004d58:	40020028 	.word	0x40020028
 8004d5c:	40020040 	.word	0x40020040
 8004d60:	40020058 	.word	0x40020058
 8004d64:	40020070 	.word	0x40020070
 8004d68:	40020088 	.word	0x40020088
 8004d6c:	400200a0 	.word	0x400200a0
 8004d70:	400200b8 	.word	0x400200b8
 8004d74:	40020410 	.word	0x40020410
 8004d78:	40020428 	.word	0x40020428
 8004d7c:	40020440 	.word	0x40020440
 8004d80:	40020458 	.word	0x40020458
 8004d84:	40020470 	.word	0x40020470
 8004d88:	40020488 	.word	0x40020488
 8004d8c:	400204a0 	.word	0x400204a0
 8004d90:	400204b8 	.word	0x400204b8
 8004d94:	aaaaaaab 	.word	0xaaaaaaab
 8004d98:	0800def8 	.word	0x0800def8
 8004d9c:	fffffc00 	.word	0xfffffc00

08004da0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d120      	bne.n	8004df6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d858      	bhi.n	8004e6e <DMA_CheckFifoParam+0xce>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <DMA_CheckFifoParam+0x24>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004de7 	.word	0x08004de7
 8004dcc:	08004dd5 	.word	0x08004dd5
 8004dd0:	08004e6f 	.word	0x08004e6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d048      	beq.n	8004e72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de4:	e045      	b.n	8004e72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dee:	d142      	bne.n	8004e76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df4:	e03f      	b.n	8004e76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfe:	d123      	bne.n	8004e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d838      	bhi.n	8004e7a <DMA_CheckFifoParam+0xda>
 8004e08:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <DMA_CheckFifoParam+0x70>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e27 	.word	0x08004e27
 8004e18:	08004e21 	.word	0x08004e21
 8004e1c:	08004e39 	.word	0x08004e39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
        break;
 8004e24:	e030      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d025      	beq.n	8004e7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e36:	e022      	b.n	8004e7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e40:	d11f      	bne.n	8004e82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e46:	e01c      	b.n	8004e82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d902      	bls.n	8004e56 <DMA_CheckFifoParam+0xb6>
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d003      	beq.n	8004e5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e54:	e018      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
        break;
 8004e5a:	e015      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e6c:	e00b      	b.n	8004e86 <DMA_CheckFifoParam+0xe6>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e00a      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        break;
 8004e72:	bf00      	nop
 8004e74:	e008      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        break;
 8004e76:	bf00      	nop
 8004e78:	e006      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e004      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
        break;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
    break;
 8004e86:	bf00      	nop
    }
  }

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a38      	ldr	r2, [pc, #224]	@ (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d022      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a36      	ldr	r2, [pc, #216]	@ (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01d      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	@ (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a32      	ldr	r2, [pc, #200]	@ (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	@ (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01a      	beq.n	8004f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	3b08      	subs	r3, #8
 8004f08:	4a28      	ldr	r2, [pc, #160]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4b26      	ldr	r3, [pc, #152]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a24      	ldr	r2, [pc, #144]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f34:	e024      	b.n	8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3b10      	subs	r3, #16
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d806      	bhi.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d902      	bls.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4b18      	ldr	r3, [pc, #96]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f70:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2201      	movs	r2, #1
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	58025408 	.word	0x58025408
 8004f90:	5802541c 	.word	0x5802541c
 8004f94:	58025430 	.word	0x58025430
 8004f98:	58025444 	.word	0x58025444
 8004f9c:	58025458 	.word	0x58025458
 8004fa0:	5802546c 	.word	0x5802546c
 8004fa4:	58025480 	.word	0x58025480
 8004fa8:	58025494 	.word	0x58025494
 8004fac:	cccccccd 	.word	0xcccccccd
 8004fb0:	16009600 	.word	0x16009600
 8004fb4:	58025880 	.word	0x58025880
 8004fb8:	aaaaaaab 	.word	0xaaaaaaab
 8004fbc:	400204b8 	.word	0x400204b8
 8004fc0:	4002040f 	.word	0x4002040f
 8004fc4:	10008200 	.word	0x10008200
 8004fc8:	40020880 	.word	0x40020880

08004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04a      	beq.n	8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d847      	bhi.n	8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a25      	ldr	r2, [pc, #148]	@ (8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a24      	ldr	r2, [pc, #144]	@ (8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a22      	ldr	r2, [pc, #136]	@ (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	@ (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005054:	671a      	str	r2, [r3, #112]	@ 0x70
 8005056:	e009      	b.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a11      	ldr	r2, [pc, #68]	@ (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800506a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	58025408 	.word	0x58025408
 8005088:	5802541c 	.word	0x5802541c
 800508c:	58025430 	.word	0x58025430
 8005090:	58025444 	.word	0x58025444
 8005094:	58025458 	.word	0x58025458
 8005098:	5802546c 	.word	0x5802546c
 800509c:	58025480 	.word	0x58025480
 80050a0:	58025494 	.word	0x58025494
 80050a4:	1600963f 	.word	0x1600963f
 80050a8:	58025940 	.word	0x58025940
 80050ac:	1000823f 	.word	0x1000823f
 80050b0:	40020940 	.word	0x40020940

080050b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	@ 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050c2:	4b89      	ldr	r3, [pc, #548]	@ (80052e8 <HAL_GPIO_Init+0x234>)
 80050c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050c6:	e194      	b.n	80053f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 8186 	beq.w	80053ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d005      	beq.n	80050f8 <HAL_GPIO_Init+0x44>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d130      	bne.n	800515a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800512e:	2201      	movs	r2, #1
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0201 	and.w	r2, r3, #1
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b03      	cmp	r3, #3
 8005164:	d017      	beq.n	8005196 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2203      	movs	r2, #3
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d123      	bne.n	80051ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	08da      	lsrs	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3208      	adds	r2, #8
 80051aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	220f      	movs	r2, #15
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	08da      	lsrs	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3208      	adds	r2, #8
 80051e4:	69b9      	ldr	r1, [r7, #24]
 80051e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	2203      	movs	r2, #3
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 0203 	and.w	r2, r3, #3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80e0 	beq.w	80053ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800522c:	4b2f      	ldr	r3, [pc, #188]	@ (80052ec <HAL_GPIO_Init+0x238>)
 800522e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005232:	4a2e      	ldr	r2, [pc, #184]	@ (80052ec <HAL_GPIO_Init+0x238>)
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800523c:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <HAL_GPIO_Init+0x238>)
 800523e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800524a:	4a29      	ldr	r2, [pc, #164]	@ (80052f0 <HAL_GPIO_Init+0x23c>)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	3302      	adds	r3, #2
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	220f      	movs	r2, #15
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a20      	ldr	r2, [pc, #128]	@ (80052f4 <HAL_GPIO_Init+0x240>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d052      	beq.n	800531c <HAL_GPIO_Init+0x268>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <HAL_GPIO_Init+0x244>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d031      	beq.n	80052e2 <HAL_GPIO_Init+0x22e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1e      	ldr	r2, [pc, #120]	@ (80052fc <HAL_GPIO_Init+0x248>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <HAL_GPIO_Init+0x22a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <HAL_GPIO_Init+0x24c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d025      	beq.n	80052da <HAL_GPIO_Init+0x226>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <HAL_GPIO_Init+0x250>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01f      	beq.n	80052d6 <HAL_GPIO_Init+0x222>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <HAL_GPIO_Init+0x254>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d019      	beq.n	80052d2 <HAL_GPIO_Init+0x21e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1a      	ldr	r2, [pc, #104]	@ (800530c <HAL_GPIO_Init+0x258>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_GPIO_Init+0x21a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a19      	ldr	r2, [pc, #100]	@ (8005310 <HAL_GPIO_Init+0x25c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00d      	beq.n	80052ca <HAL_GPIO_Init+0x216>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_GPIO_Init+0x260>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <HAL_GPIO_Init+0x212>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a17      	ldr	r2, [pc, #92]	@ (8005318 <HAL_GPIO_Init+0x264>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_GPIO_Init+0x20e>
 80052be:	2309      	movs	r3, #9
 80052c0:	e02d      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052c2:	230a      	movs	r3, #10
 80052c4:	e02b      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052c6:	2308      	movs	r3, #8
 80052c8:	e029      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052ca:	2307      	movs	r3, #7
 80052cc:	e027      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052ce:	2306      	movs	r3, #6
 80052d0:	e025      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052d2:	2305      	movs	r3, #5
 80052d4:	e023      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052d6:	2304      	movs	r3, #4
 80052d8:	e021      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052da:	2303      	movs	r3, #3
 80052dc:	e01f      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052de:	2302      	movs	r3, #2
 80052e0:	e01d      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e01b      	b.n	800531e <HAL_GPIO_Init+0x26a>
 80052e6:	bf00      	nop
 80052e8:	58000080 	.word	0x58000080
 80052ec:	58024400 	.word	0x58024400
 80052f0:	58000400 	.word	0x58000400
 80052f4:	58020000 	.word	0x58020000
 80052f8:	58020400 	.word	0x58020400
 80052fc:	58020800 	.word	0x58020800
 8005300:	58020c00 	.word	0x58020c00
 8005304:	58021000 	.word	0x58021000
 8005308:	58021400 	.word	0x58021400
 800530c:	58021800 	.word	0x58021800
 8005310:	58021c00 	.word	0x58021c00
 8005314:	58022000 	.word	0x58022000
 8005318:	58022400 	.word	0x58022400
 800531c:	2300      	movs	r3, #0
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	f002 0203 	and.w	r2, r2, #3
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	4093      	lsls	r3, r2
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800532e:	4938      	ldr	r1, [pc, #224]	@ (8005410 <HAL_GPIO_Init+0x35c>)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800533c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	3301      	adds	r3, #1
 80053f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f ae63 	bne.w	80050c8 <HAL_GPIO_Init+0x14>
  }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3724      	adds	r7, #36	@ 0x24
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	58000400 	.word	0x58000400

08005414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e001      	b.n	8005436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
 8005450:	4613      	mov	r3, r2
 8005452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545a:	887a      	ldrh	r2, [r7, #2]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005460:	e003      	b.n	800546a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	041a      	lsls	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	619a      	str	r2, [r3, #24]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af02      	add	r7, sp, #8
 800547c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0fe      	b.n	8005686 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fc f829 	bl	80014f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2203      	movs	r2, #3
 80054a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f005 fb2c 	bl	800ab0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7c1a      	ldrb	r2, [r3, #16]
 80054bc:	f88d 2000 	strb.w	r2, [sp]
 80054c0:	3304      	adds	r3, #4
 80054c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c4:	f005 fab0 	bl	800aa28 <USB_CoreInit>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0d5      	b.n	8005686 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f005 fb24 	bl	800ab2e <USB_SetCurrentMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0c6      	b.n	8005686 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e04a      	b.n	8005594 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3315      	adds	r3, #21
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005512:	7bfa      	ldrb	r2, [r7, #15]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3314      	adds	r3, #20
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	b298      	uxth	r0, r3
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	332e      	adds	r3, #46	@ 0x2e
 800553a:	4602      	mov	r2, r0
 800553c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800553e:	7bfa      	ldrb	r2, [r7, #15]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	3318      	adds	r3, #24
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	331c      	adds	r3, #28
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3320      	adds	r3, #32
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3324      	adds	r3, #36	@ 0x24
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	3301      	adds	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	429a      	cmp	r2, r3
 800559c:	d3af      	bcc.n	80054fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
 80055a2:	e044      	b.n	800562e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80055cc:	7bfa      	ldrb	r2, [r7, #15]
 80055ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055fc:	7bfa      	ldrb	r2, [r7, #15]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	3301      	adds	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	791b      	ldrb	r3, [r3, #4]
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3b5      	bcc.n	80055a4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7c1a      	ldrb	r2, [r3, #16]
 8005640:	f88d 2000 	strb.w	r2, [sp]
 8005644:	3304      	adds	r3, #4
 8005646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005648:	f005 fabe 	bl	800abc8 <USB_DevInit>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e013      	b.n	8005686 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7b1b      	ldrb	r3, [r3, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f80b 	bl	8005690 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f005 fc79 	bl	800af76 <USB_DevDisconnect>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056be:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	10000003 	.word	0x10000003

080056d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056e0:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <HAL_PWREx_ConfigSupply+0x70>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d00a      	beq.n	8005702 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056ec:	4b16      	ldr	r3, [pc, #88]	@ (8005748 <HAL_PWREx_ConfigSupply+0x70>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d001      	beq.n	80056fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01f      	b.n	800573e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e01d      	b.n	800573e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005702:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_PWREx_ConfigSupply+0x70>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 0207 	bic.w	r2, r3, #7
 800570a:	490f      	ldr	r1, [pc, #60]	@ (8005748 <HAL_PWREx_ConfigSupply+0x70>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4313      	orrs	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005712:	f7fb ffe5 	bl	80016e0 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005718:	e009      	b.n	800572e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800571a:	f7fb ffe1 	bl	80016e0 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005728:	d901      	bls.n	800572e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_PWREx_ConfigSupply+0x70>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573a:	d1ee      	bne.n	800571a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	58024800 	.word	0x58024800

0800574c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a04      	ldr	r2, [pc, #16]	@ (8005768 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800575a:	60d3      	str	r3, [r2, #12]
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	58024800 	.word	0x58024800

0800576c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	@ 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f000 bc48 	b.w	8006010 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8088 	beq.w	800589e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578e:	4b99      	ldr	r3, [pc, #612]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005798:	4b96      	ldr	r3, [pc, #600]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d007      	beq.n	80057b4 <HAL_RCC_OscConfig+0x48>
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	2b18      	cmp	r3, #24
 80057a8:	d111      	bne.n	80057ce <HAL_RCC_OscConfig+0x62>
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d10c      	bne.n	80057ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b4:	4b8f      	ldr	r3, [pc, #572]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06d      	beq.n	800589c <HAL_RCC_OscConfig+0x130>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d169      	bne.n	800589c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f000 bc21 	b.w	8006010 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x7a>
 80057d8:	4b86      	ldr	r3, [pc, #536]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a85      	ldr	r2, [pc, #532]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e02e      	b.n	8005844 <HAL_RCC_OscConfig+0xd8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x9c>
 80057ee:	4b81      	ldr	r3, [pc, #516]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a80      	ldr	r2, [pc, #512]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b7e      	ldr	r3, [pc, #504]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a7d      	ldr	r2, [pc, #500]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005800:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e01d      	b.n	8005844 <HAL_RCC_OscConfig+0xd8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0xc0>
 8005812:	4b78      	ldr	r3, [pc, #480]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a77      	ldr	r2, [pc, #476]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b75      	ldr	r3, [pc, #468]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a74      	ldr	r2, [pc, #464]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e00b      	b.n	8005844 <HAL_RCC_OscConfig+0xd8>
 800582c:	4b71      	ldr	r3, [pc, #452]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a70      	ldr	r2, [pc, #448]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b6e      	ldr	r3, [pc, #440]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a6d      	ldr	r2, [pc, #436]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800583e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d013      	beq.n	8005874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fb ff48 	bl	80016e0 <HAL_GetTick>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fb ff44 	bl	80016e0 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	@ 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e3d4      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005866:	4b63      	ldr	r3, [pc, #396]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0xe8>
 8005872:	e014      	b.n	800589e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fb ff34 	bl	80016e0 <HAL_GetTick>
 8005878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587c:	f7fb ff30 	bl	80016e0 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	@ 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e3c0      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800588e:	4b59      	ldr	r3, [pc, #356]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x110>
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80ca 	beq.w	8005a40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ac:	4b51      	ldr	r3, [pc, #324]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058b6:	4b4f      	ldr	r3, [pc, #316]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_RCC_OscConfig+0x166>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2b18      	cmp	r3, #24
 80058c6:	d156      	bne.n	8005976 <HAL_RCC_OscConfig+0x20a>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d151      	bne.n	8005976 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d2:	4b48      	ldr	r3, [pc, #288]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x17e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e392      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058ea:	4b42      	ldr	r3, [pc, #264]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 0219 	bic.w	r2, r3, #25
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	493f      	ldr	r1, [pc, #252]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fb fef0 	bl	80016e0 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fb feec 	bl	80016e0 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e37c      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005916:	4b37      	ldr	r3, [pc, #220]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005922:	f7fb ff0d 	bl	8001740 <HAL_GetREVID>
 8005926:	4603      	mov	r3, r0
 8005928:	f241 0203 	movw	r2, #4099	@ 0x1003
 800592c:	4293      	cmp	r3, r2
 800592e:	d817      	bhi.n	8005960 <HAL_RCC_OscConfig+0x1f4>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d108      	bne.n	800594a <HAL_RCC_OscConfig+0x1de>
 8005938:	4b2e      	ldr	r3, [pc, #184]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005946:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005948:	e07a      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594a:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	031b      	lsls	r3, r3, #12
 8005958:	4926      	ldr	r1, [pc, #152]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800595e:	e06f      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	4921      	ldr	r1, [pc, #132]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	e064      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d047      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 0219 	bic.w	r2, r3, #25
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	491a      	ldr	r1, [pc, #104]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fb fea6 	bl	80016e0 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005998:	f7fb fea2 	bl	80016e0 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e332      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059aa:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b6:	f7fb fec3 	bl	8001740 <HAL_GetREVID>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d819      	bhi.n	80059f8 <HAL_RCC_OscConfig+0x28c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d108      	bne.n	80059de <HAL_RCC_OscConfig+0x272>
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80059d4:	4a07      	ldr	r2, [pc, #28]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80059d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059da:	6053      	str	r3, [r2, #4]
 80059dc:	e030      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
 80059de:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	031b      	lsls	r3, r3, #12
 80059ec:	4901      	ldr	r1, [pc, #4]	@ (80059f4 <HAL_RCC_OscConfig+0x288>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
 80059f2:	e025      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
 80059f4:	58024400 	.word	0x58024400
 80059f8:	4b9a      	ldr	r3, [pc, #616]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	4997      	ldr	r1, [pc, #604]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	e018      	b.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0e:	4b95      	ldr	r3, [pc, #596]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a94      	ldr	r2, [pc, #592]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1a:	f7fb fe61 	bl	80016e0 <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a22:	f7fb fe5d 	bl	80016e0 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e2ed      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a34:	4b8b      	ldr	r3, [pc, #556]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a9 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a4e:	4b85      	ldr	r3, [pc, #532]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a58:	4b82      	ldr	r3, [pc, #520]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d007      	beq.n	8005a74 <HAL_RCC_OscConfig+0x308>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b18      	cmp	r3, #24
 8005a68:	d13a      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x374>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d135      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a74:	4b7b      	ldr	r3, [pc, #492]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_OscConfig+0x320>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b80      	cmp	r3, #128	@ 0x80
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e2c1      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a8c:	f7fb fe58 	bl	8001740 <HAL_GetREVID>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d817      	bhi.n	8005aca <HAL_RCC_OscConfig+0x35e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d108      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x348>
 8005aa2:	4b70      	ldr	r3, [pc, #448]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005aac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ab0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ab2:	e075      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	069b      	lsls	r3, r3, #26
 8005ac2:	4968      	ldr	r1, [pc, #416]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac8:	e06a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aca:	4b66      	ldr	r3, [pc, #408]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	4962      	ldr	r1, [pc, #392]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ade:	e05f      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d042      	beq.n	8005b6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5d      	ldr	r2, [pc, #372]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fb fdf4 	bl	80016e0 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005afc:	f7fb fdf0 	bl	80016e0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e280      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b0e:	4b55      	ldr	r3, [pc, #340]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b1a:	f7fb fe11 	bl	8001740 <HAL_GetREVID>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d817      	bhi.n	8005b58 <HAL_RCC_OscConfig+0x3ec>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d108      	bne.n	8005b42 <HAL_RCC_OscConfig+0x3d6>
 8005b30:	4b4c      	ldr	r3, [pc, #304]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b38:	4a4a      	ldr	r2, [pc, #296]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e02e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
 8005b42:	4b48      	ldr	r3, [pc, #288]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	069b      	lsls	r3, r3, #26
 8005b50:	4944      	ldr	r1, [pc, #272]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	604b      	str	r3, [r1, #4]
 8005b56:	e023      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
 8005b58:	4b42      	ldr	r3, [pc, #264]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	493f      	ldr	r1, [pc, #252]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60cb      	str	r3, [r1, #12]
 8005b6c:	e018      	b.n	8005ba0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a3c      	ldr	r2, [pc, #240]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fb fdb1 	bl	80016e0 <HAL_GetTick>
 8005b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b82:	f7fb fdad 	bl	80016e0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e23d      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b94:	4b33      	ldr	r3, [pc, #204]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d036      	beq.n	8005c1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d019      	beq.n	8005be8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fb fd8e 	bl	80016e0 <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fb fd8a 	bl	80016e0 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e21a      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bda:	4b22      	ldr	r3, [pc, #136]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x45c>
 8005be6:	e018      	b.n	8005c1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fb fd74 	bl	80016e0 <HAL_GetTick>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fb fd70 	bl	80016e0 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e200      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c0e:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d039      	beq.n	8005c9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01c      	beq.n	8005c68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a0c      	ldr	r2, [pc, #48]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c3a:	f7fb fd51 	bl	80016e0 <HAL_GetTick>
 8005c3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c42:	f7fb fd4d 	bl	80016e0 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e1dd      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c54:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <HAL_RCC_OscConfig+0x4f8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCC_OscConfig+0x4d6>
 8005c60:	e01b      	b.n	8005c9a <HAL_RCC_OscConfig+0x52e>
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c68:	4b9b      	ldr	r3, [pc, #620]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a9a      	ldr	r2, [pc, #616]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005c6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c74:	f7fb fd34 	bl	80016e0 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c7c:	f7fb fd30 	bl	80016e0 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e1c0      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c8e:	4b92      	ldr	r3, [pc, #584]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8081 	beq.w	8005daa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8005edc <HAL_RCC_OscConfig+0x770>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a8b      	ldr	r2, [pc, #556]	@ (8005edc <HAL_RCC_OscConfig+0x770>)
 8005cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cb4:	f7fb fd14 	bl	80016e0 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbc:	f7fb fd10 	bl	80016e0 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	@ 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e1a0      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cce:	4b83      	ldr	r3, [pc, #524]	@ (8005edc <HAL_RCC_OscConfig+0x770>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d106      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x584>
 8005ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cee:	e02d      	b.n	8005d4c <HAL_RCC_OscConfig+0x5e0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10c      	bne.n	8005d12 <HAL_RCC_OscConfig+0x5a6>
 8005cf8:	4b77      	ldr	r3, [pc, #476]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	4a76      	ldr	r2, [pc, #472]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d04:	4b74      	ldr	r3, [pc, #464]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d08:	4a73      	ldr	r2, [pc, #460]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d0a:	f023 0304 	bic.w	r3, r3, #4
 8005d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d10:	e01c      	b.n	8005d4c <HAL_RCC_OscConfig+0x5e0>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x5c8>
 8005d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d26:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d32:	e00b      	b.n	8005d4c <HAL_RCC_OscConfig+0x5e0>
 8005d34:	4b68      	ldr	r3, [pc, #416]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a67      	ldr	r2, [pc, #412]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d40:	4b65      	ldr	r3, [pc, #404]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a64      	ldr	r2, [pc, #400]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d54:	f7fb fcc4 	bl	80016e0 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5c:	f7fb fcc0 	bl	80016e0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e14e      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d72:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0ee      	beq.n	8005d5c <HAL_RCC_OscConfig+0x5f0>
 8005d7e:	e014      	b.n	8005daa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fb fcae 	bl	80016e0 <HAL_GetTick>
 8005d84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fb fcaa 	bl	80016e0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e138      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ee      	bne.n	8005d88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 812d 	beq.w	800600e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005db4:	4b48      	ldr	r3, [pc, #288]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dbc:	2b18      	cmp	r3, #24
 8005dbe:	f000 80bd 	beq.w	8005f3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	f040 809e 	bne.w	8005f08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dcc:	4b42      	ldr	r3, [pc, #264]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a41      	ldr	r2, [pc, #260]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fb fc82 	bl	80016e0 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fb fc7e 	bl	80016e0 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e10e      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df2:	4b39      	ldr	r3, [pc, #228]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dfe:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <HAL_RCC_OscConfig+0x774>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e0e:	0112      	lsls	r2, r2, #4
 8005e10:	430a      	orrs	r2, r1
 8005e12:	4931      	ldr	r1, [pc, #196]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	3b01      	subs	r3, #1
 8005e28:	025b      	lsls	r3, r3, #9
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	3b01      	subs	r3, #1
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	3b01      	subs	r3, #1
 8005e42:	061b      	lsls	r3, r3, #24
 8005e44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e48:	4923      	ldr	r1, [pc, #140]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e4e:	4b22      	ldr	r3, [pc, #136]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5e:	4b21      	ldr	r3, [pc, #132]	@ (8005ee4 <HAL_RCC_OscConfig+0x778>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e66:	00d2      	lsls	r2, r2, #3
 8005e68:	491b      	ldr	r1, [pc, #108]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	f023 020c 	bic.w	r2, r3, #12
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	4917      	ldr	r1, [pc, #92]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e80:	4b15      	ldr	r3, [pc, #84]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	f023 0202 	bic.w	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	4912      	ldr	r1, [pc, #72]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e92:	4b11      	ldr	r3, [pc, #68]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	4a10      	ldr	r2, [pc, #64]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005eb6:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec2:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ece:	f7fb fc07 	bl	80016e0 <HAL_GetTick>
 8005ed2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed4:	e011      	b.n	8005efa <HAL_RCC_OscConfig+0x78e>
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	58024800 	.word	0x58024800
 8005ee0:	fffffc0c 	.word	0xfffffc0c
 8005ee4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fb fbfa 	bl	80016e0 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e08a      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005efa:	4b47      	ldr	r3, [pc, #284]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x77c>
 8005f06:	e082      	b.n	800600e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b43      	ldr	r3, [pc, #268]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a42      	ldr	r2, [pc, #264]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fb fbe4 	bl	80016e0 <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fb fbe0 	bl	80016e0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e070      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x7b0>
 8005f3a:	e068      	b.n	800600e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f3c:	4b36      	ldr	r3, [pc, #216]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f42:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d031      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f003 0203 	and.w	r2, r3, #3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d12a      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d122      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d11a      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0a5b      	lsrs	r3, r3, #9
 8005f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d111      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	0c1b      	lsrs	r3, r3, #16
 8005f94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d108      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	0e1b      	lsrs	r3, r3, #24
 8005fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e02b      	b.n	8006010 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fb8:	4b17      	ldr	r3, [pc, #92]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d01f      	beq.n	800600e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fce:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	4a11      	ldr	r2, [pc, #68]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fda:	f7fb fb81 	bl	80016e0 <HAL_GetTick>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fe0:	bf00      	nop
 8005fe2:	f7fb fb7d 	bl	80016e0 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d0f9      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fee:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <HAL_RCC_OscConfig+0x8b0>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ffa:	00d2      	lsls	r2, r2, #3
 8005ffc:	4906      	ldr	r1, [pc, #24]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006002:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	4a04      	ldr	r2, [pc, #16]	@ (8006018 <HAL_RCC_OscConfig+0x8ac>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3730      	adds	r7, #48	@ 0x30
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	58024400 	.word	0x58024400
 800601c:	ffff0007 	.word	0xffff0007

08006020 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e19c      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006034:	4b8a      	ldr	r3, [pc, #552]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d910      	bls.n	8006064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	4b87      	ldr	r3, [pc, #540]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 020f 	bic.w	r2, r3, #15
 800604a:	4985      	ldr	r1, [pc, #532]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b83      	ldr	r3, [pc, #524]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e184      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	4b7b      	ldr	r3, [pc, #492]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800607c:	429a      	cmp	r2, r3
 800607e:	d908      	bls.n	8006092 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006080:	4b78      	ldr	r3, [pc, #480]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4975      	ldr	r1, [pc, #468]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800608e:	4313      	orrs	r3, r2
 8006090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	4b70      	ldr	r3, [pc, #448]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d908      	bls.n	80060c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	496a      	ldr	r1, [pc, #424]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	4b64      	ldr	r3, [pc, #400]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060d8:	429a      	cmp	r2, r3
 80060da:	d908      	bls.n	80060ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060dc:	4b61      	ldr	r3, [pc, #388]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	495e      	ldr	r1, [pc, #376]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d010      	beq.n	800611c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	4b59      	ldr	r3, [pc, #356]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006106:	429a      	cmp	r2, r3
 8006108:	d908      	bls.n	800611c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800610a:	4b56      	ldr	r3, [pc, #344]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4953      	ldr	r1, [pc, #332]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006118:	4313      	orrs	r3, r2
 800611a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d010      	beq.n	800614a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	4b4d      	ldr	r3, [pc, #308]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	429a      	cmp	r2, r3
 8006136:	d908      	bls.n	800614a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006138:	4b4a      	ldr	r3, [pc, #296]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f023 020f 	bic.w	r2, r3, #15
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4947      	ldr	r1, [pc, #284]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006146:	4313      	orrs	r3, r2
 8006148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d055      	beq.n	8006202 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006156:	4b43      	ldr	r3, [pc, #268]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4940      	ldr	r1, [pc, #256]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006164:	4313      	orrs	r3, r2
 8006166:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d107      	bne.n	8006180 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006170:	4b3c      	ldr	r3, [pc, #240]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d121      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0f6      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d107      	bne.n	8006198 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006188:	4b36      	ldr	r3, [pc, #216]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d115      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0ea      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d107      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061a0:	4b30      	ldr	r3, [pc, #192]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0de      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061b0:	4b2c      	ldr	r3, [pc, #176]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0d6      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061c0:	4b28      	ldr	r3, [pc, #160]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f023 0207 	bic.w	r2, r3, #7
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4925      	ldr	r1, [pc, #148]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d2:	f7fb fa85 	bl	80016e0 <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061da:	f7fb fa81 	bl	80016e0 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0be      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	429a      	cmp	r2, r3
 8006200:	d1eb      	bne.n	80061da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	4b14      	ldr	r3, [pc, #80]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	429a      	cmp	r2, r3
 800621c:	d208      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800621e:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f023 020f 	bic.w	r2, r3, #15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	490e      	ldr	r1, [pc, #56]	@ (8006264 <HAL_RCC_ClockConfig+0x244>)
 800622c:	4313      	orrs	r3, r2
 800622e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006230:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d214      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b08      	ldr	r3, [pc, #32]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 020f 	bic.w	r2, r3, #15
 8006246:	4906      	ldr	r1, [pc, #24]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <HAL_RCC_ClockConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e086      	b.n	800636e <HAL_RCC_ClockConfig+0x34e>
 8006260:	52002000 	.word	0x52002000
 8006264:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	4b3f      	ldr	r3, [pc, #252]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006280:	429a      	cmp	r2, r3
 8006282:	d208      	bcs.n	8006296 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006284:	4b3c      	ldr	r3, [pc, #240]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4939      	ldr	r1, [pc, #228]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006292:	4313      	orrs	r3, r2
 8006294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	4b34      	ldr	r3, [pc, #208]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d208      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	492e      	ldr	r1, [pc, #184]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062dc:	429a      	cmp	r2, r3
 80062de:	d208      	bcs.n	80062f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062e0:	4b25      	ldr	r3, [pc, #148]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	4922      	ldr	r1, [pc, #136]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69da      	ldr	r2, [r3, #28]
 8006302:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800630a:	429a      	cmp	r2, r3
 800630c:	d208      	bcs.n	8006320 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800630e:	4b1a      	ldr	r3, [pc, #104]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4917      	ldr	r1, [pc, #92]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 800631c:	4313      	orrs	r3, r2
 800631e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006320:	f000 f834 	bl	800638c <HAL_RCC_GetSysClockFreq>
 8006324:	4602      	mov	r2, r0
 8006326:	4b14      	ldr	r3, [pc, #80]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	4912      	ldr	r1, [pc, #72]	@ (800637c <HAL_RCC_ClockConfig+0x35c>)
 8006332:	5ccb      	ldrb	r3, [r1, r3]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800633e:	4b0e      	ldr	r3, [pc, #56]	@ (8006378 <HAL_RCC_ClockConfig+0x358>)
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	4a0d      	ldr	r2, [pc, #52]	@ (800637c <HAL_RCC_ClockConfig+0x35c>)
 8006348:	5cd3      	ldrb	r3, [r2, r3]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
 8006354:	4a0a      	ldr	r2, [pc, #40]	@ (8006380 <HAL_RCC_ClockConfig+0x360>)
 8006356:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006358:	4a0a      	ldr	r2, [pc, #40]	@ (8006384 <HAL_RCC_ClockConfig+0x364>)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800635e:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <HAL_RCC_ClockConfig+0x368>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fa feba 	bl	80010dc <HAL_InitTick>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	0800dee8 	.word	0x0800dee8
 8006380:	24000004 	.word	0x24000004
 8006384:	24000000 	.word	0x24000000
 8006388:	24000008 	.word	0x24000008

0800638c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800638c:	b480      	push	{r7}
 800638e:	b089      	sub	sp, #36	@ 0x24
 8006390:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006392:	4bb3      	ldr	r3, [pc, #716]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800639a:	2b18      	cmp	r3, #24
 800639c:	f200 8155 	bhi.w	800664a <HAL_RCC_GetSysClockFreq+0x2be>
 80063a0:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	0800640d 	.word	0x0800640d
 80063ac:	0800664b 	.word	0x0800664b
 80063b0:	0800664b 	.word	0x0800664b
 80063b4:	0800664b 	.word	0x0800664b
 80063b8:	0800664b 	.word	0x0800664b
 80063bc:	0800664b 	.word	0x0800664b
 80063c0:	0800664b 	.word	0x0800664b
 80063c4:	0800664b 	.word	0x0800664b
 80063c8:	08006433 	.word	0x08006433
 80063cc:	0800664b 	.word	0x0800664b
 80063d0:	0800664b 	.word	0x0800664b
 80063d4:	0800664b 	.word	0x0800664b
 80063d8:	0800664b 	.word	0x0800664b
 80063dc:	0800664b 	.word	0x0800664b
 80063e0:	0800664b 	.word	0x0800664b
 80063e4:	0800664b 	.word	0x0800664b
 80063e8:	08006439 	.word	0x08006439
 80063ec:	0800664b 	.word	0x0800664b
 80063f0:	0800664b 	.word	0x0800664b
 80063f4:	0800664b 	.word	0x0800664b
 80063f8:	0800664b 	.word	0x0800664b
 80063fc:	0800664b 	.word	0x0800664b
 8006400:	0800664b 	.word	0x0800664b
 8006404:	0800664b 	.word	0x0800664b
 8006408:	0800643f 	.word	0x0800643f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640c:	4b94      	ldr	r3, [pc, #592]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006418:	4b91      	ldr	r3, [pc, #580]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	4a90      	ldr	r2, [pc, #576]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800642a:	e111      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800642c:	4b8d      	ldr	r3, [pc, #564]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800642e:	61bb      	str	r3, [r7, #24]
      break;
 8006430:	e10e      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006432:	4b8d      	ldr	r3, [pc, #564]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006434:	61bb      	str	r3, [r7, #24]
      break;
 8006436:	e10b      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006438:	4b8c      	ldr	r3, [pc, #560]	@ (800666c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800643a:	61bb      	str	r3, [r7, #24]
      break;
 800643c:	e108      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800643e:	4b88      	ldr	r3, [pc, #544]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006448:	4b85      	ldr	r3, [pc, #532]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006452:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006454:	4b82      	ldr	r3, [pc, #520]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800645e:	4b80      	ldr	r3, [pc, #512]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80e1 	beq.w	8006644 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f000 8083 	beq.w	8006590 <HAL_RCC_GetSysClockFreq+0x204>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b02      	cmp	r3, #2
 800648e:	f200 80a1 	bhi.w	80065d4 <HAL_RCC_GetSysClockFreq+0x248>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0x114>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d056      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x1c0>
 800649e:	e099      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d02d      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	4a6b      	ldr	r2, [pc, #428]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
 80064bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	4b62      	ldr	r3, [pc, #392]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006506:	e087      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651a:	4b51      	ldr	r3, [pc, #324]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	ed97 6a02 	vldr	s12, [r7, #8]
 800652e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800654a:	e065      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006556:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006678 <HAL_RCC_GetSysClockFreq+0x2ec>
 800655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655e:	4b40      	ldr	r3, [pc, #256]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006572:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006670 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800658e:	e043      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800667c <HAL_RCC_GetSysClockFreq+0x2f0>
 800659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065d2:	e021      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006678 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006670 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800660a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006616:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006618:	4b11      	ldr	r3, [pc, #68]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006622:	3301      	adds	r3, #1
 8006624:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006630:	edd7 6a07 	vldr	s13, [r7, #28]
 8006634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663c:	ee17 3a90 	vmov	r3, s15
 8006640:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006642:	e005      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
      break;
 8006648:	e002      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800664a:	4b07      	ldr	r3, [pc, #28]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800664c:	61bb      	str	r3, [r7, #24]
      break;
 800664e:	bf00      	nop
  }

  return sysclockfreq;
 8006650:	69bb      	ldr	r3, [r7, #24]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3724      	adds	r7, #36	@ 0x24
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	58024400 	.word	0x58024400
 8006664:	03d09000 	.word	0x03d09000
 8006668:	003d0900 	.word	0x003d0900
 800666c:	007a1200 	.word	0x007a1200
 8006670:	46000000 	.word	0x46000000
 8006674:	4c742400 	.word	0x4c742400
 8006678:	4a742400 	.word	0x4a742400
 800667c:	4af42400 	.word	0x4af42400

08006680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006686:	f7ff fe81 	bl	800638c <HAL_RCC_GetSysClockFreq>
 800668a:	4602      	mov	r2, r0
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	490f      	ldr	r1, [pc, #60]	@ (80066d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006698:	5ccb      	ldrb	r3, [r1, r3]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066a4:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	4a09      	ldr	r2, [pc, #36]	@ (80066d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80066ae:	5cd3      	ldrb	r3, [r2, r3]
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ba:	4a07      	ldr	r2, [pc, #28]	@ (80066d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066be:	4a07      	ldr	r2, [pc, #28]	@ (80066dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066c4:	4b04      	ldr	r3, [pc, #16]	@ (80066d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066c6:	681b      	ldr	r3, [r3, #0]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	58024400 	.word	0x58024400
 80066d4:	0800dee8 	.word	0x0800dee8
 80066d8:	24000004 	.word	0x24000004
 80066dc:	24000000 	.word	0x24000000

080066e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066e4:	f7ff ffcc 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4904      	ldr	r1, [pc, #16]	@ (8006708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400
 8006708:	0800dee8 	.word	0x0800dee8

0800670c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006710:	f7ff ffb6 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4904      	ldr	r1, [pc, #16]	@ (8006734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	58024400 	.word	0x58024400
 8006734:	0800dee8 	.word	0x0800dee8

08006738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	223f      	movs	r2, #63	@ 0x3f
 8006746:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0207 	and.w	r2, r3, #7
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006754:	4b17      	ldr	r3, [pc, #92]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006760:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800676c:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006778:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006784:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006790:	4b08      	ldr	r3, [pc, #32]	@ (80067b4 <HAL_RCC_GetClockConfig+0x7c>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCC_GetClockConfig+0x80>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	601a      	str	r2, [r3, #0]
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	58024400 	.word	0x58024400
 80067b8:	52002000 	.word	0x52002000

080067bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c0:	b0ca      	sub	sp, #296	@ 0x128
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80067e0:	2500      	movs	r5, #0
 80067e2:	ea54 0305 	orrs.w	r3, r4, r5
 80067e6:	d049      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067f2:	d02f      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80067f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067f8:	d828      	bhi.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067fe:	d01a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006804:	d822      	bhi.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800680a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800680e:	d007      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006810:	e01c      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006812:	4bb8      	ldr	r3, [pc, #736]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	4ab7      	ldr	r2, [pc, #732]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800681e:	e01a      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	3308      	adds	r3, #8
 8006826:	2102      	movs	r1, #2
 8006828:	4618      	mov	r0, r3
 800682a:	f002 fb61 	bl	8008ef0 <RCCEx_PLL2_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006834:	e00f      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	3328      	adds	r3, #40	@ 0x28
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f002 fc08 	bl	8009054 <RCCEx_PLL3_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800684a:	e004      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006852:	e000      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800685e:	4ba5      	ldr	r3, [pc, #660]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006862:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800686c:	4aa1      	ldr	r2, [pc, #644]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800686e:	430b      	orrs	r3, r1
 8006870:	6513      	str	r3, [r2, #80]	@ 0x50
 8006872:	e003      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006888:	f04f 0900 	mov.w	r9, #0
 800688c:	ea58 0309 	orrs.w	r3, r8, r9
 8006890:	d047      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006898:	2b04      	cmp	r3, #4
 800689a:	d82a      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b9 	.word	0x080068b9
 80068a8:	080068c7 	.word	0x080068c7
 80068ac:	080068dd 	.word	0x080068dd
 80068b0:	080068fb 	.word	0x080068fb
 80068b4:	080068fb 	.word	0x080068fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b8:	4b8e      	ldr	r3, [pc, #568]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a8d      	ldr	r2, [pc, #564]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068c4:	e01a      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fb0e 	bl	8008ef0 <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068da:	e00f      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	3328      	adds	r3, #40	@ 0x28
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f002 fbb5 	bl	8009054 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006904:	4b7b      	ldr	r3, [pc, #492]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006908:	f023 0107 	bic.w	r1, r3, #7
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006912:	4a78      	ldr	r2, [pc, #480]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6513      	str	r3, [r2, #80]	@ 0x50
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800692e:	f04f 0b00 	mov.w	fp, #0
 8006932:	ea5a 030b 	orrs.w	r3, sl, fp
 8006936:	d04c      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006942:	d030      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006948:	d829      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800694a:	2bc0      	cmp	r3, #192	@ 0xc0
 800694c:	d02d      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800694e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006950:	d825      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006952:	2b80      	cmp	r3, #128	@ 0x80
 8006954:	d018      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d821      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800695e:	2b40      	cmp	r3, #64	@ 0x40
 8006960:	d007      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006962:	e01c      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006964:	4b63      	ldr	r3, [pc, #396]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	4a62      	ldr	r2, [pc, #392]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800696a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006970:	e01c      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	3308      	adds	r3, #8
 8006978:	2100      	movs	r1, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f002 fab8 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006986:	e011      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	3328      	adds	r3, #40	@ 0x28
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f002 fb5f 	bl	8009054 <RCCEx_PLL3_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800699c:	e006      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069a4:	e002      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069b4:	4b4f      	ldr	r3, [pc, #316]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c2:	4a4c      	ldr	r2, [pc, #304]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80069c8:	e003      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80069de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80069e2:	2300      	movs	r3, #0
 80069e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80069e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80069ec:	460b      	mov	r3, r1
 80069ee:	4313      	orrs	r3, r2
 80069f0:	d053      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069fe:	d035      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a04:	d82e      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a0a:	d031      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a10:	d828      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a16:	d01a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a1c:	d822      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a26:	d007      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a28:	e01c      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2a:	4b32      	ldr	r3, [pc, #200]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a31      	ldr	r2, [pc, #196]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a36:	e01c      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f002 fa55 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a4c:	e011      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	3328      	adds	r3, #40	@ 0x28
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 fafc 	bl	8009054 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a62:	e006      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a6a:	e002      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006aa6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ab0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d056      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ac2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ac6:	d038      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ac8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006acc:	d831      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ace:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ad2:	d034      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ad4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ad8:	d82b      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ade:	d01d      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ae4:	d825      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006aea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aee:	d00a      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006af0:	e01f      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af8:	4ba2      	ldr	r3, [pc, #648]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	4aa1      	ldr	r2, [pc, #644]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b04:	e01c      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f002 f9ee 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b1a:	e011      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	3328      	adds	r3, #40	@ 0x28
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 fa95 	bl	8009054 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b30:	e006      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b48:	4b8e      	ldr	r3, [pc, #568]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b58:	4a8a      	ldr	r2, [pc, #552]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d03a      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8e:	2b30      	cmp	r3, #48	@ 0x30
 8006b90:	d01f      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b92:	2b30      	cmp	r3, #48	@ 0x30
 8006b94:	d819      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d00c      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d815      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d019      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d111      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba6:	4b77      	ldr	r3, [pc, #476]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	4a76      	ldr	r2, [pc, #472]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bb2:	e011      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f997 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bc8:	e006      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bd0:	e002      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006be0:	4b68      	ldr	r3, [pc, #416]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bee:	4a65      	ldr	r2, [pc, #404]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bf4:	e003      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	d051      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c28:	d035      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c2e:	d82e      	bhi.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c34:	d031      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c3a:	d828      	bhi.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c40:	d01a      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c46:	d822      	bhi.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c50:	d007      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c52:	e01c      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c54:	4b4b      	ldr	r3, [pc, #300]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	4a4a      	ldr	r2, [pc, #296]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c60:	e01c      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c66:	3308      	adds	r3, #8
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 f940 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c76:	e011      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	3328      	adds	r3, #40	@ 0x28
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 f9e7 	bl	8009054 <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c8c:	e006      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c94:	e002      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ca4:	4b37      	ldr	r3, [pc, #220]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb2:	4a34      	ldr	r2, [pc, #208]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cb8:	e003      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d056      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cec:	d033      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006cee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf2:	d82c      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf8:	d02f      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cfe:	d826      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d04:	d02b      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0a:	d820      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d10:	d012      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d16:	d81a      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d115      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	3308      	adds	r3, #8
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 f8e0 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d36:	e015      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	3328      	adds	r3, #40	@ 0x28
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f002 f987 	bl	8009054 <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d4c:	e00a      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d56:	bf00      	nop
 8006d58:	e004      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e000      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10d      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d6c:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7a:	4a02      	ldr	r2, [pc, #8]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d80:	e006      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006da6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d055      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dbc:	d033      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dc2:	d82c      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc8:	d02f      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dce:	d826      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006dd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dd4:	d02b      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006dd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dda:	d820      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de0:	d012      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de6:	d81a      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d022      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df0:	d115      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df6:	3308      	adds	r3, #8
 8006df8:	2101      	movs	r1, #1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f002 f878 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e06:	e015      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0c:	3328      	adds	r3, #40	@ 0x28
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4618      	mov	r0, r3
 8006e12:	f002 f91f 	bl	8009054 <RCCEx_PLL3_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e24:	e006      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e26:	bf00      	nop
 8006e28:	e004      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e2a:	bf00      	nop
 8006e2c:	e002      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e2e:	bf00      	nop
 8006e30:	e000      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10b      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e3c:	4ba3      	ldr	r3, [pc, #652]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e40:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e4c:	4a9f      	ldr	r2, [pc, #636]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d037      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e86:	d00e      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e8c:	d816      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d018      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e96:	d111      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b8c      	ldr	r3, [pc, #560]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a8b      	ldr	r2, [pc, #556]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	3308      	adds	r3, #8
 8006eac:	2101      	movs	r1, #1
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f002 f81e 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ece:	4b7f      	ldr	r3, [pc, #508]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006edc:	4a7b      	ldr	r2, [pc, #492]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	d039      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d81c      	bhi.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f16:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f2d 	.word	0x08006f2d
 8006f24:	08006f3b 	.word	0x08006f3b
 8006f28:	08006f59 	.word	0x08006f59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2c:	4b67      	ldr	r3, [pc, #412]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	4a66      	ldr	r2, [pc, #408]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f38:	e00f      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	3308      	adds	r3, #8
 8006f40:	2102      	movs	r1, #2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 ffd4 	bl	8008ef0 <RCCEx_PLL2_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f4e:	e004      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f62:	4b5a      	ldr	r3, [pc, #360]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f66:	f023 0103 	bic.w	r1, r3, #3
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f70:	4a56      	ldr	r2, [pc, #344]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f76:	e003      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f000 809f 	beq.w	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fae:	f7fa fb97 	bl	80016e0 <HAL_GetTick>
 8006fb2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb6:	e00b      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb8:	f7fa fb92 	bl	80016e0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b64      	cmp	r3, #100	@ 0x64
 8006fc6:	d903      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fce:	e005      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0ed      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d179      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fe4:	4b39      	ldr	r3, [pc, #228]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ff0:	4053      	eors	r3, r2
 8006ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d015      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007002:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007006:	4b31      	ldr	r3, [pc, #196]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700a:	4a30      	ldr	r2, [pc, #192]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007010:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007012:	4b2e      	ldr	r3, [pc, #184]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	4a2d      	ldr	r2, [pc, #180]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800701c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800701e:	4a2b      	ldr	r2, [pc, #172]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007024:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800702e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007032:	d118      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fa fb54 	bl	80016e0 <HAL_GetTick>
 8007038:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800703c:	e00d      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703e:	f7fa fb4f 	bl	80016e0 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007048:	1ad2      	subs	r2, r2, r3
 800704a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800704e:	429a      	cmp	r2, r3
 8007050:	d903      	bls.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007058:	e005      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0eb      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706a:	2b00      	cmp	r3, #0
 800706c:	d129      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800707a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800707e:	d10e      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007080:	4b12      	ldr	r3, [pc, #72]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007090:	091a      	lsrs	r2, r3, #4
 8007092:	4b10      	ldr	r3, [pc, #64]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007094:	4013      	ands	r3, r2
 8007096:	4a0d      	ldr	r2, [pc, #52]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007098:	430b      	orrs	r3, r1
 800709a:	6113      	str	r3, [r2, #16]
 800709c:	e005      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800709e:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070a8:	6113      	str	r3, [r2, #16]
 80070aa:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ba:	4a04      	ldr	r2, [pc, #16]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070bc:	430b      	orrs	r3, r1
 80070be:	6713      	str	r3, [r2, #112]	@ 0x70
 80070c0:	e00e      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80070ca:	e009      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80070cc:	58024400 	.word	0x58024400
 80070d0:	58024800 	.word	0x58024800
 80070d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f002 0301 	and.w	r3, r2, #1
 80070ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f000 8089 	beq.w	8007214 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007108:	2b28      	cmp	r3, #40	@ 0x28
 800710a:	d86b      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	080071ed 	.word	0x080071ed
 8007118:	080071e5 	.word	0x080071e5
 800711c:	080071e5 	.word	0x080071e5
 8007120:	080071e5 	.word	0x080071e5
 8007124:	080071e5 	.word	0x080071e5
 8007128:	080071e5 	.word	0x080071e5
 800712c:	080071e5 	.word	0x080071e5
 8007130:	080071e5 	.word	0x080071e5
 8007134:	080071b9 	.word	0x080071b9
 8007138:	080071e5 	.word	0x080071e5
 800713c:	080071e5 	.word	0x080071e5
 8007140:	080071e5 	.word	0x080071e5
 8007144:	080071e5 	.word	0x080071e5
 8007148:	080071e5 	.word	0x080071e5
 800714c:	080071e5 	.word	0x080071e5
 8007150:	080071e5 	.word	0x080071e5
 8007154:	080071cf 	.word	0x080071cf
 8007158:	080071e5 	.word	0x080071e5
 800715c:	080071e5 	.word	0x080071e5
 8007160:	080071e5 	.word	0x080071e5
 8007164:	080071e5 	.word	0x080071e5
 8007168:	080071e5 	.word	0x080071e5
 800716c:	080071e5 	.word	0x080071e5
 8007170:	080071e5 	.word	0x080071e5
 8007174:	080071ed 	.word	0x080071ed
 8007178:	080071e5 	.word	0x080071e5
 800717c:	080071e5 	.word	0x080071e5
 8007180:	080071e5 	.word	0x080071e5
 8007184:	080071e5 	.word	0x080071e5
 8007188:	080071e5 	.word	0x080071e5
 800718c:	080071e5 	.word	0x080071e5
 8007190:	080071e5 	.word	0x080071e5
 8007194:	080071ed 	.word	0x080071ed
 8007198:	080071e5 	.word	0x080071e5
 800719c:	080071e5 	.word	0x080071e5
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071e5 	.word	0x080071e5
 80071a8:	080071e5 	.word	0x080071e5
 80071ac:	080071e5 	.word	0x080071e5
 80071b0:	080071e5 	.word	0x080071e5
 80071b4:	080071ed 	.word	0x080071ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071bc:	3308      	adds	r3, #8
 80071be:	2101      	movs	r1, #1
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 fe95 	bl	8008ef0 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071cc:	e00f      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d2:	3328      	adds	r3, #40	@ 0x28
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 ff3c 	bl	8009054 <RCCEx_PLL3_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071e2:	e004      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80071ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071f6:	4bbf      	ldr	r3, [pc, #764]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007204:	4abb      	ldr	r2, [pc, #748]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6553      	str	r3, [r2, #84]	@ 0x54
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f002 0302 	and.w	r3, r2, #2
 8007220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800722a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	d041      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800723a:	2b05      	cmp	r3, #5
 800723c:	d824      	bhi.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007291 	.word	0x08007291
 8007248:	0800725d 	.word	0x0800725d
 800724c:	08007273 	.word	0x08007273
 8007250:	08007291 	.word	0x08007291
 8007254:	08007291 	.word	0x08007291
 8007258:	08007291 	.word	0x08007291
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800725c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007260:	3308      	adds	r3, #8
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f001 fe43 	bl	8008ef0 <RCCEx_PLL2_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007270:	e00f      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	3328      	adds	r3, #40	@ 0x28
 8007278:	2101      	movs	r1, #1
 800727a:	4618      	mov	r0, r3
 800727c:	f001 feea 	bl	8009054 <RCCEx_PLL3_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800729a:	4b96      	ldr	r3, [pc, #600]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729e:	f023 0107 	bic.w	r1, r3, #7
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072a8:	4a92      	ldr	r2, [pc, #584]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072aa:	430b      	orrs	r3, r1
 80072ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f002 0304 	and.w	r3, r2, #4
 80072c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d044      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d825      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80072e4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007339 	.word	0x08007339
 80072f0:	08007305 	.word	0x08007305
 80072f4:	0800731b 	.word	0x0800731b
 80072f8:	08007339 	.word	0x08007339
 80072fc:	08007339 	.word	0x08007339
 8007300:	08007339 	.word	0x08007339
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007308:	3308      	adds	r3, #8
 800730a:	2101      	movs	r1, #1
 800730c:	4618      	mov	r0, r3
 800730e:	f001 fdef 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007318:	e00f      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800731a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731e:	3328      	adds	r3, #40	@ 0x28
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f001 fe96 	bl	8009054 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800732e:	e004      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007342:	4b6c      	ldr	r3, [pc, #432]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007346:	f023 0107 	bic.w	r1, r3, #7
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007352:	4a68      	ldr	r2, [pc, #416]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6593      	str	r3, [r2, #88]	@ 0x58
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f002 0320 	and.w	r3, r2, #32
 800736e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d055      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800738e:	d033      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007394:	d82c      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739a:	d02f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a0:	d826      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073a6:	d02b      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80073a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073ac:	d820      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b2:	d012      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80073b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b8:	d81a      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d022      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80073be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c2:	d115      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	3308      	adds	r3, #8
 80073ca:	2100      	movs	r1, #0
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fd8f 	bl	8008ef0 <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073d8:	e015      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	3328      	adds	r3, #40	@ 0x28
 80073e0:	2102      	movs	r1, #2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 fe36 	bl	8009054 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073ee:	e00a      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f6:	e006      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800740e:	4b39      	ldr	r3, [pc, #228]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007412:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741e:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6553      	str	r3, [r2, #84]	@ 0x54
 8007424:	e003      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800743a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800743e:	2300      	movs	r3, #0
 8007440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007444:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d058      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007456:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800745a:	d033      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800745c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007460:	d82c      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007466:	d02f      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800746c:	d826      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800746e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007472:	d02b      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007474:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007478:	d820      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800747e:	d012      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007484:	d81a      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d022      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800748a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748e:	d115      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007494:	3308      	adds	r3, #8
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f001 fd29 	bl	8008ef0 <RCCEx_PLL2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074a4:	e015      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074aa:	3328      	adds	r3, #40	@ 0x28
 80074ac:	2102      	movs	r1, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 fdd0 	bl	8009054 <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074c2:	e006      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074c4:	bf00      	nop
 80074c6:	e004      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10e      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074da:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074ea:	4a02      	ldr	r2, [pc, #8]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80074f0:	e006      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800750c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007516:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d055      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007528:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800752c:	d033      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800752e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007532:	d82c      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007538:	d02f      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800753a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753e:	d826      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007540:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007544:	d02b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007546:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800754a:	d820      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800754c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007550:	d012      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007552:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007556:	d81a      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d022      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800755c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007560:	d115      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	3308      	adds	r3, #8
 8007568:	2100      	movs	r1, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fcc0 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007576:	e015      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	3328      	adds	r3, #40	@ 0x28
 800757e:	2102      	movs	r1, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fd67 	bl	8009054 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800758c:	e00a      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075bc:	4a9d      	ldr	r2, [pc, #628]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075c2:	e003      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f002 0308 	and.w	r3, r2, #8
 80075d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075e6:	460b      	mov	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	d01e      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f8:	d10c      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fe:	3328      	adds	r3, #40	@ 0x28
 8007600:	2102      	movs	r1, #2
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fd26 	bl	8009054 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007614:	4b87      	ldr	r3, [pc, #540]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007618:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007624:	4a83      	ldr	r2, [pc, #524]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007626:	430b      	orrs	r3, r1
 8007628:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f002 0310 	and.w	r3, r2, #16
 8007636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007640:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d01e      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007656:	d10c      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765c:	3328      	adds	r3, #40	@ 0x28
 800765e:	2102      	movs	r1, #2
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fcf7 	bl	8009054 <RCCEx_PLL3_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007672:	4b70      	ldr	r3, [pc, #448]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007676:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007682:	4a6c      	ldr	r2, [pc, #432]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007684:	430b      	orrs	r3, r1
 8007686:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800769e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d03e      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b4:	d022      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80076b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ba:	d81b      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80076c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c4:	d00b      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80076c6:	e015      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076cc:	3308      	adds	r3, #8
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fc0d 	bl	8008ef0 <RCCEx_PLL2_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076dc:	e00f      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	3328      	adds	r3, #40	@ 0x28
 80076e4:	2102      	movs	r1, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fcb4 	bl	8009054 <RCCEx_PLL3_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076f2:	e004      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fa:	e000      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80076fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007706:	4b4b      	ldr	r3, [pc, #300]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007716:	4a47      	ldr	r2, [pc, #284]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6593      	str	r3, [r2, #88]	@ 0x58
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007732:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007734:	2300      	movs	r3, #0
 8007736:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007738:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d03b      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800774e:	d01f      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007750:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007754:	d818      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800775a:	d003      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800775c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007760:	d007      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007762:	e011      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007764:	4b33      	ldr	r3, [pc, #204]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	4a32      	ldr	r2, [pc, #200]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800776a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800776e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007770:	e00f      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	3328      	adds	r3, #40	@ 0x28
 8007778:	2101      	movs	r1, #1
 800777a:	4618      	mov	r0, r3
 800777c:	f001 fc6a 	bl	8009054 <RCCEx_PLL3_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800778e:	e000      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800779a:	4b26      	ldr	r3, [pc, #152]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800779c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077aa:	4a22      	ldr	r2, [pc, #136]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ac:	430b      	orrs	r3, r1
 80077ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80077b0:	e003      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80077c8:	2300      	movs	r3, #0
 80077ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80077cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d034      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80077e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077e4:	d007      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80077e6:	e011      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e8:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ec:	4a11      	ldr	r2, [pc, #68]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077f4:	e00e      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fa:	3308      	adds	r3, #8
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fb76 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800781e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007820:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782a:	4a02      	ldr	r2, [pc, #8]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782c:	430b      	orrs	r3, r1
 800782e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007830:	e006      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800784c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800784e:	2300      	movs	r3, #0
 8007850:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007852:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007856:	460b      	mov	r3, r1
 8007858:	4313      	orrs	r3, r2
 800785a:	d00c      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	3328      	adds	r3, #40	@ 0x28
 8007862:	2102      	movs	r1, #2
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fbf5 	bl	8009054 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007882:	663b      	str	r3, [r7, #96]	@ 0x60
 8007884:	2300      	movs	r3, #0
 8007886:	667b      	str	r3, [r7, #100]	@ 0x64
 8007888:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800788c:	460b      	mov	r3, r1
 800788e:	4313      	orrs	r3, r2
 8007890:	d038      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800789e:	d018      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80078a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a4:	d811      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078aa:	d014      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80078ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b0:	d80b      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d011      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80078b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ba:	d106      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078bc:	4bc3      	ldr	r3, [pc, #780]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	4ac2      	ldr	r2, [pc, #776]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078c8:	e008      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078d0:	e004      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078e4:	4bb9      	ldr	r3, [pc, #740]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f4:	4ab5      	ldr	r2, [pc, #724]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f6:	430b      	orrs	r3, r1
 80078f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078fa:	e003      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007912:	2300      	movs	r3, #0
 8007914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007916:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007920:	4baa      	ldr	r3, [pc, #680]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007924:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792e:	4aa7      	ldr	r2, [pc, #668]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007930:	430b      	orrs	r3, r1
 8007932:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007940:	653b      	str	r3, [r7, #80]	@ 0x50
 8007942:	2300      	movs	r3, #0
 8007944:	657b      	str	r3, [r7, #84]	@ 0x54
 8007946:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800794a:	460b      	mov	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	d00a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007950:	4b9e      	ldr	r3, [pc, #632]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007960:	4a9a      	ldr	r2, [pc, #616]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007962:	430b      	orrs	r3, r1
 8007964:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007974:	2300      	movs	r3, #0
 8007976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007978:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800797c:	460b      	mov	r3, r1
 800797e:	4313      	orrs	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007982:	4b92      	ldr	r3, [pc, #584]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007986:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007990:	4a8e      	ldr	r2, [pc, #568]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007992:	430b      	orrs	r3, r1
 8007994:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079a4:	2300      	movs	r3, #0
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80079ac:	460b      	mov	r3, r1
 80079ae:	4313      	orrs	r3, r2
 80079b0:	d00e      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079b2:	4b86      	ldr	r3, [pc, #536]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	4a85      	ldr	r2, [pc, #532]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079bc:	6113      	str	r3, [r2, #16]
 80079be:	4b83      	ldr	r3, [pc, #524]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c0:	6919      	ldr	r1, [r3, #16]
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079ca:	4a80      	ldr	r2, [pc, #512]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079e6:	460b      	mov	r3, r1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079ec:	4b77      	ldr	r3, [pc, #476]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fa:	4a74      	ldr	r2, [pc, #464]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a16:	460b      	mov	r3, r1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d00a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a20:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a2c:	4a67      	ldr	r2, [pc, #412]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d011      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	3308      	adds	r3, #8
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 fa4a 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6239      	str	r1, [r7, #32]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	d011      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	3308      	adds	r3, #8
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 fa2a 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	2100      	movs	r1, #0
 8007abc:	61b9      	str	r1, [r7, #24]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4313      	orrs	r3, r2
 8007acc:	d011      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f001 fa0a 	bl	8008ef0 <RCCEx_PLL2_Config>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	2100      	movs	r1, #0
 8007afc:	6139      	str	r1, [r7, #16]
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	d011      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	3328      	adds	r3, #40	@ 0x28
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 fa9c 	bl	8009054 <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	d011      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	3328      	adds	r3, #40	@ 0x28
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 fa7c 	bl	8009054 <RCCEx_PLL3_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d011      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	3328      	adds	r3, #40	@ 0x28
 8007b94:	2102      	movs	r1, #2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fa5c 	bl	8009054 <RCCEx_PLL3_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007bb2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bcc:	58024400 	.word	0x58024400

08007bd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b090      	sub	sp, #64	@ 0x40
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bde:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007be2:	430b      	orrs	r3, r1
 8007be4:	f040 8094 	bne.w	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007be8:	4b9e      	ldr	r3, [pc, #632]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	f200 8087 	bhi.w	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c15 	.word	0x08007c15
 8007c04:	08007c3d 	.word	0x08007c3d
 8007c08:	08007c65 	.word	0x08007c65
 8007c0c:	08007d01 	.word	0x08007d01
 8007c10:	08007c8d 	.word	0x08007c8d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c14:	4b93      	ldr	r3, [pc, #588]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c20:	d108      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 f810 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c30:	f000 bd45 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	f000 bd41 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c3c:	4b89      	ldr	r3, [pc, #548]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c48:	d108      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c4a:	f107 0318 	add.w	r3, r7, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fd54 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c58:	f000 bd31 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	f000 bd2d 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c64:	4b7f      	ldr	r3, [pc, #508]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c70:	d108      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fe94 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c80:	f000 bd1d 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	f000 bd19 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c8c:	4b75      	ldr	r3, [pc, #468]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c96:	4b73      	ldr	r3, [pc, #460]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d10c      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d109      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca8:	4b6e      	ldr	r3, [pc, #440]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cba:	e01f      	b.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cbc:	4b69      	ldr	r3, [pc, #420]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc8:	d106      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cd2:	4b66      	ldr	r3, [pc, #408]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd6:	e011      	b.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cd8:	4b62      	ldr	r3, [pc, #392]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce4:	d106      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cec:	d102      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cee:	4b60      	ldr	r3, [pc, #384]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf2:	e003      	b.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cf8:	f000 bce1 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cfc:	f000 bcdf 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d00:	4b5c      	ldr	r3, [pc, #368]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	f000 bcdb 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0c:	f000 bcd7 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d14:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	f040 80ad 	bne.w	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007d1e:	4b51      	ldr	r3, [pc, #324]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d22:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007d26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d2e:	d056      	beq.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d36:	f200 8090 	bhi.w	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d3e:	f000 8088 	beq.w	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d46:	f200 8088 	bhi.w	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	2b80      	cmp	r3, #128	@ 0x80
 8007d4e:	d032      	beq.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	2b80      	cmp	r3, #128	@ 0x80
 8007d54:	f200 8081 	bhi.w	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	2b40      	cmp	r3, #64	@ 0x40
 8007d62:	d014      	beq.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007d64:	e079      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d66:	4b3f      	ldr	r3, [pc, #252]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d72:	d108      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 ff67 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d82:	f000 bc9c 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d8a:	f000 bc98 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d8e:	4b35      	ldr	r3, [pc, #212]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9a:	d108      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9c:	f107 0318 	add.w	r3, r7, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fcab 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007daa:	f000 bc88 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db2:	f000 bc84 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db6:	4b2b      	ldr	r3, [pc, #172]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc2:	d108      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fdeb 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd2:	f000 bc74 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dda:	f000 bc70 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dde:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007de2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007de8:	4b1e      	ldr	r3, [pc, #120]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d10c      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	08db      	lsrs	r3, r3, #3
 8007e00:	f003 0303 	and.w	r3, r3, #3
 8007e04:	4a18      	ldr	r2, [pc, #96]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e06:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e0c:	e01f      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e0e:	4b15      	ldr	r3, [pc, #84]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e1a:	d106      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e22:	d102      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e24:	4b11      	ldr	r3, [pc, #68]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e28:	e011      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e36:	d106      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3e:	d102      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e4a:	f000 bc38 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e4e:	f000 bc36 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e52:	4b08      	ldr	r3, [pc, #32]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e56:	f000 bc32 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5e:	f000 bc2e 	b.w	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	007a1200 	.word	0x007a1200
 8007e74:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e7c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007e80:	430b      	orrs	r3, r1
 8007e82:	f040 809c 	bne.w	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007e86:	4b9e      	ldr	r3, [pc, #632]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007e8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e96:	d054      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e9e:	f200 808b 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ea8:	f000 8083 	beq.w	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007eb2:	f200 8081 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ebc:	d02f      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ec4:	d878      	bhi.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed2:	d012      	beq.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007ed4:	e070      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ed6:	4b8a      	ldr	r3, [pc, #552]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee2:	d107      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 feaf 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef2:	e3e4      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e3e1      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007efa:	4b81      	ldr	r3, [pc, #516]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f06:	d107      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f08:	f107 0318 	add.w	r3, r7, #24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fbf5 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f16:	e3d2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1c:	e3cf      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f1e:	4b78      	ldr	r3, [pc, #480]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f2a:	d107      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f2c:	f107 030c 	add.w	r3, r7, #12
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fd37 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f3a:	e3c0      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f40:	e3bd      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f42:	4b6f      	ldr	r3, [pc, #444]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d10c      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f5e:	4b68      	ldr	r3, [pc, #416]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	08db      	lsrs	r3, r3, #3
 8007f64:	f003 0303 	and.w	r3, r3, #3
 8007f68:	4a66      	ldr	r2, [pc, #408]	@ (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f70:	e01e      	b.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f72:	4b63      	ldr	r3, [pc, #396]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f86:	d102      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f88:	4b5f      	ldr	r3, [pc, #380]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f8c:	e010      	b.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f9a:	d106      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fa2:	d102      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fa4:	4b59      	ldr	r3, [pc, #356]	@ (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa8:	e002      	b.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fae:	e386      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fb0:	e385      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fb2:	4b57      	ldr	r3, [pc, #348]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb6:	e382      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbc:	e37f      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	f040 80a7 	bne.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007fd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fdc:	d055      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fe4:	f200 8096 	bhi.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007fee:	f000 8084 	beq.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ff8:	f200 808c 	bhi.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008002:	d030      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800800a:	f200 8083 	bhi.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800801a:	d012      	beq.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800801c:	e07a      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800801e:	4b38      	ldr	r3, [pc, #224]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800802a:	d107      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800802c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fe0b 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800803a:	e340      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008040:	e33d      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008042:	4b2f      	ldr	r3, [pc, #188]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800804a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800804e:	d107      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008050:	f107 0318 	add.w	r3, r7, #24
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fb51 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800805e:	e32e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008064:	e32b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008066:	4b26      	ldr	r3, [pc, #152]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800806e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008072:	d107      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fc93 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008082:	e31c      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e319      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800808a:	4b1d      	ldr	r3, [pc, #116]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800808c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800808e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008094:	4b1a      	ldr	r3, [pc, #104]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b04      	cmp	r3, #4
 800809e:	d10c      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080a6:	4b16      	ldr	r3, [pc, #88]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	08db      	lsrs	r3, r3, #3
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	4a14      	ldr	r2, [pc, #80]	@ (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b8:	e01e      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080ba:	4b11      	ldr	r3, [pc, #68]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080c6:	d106      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80080c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ce:	d102      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d4:	e010      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080e2:	d106      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ea:	d102      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80080f6:	e2e2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080f8:	e2e1      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080fa:	4b05      	ldr	r3, [pc, #20]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fe:	e2de      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008100:	58024400 	.word	0x58024400
 8008104:	03d09000 	.word	0x03d09000
 8008108:	003d0900 	.word	0x003d0900
 800810c:	007a1200 	.word	0x007a1200
 8008110:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008118:	e2d1      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800811a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008122:	430b      	orrs	r3, r1
 8008124:	f040 809c 	bne.w	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008128:	4b93      	ldr	r3, [pc, #588]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008130:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008138:	d054      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008140:	f200 808b 	bhi.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800814a:	f000 8083 	beq.w	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008154:	f200 8081 	bhi.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815e:	d02f      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008166:	d878      	bhi.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008174:	d012      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008176:	e070      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008178:	4b7f      	ldr	r3, [pc, #508]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008180:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008184:	d107      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fd5e 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008194:	e293      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819a:	e290      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800819c:	4b76      	ldr	r3, [pc, #472]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081a8:	d107      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0318 	add.w	r3, r7, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 faa4 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b8:	e281      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081be:	e27e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081c0:	4b6d      	ldr	r3, [pc, #436]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081cc:	d107      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ce:	f107 030c 	add.w	r3, r7, #12
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fbe6 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081dc:	e26f      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e2:	e26c      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081e4:	4b64      	ldr	r3, [pc, #400]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081ee:	4b62      	ldr	r3, [pc, #392]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d10c      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80081fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008200:	4b5d      	ldr	r3, [pc, #372]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	4a5c      	ldr	r2, [pc, #368]	@ (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008212:	e01e      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008214:	4b58      	ldr	r3, [pc, #352]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800821c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008220:	d106      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008228:	d102      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800822a:	4b55      	ldr	r3, [pc, #340]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800822c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800822e:	e010      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008230:	4b51      	ldr	r3, [pc, #324]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823c:	d106      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800823e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008244:	d102      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008246:	4b4f      	ldr	r3, [pc, #316]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800824a:	e002      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008250:	e235      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008252:	e234      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008254:	4b4c      	ldr	r3, [pc, #304]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008258:	e231      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825e:	e22e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008264:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008268:	430b      	orrs	r3, r1
 800826a:	f040 808f 	bne.w	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800826e:	4b42      	ldr	r3, [pc, #264]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008272:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008276:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800827e:	d06b      	beq.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008286:	d874      	bhi.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800828e:	d056      	beq.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008296:	d86c      	bhi.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800829e:	d03b      	beq.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082a6:	d864      	bhi.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ae:	d021      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b6:	d85c      	bhi.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c4:	d004      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80082c6:	e054      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80082c8:	f7fe fa0a 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 80082cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082ce:	e1f6      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d0:	4b29      	ldr	r3, [pc, #164]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082dc:	d107      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082de:	f107 0318 	add.w	r3, r7, #24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fa0a 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ec:	e1e7      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f2:	e1e4      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082f4:	4b20      	ldr	r3, [pc, #128]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008300:	d107      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008302:	f107 030c 	add.w	r3, r7, #12
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fb4c 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008310:	e1d5      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008316:	e1d2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008318:	4b17      	ldr	r3, [pc, #92]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b04      	cmp	r3, #4
 8008322:	d109      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008324:	4b14      	ldr	r3, [pc, #80]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	08db      	lsrs	r3, r3, #3
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	4a13      	ldr	r2, [pc, #76]	@ (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008336:	e1c2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833c:	e1bf      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800833e:	4b0e      	ldr	r3, [pc, #56]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834a:	d102      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800834c:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008350:	e1b5      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008356:	e1b2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008358:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008364:	d102      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836a:	e1a8      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008370:	e1a5      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008376:	e1a2      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008378:	58024400 	.word	0x58024400
 800837c:	03d09000 	.word	0x03d09000
 8008380:	003d0900 	.word	0x003d0900
 8008384:	007a1200 	.word	0x007a1200
 8008388:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800838c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008390:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008394:	430b      	orrs	r3, r1
 8008396:	d173      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008398:	4b9c      	ldr	r3, [pc, #624]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800839a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a8:	d02f      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b0:	d863      	bhi.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083be:	d012      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80083c0:	e05b      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c2:	4b92      	ldr	r3, [pc, #584]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f991 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e16e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e4:	e16b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e6:	4b89      	ldr	r3, [pc, #548]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f2:	d107      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f4:	f107 030c 	add.w	r3, r7, #12
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fad3 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008402:	e15c      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008408:	e159      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800840a:	4b80      	ldr	r3, [pc, #512]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800840c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008414:	4b7d      	ldr	r3, [pc, #500]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b04      	cmp	r3, #4
 800841e:	d10c      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008426:	4b79      	ldr	r3, [pc, #484]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	4a77      	ldr	r2, [pc, #476]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008438:	e01e      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800843a:	4b74      	ldr	r3, [pc, #464]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008450:	4b70      	ldr	r3, [pc, #448]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008454:	e010      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008456:	4b6d      	ldr	r3, [pc, #436]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008462:	d106      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800846c:	4b6a      	ldr	r3, [pc, #424]	@ (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008470:	e002      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008476:	e122      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008478:	e121      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e11e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008488:	430b      	orrs	r3, r1
 800848a:	d133      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800848c:	4b5f      	ldr	r3, [pc, #380]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008494:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a2:	d012      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80084a4:	e023      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084a6:	4b59      	ldr	r3, [pc, #356]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084b2:	d107      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fbc7 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c2:	e0fc      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c8:	e0f9      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ca:	4b50      	ldr	r3, [pc, #320]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d6:	d107      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d8:	f107 0318 	add.w	r3, r7, #24
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f90d 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e6:	e0ea      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ec:	e0e7      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f2:	e0e4      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80084fc:	430b      	orrs	r3, r1
 80084fe:	f040 808d 	bne.w	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008502:	4b42      	ldr	r3, [pc, #264]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008506:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800850a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008512:	d06b      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800851a:	d874      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800851c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008522:	d056      	beq.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852a:	d86c      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800852c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008532:	d03b      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800853a:	d864      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008542:	d021      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854a:	d85c      	bhi.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008558:	d004      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800855a:	e054      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800855c:	f000 f8b8 	bl	80086d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008560:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008562:	e0ac      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008564:	4b29      	ldr	r3, [pc, #164]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800856c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008572:	f107 0318 	add.w	r3, r7, #24
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f8c0 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008580:	e09d      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008586:	e09a      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008588:	4b20      	ldr	r3, [pc, #128]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008594:	d107      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008596:	f107 030c 	add.w	r3, r7, #12
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fa02 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a4:	e08b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085aa:	e088      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085ac:	4b17      	ldr	r3, [pc, #92]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d109      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b8:	4b14      	ldr	r3, [pc, #80]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a13      	ldr	r2, [pc, #76]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ca:	e078      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d0:	e075      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085d2:	4b0e      	ldr	r3, [pc, #56]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085de:	d102      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e4:	e06b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ea:	e068      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085ec:	4b07      	ldr	r3, [pc, #28]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085f8:	d102      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80085fa:	4b07      	ldr	r3, [pc, #28]	@ (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fe:	e05e      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e05b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800860a:	e058      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800860c:	58024400 	.word	0x58024400
 8008610:	03d09000 	.word	0x03d09000
 8008614:	003d0900 	.word	0x003d0900
 8008618:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800861c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008620:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008624:	430b      	orrs	r3, r1
 8008626:	d148      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008628:	4b27      	ldr	r3, [pc, #156]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800862a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800862c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008630:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008638:	d02a      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008640:	d838      	bhi.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800864e:	d00d      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008650:	e030      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008652:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865e:	d102      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008660:	4b1a      	ldr	r3, [pc, #104]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008664:	e02b      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866a:	e028      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800866c:	4b16      	ldr	r3, [pc, #88]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800867a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fae4 	bl	8008c4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e019      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	e016      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008690:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f82a 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e007      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e004      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b8:	e001      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80086be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3740      	adds	r7, #64	@ 0x40
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	58024400 	.word	0x58024400
 80086cc:	007a1200 	.word	0x007a1200

080086d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086d4:	f7fd ffd4 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b06      	ldr	r3, [pc, #24]	@ (80086f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	4904      	ldr	r1, [pc, #16]	@ (80086f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086e6:	5ccb      	ldrb	r3, [r1, r3]
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	58024400 	.word	0x58024400
 80086f8:	0800dee8 	.word	0x0800dee8

080086fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b089      	sub	sp, #36	@ 0x24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008704:	4ba1      	ldr	r3, [pc, #644]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800870e:	4b9f      	ldr	r3, [pc, #636]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	0b1b      	lsrs	r3, r3, #12
 8008714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008718:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800871a:	4b9c      	ldr	r3, [pc, #624]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008726:	4b99      	ldr	r3, [pc, #612]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	08db      	lsrs	r3, r3, #3
 800872c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8111 	beq.w	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b02      	cmp	r3, #2
 800874e:	f000 8083 	beq.w	8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	2b02      	cmp	r3, #2
 8008756:	f200 80a1 	bhi.w	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d056      	beq.n	8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008766:	e099      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008768:	4b88      	ldr	r3, [pc, #544]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d02d      	beq.n	80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008774:	4b85      	ldr	r3, [pc, #532]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	08db      	lsrs	r3, r3, #3
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	4a84      	ldr	r2, [pc, #528]	@ (8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
 8008784:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	ee07 3a90 	vmov	s15, r3
 800878c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b7b      	ldr	r3, [pc, #492]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087ce:	e087      	b.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e2:	4b6a      	ldr	r3, [pc, #424]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008812:	e065      	b.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800899c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b59      	ldr	r3, [pc, #356]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a03 	vldr	s12, [r7, #12]
 800883a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008856:	e043      	b.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b48      	ldr	r3, [pc, #288]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a03 	vldr	s12, [r7, #12]
 800887e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889a:	e021      	b.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800899c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ae:	4b37      	ldr	r3, [pc, #220]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088be:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80088e0:	4b2a      	ldr	r3, [pc, #168]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e4:	0a5b      	lsrs	r3, r3, #9
 80088e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008906:	ee17 2a90 	vmov	r2, s15
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800890e:	4b1f      	ldr	r3, [pc, #124]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008912:	0c1b      	lsrs	r3, r3, #16
 8008914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008920:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008928:	edd7 6a07 	vldr	s13, [r7, #28]
 800892c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008934:	ee17 2a90 	vmov	r2, s15
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800893c:	4b13      	ldr	r3, [pc, #76]	@ (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008940:	0e1b      	lsrs	r3, r3, #24
 8008942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008956:	edd7 6a07 	vldr	s13, [r7, #28]
 800895a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008962:	ee17 2a90 	vmov	r2, s15
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800896a:	e008      	b.n	800897e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
}
 800897e:	bf00      	nop
 8008980:	3724      	adds	r7, #36	@ 0x24
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	58024400 	.word	0x58024400
 8008990:	03d09000 	.word	0x03d09000
 8008994:	46000000 	.word	0x46000000
 8008998:	4c742400 	.word	0x4c742400
 800899c:	4a742400 	.word	0x4a742400
 80089a0:	4af42400 	.word	0x4af42400

080089a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b089      	sub	sp, #36	@ 0x24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089b6:	4b9f      	ldr	r3, [pc, #636]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	0d1b      	lsrs	r3, r3, #20
 80089bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089ce:	4b99      	ldr	r3, [pc, #612]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d2:	08db      	lsrs	r3, r3, #3
 80089d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	fb02 f303 	mul.w	r3, r2, r3
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8111 	beq.w	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	f000 8083 	beq.w	8008b00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	f200 80a1 	bhi.w	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d056      	beq.n	8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a0e:	e099      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a10:	4b88      	ldr	r3, [pc, #544]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02d      	beq.n	8008a78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a1c:	4b85      	ldr	r3, [pc, #532]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	4a84      	ldr	r2, [pc, #528]	@ (8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	ee07 3a90 	vmov	s15, r3
 8008a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a46:	4b7b      	ldr	r3, [pc, #492]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a76:	e087      	b.n	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aba:	e065      	b.n	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ace:	4b59      	ldr	r3, [pc, #356]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afe:	e043      	b.n	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b12:	4b48      	ldr	r3, [pc, #288]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b42:	e021      	b.n	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b56:	4b37      	ldr	r3, [pc, #220]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b88:	4b2a      	ldr	r3, [pc, #168]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8c:	0a5b      	lsrs	r3, r3, #9
 8008b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bae:	ee17 2a90 	vmov	r2, s15
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bdc:	ee17 2a90 	vmov	r2, s15
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008be4:	4b13      	ldr	r3, [pc, #76]	@ (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c0a:	ee17 2a90 	vmov	r2, s15
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c12:	e008      	b.n	8008c26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	609a      	str	r2, [r3, #8]
}
 8008c26:	bf00      	nop
 8008c28:	3724      	adds	r7, #36	@ 0x24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	03d09000 	.word	0x03d09000
 8008c3c:	46000000 	.word	0x46000000
 8008c40:	4c742400 	.word	0x4c742400
 8008c44:	4a742400 	.word	0x4a742400
 8008c48:	4af42400 	.word	0x4af42400

08008c4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b089      	sub	sp, #36	@ 0x24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c54:	4ba0      	ldr	r3, [pc, #640]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c6a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c74:	4b98      	ldr	r3, [pc, #608]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	08db      	lsrs	r3, r3, #3
 8008c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	fb02 f303 	mul.w	r3, r2, r3
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8111 	beq.w	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	f000 8083 	beq.w	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	f200 80a1 	bhi.w	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d056      	beq.n	8008d62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008cb4:	e099      	b.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb6:	4b88      	ldr	r3, [pc, #544]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02d      	beq.n	8008d1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cc2:	4b85      	ldr	r3, [pc, #532]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	08db      	lsrs	r3, r3, #3
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	4a83      	ldr	r2, [pc, #524]	@ (8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008cce:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cec:	4b7a      	ldr	r3, [pc, #488]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d00:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d1c:	e087      	b.n	8008e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d30:	4b69      	ldr	r3, [pc, #420]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d44:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d60:	e065      	b.n	8008e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d74:	4b58      	ldr	r3, [pc, #352]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d88:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da4:	e043      	b.n	8008e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	4b47      	ldr	r3, [pc, #284]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dcc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de8:	e021      	b.n	8008e2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfc:	4b36      	ldr	r3, [pc, #216]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e10:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e32:	0a5b      	lsrs	r3, r3, #9
 8008e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e54:	ee17 2a90 	vmov	r2, s15
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e60:	0c1b      	lsrs	r3, r3, #16
 8008e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e82:	ee17 2a90 	vmov	r2, s15
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008e8a:	4b13      	ldr	r3, [pc, #76]	@ (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	0e1b      	lsrs	r3, r3, #24
 8008e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb0:	ee17 2a90 	vmov	r2, s15
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008eb8:	e008      	b.n	8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	609a      	str	r2, [r3, #8]
}
 8008ecc:	bf00      	nop
 8008ece:	3724      	adds	r7, #36	@ 0x24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	03d09000 	.word	0x03d09000
 8008ee0:	46000000 	.word	0x46000000
 8008ee4:	4c742400 	.word	0x4c742400
 8008ee8:	4a742400 	.word	0x4a742400
 8008eec:	4af42400 	.word	0x4af42400

08008ef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008efe:	4b53      	ldr	r3, [pc, #332]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d101      	bne.n	8008f0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e099      	b.n	8009042 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a4e      	ldr	r2, [pc, #312]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7f8 fbe1 	bl	80016e0 <HAL_GetTick>
 8008f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f20:	e008      	b.n	8008f34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f22:	f7f8 fbdd 	bl	80016e0 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e086      	b.n	8009042 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f34:	4b45      	ldr	r3, [pc, #276]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f0      	bne.n	8008f22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f40:	4b42      	ldr	r3, [pc, #264]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	031b      	lsls	r3, r3, #12
 8008f4e:	493f      	ldr	r1, [pc, #252]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	025b      	lsls	r3, r3, #9
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	061b      	lsls	r3, r3, #24
 8008f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f84:	4931      	ldr	r1, [pc, #196]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f8a:	4b30      	ldr	r3, [pc, #192]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	492d      	ldr	r1, [pc, #180]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	f023 0220 	bic.w	r2, r3, #32
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4928      	ldr	r1, [pc, #160]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fae:	4b27      	ldr	r3, [pc, #156]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	4a26      	ldr	r2, [pc, #152]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	f023 0310 	bic.w	r3, r3, #16
 8008fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fba:	4b24      	ldr	r3, [pc, #144]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fbe:	4b24      	ldr	r3, [pc, #144]	@ (8009050 <RCCEx_PLL2_Config+0x160>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	69d2      	ldr	r2, [r2, #28]
 8008fc6:	00d2      	lsls	r2, r2, #3
 8008fc8:	4920      	ldr	r1, [pc, #128]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fce:	4b1f      	ldr	r3, [pc, #124]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fd4:	f043 0310 	orr.w	r3, r3, #16
 8008fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	4a19      	ldr	r2, [pc, #100]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fec:	e00f      	b.n	800900e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d106      	bne.n	8009002 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ff4:	4b15      	ldr	r3, [pc, #84]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff8:	4a14      	ldr	r2, [pc, #80]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8008ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009000:	e005      	b.n	800900e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009002:	4b12      	ldr	r3, [pc, #72]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	4a11      	ldr	r2, [pc, #68]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8009008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800900c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800900e:	4b0f      	ldr	r3, [pc, #60]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a0e      	ldr	r2, [pc, #56]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8009014:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901a:	f7f8 fb61 	bl	80016e0 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009020:	e008      	b.n	8009034 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009022:	f7f8 fb5d 	bl	80016e0 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e006      	b.n	8009042 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <RCCEx_PLL2_Config+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0f0      	beq.n	8009022 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400
 8009050:	ffff0007 	.word	0xffff0007

08009054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009062:	4b53      	ldr	r3, [pc, #332]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d101      	bne.n	8009072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e099      	b.n	80091a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009072:	4b4f      	ldr	r3, [pc, #316]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a4e      	ldr	r2, [pc, #312]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800907c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907e:	f7f8 fb2f 	bl	80016e0 <HAL_GetTick>
 8009082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009084:	e008      	b.n	8009098 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009086:	f7f8 fb2b 	bl	80016e0 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e086      	b.n	80091a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009098:	4b45      	ldr	r3, [pc, #276]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1f0      	bne.n	8009086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090a4:	4b42      	ldr	r3, [pc, #264]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	051b      	lsls	r3, r3, #20
 80090b2:	493f      	ldr	r1, [pc, #252]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	3b01      	subs	r3, #1
 80090be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	025b      	lsls	r3, r3, #9
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	061b      	lsls	r3, r3, #24
 80090e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090e8:	4931      	ldr	r1, [pc, #196]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090ee:	4b30      	ldr	r3, [pc, #192]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	492d      	ldr	r1, [pc, #180]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009100:	4b2b      	ldr	r3, [pc, #172]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009104:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	4928      	ldr	r1, [pc, #160]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009112:	4b27      	ldr	r3, [pc, #156]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a26      	ldr	r2, [pc, #152]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800911c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800911e:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009122:	4b24      	ldr	r3, [pc, #144]	@ (80091b4 <RCCEx_PLL3_Config+0x160>)
 8009124:	4013      	ands	r3, r2
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	69d2      	ldr	r2, [r2, #28]
 800912a:	00d2      	lsls	r2, r2, #3
 800912c:	4920      	ldr	r1, [pc, #128]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800912e:	4313      	orrs	r3, r2
 8009130:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009132:	4b1f      	ldr	r3, [pc, #124]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	4a1e      	ldr	r2, [pc, #120]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800913c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009144:	4b1a      	ldr	r3, [pc, #104]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009148:	4a19      	ldr	r2, [pc, #100]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800914a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800914e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009150:	e00f      	b.n	8009172 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d106      	bne.n	8009166 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009158:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800915a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915c:	4a14      	ldr	r2, [pc, #80]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800915e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009164:	e005      	b.n	8009172 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009166:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916a:	4a11      	ldr	r2, [pc, #68]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800916c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009170:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009172:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a0e      	ldr	r2, [pc, #56]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800917c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917e:	f7f8 faaf 	bl	80016e0 <HAL_GetTick>
 8009182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009184:	e008      	b.n	8009198 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009186:	f7f8 faab 	bl	80016e0 <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d901      	bls.n	8009198 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e006      	b.n	80091a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009198:	4b05      	ldr	r3, [pc, #20]	@ (80091b0 <RCCEx_PLL3_Config+0x15c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0f0      	beq.n	8009186 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	58024400 	.word	0x58024400
 80091b4:	ffff0007 	.word	0xffff0007

080091b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e049      	b.n	800925e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f841 	bl	8009266 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f000 f9e8 	bl	80095cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	d001      	beq.n	8009294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e054      	b.n	800933e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a26      	ldr	r2, [pc, #152]	@ (800934c <HAL_TIM_Base_Start_IT+0xd0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d022      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092be:	d01d      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a22      	ldr	r2, [pc, #136]	@ (8009350 <HAL_TIM_Base_Start_IT+0xd4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d018      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a21      	ldr	r2, [pc, #132]	@ (8009354 <HAL_TIM_Base_Start_IT+0xd8>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009358 <HAL_TIM_Base_Start_IT+0xdc>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00e      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1e      	ldr	r2, [pc, #120]	@ (800935c <HAL_TIM_Base_Start_IT+0xe0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d009      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009360 <HAL_TIM_Base_Start_IT+0xe4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d004      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x80>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009364 <HAL_TIM_Base_Start_IT+0xe8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d115      	bne.n	8009328 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <HAL_TIM_Base_Start_IT+0xec>)
 8009304:	4013      	ands	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b06      	cmp	r3, #6
 800930c:	d015      	beq.n	800933a <HAL_TIM_Base_Start_IT+0xbe>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009314:	d011      	beq.n	800933a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0201 	orr.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009326:	e008      	b.n	800933a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0201 	orr.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e000      	b.n	800933c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40010000 	.word	0x40010000
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40000c00 	.word	0x40000c00
 800935c:	40010400 	.word	0x40010400
 8009360:	40001800 	.word	0x40001800
 8009364:	40014000 	.word	0x40014000
 8009368:	00010007 	.word	0x00010007

0800936c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d020      	beq.n	80093d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01b      	beq.n	80093d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0202 	mvn.w	r2, #2
 80093a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8e9 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 80093bc:	e005      	b.n	80093ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f8db 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f8ec 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d020      	beq.n	800941c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d01b      	beq.n	800941c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f06f 0204 	mvn.w	r2, #4
 80093ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8c3 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8009408:	e005      	b.n	8009416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f8b5 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f8c6 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d020      	beq.n	8009468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01b      	beq.n	8009468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0208 	mvn.w	r2, #8
 8009438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2204      	movs	r2, #4
 800943e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f89d 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8009454:	e005      	b.n	8009462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f88f 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f8a0 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b00      	cmp	r3, #0
 8009470:	d020      	beq.n	80094b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01b      	beq.n	80094b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0210 	mvn.w	r2, #16
 8009484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2208      	movs	r2, #8
 800948a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f877 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 80094a0:	e005      	b.n	80094ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f869 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f87a 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00c      	beq.n	80094d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d007      	beq.n	80094d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0201 	mvn.w	r2, #1
 80094d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f7 fdcc 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d104      	bne.n	80094ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00c      	beq.n	8009506 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f913 	bl	800972c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00c      	beq.n	800952a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f90b 	bl	8009740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f834 	bl	80095b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00c      	beq.n	8009572 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f06f 0220 	mvn.w	r2, #32
 800956a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8d3 	bl	8009718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a46      	ldr	r2, [pc, #280]	@ (80096f8 <TIM_Base_SetConfig+0x12c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d013      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ea:	d00f      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a43      	ldr	r2, [pc, #268]	@ (80096fc <TIM_Base_SetConfig+0x130>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00b      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a42      	ldr	r2, [pc, #264]	@ (8009700 <TIM_Base_SetConfig+0x134>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d007      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a41      	ldr	r2, [pc, #260]	@ (8009704 <TIM_Base_SetConfig+0x138>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a40      	ldr	r2, [pc, #256]	@ (8009708 <TIM_Base_SetConfig+0x13c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d108      	bne.n	800961e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a35      	ldr	r2, [pc, #212]	@ (80096f8 <TIM_Base_SetConfig+0x12c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d01f      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962c:	d01b      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a32      	ldr	r2, [pc, #200]	@ (80096fc <TIM_Base_SetConfig+0x130>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d017      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a31      	ldr	r2, [pc, #196]	@ (8009700 <TIM_Base_SetConfig+0x134>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a30      	ldr	r2, [pc, #192]	@ (8009704 <TIM_Base_SetConfig+0x138>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00f      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a2f      	ldr	r2, [pc, #188]	@ (8009708 <TIM_Base_SetConfig+0x13c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00b      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2e      	ldr	r2, [pc, #184]	@ (800970c <TIM_Base_SetConfig+0x140>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d007      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2d      	ldr	r2, [pc, #180]	@ (8009710 <TIM_Base_SetConfig+0x144>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d003      	beq.n	8009666 <TIM_Base_SetConfig+0x9a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2c      	ldr	r2, [pc, #176]	@ (8009714 <TIM_Base_SetConfig+0x148>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d108      	bne.n	8009678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800966c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a16      	ldr	r2, [pc, #88]	@ (80096f8 <TIM_Base_SetConfig+0x12c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00f      	beq.n	80096c4 <TIM_Base_SetConfig+0xf8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a18      	ldr	r2, [pc, #96]	@ (8009708 <TIM_Base_SetConfig+0x13c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_Base_SetConfig+0xf8>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a17      	ldr	r2, [pc, #92]	@ (800970c <TIM_Base_SetConfig+0x140>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_Base_SetConfig+0xf8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a16      	ldr	r2, [pc, #88]	@ (8009710 <TIM_Base_SetConfig+0x144>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0xf8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a15      	ldr	r2, [pc, #84]	@ (8009714 <TIM_Base_SetConfig+0x148>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d103      	bne.n	80096cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691a      	ldr	r2, [r3, #16]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d105      	bne.n	80096ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f023 0201 	bic.w	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	611a      	str	r2, [r3, #16]
  }
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40010400 	.word	0x40010400
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800

08009718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e042      	b.n	80097ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7f7 fe1f 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2224      	movs	r2, #36	@ 0x24
 8009782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fe1e 	bl	800a3e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f8b3 	bl	8009910 <UART_SetConfig>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e01b      	b.n	80097ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fe9d 	bl	800a524 <UART_CheckIdleState>
 80097ea:	4603      	mov	r3, r0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	@ 0x28
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4613      	mov	r3, r2
 8009802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980a:	2b20      	cmp	r3, #32
 800980c:	d17b      	bne.n	8009906 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <HAL_UART_Transmit+0x26>
 8009814:	88fb      	ldrh	r3, [r7, #6]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e074      	b.n	8009908 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2221      	movs	r2, #33	@ 0x21
 800982a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800982e:	f7f7 ff57 	bl	80016e0 <HAL_GetTick>
 8009832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	88fa      	ldrh	r2, [r7, #6]
 8009838:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	88fa      	ldrh	r2, [r7, #6]
 8009840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800984c:	d108      	bne.n	8009860 <HAL_UART_Transmit+0x6c>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d104      	bne.n	8009860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e003      	b.n	8009868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009868:	e030      	b.n	80098cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2200      	movs	r2, #0
 8009872:	2180      	movs	r1, #128	@ 0x80
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 feff 	bl	800a678 <UART_WaitOnFlagUntilTimeout>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e03d      	b.n	8009908 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10b      	bne.n	80098aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	3302      	adds	r3, #2
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	e007      	b.n	80098ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	3301      	adds	r3, #1
 80098b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1c8      	bne.n	800986a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2200      	movs	r2, #0
 80098e0:	2140      	movs	r1, #64	@ 0x40
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fec8 	bl	800a678 <UART_WaitOnFlagUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e006      	b.n	8009908 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	e000      	b.n	8009908 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009906:	2302      	movs	r3, #2
  }
}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009914:	b092      	sub	sp, #72	@ 0x48
 8009916:	af00      	add	r7, sp, #0
 8009918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	431a      	orrs	r2, r3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	431a      	orrs	r2, r3
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	4313      	orrs	r3, r2
 8009936:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4bbe      	ldr	r3, [pc, #760]	@ (8009c38 <UART_SetConfig+0x328>)
 8009940:	4013      	ands	r3, r2
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	6812      	ldr	r2, [r2, #0]
 8009946:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009948:	430b      	orrs	r3, r1
 800994a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4ab3      	ldr	r2, [pc, #716]	@ (8009c3c <UART_SetConfig+0x32c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009978:	4313      	orrs	r3, r2
 800997a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	4baf      	ldr	r3, [pc, #700]	@ (8009c40 <UART_SetConfig+0x330>)
 8009984:	4013      	ands	r3, r2
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	6812      	ldr	r2, [r2, #0]
 800998a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800998c:	430b      	orrs	r3, r1
 800998e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	f023 010f 	bic.w	r1, r3, #15
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4aa6      	ldr	r2, [pc, #664]	@ (8009c44 <UART_SetConfig+0x334>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d177      	bne.n	8009aa0 <UART_SetConfig+0x190>
 80099b0:	4ba5      	ldr	r3, [pc, #660]	@ (8009c48 <UART_SetConfig+0x338>)
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099b8:	2b28      	cmp	r3, #40	@ 0x28
 80099ba:	d86d      	bhi.n	8009a98 <UART_SetConfig+0x188>
 80099bc:	a201      	add	r2, pc, #4	@ (adr r2, 80099c4 <UART_SetConfig+0xb4>)
 80099be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c2:	bf00      	nop
 80099c4:	08009a69 	.word	0x08009a69
 80099c8:	08009a99 	.word	0x08009a99
 80099cc:	08009a99 	.word	0x08009a99
 80099d0:	08009a99 	.word	0x08009a99
 80099d4:	08009a99 	.word	0x08009a99
 80099d8:	08009a99 	.word	0x08009a99
 80099dc:	08009a99 	.word	0x08009a99
 80099e0:	08009a99 	.word	0x08009a99
 80099e4:	08009a71 	.word	0x08009a71
 80099e8:	08009a99 	.word	0x08009a99
 80099ec:	08009a99 	.word	0x08009a99
 80099f0:	08009a99 	.word	0x08009a99
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009a99 	.word	0x08009a99
 80099fc:	08009a99 	.word	0x08009a99
 8009a00:	08009a99 	.word	0x08009a99
 8009a04:	08009a79 	.word	0x08009a79
 8009a08:	08009a99 	.word	0x08009a99
 8009a0c:	08009a99 	.word	0x08009a99
 8009a10:	08009a99 	.word	0x08009a99
 8009a14:	08009a99 	.word	0x08009a99
 8009a18:	08009a99 	.word	0x08009a99
 8009a1c:	08009a99 	.word	0x08009a99
 8009a20:	08009a99 	.word	0x08009a99
 8009a24:	08009a81 	.word	0x08009a81
 8009a28:	08009a99 	.word	0x08009a99
 8009a2c:	08009a99 	.word	0x08009a99
 8009a30:	08009a99 	.word	0x08009a99
 8009a34:	08009a99 	.word	0x08009a99
 8009a38:	08009a99 	.word	0x08009a99
 8009a3c:	08009a99 	.word	0x08009a99
 8009a40:	08009a99 	.word	0x08009a99
 8009a44:	08009a89 	.word	0x08009a89
 8009a48:	08009a99 	.word	0x08009a99
 8009a4c:	08009a99 	.word	0x08009a99
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009a99 	.word	0x08009a99
 8009a58:	08009a99 	.word	0x08009a99
 8009a5c:	08009a99 	.word	0x08009a99
 8009a60:	08009a99 	.word	0x08009a99
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	e222      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a76:	e21e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e21a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e216      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e212      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a90:	2340      	movs	r3, #64	@ 0x40
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e20e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009a98:	2380      	movs	r3, #128	@ 0x80
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e20a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a69      	ldr	r2, [pc, #420]	@ (8009c4c <UART_SetConfig+0x33c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d130      	bne.n	8009b0c <UART_SetConfig+0x1fc>
 8009aaa:	4b67      	ldr	r3, [pc, #412]	@ (8009c48 <UART_SetConfig+0x338>)
 8009aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d826      	bhi.n	8009b04 <UART_SetConfig+0x1f4>
 8009ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <UART_SetConfig+0x1ac>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e1ec      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e1e8      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e1e4      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e1e0      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e1dc      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009afc:	2340      	movs	r3, #64	@ 0x40
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e1d8      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b04:	2380      	movs	r3, #128	@ 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e1d4      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a4f      	ldr	r2, [pc, #316]	@ (8009c50 <UART_SetConfig+0x340>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x268>
 8009b16:	4b4c      	ldr	r3, [pc, #304]	@ (8009c48 <UART_SetConfig+0x338>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x260>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x218>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e1b6      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e1b2      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e1ae      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e1aa      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e1a6      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e1a2      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e19e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a35      	ldr	r2, [pc, #212]	@ (8009c54 <UART_SetConfig+0x344>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d130      	bne.n	8009be4 <UART_SetConfig+0x2d4>
 8009b82:	4b31      	ldr	r3, [pc, #196]	@ (8009c48 <UART_SetConfig+0x338>)
 8009b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d826      	bhi.n	8009bdc <UART_SetConfig+0x2cc>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <UART_SetConfig+0x284>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bad 	.word	0x08009bad
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e180      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e17c      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e178      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e174      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e170      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bd4:	2340      	movs	r3, #64	@ 0x40
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e16c      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009bdc:	2380      	movs	r3, #128	@ 0x80
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e168      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c58 <UART_SetConfig+0x348>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d142      	bne.n	8009c74 <UART_SetConfig+0x364>
 8009bee:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <UART_SetConfig+0x338>)
 8009bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d838      	bhi.n	8009c6c <UART_SetConfig+0x35c>
 8009bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009c00 <UART_SetConfig+0x2f0>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c21 	.word	0x08009c21
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c5d 	.word	0x08009c5d
 8009c14:	08009c65 	.word	0x08009c65
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1e:	e14a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c26:	e146      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e142      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e13e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c38:	cfff69f3 	.word	0xcfff69f3
 8009c3c:	58000c00 	.word	0x58000c00
 8009c40:	11fff4ff 	.word	0x11fff4ff
 8009c44:	40011000 	.word	0x40011000
 8009c48:	58024400 	.word	0x58024400
 8009c4c:	40004400 	.word	0x40004400
 8009c50:	40004800 	.word	0x40004800
 8009c54:	40004c00 	.word	0x40004c00
 8009c58:	40005000 	.word	0x40005000
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e128      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e124      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c6c:	2380      	movs	r3, #128	@ 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e120      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4acb      	ldr	r2, [pc, #812]	@ (8009fa8 <UART_SetConfig+0x698>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d176      	bne.n	8009d6c <UART_SetConfig+0x45c>
 8009c7e:	4bcb      	ldr	r3, [pc, #812]	@ (8009fac <UART_SetConfig+0x69c>)
 8009c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c86:	2b28      	cmp	r3, #40	@ 0x28
 8009c88:	d86c      	bhi.n	8009d64 <UART_SetConfig+0x454>
 8009c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <UART_SetConfig+0x380>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009d35 	.word	0x08009d35
 8009c94:	08009d65 	.word	0x08009d65
 8009c98:	08009d65 	.word	0x08009d65
 8009c9c:	08009d65 	.word	0x08009d65
 8009ca0:	08009d65 	.word	0x08009d65
 8009ca4:	08009d65 	.word	0x08009d65
 8009ca8:	08009d65 	.word	0x08009d65
 8009cac:	08009d65 	.word	0x08009d65
 8009cb0:	08009d3d 	.word	0x08009d3d
 8009cb4:	08009d65 	.word	0x08009d65
 8009cb8:	08009d65 	.word	0x08009d65
 8009cbc:	08009d65 	.word	0x08009d65
 8009cc0:	08009d65 	.word	0x08009d65
 8009cc4:	08009d65 	.word	0x08009d65
 8009cc8:	08009d65 	.word	0x08009d65
 8009ccc:	08009d65 	.word	0x08009d65
 8009cd0:	08009d45 	.word	0x08009d45
 8009cd4:	08009d65 	.word	0x08009d65
 8009cd8:	08009d65 	.word	0x08009d65
 8009cdc:	08009d65 	.word	0x08009d65
 8009ce0:	08009d65 	.word	0x08009d65
 8009ce4:	08009d65 	.word	0x08009d65
 8009ce8:	08009d65 	.word	0x08009d65
 8009cec:	08009d65 	.word	0x08009d65
 8009cf0:	08009d4d 	.word	0x08009d4d
 8009cf4:	08009d65 	.word	0x08009d65
 8009cf8:	08009d65 	.word	0x08009d65
 8009cfc:	08009d65 	.word	0x08009d65
 8009d00:	08009d65 	.word	0x08009d65
 8009d04:	08009d65 	.word	0x08009d65
 8009d08:	08009d65 	.word	0x08009d65
 8009d0c:	08009d65 	.word	0x08009d65
 8009d10:	08009d55 	.word	0x08009d55
 8009d14:	08009d65 	.word	0x08009d65
 8009d18:	08009d65 	.word	0x08009d65
 8009d1c:	08009d65 	.word	0x08009d65
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	08009d65 	.word	0x08009d65
 8009d28:	08009d65 	.word	0x08009d65
 8009d2c:	08009d65 	.word	0x08009d65
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e0bc      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e0b8      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e0b4      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e0b0      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e0ac      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d5c:	2340      	movs	r3, #64	@ 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e0a8      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d64:	2380      	movs	r3, #128	@ 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e0a4      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a8f      	ldr	r2, [pc, #572]	@ (8009fb0 <UART_SetConfig+0x6a0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d130      	bne.n	8009dd8 <UART_SetConfig+0x4c8>
 8009d76:	4b8d      	ldr	r3, [pc, #564]	@ (8009fac <UART_SetConfig+0x69c>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d826      	bhi.n	8009dd0 <UART_SetConfig+0x4c0>
 8009d82:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0x478>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e086      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e082      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e07e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e07a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e076      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009dc8:	2340      	movs	r3, #64	@ 0x40
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e072      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009dd0:	2380      	movs	r3, #128	@ 0x80
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e06e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a75      	ldr	r2, [pc, #468]	@ (8009fb4 <UART_SetConfig+0x6a4>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d130      	bne.n	8009e44 <UART_SetConfig+0x534>
 8009de2:	4b72      	ldr	r3, [pc, #456]	@ (8009fac <UART_SetConfig+0x69c>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	d826      	bhi.n	8009e3c <UART_SetConfig+0x52c>
 8009dee:	a201      	add	r2, pc, #4	@ (adr r2, 8009df4 <UART_SetConfig+0x4e4>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e2d 	.word	0x08009e2d
 8009e08:	08009e35 	.word	0x08009e35
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e050      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e04c      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e048      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e044      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e32:	e040      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e34:	2340      	movs	r3, #64	@ 0x40
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e03c      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e3c:	2380      	movs	r3, #128	@ 0x80
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e038      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a5b      	ldr	r2, [pc, #364]	@ (8009fb8 <UART_SetConfig+0x6a8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d130      	bne.n	8009eb0 <UART_SetConfig+0x5a0>
 8009e4e:	4b57      	ldr	r3, [pc, #348]	@ (8009fac <UART_SetConfig+0x69c>)
 8009e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d826      	bhi.n	8009ea8 <UART_SetConfig+0x598>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <UART_SetConfig+0x550>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e89 	.word	0x08009e89
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e01a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e016      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e012      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e00e      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e00a      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009ea0:	2340      	movs	r3, #64	@ 0x40
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e006      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009ea8:	2380      	movs	r3, #128	@ 0x80
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e002      	b.n	8009eb6 <UART_SetConfig+0x5a6>
 8009eb0:	2380      	movs	r3, #128	@ 0x80
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a3f      	ldr	r2, [pc, #252]	@ (8009fb8 <UART_SetConfig+0x6a8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	f040 80f8 	bne.w	800a0b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	dc46      	bgt.n	8009f58 <UART_SetConfig+0x648>
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	f2c0 8082 	blt.w	8009fd4 <UART_SetConfig+0x6c4>
 8009ed0:	3b02      	subs	r3, #2
 8009ed2:	2b1e      	cmp	r3, #30
 8009ed4:	d87e      	bhi.n	8009fd4 <UART_SetConfig+0x6c4>
 8009ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <UART_SetConfig+0x5cc>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009f5f 	.word	0x08009f5f
 8009ee0:	08009fd5 	.word	0x08009fd5
 8009ee4:	08009f67 	.word	0x08009f67
 8009ee8:	08009fd5 	.word	0x08009fd5
 8009eec:	08009fd5 	.word	0x08009fd5
 8009ef0:	08009fd5 	.word	0x08009fd5
 8009ef4:	08009f77 	.word	0x08009f77
 8009ef8:	08009fd5 	.word	0x08009fd5
 8009efc:	08009fd5 	.word	0x08009fd5
 8009f00:	08009fd5 	.word	0x08009fd5
 8009f04:	08009fd5 	.word	0x08009fd5
 8009f08:	08009fd5 	.word	0x08009fd5
 8009f0c:	08009fd5 	.word	0x08009fd5
 8009f10:	08009fd5 	.word	0x08009fd5
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	08009fd5 	.word	0x08009fd5
 8009f1c:	08009fd5 	.word	0x08009fd5
 8009f20:	08009fd5 	.word	0x08009fd5
 8009f24:	08009fd5 	.word	0x08009fd5
 8009f28:	08009fd5 	.word	0x08009fd5
 8009f2c:	08009fd5 	.word	0x08009fd5
 8009f30:	08009fd5 	.word	0x08009fd5
 8009f34:	08009fd5 	.word	0x08009fd5
 8009f38:	08009fd5 	.word	0x08009fd5
 8009f3c:	08009fd5 	.word	0x08009fd5
 8009f40:	08009fd5 	.word	0x08009fd5
 8009f44:	08009fd5 	.word	0x08009fd5
 8009f48:	08009fd5 	.word	0x08009fd5
 8009f4c:	08009fd5 	.word	0x08009fd5
 8009f50:	08009fd5 	.word	0x08009fd5
 8009f54:	08009fc7 	.word	0x08009fc7
 8009f58:	2b40      	cmp	r3, #64	@ 0x40
 8009f5a:	d037      	beq.n	8009fcc <UART_SetConfig+0x6bc>
 8009f5c:	e03a      	b.n	8009fd4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f5e:	f7fe fbb7 	bl	80086d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f64:	e03c      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fbc6 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f74:	e034      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f76:	f107 0318 	add.w	r3, r7, #24
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fd12 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e02c      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f86:	4b09      	ldr	r3, [pc, #36]	@ (8009fac <UART_SetConfig+0x69c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d016      	beq.n	8009fc0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f92:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <UART_SetConfig+0x69c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	4a07      	ldr	r2, [pc, #28]	@ (8009fbc <UART_SetConfig+0x6ac>)
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fa4:	e01c      	b.n	8009fe0 <UART_SetConfig+0x6d0>
 8009fa6:	bf00      	nop
 8009fa8:	40011400 	.word	0x40011400
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	40007800 	.word	0x40007800
 8009fb4:	40007c00 	.word	0x40007c00
 8009fb8:	58000c00 	.word	0x58000c00
 8009fbc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fc0:	4b9d      	ldr	r3, [pc, #628]	@ (800a238 <UART_SetConfig+0x928>)
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc4:	e00c      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fc6:	4b9d      	ldr	r3, [pc, #628]	@ (800a23c <UART_SetConfig+0x92c>)
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fca:	e009      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd2:	e005      	b.n	8009fe0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 81de 	beq.w	800a3a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	4a94      	ldr	r2, [pc, #592]	@ (800a240 <UART_SetConfig+0x930>)
 8009fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ffa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	4413      	add	r3, r2
 800a006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a008:	429a      	cmp	r2, r3
 800a00a:	d305      	bcc.n	800a018 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a014:	429a      	cmp	r2, r3
 800a016:	d903      	bls.n	800a020 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a01e:	e1c1      	b.n	800a3a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a022:	2200      	movs	r2, #0
 800a024:	60bb      	str	r3, [r7, #8]
 800a026:	60fa      	str	r2, [r7, #12]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02c:	4a84      	ldr	r2, [pc, #528]	@ (800a240 <UART_SetConfig+0x930>)
 800a02e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a032:	b29b      	uxth	r3, r3
 800a034:	2200      	movs	r2, #0
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a03e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a042:	f7f6 f94d 	bl	80002e0 <__aeabi_uldivmod>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4610      	mov	r0, r2
 800a04c:	4619      	mov	r1, r3
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	020b      	lsls	r3, r1, #8
 800a058:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a05c:	0202      	lsls	r2, r0, #8
 800a05e:	6979      	ldr	r1, [r7, #20]
 800a060:	6849      	ldr	r1, [r1, #4]
 800a062:	0849      	lsrs	r1, r1, #1
 800a064:	2000      	movs	r0, #0
 800a066:	460c      	mov	r4, r1
 800a068:	4605      	mov	r5, r0
 800a06a:	eb12 0804 	adds.w	r8, r2, r4
 800a06e:	eb43 0905 	adc.w	r9, r3, r5
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	469a      	mov	sl, r3
 800a07a:	4693      	mov	fp, r2
 800a07c:	4652      	mov	r2, sl
 800a07e:	465b      	mov	r3, fp
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 f92c 	bl	80002e0 <__aeabi_uldivmod>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4613      	mov	r3, r2
 800a08e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a096:	d308      	bcc.n	800a0aa <UART_SetConfig+0x79a>
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09e:	d204      	bcs.n	800a0aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a6:	60da      	str	r2, [r3, #12]
 800a0a8:	e17c      	b.n	800a3a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0b0:	e178      	b.n	800a3a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ba:	f040 80c5 	bne.w	800a248 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	dc48      	bgt.n	800a158 <UART_SetConfig+0x848>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	db7b      	blt.n	800a1c2 <UART_SetConfig+0x8b2>
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d879      	bhi.n	800a1c2 <UART_SetConfig+0x8b2>
 800a0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <UART_SetConfig+0x7c4>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a15f 	.word	0x0800a15f
 800a0d8:	0800a167 	.word	0x0800a167
 800a0dc:	0800a1c3 	.word	0x0800a1c3
 800a0e0:	0800a1c3 	.word	0x0800a1c3
 800a0e4:	0800a16f 	.word	0x0800a16f
 800a0e8:	0800a1c3 	.word	0x0800a1c3
 800a0ec:	0800a1c3 	.word	0x0800a1c3
 800a0f0:	0800a1c3 	.word	0x0800a1c3
 800a0f4:	0800a17f 	.word	0x0800a17f
 800a0f8:	0800a1c3 	.word	0x0800a1c3
 800a0fc:	0800a1c3 	.word	0x0800a1c3
 800a100:	0800a1c3 	.word	0x0800a1c3
 800a104:	0800a1c3 	.word	0x0800a1c3
 800a108:	0800a1c3 	.word	0x0800a1c3
 800a10c:	0800a1c3 	.word	0x0800a1c3
 800a110:	0800a1c3 	.word	0x0800a1c3
 800a114:	0800a18f 	.word	0x0800a18f
 800a118:	0800a1c3 	.word	0x0800a1c3
 800a11c:	0800a1c3 	.word	0x0800a1c3
 800a120:	0800a1c3 	.word	0x0800a1c3
 800a124:	0800a1c3 	.word	0x0800a1c3
 800a128:	0800a1c3 	.word	0x0800a1c3
 800a12c:	0800a1c3 	.word	0x0800a1c3
 800a130:	0800a1c3 	.word	0x0800a1c3
 800a134:	0800a1c3 	.word	0x0800a1c3
 800a138:	0800a1c3 	.word	0x0800a1c3
 800a13c:	0800a1c3 	.word	0x0800a1c3
 800a140:	0800a1c3 	.word	0x0800a1c3
 800a144:	0800a1c3 	.word	0x0800a1c3
 800a148:	0800a1c3 	.word	0x0800a1c3
 800a14c:	0800a1c3 	.word	0x0800a1c3
 800a150:	0800a1c3 	.word	0x0800a1c3
 800a154:	0800a1b5 	.word	0x0800a1b5
 800a158:	2b40      	cmp	r3, #64	@ 0x40
 800a15a:	d02e      	beq.n	800a1ba <UART_SetConfig+0x8aa>
 800a15c:	e031      	b.n	800a1c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15e:	f7fc fabf 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 800a162:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a164:	e033      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a166:	f7fc fad1 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 800a16a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a16c:	e02f      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fac2 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17c:	e027      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fc0e 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18c:	e01f      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18e:	4b2d      	ldr	r3, [pc, #180]	@ (800a244 <UART_SetConfig+0x934>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a19a:	4b2a      	ldr	r3, [pc, #168]	@ (800a244 <UART_SetConfig+0x934>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	08db      	lsrs	r3, r3, #3
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	4a24      	ldr	r2, [pc, #144]	@ (800a238 <UART_SetConfig+0x928>)
 800a1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1ac:	e00f      	b.n	800a1ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a1ae:	4b22      	ldr	r3, [pc, #136]	@ (800a238 <UART_SetConfig+0x928>)
 800a1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b2:	e00c      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1b4:	4b21      	ldr	r3, [pc, #132]	@ (800a23c <UART_SetConfig+0x92c>)
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b8:	e009      	b.n	800a1ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c0:	e005      	b.n	800a1ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 80e7 	beq.w	800a3a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1da:	4a19      	ldr	r2, [pc, #100]	@ (800a240 <UART_SetConfig+0x930>)
 800a1dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e8:	005a      	lsls	r2, r3, #1
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	441a      	add	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	2b0f      	cmp	r3, #15
 800a200:	d916      	bls.n	800a230 <UART_SetConfig+0x920>
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a208:	d212      	bcs.n	800a230 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f023 030f 	bic.w	r3, r3, #15
 800a212:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	085b      	lsrs	r3, r3, #1
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	b29a      	uxth	r2, r3
 800a220:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a222:	4313      	orrs	r3, r2
 800a224:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a22c:	60da      	str	r2, [r3, #12]
 800a22e:	e0b9      	b.n	800a3a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a236:	e0b5      	b.n	800a3a4 <UART_SetConfig+0xa94>
 800a238:	03d09000 	.word	0x03d09000
 800a23c:	003d0900 	.word	0x003d0900
 800a240:	0800df00 	.word	0x0800df00
 800a244:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a248:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	dc49      	bgt.n	800a2e4 <UART_SetConfig+0x9d4>
 800a250:	2b00      	cmp	r3, #0
 800a252:	db7c      	blt.n	800a34e <UART_SetConfig+0xa3e>
 800a254:	2b20      	cmp	r3, #32
 800a256:	d87a      	bhi.n	800a34e <UART_SetConfig+0xa3e>
 800a258:	a201      	add	r2, pc, #4	@ (adr r2, 800a260 <UART_SetConfig+0x950>)
 800a25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25e:	bf00      	nop
 800a260:	0800a2eb 	.word	0x0800a2eb
 800a264:	0800a2f3 	.word	0x0800a2f3
 800a268:	0800a34f 	.word	0x0800a34f
 800a26c:	0800a34f 	.word	0x0800a34f
 800a270:	0800a2fb 	.word	0x0800a2fb
 800a274:	0800a34f 	.word	0x0800a34f
 800a278:	0800a34f 	.word	0x0800a34f
 800a27c:	0800a34f 	.word	0x0800a34f
 800a280:	0800a30b 	.word	0x0800a30b
 800a284:	0800a34f 	.word	0x0800a34f
 800a288:	0800a34f 	.word	0x0800a34f
 800a28c:	0800a34f 	.word	0x0800a34f
 800a290:	0800a34f 	.word	0x0800a34f
 800a294:	0800a34f 	.word	0x0800a34f
 800a298:	0800a34f 	.word	0x0800a34f
 800a29c:	0800a34f 	.word	0x0800a34f
 800a2a0:	0800a31b 	.word	0x0800a31b
 800a2a4:	0800a34f 	.word	0x0800a34f
 800a2a8:	0800a34f 	.word	0x0800a34f
 800a2ac:	0800a34f 	.word	0x0800a34f
 800a2b0:	0800a34f 	.word	0x0800a34f
 800a2b4:	0800a34f 	.word	0x0800a34f
 800a2b8:	0800a34f 	.word	0x0800a34f
 800a2bc:	0800a34f 	.word	0x0800a34f
 800a2c0:	0800a34f 	.word	0x0800a34f
 800a2c4:	0800a34f 	.word	0x0800a34f
 800a2c8:	0800a34f 	.word	0x0800a34f
 800a2cc:	0800a34f 	.word	0x0800a34f
 800a2d0:	0800a34f 	.word	0x0800a34f
 800a2d4:	0800a34f 	.word	0x0800a34f
 800a2d8:	0800a34f 	.word	0x0800a34f
 800a2dc:	0800a34f 	.word	0x0800a34f
 800a2e0:	0800a341 	.word	0x0800a341
 800a2e4:	2b40      	cmp	r3, #64	@ 0x40
 800a2e6:	d02e      	beq.n	800a346 <UART_SetConfig+0xa36>
 800a2e8:	e031      	b.n	800a34e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ea:	f7fc f9f9 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 800a2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2f0:	e033      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2f2:	f7fc fa0b 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 800a2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2f8:	e02f      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe f9fc 	bl	80086fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a308:	e027      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a30a:	f107 0318 	add.w	r3, r7, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fb48 	bl	80089a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a318:	e01f      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a31a:	4b2d      	ldr	r3, [pc, #180]	@ (800a3d0 <UART_SetConfig+0xac0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d009      	beq.n	800a33a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a326:	4b2a      	ldr	r3, [pc, #168]	@ (800a3d0 <UART_SetConfig+0xac0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	08db      	lsrs	r3, r3, #3
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	4a28      	ldr	r2, [pc, #160]	@ (800a3d4 <UART_SetConfig+0xac4>)
 800a332:	fa22 f303 	lsr.w	r3, r2, r3
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a338:	e00f      	b.n	800a35a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a33a:	4b26      	ldr	r3, [pc, #152]	@ (800a3d4 <UART_SetConfig+0xac4>)
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33e:	e00c      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a340:	4b25      	ldr	r3, [pc, #148]	@ (800a3d8 <UART_SetConfig+0xac8>)
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a344:	e009      	b.n	800a35a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e005      	b.n	800a35a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a358:	bf00      	nop
    }

    if (pclk != 0U)
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d021      	beq.n	800a3a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a364:	4a1d      	ldr	r2, [pc, #116]	@ (800a3dc <UART_SetConfig+0xacc>)
 800a366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d909      	bls.n	800a39e <UART_SetConfig+0xa8e>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a390:	d205      	bcs.n	800a39e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a394:	b29a      	uxth	r2, r3
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	e002      	b.n	800a3a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3748      	adds	r7, #72	@ 0x48
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ce:	bf00      	nop
 800a3d0:	58024400 	.word	0x58024400
 800a3d4:	03d09000 	.word	0x03d09000
 800a3d8:	003d0900 	.word	0x003d0900
 800a3dc:	0800df00 	.word	0x0800df00

0800a3e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ec:	f003 0308 	and.w	r3, r3, #8
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4de:	d10a      	bne.n	800a4f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b098      	sub	sp, #96	@ 0x60
 800a528:	af02      	add	r7, sp, #8
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a534:	f7f7 f8d4 	bl	80016e0 <HAL_GetTick>
 800a538:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b08      	cmp	r3, #8
 800a546:	d12f      	bne.n	800a5a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a548:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a550:	2200      	movs	r2, #0
 800a552:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f88e 	bl	800a678 <UART_WaitOnFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d022      	beq.n	800a5a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a576:	653b      	str	r3, [r7, #80]	@ 0x50
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a580:	647b      	str	r3, [r7, #68]	@ 0x44
 800a582:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e063      	b.n	800a670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d149      	bne.n	800a64a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f857 	bl	800a678 <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d03c      	beq.n	800a64a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	60fb      	str	r3, [r7, #12]
   return(result);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3308      	adds	r3, #8
 800a620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a622:	61fa      	str	r2, [r7, #28]
 800a624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	69b9      	ldr	r1, [r7, #24]
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	617b      	str	r3, [r7, #20]
   return(result);
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e012      	b.n	800a670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2220      	movs	r2, #32
 800a64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3758      	adds	r7, #88	@ 0x58
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	4613      	mov	r3, r2
 800a686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a688:	e04f      	b.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a690:	d04b      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a692:	f7f7 f825 	bl	80016e0 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d302      	bcc.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e04e      	b.n	800a74a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d037      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b80      	cmp	r3, #128	@ 0x80
 800a6be:	d034      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b40      	cmp	r3, #64	@ 0x40
 800a6c4:	d031      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69db      	ldr	r3, [r3, #28]
 800a6cc:	f003 0308 	and.w	r3, r3, #8
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d110      	bne.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2208      	movs	r2, #8
 800a6da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f839 	bl	800a754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e029      	b.n	800a74a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a704:	d111      	bne.n	800a72a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a70e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f81f 	bl	800a754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e00f      	b.n	800a74a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4013      	ands	r3, r2
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	429a      	cmp	r2, r3
 800a738:	bf0c      	ite	eq
 800a73a:	2301      	moveq	r3, #1
 800a73c:	2300      	movne	r3, #0
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	461a      	mov	r2, r3
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	429a      	cmp	r2, r3
 800a746:	d0a0      	beq.n	800a68a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b095      	sub	sp, #84	@ 0x54
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a77a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a77c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e6      	bne.n	800a75c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3308      	adds	r3, #8
 800a794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	e853 3f00 	ldrex	r3, [r3]
 800a79c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a81c <UART_EndRxTransfer+0xc8>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e5      	bne.n	800a78e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d118      	bne.n	800a7fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f023 0310 	bic.w	r3, r3, #16
 800a7de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e8:	61bb      	str	r3, [r7, #24]
 800a7ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	6979      	ldr	r1, [r7, #20]
 800a7ee:	69ba      	ldr	r2, [r7, #24]
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e6      	bne.n	800a7ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a810:	bf00      	nop
 800a812:	3754      	adds	r7, #84	@ 0x54
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	effffffe 	.word	0xeffffffe

0800a820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d101      	bne.n	800a836 <HAL_UARTEx_DisableFifoMode+0x16>
 800a832:	2302      	movs	r3, #2
 800a834:	e027      	b.n	800a886 <HAL_UARTEx_DisableFifoMode+0x66>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2224      	movs	r2, #36	@ 0x24
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0201 	bic.w	r2, r2, #1
 800a85c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e02d      	b.n	800a906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2224      	movs	r2, #36	@ 0x24
 800a8b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0201 	bic.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f850 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a922:	2302      	movs	r3, #2
 800a924:	e02d      	b.n	800a982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2224      	movs	r2, #36	@ 0x24
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0201 	bic.w	r2, r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f812 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9ac:	e031      	b.n	800aa12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0e5b      	lsrs	r3, r3, #25
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	0f5b      	lsrs	r3, r3, #29
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	7b3a      	ldrb	r2, [r7, #12]
 800a9da:	4911      	ldr	r1, [pc, #68]	@ (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9dc:	5c8a      	ldrb	r2, [r1, r2]
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e2:	7b3a      	ldrb	r2, [r7, #12]
 800a9e4:	490f      	ldr	r1, [pc, #60]	@ (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	4909      	ldr	r1, [pc, #36]	@ (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fa:	5c8a      	ldrb	r2, [r1, r2]
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa00:	7b7a      	ldrb	r2, [r7, #13]
 800aa02:	4908      	ldr	r1, [pc, #32]	@ (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800aa04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa06:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	0800df18 	.word	0x0800df18
 800aa24:	0800df20 	.word	0x0800df20

0800aa28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa28:	b084      	sub	sp, #16
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	f107 001c 	add.w	r0, r7, #28
 800aa36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d121      	bne.n	800aa86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	4b2c      	ldr	r3, [pc, #176]	@ (800ab04 <USB_CoreInit+0xdc>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d105      	bne.n	800aa7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 faaa 	bl	800afd4 <USB_CoreReset>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	e01b      	b.n	800aabe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa9e 	bl	800afd4 <USB_CoreReset>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	639a      	str	r2, [r3, #56]	@ 0x38
 800aab0:	e005      	b.n	800aabe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aabe:	7fbb      	ldrb	r3, [r7, #30]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d116      	bne.n	800aaf2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aad2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab08 <USB_CoreInit+0xe0>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f043 0206 	orr.w	r2, r3, #6
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f043 0220 	orr.w	r2, r3, #32
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aafe:	b004      	add	sp, #16
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	ffbdffbf 	.word	0xffbdffbf
 800ab08:	03ee0000 	.word	0x03ee0000

0800ab0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f023 0201 	bic.w	r2, r3, #1
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d115      	bne.n	800ab7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab5c:	200a      	movs	r0, #10
 800ab5e:	f7f6 fdcb 	bl	80016f8 <HAL_Delay>
      ms += 10U;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	330a      	adds	r3, #10
 800ab66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fa25 	bl	800afb8 <USB_GetMode>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d01e      	beq.n	800abb2 <USB_SetCurrentMode+0x84>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab78:	d9f0      	bls.n	800ab5c <USB_SetCurrentMode+0x2e>
 800ab7a:	e01a      	b.n	800abb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d115      	bne.n	800abae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab8e:	200a      	movs	r0, #10
 800ab90:	f7f6 fdb2 	bl	80016f8 <HAL_Delay>
      ms += 10U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	330a      	adds	r3, #10
 800ab98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa0c 	bl	800afb8 <USB_GetMode>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d005      	beq.n	800abb2 <USB_SetCurrentMode+0x84>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2bc7      	cmp	r3, #199	@ 0xc7
 800abaa:	d9f0      	bls.n	800ab8e <USB_SetCurrentMode+0x60>
 800abac:	e001      	b.n	800abb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e005      	b.n	800abbe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2bc8      	cmp	r3, #200	@ 0xc8
 800abb6:	d101      	bne.n	800abbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e000      	b.n	800abbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abc8:	b084      	sub	sp, #16
 800abca:	b580      	push	{r7, lr}
 800abcc:	b086      	sub	sp, #24
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	e009      	b.n	800abfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3340      	adds	r3, #64	@ 0x40
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3301      	adds	r3, #1
 800abfa:	613b      	str	r3, [r7, #16]
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2b0e      	cmp	r3, #14
 800ac00:	d9f2      	bls.n	800abe8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d11c      	bne.n	800ac44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	e005      	b.n	800ac50 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac56:	461a      	mov	r2, r3
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d10d      	bne.n	800ac80 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f968 	bl	800af44 <USB_SetDevSpeed>
 800ac74:	e008      	b.n	800ac88 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac76:	2101      	movs	r1, #1
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f963 	bl	800af44 <USB_SetDevSpeed>
 800ac7e:	e003      	b.n	800ac88 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac80:	2103      	movs	r1, #3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f95e 	bl	800af44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac88:	2110      	movs	r1, #16
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f8fa 	bl	800ae84 <USB_FlushTxFifo>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f924 	bl	800aee8 <USB_FlushRxFifo>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb0:	461a      	mov	r2, r3
 800acb2:	2300      	movs	r3, #0
 800acb4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acbc:	461a      	mov	r2, r3
 800acbe:	2300      	movs	r3, #0
 800acc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc8:	461a      	mov	r2, r3
 800acca:	2300      	movs	r3, #0
 800accc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acce:	2300      	movs	r3, #0
 800acd0:	613b      	str	r3, [r7, #16]
 800acd2:	e043      	b.n	800ad5c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ace6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acea:	d118      	bne.n	800ad1e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfe:	461a      	mov	r2, r3
 800ad00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	e013      	b.n	800ad30 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad14:	461a      	mov	r2, r3
 800ad16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	e008      	b.n	800ad30 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad60:	461a      	mov	r2, r3
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d3b5      	bcc.n	800acd4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	e043      	b.n	800adf6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad84:	d118      	bne.n	800adb8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	e013      	b.n	800adca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adae:	461a      	mov	r2, r3
 800adb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	e008      	b.n	800adca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	461a      	mov	r2, r3
 800adc6:	2300      	movs	r3, #0
 800adc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add6:	461a      	mov	r2, r3
 800add8:	2300      	movs	r3, #0
 800adda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade8:	461a      	mov	r2, r3
 800adea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800adee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	3301      	adds	r3, #1
 800adf4:	613b      	str	r3, [r7, #16]
 800adf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800adfa:	461a      	mov	r2, r3
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d3b5      	bcc.n	800ad6e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d105      	bne.n	800ae38 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	f043 0210 	orr.w	r2, r3, #16
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699a      	ldr	r2, [r3, #24]
 800ae3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae7c <USB_DevInit+0x2b4>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	f043 0208 	orr.w	r2, r3, #8
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d105      	bne.n	800ae6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	699a      	ldr	r2, [r3, #24]
 800ae64:	4b06      	ldr	r3, [pc, #24]	@ (800ae80 <USB_DevInit+0x2b8>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae78:	b004      	add	sp, #16
 800ae7a:	4770      	bx	lr
 800ae7c:	803c3800 	.word	0x803c3800
 800ae80:	40000004 	.word	0x40000004

0800ae84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae9e:	d901      	bls.n	800aea4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e01b      	b.n	800aedc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	daf2      	bge.n	800ae92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	019b      	lsls	r3, r3, #6
 800aeb4:	f043 0220 	orr.w	r2, r3, #32
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aec8:	d901      	bls.n	800aece <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e006      	b.n	800aedc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d0f0      	beq.n	800aebc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af00:	d901      	bls.n	800af06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e018      	b.n	800af38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	daf2      	bge.n	800aef4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2210      	movs	r2, #16
 800af16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af24:	d901      	bls.n	800af2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e006      	b.n	800af38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f003 0310 	and.w	r3, r3, #16
 800af32:	2b10      	cmp	r3, #16
 800af34:	d0f0      	beq.n	800af18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af64:	4313      	orrs	r3, r2
 800af66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afa4:	f043 0302 	orr.w	r3, r3, #2
 800afa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	f003 0301 	and.w	r3, r3, #1
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afec:	d901      	bls.n	800aff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e01b      	b.n	800b02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	daf2      	bge.n	800afe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	f043 0201 	orr.w	r2, r3, #1
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3301      	adds	r3, #1
 800b00e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b016:	d901      	bls.n	800b01c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e006      	b.n	800b02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b01      	cmp	r3, #1
 800b026:	d0f0      	beq.n	800b00a <USB_CoreReset+0x36>

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <__NVIC_SetPriority>:
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	6039      	str	r1, [r7, #0]
 800b042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	db0a      	blt.n	800b062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	490c      	ldr	r1, [pc, #48]	@ (800b084 <__NVIC_SetPriority+0x4c>)
 800b052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b056:	0112      	lsls	r2, r2, #4
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	440b      	add	r3, r1
 800b05c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b060:	e00a      	b.n	800b078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	b2da      	uxtb	r2, r3
 800b066:	4908      	ldr	r1, [pc, #32]	@ (800b088 <__NVIC_SetPriority+0x50>)
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	f003 030f 	and.w	r3, r3, #15
 800b06e:	3b04      	subs	r3, #4
 800b070:	0112      	lsls	r2, r2, #4
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	440b      	add	r3, r1
 800b076:	761a      	strb	r2, [r3, #24]
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	e000e100 	.word	0xe000e100
 800b088:	e000ed00 	.word	0xe000ed00

0800b08c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b090:	4b05      	ldr	r3, [pc, #20]	@ (800b0a8 <SysTick_Handler+0x1c>)
 800b092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b094:	f001 fd6a 	bl	800cb6c <xTaskGetSchedulerState>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d001      	beq.n	800b0a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b09e:	f002 fb63 	bl	800d768 <xPortSysTickHandler>
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	e000e010 	.word	0xe000e010

0800b0ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	f06f 0004 	mvn.w	r0, #4
 800b0b6:	f7ff ffbf 	bl	800b038 <__NVIC_SetPriority>
#endif
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0c6:	f3ef 8305 	mrs	r3, IPSR
 800b0ca:	603b      	str	r3, [r7, #0]
  return(result);
 800b0cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b0d2:	f06f 0305 	mvn.w	r3, #5
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	e00c      	b.n	800b0f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b0da:	4b0a      	ldr	r3, [pc, #40]	@ (800b104 <osKernelInitialize+0x44>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b0e2:	4b08      	ldr	r3, [pc, #32]	@ (800b104 <osKernelInitialize+0x44>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	607b      	str	r3, [r7, #4]
 800b0ec:	e002      	b.n	800b0f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b0ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0f4:	687b      	ldr	r3, [r7, #4]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	24000730 	.word	0x24000730

0800b108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b10e:	f3ef 8305 	mrs	r3, IPSR
 800b112:	603b      	str	r3, [r7, #0]
  return(result);
 800b114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b11a:	f06f 0305 	mvn.w	r3, #5
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	e010      	b.n	800b144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b122:	4b0b      	ldr	r3, [pc, #44]	@ (800b150 <osKernelStart+0x48>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d109      	bne.n	800b13e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b12a:	f7ff ffbf 	bl	800b0ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b12e:	4b08      	ldr	r3, [pc, #32]	@ (800b150 <osKernelStart+0x48>)
 800b130:	2202      	movs	r2, #2
 800b132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b134:	f001 f892 	bl	800c25c <vTaskStartScheduler>
      stat = osOK;
 800b138:	2300      	movs	r3, #0
 800b13a:	607b      	str	r3, [r7, #4]
 800b13c:	e002      	b.n	800b144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b144:	687b      	ldr	r3, [r7, #4]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	24000730 	.word	0x24000730

0800b154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b154:	b580      	push	{r7, lr}
 800b156:	b08e      	sub	sp, #56	@ 0x38
 800b158:	af04      	add	r7, sp, #16
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b164:	f3ef 8305 	mrs	r3, IPSR
 800b168:	617b      	str	r3, [r7, #20]
  return(result);
 800b16a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d17e      	bne.n	800b26e <osThreadNew+0x11a>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d07b      	beq.n	800b26e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b176:	2380      	movs	r3, #128	@ 0x80
 800b178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b17a:	2318      	movs	r3, #24
 800b17c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d045      	beq.n	800b21a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <osThreadNew+0x48>
        name = attr->name;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <osThreadNew+0x6e>
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	2b38      	cmp	r3, #56	@ 0x38
 800b1b4:	d805      	bhi.n	800b1c2 <osThreadNew+0x6e>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <osThreadNew+0x72>
        return (NULL);
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e054      	b.n	800b270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	089b      	lsrs	r3, r3, #2
 800b1d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00e      	beq.n	800b1fc <osThreadNew+0xa8>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	2ba7      	cmp	r3, #167	@ 0xa7
 800b1e4:	d90a      	bls.n	800b1fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d006      	beq.n	800b1fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <osThreadNew+0xa8>
        mem = 1;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	61bb      	str	r3, [r7, #24]
 800b1fa:	e010      	b.n	800b21e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10c      	bne.n	800b21e <osThreadNew+0xca>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d108      	bne.n	800b21e <osThreadNew+0xca>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <osThreadNew+0xca>
          mem = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	61bb      	str	r3, [r7, #24]
 800b218:	e001      	b.n	800b21e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d110      	bne.n	800b246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b22c:	9202      	str	r2, [sp, #8]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 fe1a 	bl	800be74 <xTaskCreateStatic>
 800b240:	4603      	mov	r3, r0
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	e013      	b.n	800b26e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d110      	bne.n	800b26e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	b29a      	uxth	r2, r3
 800b250:	f107 0310 	add.w	r3, r7, #16
 800b254:	9301      	str	r3, [sp, #4]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 fe68 	bl	800bf34 <xTaskCreate>
 800b264:	4603      	mov	r3, r0
 800b266:	2b01      	cmp	r3, #1
 800b268:	d001      	beq.n	800b26e <osThreadNew+0x11a>
            hTask = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b26e:	693b      	ldr	r3, [r7, #16]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3728      	adds	r7, #40	@ 0x28
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b280:	f3ef 8305 	mrs	r3, IPSR
 800b284:	60bb      	str	r3, [r7, #8]
  return(result);
 800b286:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <osDelay+0x1c>
    stat = osErrorISR;
 800b28c:	f06f 0305 	mvn.w	r3, #5
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	e007      	b.n	800b2a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b294:	2300      	movs	r3, #0
 800b296:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 ffa6 	bl	800c1f0 <vTaskDelay>
    }
  }

  return (stat);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a07      	ldr	r2, [pc, #28]	@ (800b2dc <vApplicationGetIdleTaskMemory+0x2c>)
 800b2c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	4a06      	ldr	r2, [pc, #24]	@ (800b2e0 <vApplicationGetIdleTaskMemory+0x30>)
 800b2c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2280      	movs	r2, #128	@ 0x80
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	24000734 	.word	0x24000734
 800b2e0:	240007dc 	.word	0x240007dc

0800b2e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a07      	ldr	r2, [pc, #28]	@ (800b310 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	4a06      	ldr	r2, [pc, #24]	@ (800b314 <vApplicationGetTimerTaskMemory+0x30>)
 800b2fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b302:	601a      	str	r2, [r3, #0]
}
 800b304:	bf00      	nop
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	240009dc 	.word	0x240009dc
 800b314:	24000a84 	.word	0x24000a84

0800b318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f103 0208 	add.w	r2, r3, #8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f103 0208 	add.w	r2, r3, #8
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f103 0208 	add.w	r2, r3, #8
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	601a      	str	r2, [r3, #0]
}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3d0:	d103      	bne.n	800b3da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	e00c      	b.n	800b3f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	e002      	b.n	800b3e8 <vListInsert+0x2e>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d2f6      	bcs.n	800b3e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	601a      	str	r2, [r3, #0]
}
 800b420:	bf00      	nop
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	6892      	ldr	r2, [r2, #8]
 800b442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	6852      	ldr	r2, [r2, #4]
 800b44c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	429a      	cmp	r2, r3
 800b456:	d103      	bne.n	800b460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	1e5a      	subs	r2, r3, #1
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10b      	bne.n	800b4ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4ac:	f002 f8cc 	bl	800d648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b8:	68f9      	ldr	r1, [r7, #12]
 800b4ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4bc:	fb01 f303 	mul.w	r3, r1, r3
 800b4c0:	441a      	add	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	68f9      	ldr	r1, [r7, #12]
 800b4e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4e2:	fb01 f303 	mul.w	r3, r1, r3
 800b4e6:	441a      	add	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	22ff      	movs	r2, #255	@ 0xff
 800b4f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	22ff      	movs	r2, #255	@ 0xff
 800b4f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d114      	bne.n	800b52c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d01a      	beq.n	800b540 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3310      	adds	r3, #16
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 f966 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d012      	beq.n	800b540 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b51a:	4b0d      	ldr	r3, [pc, #52]	@ (800b550 <xQueueGenericReset+0xd0>)
 800b51c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	e009      	b.n	800b540 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3310      	adds	r3, #16
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fef1 	bl	800b318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3324      	adds	r3, #36	@ 0x24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff feec 	bl	800b318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b540:	f002 f8b4 	bl	800d6ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b544:	2301      	movs	r3, #1
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08e      	sub	sp, #56	@ 0x38
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10b      	bne.n	800b580 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b57a:	bf00      	nop
 800b57c:	bf00      	nop
 800b57e:	e7fd      	b.n	800b57c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10b      	bne.n	800b59e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	e7fd      	b.n	800b59a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <xQueueGenericCreateStatic+0x56>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <xQueueGenericCreateStatic+0x5a>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e000      	b.n	800b5b0 <xQueueGenericCreateStatic+0x5c>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	623b      	str	r3, [r7, #32]
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <xQueueGenericCreateStatic+0x84>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <xQueueGenericCreateStatic+0x88>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e000      	b.n	800b5de <xQueueGenericCreateStatic+0x8a>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	61fb      	str	r3, [r7, #28]
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	e7fd      	b.n	800b5f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5fa:	2350      	movs	r3, #80	@ 0x50
 800b5fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b50      	cmp	r3, #80	@ 0x50
 800b602:	d00b      	beq.n	800b61c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	61bb      	str	r3, [r7, #24]
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	e7fd      	b.n	800b618 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b61c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00d      	beq.n	800b644 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b630:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4613      	mov	r3, r2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	68b9      	ldr	r1, [r7, #8]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 f805 	bl	800b64e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b646:	4618      	mov	r0, r3
 800b648:	3730      	adds	r7, #48	@ 0x30
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	e002      	b.n	800b670 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b67c:	2101      	movs	r1, #1
 800b67e:	69b8      	ldr	r0, [r7, #24]
 800b680:	f7ff fefe 	bl	800b480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08e      	sub	sp, #56	@ 0x38
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10b      	bne.n	800b6c8 <xQueueGenericSend+0x34>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6c2:	bf00      	nop
 800b6c4:	bf00      	nop
 800b6c6:	e7fd      	b.n	800b6c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <xQueueGenericSend+0x42>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <xQueueGenericSend+0x46>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e000      	b.n	800b6dc <xQueueGenericSend+0x48>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10b      	bne.n	800b6f8 <xQueueGenericSend+0x64>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d103      	bne.n	800b706 <xQueueGenericSend+0x72>
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b702:	2b01      	cmp	r3, #1
 800b704:	d101      	bne.n	800b70a <xQueueGenericSend+0x76>
 800b706:	2301      	movs	r3, #1
 800b708:	e000      	b.n	800b70c <xQueueGenericSend+0x78>
 800b70a:	2300      	movs	r3, #0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10b      	bne.n	800b728 <xQueueGenericSend+0x94>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	623b      	str	r3, [r7, #32]
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	e7fd      	b.n	800b724 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b728:	f001 fa20 	bl	800cb6c <xTaskGetSchedulerState>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <xQueueGenericSend+0xa4>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <xQueueGenericSend+0xa8>
 800b738:	2301      	movs	r3, #1
 800b73a:	e000      	b.n	800b73e <xQueueGenericSend+0xaa>
 800b73c:	2300      	movs	r3, #0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10b      	bne.n	800b75a <xQueueGenericSend+0xc6>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	61fb      	str	r3, [r7, #28]
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	e7fd      	b.n	800b756 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b75a:	f001 ff75 	bl	800d648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b766:	429a      	cmp	r2, r3
 800b768:	d302      	bcc.n	800b770 <xQueueGenericSend+0xdc>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d129      	bne.n	800b7c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	68b9      	ldr	r1, [r7, #8]
 800b774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b776:	f000 fa0f 	bl	800bb98 <prvCopyDataToQueue>
 800b77a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b780:	2b00      	cmp	r3, #0
 800b782:	d010      	beq.n	800b7a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	3324      	adds	r3, #36	@ 0x24
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 f829 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d013      	beq.n	800b7bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b794:	4b3f      	ldr	r3, [pc, #252]	@ (800b894 <xQueueGenericSend+0x200>)
 800b796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	e00a      	b.n	800b7bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7ac:	4b39      	ldr	r3, [pc, #228]	@ (800b894 <xQueueGenericSend+0x200>)
 800b7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7bc:	f001 ff76 	bl	800d6ac <vPortExitCritical>
				return pdPASS;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e063      	b.n	800b88c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d103      	bne.n	800b7d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ca:	f001 ff6f 	bl	800d6ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e05c      	b.n	800b88c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7d8:	f107 0314 	add.w	r3, r7, #20
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 f863 	bl	800c8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7e6:	f001 ff61 	bl	800d6ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7ea:	f000 fda7 	bl	800c33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7ee:	f001 ff2b 	bl	800d648 <vPortEnterCritical>
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7f8:	b25b      	sxtb	r3, r3
 800b7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7fe:	d103      	bne.n	800b808 <xQueueGenericSend+0x174>
 800b800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b80e:	b25b      	sxtb	r3, r3
 800b810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b814:	d103      	bne.n	800b81e <xQueueGenericSend+0x18a>
 800b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b81e:	f001 ff45 	bl	800d6ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b822:	1d3a      	adds	r2, r7, #4
 800b824:	f107 0314 	add.w	r3, r7, #20
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f852 	bl	800c8d4 <xTaskCheckForTimeOut>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d124      	bne.n	800b880 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b838:	f000 faa6 	bl	800bd88 <prvIsQueueFull>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d018      	beq.n	800b874 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	3310      	adds	r3, #16
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 ff76 	bl	800c73c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b852:	f000 fa31 	bl	800bcb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b856:	f000 fd7f 	bl	800c358 <xTaskResumeAll>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f47f af7c 	bne.w	800b75a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b862:	4b0c      	ldr	r3, [pc, #48]	@ (800b894 <xQueueGenericSend+0x200>)
 800b864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	e772      	b.n	800b75a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b876:	f000 fa1f 	bl	800bcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b87a:	f000 fd6d 	bl	800c358 <xTaskResumeAll>
 800b87e:	e76c      	b.n	800b75a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b882:	f000 fa19 	bl	800bcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b886:	f000 fd67 	bl	800c358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b88a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3738      	adds	r7, #56	@ 0x38
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	e000ed04 	.word	0xe000ed04

0800b898 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b090      	sub	sp, #64	@ 0x40
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10b      	bne.n	800b8c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d103      	bne.n	800b8d6 <xQueueGenericSendFromISR+0x3e>
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <xQueueGenericSendFromISR+0x42>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <xQueueGenericSendFromISR+0x44>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10b      	bne.n	800b8f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8f2:	bf00      	nop
 800b8f4:	bf00      	nop
 800b8f6:	e7fd      	b.n	800b8f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d103      	bne.n	800b906 <xQueueGenericSendFromISR+0x6e>
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <xQueueGenericSendFromISR+0x72>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueGenericSendFromISR+0x74>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10b      	bne.n	800b928 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	623b      	str	r3, [r7, #32]
}
 800b922:	bf00      	nop
 800b924:	bf00      	nop
 800b926:	e7fd      	b.n	800b924 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b928:	f001 ff6e 	bl	800d808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b92c:	f3ef 8211 	mrs	r2, BASEPRI
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	61fa      	str	r2, [r7, #28]
 800b942:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b944:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b946:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <xQueueGenericSendFromISR+0xc2>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b02      	cmp	r3, #2
 800b958:	d12f      	bne.n	800b9ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b968:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b970:	f000 f912 	bl	800bb98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b974:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b97c:	d112      	bne.n	800b9a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d016      	beq.n	800b9b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	3324      	adds	r3, #36	@ 0x24
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 ff28 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00e      	beq.n	800b9b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	e007      	b.n	800b9b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	b25a      	sxtb	r2, r3
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b9b8:	e001      	b.n	800b9be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3740      	adds	r7, #64	@ 0x40
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08c      	sub	sp, #48	@ 0x30
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <xQueueReceive+0x32>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	623b      	str	r3, [r7, #32]
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <xQueueReceive+0x40>
 800ba0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <xQueueReceive+0x44>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e000      	b.n	800ba1a <xQueueReceive+0x46>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10b      	bne.n	800ba36 <xQueueReceive+0x62>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	61fb      	str	r3, [r7, #28]
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba36:	f001 f899 	bl	800cb6c <xTaskGetSchedulerState>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <xQueueReceive+0x72>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <xQueueReceive+0x76>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e000      	b.n	800ba4c <xQueueReceive+0x78>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10b      	bne.n	800ba68 <xQueueReceive+0x94>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	61bb      	str	r3, [r7, #24]
}
 800ba62:	bf00      	nop
 800ba64:	bf00      	nop
 800ba66:	e7fd      	b.n	800ba64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba68:	f001 fdee 	bl	800d648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01f      	beq.n	800bab8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba78:	68b9      	ldr	r1, [r7, #8]
 800ba7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba7c:	f000 f8f6 	bl	800bc6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00f      	beq.n	800bab0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba92:	3310      	adds	r3, #16
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fea3 	bl	800c7e0 <xTaskRemoveFromEventList>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baa0:	4b3c      	ldr	r3, [pc, #240]	@ (800bb94 <xQueueReceive+0x1c0>)
 800baa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bab0:	f001 fdfc 	bl	800d6ac <vPortExitCritical>
				return pdPASS;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e069      	b.n	800bb8c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d103      	bne.n	800bac6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800babe:	f001 fdf5 	bl	800d6ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e062      	b.n	800bb8c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d106      	bne.n	800bada <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bacc:	f107 0310 	add.w	r3, r7, #16
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 fee9 	bl	800c8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bad6:	2301      	movs	r3, #1
 800bad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bada:	f001 fde7 	bl	800d6ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bade:	f000 fc2d 	bl	800c33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bae2:	f001 fdb1 	bl	800d648 <vPortEnterCritical>
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800baec:	b25b      	sxtb	r3, r3
 800baee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800baf2:	d103      	bne.n	800bafc <xQueueReceive+0x128>
 800baf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb02:	b25b      	sxtb	r3, r3
 800bb04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb08:	d103      	bne.n	800bb12 <xQueueReceive+0x13e>
 800bb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb12:	f001 fdcb 	bl	800d6ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb16:	1d3a      	adds	r2, r7, #4
 800bb18:	f107 0310 	add.w	r3, r7, #16
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fed8 	bl	800c8d4 <xTaskCheckForTimeOut>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d123      	bne.n	800bb72 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb2c:	f000 f916 	bl	800bd5c <prvIsQueueEmpty>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d017      	beq.n	800bb66 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb38:	3324      	adds	r3, #36	@ 0x24
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 fdfc 	bl	800c73c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb46:	f000 f8b7 	bl	800bcb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb4a:	f000 fc05 	bl	800c358 <xTaskResumeAll>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d189      	bne.n	800ba68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bb54:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <xQueueReceive+0x1c0>)
 800bb56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	e780      	b.n	800ba68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb68:	f000 f8a6 	bl	800bcb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb6c:	f000 fbf4 	bl	800c358 <xTaskResumeAll>
 800bb70:	e77a      	b.n	800ba68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb74:	f000 f8a0 	bl	800bcb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb78:	f000 fbee 	bl	800c358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb7e:	f000 f8ed 	bl	800bd5c <prvIsQueueEmpty>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f43f af6f 	beq.w	800ba68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3730      	adds	r7, #48	@ 0x30
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10d      	bne.n	800bbd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d14d      	bne.n	800bc5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fff0 	bl	800cba8 <xTaskPriorityDisinherit>
 800bbc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	609a      	str	r2, [r3, #8]
 800bbd0:	e043      	b.n	800bc5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d119      	bne.n	800bc0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6858      	ldr	r0, [r3, #4]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	f002 f8cc 	bl	800dd80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d32b      	bcc.n	800bc5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	e026      	b.n	800bc5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68d8      	ldr	r0, [r3, #12]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc14:	461a      	mov	r2, r3
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	f002 f8b2 	bl	800dd80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68da      	ldr	r2, [r3, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc24:	425b      	negs	r3, r3
 800bc26:	441a      	add	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d207      	bcs.n	800bc48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc40:	425b      	negs	r3, r3
 800bc42:	441a      	add	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d105      	bne.n	800bc5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bc62:	697b      	ldr	r3, [r7, #20]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d018      	beq.n	800bcb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc86:	441a      	add	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d303      	bcc.n	800bca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	68d9      	ldr	r1, [r3, #12]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca8:	461a      	mov	r2, r3
 800bcaa:	6838      	ldr	r0, [r7, #0]
 800bcac:	f002 f868 	bl	800dd80 <memcpy>
	}
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcc0:	f001 fcc2 	bl	800d648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bccc:	e011      	b.n	800bcf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d012      	beq.n	800bcfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3324      	adds	r3, #36	@ 0x24
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fd80 	bl	800c7e0 <xTaskRemoveFromEventList>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bce6:	f000 fe59 	bl	800c99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	dce9      	bgt.n	800bcce <prvUnlockQueue+0x16>
 800bcfa:	e000      	b.n	800bcfe <prvUnlockQueue+0x46>
					break;
 800bcfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	22ff      	movs	r2, #255	@ 0xff
 800bd02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bd06:	f001 fcd1 	bl	800d6ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd0a:	f001 fc9d 	bl	800d648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd16:	e011      	b.n	800bd3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d012      	beq.n	800bd46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	3310      	adds	r3, #16
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fd5b 	bl	800c7e0 <xTaskRemoveFromEventList>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd30:	f000 fe34 	bl	800c99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dce9      	bgt.n	800bd18 <prvUnlockQueue+0x60>
 800bd44:	e000      	b.n	800bd48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	22ff      	movs	r2, #255	@ 0xff
 800bd4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bd50:	f001 fcac 	bl	800d6ac <vPortExitCritical>
}
 800bd54:	bf00      	nop
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd64:	f001 fc70 	bl	800d648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d102      	bne.n	800bd76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e001      	b.n	800bd7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd7a:	f001 fc97 	bl	800d6ac <vPortExitCritical>

	return xReturn;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd90:	f001 fc5a 	bl	800d648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d102      	bne.n	800bda6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	e001      	b.n	800bdaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bda6:	2300      	movs	r3, #0
 800bda8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdaa:	f001 fc7f 	bl	800d6ac <vPortExitCritical>

	return xReturn;
 800bdae:	68fb      	ldr	r3, [r7, #12]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	e014      	b.n	800bdf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bdc8:	4a0f      	ldr	r2, [pc, #60]	@ (800be08 <vQueueAddToRegistry+0x50>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10b      	bne.n	800bdec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bdd4:	490c      	ldr	r1, [pc, #48]	@ (800be08 <vQueueAddToRegistry+0x50>)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdde:	4a0a      	ldr	r2, [pc, #40]	@ (800be08 <vQueueAddToRegistry+0x50>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdea:	e006      	b.n	800bdfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b07      	cmp	r3, #7
 800bdf6:	d9e7      	bls.n	800bdc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdf8:	bf00      	nop
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	24000e84 	.word	0x24000e84

0800be0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be1c:	f001 fc14 	bl	800d648 <vPortEnterCritical>
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be26:	b25b      	sxtb	r3, r3
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be2c:	d103      	bne.n	800be36 <vQueueWaitForMessageRestricted+0x2a>
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be3c:	b25b      	sxtb	r3, r3
 800be3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be42:	d103      	bne.n	800be4c <vQueueWaitForMessageRestricted+0x40>
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be4c:	f001 fc2e 	bl	800d6ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	3324      	adds	r3, #36	@ 0x24
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fc91 	bl	800c788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be66:	6978      	ldr	r0, [r7, #20]
 800be68:	f7ff ff26 	bl	800bcb8 <prvUnlockQueue>
	}
 800be6c:	bf00      	nop
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08e      	sub	sp, #56	@ 0x38
 800be78:	af04      	add	r7, sp, #16
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10b      	bne.n	800bea0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	623b      	str	r3, [r7, #32]
}
 800be9a:	bf00      	nop
 800be9c:	bf00      	nop
 800be9e:	e7fd      	b.n	800be9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10b      	bne.n	800bebe <xTaskCreateStatic+0x4a>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	61fb      	str	r3, [r7, #28]
}
 800beb8:	bf00      	nop
 800beba:	bf00      	nop
 800bebc:	e7fd      	b.n	800beba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bebe:	23a8      	movs	r3, #168	@ 0xa8
 800bec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2ba8      	cmp	r3, #168	@ 0xa8
 800bec6:	d00b      	beq.n	800bee0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61bb      	str	r3, [r7, #24]
}
 800beda:	bf00      	nop
 800bedc:	bf00      	nop
 800bede:	e7fd      	b.n	800bedc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01e      	beq.n	800bf26 <xTaskCreateStatic+0xb2>
 800bee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beea:	2b00      	cmp	r3, #0
 800beec:	d01b      	beq.n	800bf26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bef6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	2202      	movs	r2, #2
 800befc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf00:	2300      	movs	r3, #0
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf06:	9302      	str	r3, [sp, #8]
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f851 	bl	800bfc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf20:	f000 f8f6 	bl	800c110 <prvAddNewTaskToReadyList>
 800bf24:	e001      	b.n	800bf2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf2a:	697b      	ldr	r3, [r7, #20]
	}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3728      	adds	r7, #40	@ 0x28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08c      	sub	sp, #48	@ 0x30
 800bf38:	af04      	add	r7, sp, #16
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	4613      	mov	r3, r2
 800bf42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 fc9f 	bl	800d88c <pvPortMalloc>
 800bf4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00e      	beq.n	800bf74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf56:	20a8      	movs	r0, #168	@ 0xa8
 800bf58:	f001 fc98 	bl	800d88c <pvPortMalloc>
 800bf5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf6a:	e005      	b.n	800bf78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf6c:	6978      	ldr	r0, [r7, #20]
 800bf6e:	f001 fd61 	bl	800da34 <vPortFree>
 800bf72:	e001      	b.n	800bf78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d017      	beq.n	800bfae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf86:	88fa      	ldrh	r2, [r7, #6]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9303      	str	r3, [sp, #12]
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f80f 	bl	800bfc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfa2:	69f8      	ldr	r0, [r7, #28]
 800bfa4:	f000 f8b4 	bl	800c110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	61bb      	str	r3, [r7, #24]
 800bfac:	e002      	b.n	800bfb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfb4:	69bb      	ldr	r3, [r7, #24]
	}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3720      	adds	r7, #32
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	21a5      	movs	r1, #165	@ 0xa5
 800bfda:	f001 fe4d 	bl	800dc78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfe2:	6879      	ldr	r1, [r7, #4]
 800bfe4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bfe8:	440b      	add	r3, r1
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	f023 0307 	bic.w	r3, r3, #7
 800bff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	f003 0307 	and.w	r3, r3, #7
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00b      	beq.n	800c01a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	617b      	str	r3, [r7, #20]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01f      	beq.n	800c060 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c020:	2300      	movs	r3, #0
 800c022:	61fb      	str	r3, [r7, #28]
 800c024:	e012      	b.n	800c04c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	4413      	add	r3, r2
 800c02c:	7819      	ldrb	r1, [r3, #0]
 800c02e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	4413      	add	r3, r2
 800c034:	3334      	adds	r3, #52	@ 0x34
 800c036:	460a      	mov	r2, r1
 800c038:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	4413      	add	r3, r2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d006      	beq.n	800c054 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	3301      	adds	r3, #1
 800c04a:	61fb      	str	r3, [r7, #28]
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	2b0f      	cmp	r3, #15
 800c050:	d9e9      	bls.n	800c026 <prvInitialiseNewTask+0x66>
 800c052:	e000      	b.n	800c056 <prvInitialiseNewTask+0x96>
			{
				break;
 800c054:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c05e:	e003      	b.n	800c068 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06a:	2b37      	cmp	r3, #55	@ 0x37
 800c06c:	d901      	bls.n	800c072 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c06e:	2337      	movs	r3, #55	@ 0x37
 800c070:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c076:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c07c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c080:	2200      	movs	r2, #0
 800c082:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff f965 	bl	800b358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	3318      	adds	r3, #24
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff f960 	bl	800b358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c09c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	3354      	adds	r3, #84	@ 0x54
 800c0c2:	224c      	movs	r2, #76	@ 0x4c
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 fdd6 	bl	800dc78 <memset>
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	4a0d      	ldr	r2, [pc, #52]	@ (800c104 <prvInitialiseNewTask+0x144>)
 800c0d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c108 <prvInitialiseNewTask+0x148>)
 800c0d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	4a0c      	ldr	r2, [pc, #48]	@ (800c10c <prvInitialiseNewTask+0x14c>)
 800c0dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	68f9      	ldr	r1, [r7, #12]
 800c0e2:	69b8      	ldr	r0, [r7, #24]
 800c0e4:	f001 f97e 	bl	800d3e4 <pxPortInitialiseStack>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0fa:	bf00      	nop
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	240656a8 	.word	0x240656a8
 800c108:	24065710 	.word	0x24065710
 800c10c:	24065778 	.word	0x24065778

0800c110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c118:	f001 fa96 	bl	800d648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c11c:	4b2d      	ldr	r3, [pc, #180]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc4>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3301      	adds	r3, #1
 800c122:	4a2c      	ldr	r2, [pc, #176]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc4>)
 800c124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c126:	4b2c      	ldr	r3, [pc, #176]	@ (800c1d8 <prvAddNewTaskToReadyList+0xc8>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c12e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1d8 <prvAddNewTaskToReadyList+0xc8>)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c134:	4b27      	ldr	r3, [pc, #156]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc4>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d110      	bne.n	800c15e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c13c:	f000 fc52 	bl	800c9e4 <prvInitialiseTaskLists>
 800c140:	e00d      	b.n	800c15e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c142:	4b26      	ldr	r3, [pc, #152]	@ (800c1dc <prvAddNewTaskToReadyList+0xcc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c14a:	4b23      	ldr	r3, [pc, #140]	@ (800c1d8 <prvAddNewTaskToReadyList+0xc8>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c154:	429a      	cmp	r2, r3
 800c156:	d802      	bhi.n	800c15e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c158:	4a1f      	ldr	r2, [pc, #124]	@ (800c1d8 <prvAddNewTaskToReadyList+0xc8>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c15e:	4b20      	ldr	r3, [pc, #128]	@ (800c1e0 <prvAddNewTaskToReadyList+0xd0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3301      	adds	r3, #1
 800c164:	4a1e      	ldr	r2, [pc, #120]	@ (800c1e0 <prvAddNewTaskToReadyList+0xd0>)
 800c166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c168:	4b1d      	ldr	r3, [pc, #116]	@ (800c1e0 <prvAddNewTaskToReadyList+0xd0>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c174:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e4 <prvAddNewTaskToReadyList+0xd4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d903      	bls.n	800c184 <prvAddNewTaskToReadyList+0x74>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c180:	4a18      	ldr	r2, [pc, #96]	@ (800c1e4 <prvAddNewTaskToReadyList+0xd4>)
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4a15      	ldr	r2, [pc, #84]	@ (800c1e8 <prvAddNewTaskToReadyList+0xd8>)
 800c192:	441a      	add	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3304      	adds	r3, #4
 800c198:	4619      	mov	r1, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	f7ff f8e9 	bl	800b372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1a0:	f001 fa84 	bl	800d6ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c1dc <prvAddNewTaskToReadyList+0xcc>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00e      	beq.n	800c1ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d8 <prvAddNewTaskToReadyList+0xc8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d207      	bcs.n	800c1ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c1ec <prvAddNewTaskToReadyList+0xdc>)
 800c1bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c0:	601a      	str	r2, [r3, #0]
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	24001398 	.word	0x24001398
 800c1d8:	24000ec4 	.word	0x24000ec4
 800c1dc:	240013a4 	.word	0x240013a4
 800c1e0:	240013b4 	.word	0x240013b4
 800c1e4:	240013a0 	.word	0x240013a0
 800c1e8:	24000ec8 	.word	0x24000ec8
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d018      	beq.n	800c234 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c202:	4b14      	ldr	r3, [pc, #80]	@ (800c254 <vTaskDelay+0x64>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00b      	beq.n	800c222 <vTaskDelay+0x32>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	60bb      	str	r3, [r7, #8]
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	e7fd      	b.n	800c21e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c222:	f000 f88b 	bl	800c33c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c226:	2100      	movs	r1, #0
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fd2d 	bl	800cc88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c22e:	f000 f893 	bl	800c358 <xTaskResumeAll>
 800c232:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c23a:	4b07      	ldr	r3, [pc, #28]	@ (800c258 <vTaskDelay+0x68>)
 800c23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c24a:	bf00      	nop
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	240013c0 	.word	0x240013c0
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	@ 0x28
 800c260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c26a:	463a      	mov	r2, r7
 800c26c:	1d39      	adds	r1, r7, #4
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff f81c 	bl	800b2b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	9202      	str	r2, [sp, #8]
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	2300      	movs	r3, #0
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	2300      	movs	r3, #0
 800c288:	460a      	mov	r2, r1
 800c28a:	4924      	ldr	r1, [pc, #144]	@ (800c31c <vTaskStartScheduler+0xc0>)
 800c28c:	4824      	ldr	r0, [pc, #144]	@ (800c320 <vTaskStartScheduler+0xc4>)
 800c28e:	f7ff fdf1 	bl	800be74 <xTaskCreateStatic>
 800c292:	4603      	mov	r3, r0
 800c294:	4a23      	ldr	r2, [pc, #140]	@ (800c324 <vTaskStartScheduler+0xc8>)
 800c296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c298:	4b22      	ldr	r3, [pc, #136]	@ (800c324 <vTaskStartScheduler+0xc8>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	e001      	b.n	800c2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d102      	bne.n	800c2b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2b0:	f000 fd3e 	bl	800cd30 <xTimerCreateTimerTask>
 800c2b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d11b      	bne.n	800c2f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	613b      	str	r3, [r7, #16]
}
 800c2ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2d0:	4b15      	ldr	r3, [pc, #84]	@ (800c328 <vTaskStartScheduler+0xcc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3354      	adds	r3, #84	@ 0x54
 800c2d6:	4a15      	ldr	r2, [pc, #84]	@ (800c32c <vTaskStartScheduler+0xd0>)
 800c2d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2da:	4b15      	ldr	r3, [pc, #84]	@ (800c330 <vTaskStartScheduler+0xd4>)
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2e2:	4b14      	ldr	r3, [pc, #80]	@ (800c334 <vTaskStartScheduler+0xd8>)
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2e8:	4b13      	ldr	r3, [pc, #76]	@ (800c338 <vTaskStartScheduler+0xdc>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2ee:	f001 f907 	bl	800d500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2f2:	e00f      	b.n	800c314 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2fa:	d10b      	bne.n	800c314 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	60fb      	str	r3, [r7, #12]
}
 800c30e:	bf00      	nop
 800c310:	bf00      	nop
 800c312:	e7fd      	b.n	800c310 <vTaskStartScheduler+0xb4>
}
 800c314:	bf00      	nop
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	0800deac 	.word	0x0800deac
 800c320:	0800c9b5 	.word	0x0800c9b5
 800c324:	240013bc 	.word	0x240013bc
 800c328:	24000ec4 	.word	0x24000ec4
 800c32c:	24000014 	.word	0x24000014
 800c330:	240013b8 	.word	0x240013b8
 800c334:	240013a4 	.word	0x240013a4
 800c338:	2400139c 	.word	0x2400139c

0800c33c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c340:	4b04      	ldr	r3, [pc, #16]	@ (800c354 <vTaskSuspendAll+0x18>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	4a03      	ldr	r2, [pc, #12]	@ (800c354 <vTaskSuspendAll+0x18>)
 800c348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c34a:	bf00      	nop
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	240013c0 	.word	0x240013c0

0800c358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c366:	4b42      	ldr	r3, [pc, #264]	@ (800c470 <xTaskResumeAll+0x118>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10b      	bne.n	800c386 <xTaskResumeAll+0x2e>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	603b      	str	r3, [r7, #0]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c386:	f001 f95f 	bl	800d648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c38a:	4b39      	ldr	r3, [pc, #228]	@ (800c470 <xTaskResumeAll+0x118>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3b01      	subs	r3, #1
 800c390:	4a37      	ldr	r2, [pc, #220]	@ (800c470 <xTaskResumeAll+0x118>)
 800c392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c394:	4b36      	ldr	r3, [pc, #216]	@ (800c470 <xTaskResumeAll+0x118>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d162      	bne.n	800c462 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c39c:	4b35      	ldr	r3, [pc, #212]	@ (800c474 <xTaskResumeAll+0x11c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d05e      	beq.n	800c462 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a4:	e02f      	b.n	800c406 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a6:	4b34      	ldr	r3, [pc, #208]	@ (800c478 <xTaskResumeAll+0x120>)
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3318      	adds	r3, #24
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff f83a 	bl	800b42c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff f835 	bl	800b42c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c6:	4b2d      	ldr	r3, [pc, #180]	@ (800c47c <xTaskResumeAll+0x124>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d903      	bls.n	800c3d6 <xTaskResumeAll+0x7e>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c47c <xTaskResumeAll+0x124>)
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4a27      	ldr	r2, [pc, #156]	@ (800c480 <xTaskResumeAll+0x128>)
 800c3e4:	441a      	add	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fe ffc0 	bl	800b372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f6:	4b23      	ldr	r3, [pc, #140]	@ (800c484 <xTaskResumeAll+0x12c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d302      	bcc.n	800c406 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c400:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <xTaskResumeAll+0x130>)
 800c402:	2201      	movs	r2, #1
 800c404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c406:	4b1c      	ldr	r3, [pc, #112]	@ (800c478 <xTaskResumeAll+0x120>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1cb      	bne.n	800c3a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d001      	beq.n	800c418 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c414:	f000 fb8a 	bl	800cb2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c418:	4b1c      	ldr	r3, [pc, #112]	@ (800c48c <xTaskResumeAll+0x134>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d010      	beq.n	800c446 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c424:	f000 f846 	bl	800c4b4 <xTaskIncrementTick>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d002      	beq.n	800c434 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c42e:	4b16      	ldr	r3, [pc, #88]	@ (800c488 <xTaskResumeAll+0x130>)
 800c430:	2201      	movs	r2, #1
 800c432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3b01      	subs	r3, #1
 800c438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1f1      	bne.n	800c424 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c440:	4b12      	ldr	r3, [pc, #72]	@ (800c48c <xTaskResumeAll+0x134>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c446:	4b10      	ldr	r3, [pc, #64]	@ (800c488 <xTaskResumeAll+0x130>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d009      	beq.n	800c462 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c44e:	2301      	movs	r3, #1
 800c450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c452:	4b0f      	ldr	r3, [pc, #60]	@ (800c490 <xTaskResumeAll+0x138>)
 800c454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c462:	f001 f923 	bl	800d6ac <vPortExitCritical>

	return xAlreadyYielded;
 800c466:	68bb      	ldr	r3, [r7, #8]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	240013c0 	.word	0x240013c0
 800c474:	24001398 	.word	0x24001398
 800c478:	24001358 	.word	0x24001358
 800c47c:	240013a0 	.word	0x240013a0
 800c480:	24000ec8 	.word	0x24000ec8
 800c484:	24000ec4 	.word	0x24000ec4
 800c488:	240013ac 	.word	0x240013ac
 800c48c:	240013a8 	.word	0x240013a8
 800c490:	e000ed04 	.word	0xe000ed04

0800c494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c49a:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <xTaskGetTickCount+0x1c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4a0:	687b      	ldr	r3, [r7, #4]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	2400139c 	.word	0x2400139c

0800c4b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4be:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <xTaskIncrementTick+0x148>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 8090 	bne.w	800c5e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4c8:	4b4d      	ldr	r3, [pc, #308]	@ (800c600 <xTaskIncrementTick+0x14c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4d0:	4a4b      	ldr	r2, [pc, #300]	@ (800c600 <xTaskIncrementTick+0x14c>)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d121      	bne.n	800c520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4dc:	4b49      	ldr	r3, [pc, #292]	@ (800c604 <xTaskIncrementTick+0x150>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00b      	beq.n	800c4fe <xTaskIncrementTick+0x4a>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	603b      	str	r3, [r7, #0]
}
 800c4f8:	bf00      	nop
 800c4fa:	bf00      	nop
 800c4fc:	e7fd      	b.n	800c4fa <xTaskIncrementTick+0x46>
 800c4fe:	4b41      	ldr	r3, [pc, #260]	@ (800c604 <xTaskIncrementTick+0x150>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	60fb      	str	r3, [r7, #12]
 800c504:	4b40      	ldr	r3, [pc, #256]	@ (800c608 <xTaskIncrementTick+0x154>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a3e      	ldr	r2, [pc, #248]	@ (800c604 <xTaskIncrementTick+0x150>)
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	4a3e      	ldr	r2, [pc, #248]	@ (800c608 <xTaskIncrementTick+0x154>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	4b3e      	ldr	r3, [pc, #248]	@ (800c60c <xTaskIncrementTick+0x158>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3301      	adds	r3, #1
 800c518:	4a3c      	ldr	r2, [pc, #240]	@ (800c60c <xTaskIncrementTick+0x158>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	f000 fb06 	bl	800cb2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c520:	4b3b      	ldr	r3, [pc, #236]	@ (800c610 <xTaskIncrementTick+0x15c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	429a      	cmp	r2, r3
 800c528:	d349      	bcc.n	800c5be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c52a:	4b36      	ldr	r3, [pc, #216]	@ (800c604 <xTaskIncrementTick+0x150>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d104      	bne.n	800c53e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c534:	4b36      	ldr	r3, [pc, #216]	@ (800c610 <xTaskIncrementTick+0x15c>)
 800c536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c53a:	601a      	str	r2, [r3, #0]
					break;
 800c53c:	e03f      	b.n	800c5be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c53e:	4b31      	ldr	r3, [pc, #196]	@ (800c604 <xTaskIncrementTick+0x150>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d203      	bcs.n	800c55e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c556:	4a2e      	ldr	r2, [pc, #184]	@ (800c610 <xTaskIncrementTick+0x15c>)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c55c:	e02f      	b.n	800c5be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	3304      	adds	r3, #4
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe ff62 	bl	800b42c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d004      	beq.n	800c57a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	3318      	adds	r3, #24
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe ff59 	bl	800b42c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c57e:	4b25      	ldr	r3, [pc, #148]	@ (800c614 <xTaskIncrementTick+0x160>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	429a      	cmp	r2, r3
 800c584:	d903      	bls.n	800c58e <xTaskIncrementTick+0xda>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58a:	4a22      	ldr	r2, [pc, #136]	@ (800c614 <xTaskIncrementTick+0x160>)
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c592:	4613      	mov	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4a1f      	ldr	r2, [pc, #124]	@ (800c618 <xTaskIncrementTick+0x164>)
 800c59c:	441a      	add	r2, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f7fe fee4 	bl	800b372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c61c <xTaskIncrementTick+0x168>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d3b8      	bcc.n	800c52a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5bc:	e7b5      	b.n	800c52a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5be:	4b17      	ldr	r3, [pc, #92]	@ (800c61c <xTaskIncrementTick+0x168>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5c4:	4914      	ldr	r1, [pc, #80]	@ (800c618 <xTaskIncrementTick+0x164>)
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d901      	bls.n	800c5da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5da:	4b11      	ldr	r3, [pc, #68]	@ (800c620 <xTaskIncrementTick+0x16c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d007      	beq.n	800c5f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	e004      	b.n	800c5f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c624 <xTaskIncrementTick+0x170>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c624 <xTaskIncrementTick+0x170>)
 800c5f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c5f2:	697b      	ldr	r3, [r7, #20]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	240013c0 	.word	0x240013c0
 800c600:	2400139c 	.word	0x2400139c
 800c604:	24001350 	.word	0x24001350
 800c608:	24001354 	.word	0x24001354
 800c60c:	240013b0 	.word	0x240013b0
 800c610:	240013b8 	.word	0x240013b8
 800c614:	240013a0 	.word	0x240013a0
 800c618:	24000ec8 	.word	0x24000ec8
 800c61c:	24000ec4 	.word	0x24000ec4
 800c620:	240013ac 	.word	0x240013ac
 800c624:	240013a8 	.word	0x240013a8

0800c628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c62e:	4b3d      	ldr	r3, [pc, #244]	@ (800c724 <vTaskSwitchContext+0xfc>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c636:	4b3c      	ldr	r3, [pc, #240]	@ (800c728 <vTaskSwitchContext+0x100>)
 800c638:	2201      	movs	r2, #1
 800c63a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c63c:	e06e      	b.n	800c71c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800c63e:	4b3a      	ldr	r3, [pc, #232]	@ (800c728 <vTaskSwitchContext+0x100>)
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c644:	4b39      	ldr	r3, [pc, #228]	@ (800c72c <vTaskSwitchContext+0x104>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c64a:	613b      	str	r3, [r7, #16]
 800c64c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d111      	bne.n	800c680 <vTaskSwitchContext+0x58>
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	3304      	adds	r3, #4
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	429a      	cmp	r2, r3
 800c666:	d10b      	bne.n	800c680 <vTaskSwitchContext+0x58>
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	3308      	adds	r3, #8
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	429a      	cmp	r2, r3
 800c672:	d105      	bne.n	800c680 <vTaskSwitchContext+0x58>
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	330c      	adds	r3, #12
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d008      	beq.n	800c692 <vTaskSwitchContext+0x6a>
 800c680:	4b2a      	ldr	r3, [pc, #168]	@ (800c72c <vTaskSwitchContext+0x104>)
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	4b29      	ldr	r3, [pc, #164]	@ (800c72c <vTaskSwitchContext+0x104>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3334      	adds	r3, #52	@ 0x34
 800c68a:	4619      	mov	r1, r3
 800c68c:	4610      	mov	r0, r2
 800c68e:	f7f4 f8f3 	bl	8000878 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c692:	4b27      	ldr	r3, [pc, #156]	@ (800c730 <vTaskSwitchContext+0x108>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	617b      	str	r3, [r7, #20]
 800c698:	e011      	b.n	800c6be <vTaskSwitchContext+0x96>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10b      	bne.n	800c6b8 <vTaskSwitchContext+0x90>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	607b      	str	r3, [r7, #4]
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	e7fd      	b.n	800c6b4 <vTaskSwitchContext+0x8c>
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	617b      	str	r3, [r7, #20]
 800c6be:	491d      	ldr	r1, [pc, #116]	@ (800c734 <vTaskSwitchContext+0x10c>)
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0e3      	beq.n	800c69a <vTaskSwitchContext+0x72>
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4a15      	ldr	r2, [pc, #84]	@ (800c734 <vTaskSwitchContext+0x10c>)
 800c6de:	4413      	add	r3, r2
 800c6e0:	60bb      	str	r3, [r7, #8]
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	605a      	str	r2, [r3, #4]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d104      	bne.n	800c702 <vTaskSwitchContext+0xda>
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	605a      	str	r2, [r3, #4]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <vTaskSwitchContext+0x104>)
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	4a08      	ldr	r2, [pc, #32]	@ (800c730 <vTaskSwitchContext+0x108>)
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c712:	4b06      	ldr	r3, [pc, #24]	@ (800c72c <vTaskSwitchContext+0x104>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3354      	adds	r3, #84	@ 0x54
 800c718:	4a07      	ldr	r2, [pc, #28]	@ (800c738 <vTaskSwitchContext+0x110>)
 800c71a:	6013      	str	r3, [r2, #0]
}
 800c71c:	bf00      	nop
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	240013c0 	.word	0x240013c0
 800c728:	240013ac 	.word	0x240013ac
 800c72c:	24000ec4 	.word	0x24000ec4
 800c730:	240013a0 	.word	0x240013a0
 800c734:	24000ec8 	.word	0x24000ec8
 800c738:	24000014 	.word	0x24000014

0800c73c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10b      	bne.n	800c764 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	60fb      	str	r3, [r7, #12]
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	e7fd      	b.n	800c760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c764:	4b07      	ldr	r3, [pc, #28]	@ (800c784 <vTaskPlaceOnEventList+0x48>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3318      	adds	r3, #24
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7fe fe24 	bl	800b3ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c772:	2101      	movs	r1, #1
 800c774:	6838      	ldr	r0, [r7, #0]
 800c776:	f000 fa87 	bl	800cc88 <prvAddCurrentTaskToDelayedList>
}
 800c77a:	bf00      	nop
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	24000ec4 	.word	0x24000ec4

0800c788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	617b      	str	r3, [r7, #20]
}
 800c7ac:	bf00      	nop
 800c7ae:	bf00      	nop
 800c7b0:	e7fd      	b.n	800c7ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7dc <vTaskPlaceOnEventListRestricted+0x54>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3318      	adds	r3, #24
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7fe fdd9 	bl	800b372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c7c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	68b8      	ldr	r0, [r7, #8]
 800c7d0:	f000 fa5a 	bl	800cc88 <prvAddCurrentTaskToDelayedList>
	}
 800c7d4:	bf00      	nop
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	24000ec4 	.word	0x24000ec4

0800c7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60fb      	str	r3, [r7, #12]
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	e7fd      	b.n	800c80a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	3318      	adds	r3, #24
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fe0a 	bl	800b42c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c818:	4b1d      	ldr	r3, [pc, #116]	@ (800c890 <xTaskRemoveFromEventList+0xb0>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d11d      	bne.n	800c85c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	3304      	adds	r3, #4
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe fe01 	bl	800b42c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c82e:	4b19      	ldr	r3, [pc, #100]	@ (800c894 <xTaskRemoveFromEventList+0xb4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d903      	bls.n	800c83e <xTaskRemoveFromEventList+0x5e>
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83a:	4a16      	ldr	r2, [pc, #88]	@ (800c894 <xTaskRemoveFromEventList+0xb4>)
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4a13      	ldr	r2, [pc, #76]	@ (800c898 <xTaskRemoveFromEventList+0xb8>)
 800c84c:	441a      	add	r2, r3
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	3304      	adds	r3, #4
 800c852:	4619      	mov	r1, r3
 800c854:	4610      	mov	r0, r2
 800c856:	f7fe fd8c 	bl	800b372 <vListInsertEnd>
 800c85a:	e005      	b.n	800c868 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3318      	adds	r3, #24
 800c860:	4619      	mov	r1, r3
 800c862:	480e      	ldr	r0, [pc, #56]	@ (800c89c <xTaskRemoveFromEventList+0xbc>)
 800c864:	f7fe fd85 	bl	800b372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a0 <xTaskRemoveFromEventList+0xc0>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c872:	429a      	cmp	r2, r3
 800c874:	d905      	bls.n	800c882 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c876:	2301      	movs	r3, #1
 800c878:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c87a:	4b0a      	ldr	r3, [pc, #40]	@ (800c8a4 <xTaskRemoveFromEventList+0xc4>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	e001      	b.n	800c886 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c882:	2300      	movs	r3, #0
 800c884:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c886:	697b      	ldr	r3, [r7, #20]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	240013c0 	.word	0x240013c0
 800c894:	240013a0 	.word	0x240013a0
 800c898:	24000ec8 	.word	0x24000ec8
 800c89c:	24001358 	.word	0x24001358
 800c8a0:	24000ec4 	.word	0x24000ec4
 800c8a4:	240013ac 	.word	0x240013ac

0800c8a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8b0:	4b06      	ldr	r3, [pc, #24]	@ (800c8cc <vTaskInternalSetTimeOutState+0x24>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8b8:	4b05      	ldr	r3, [pc, #20]	@ (800c8d0 <vTaskInternalSetTimeOutState+0x28>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	605a      	str	r2, [r3, #4]
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	240013b0 	.word	0x240013b0
 800c8d0:	2400139c 	.word	0x2400139c

0800c8d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10b      	bne.n	800c8fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	613b      	str	r3, [r7, #16]
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	e7fd      	b.n	800c8f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60fb      	str	r3, [r7, #12]
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop
 800c918:	e7fd      	b.n	800c916 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c91a:	f000 fe95 	bl	800d648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c91e:	4b1d      	ldr	r3, [pc, #116]	@ (800c994 <xTaskCheckForTimeOut+0xc0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c936:	d102      	bne.n	800c93e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c938:	2300      	movs	r3, #0
 800c93a:	61fb      	str	r3, [r7, #28]
 800c93c:	e023      	b.n	800c986 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	4b15      	ldr	r3, [pc, #84]	@ (800c998 <xTaskCheckForTimeOut+0xc4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	429a      	cmp	r2, r3
 800c948:	d007      	beq.n	800c95a <xTaskCheckForTimeOut+0x86>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	69ba      	ldr	r2, [r7, #24]
 800c950:	429a      	cmp	r2, r3
 800c952:	d302      	bcc.n	800c95a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c954:	2301      	movs	r3, #1
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	e015      	b.n	800c986 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	429a      	cmp	r2, r3
 800c962:	d20b      	bcs.n	800c97c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	1ad2      	subs	r2, r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff ff99 	bl	800c8a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c976:	2300      	movs	r3, #0
 800c978:	61fb      	str	r3, [r7, #28]
 800c97a:	e004      	b.n	800c986 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c982:	2301      	movs	r3, #1
 800c984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c986:	f000 fe91 	bl	800d6ac <vPortExitCritical>

	return xReturn;
 800c98a:	69fb      	ldr	r3, [r7, #28]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3720      	adds	r7, #32
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	2400139c 	.word	0x2400139c
 800c998:	240013b0 	.word	0x240013b0

0800c99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9a0:	4b03      	ldr	r3, [pc, #12]	@ (800c9b0 <vTaskMissedYield+0x14>)
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	601a      	str	r2, [r3, #0]
}
 800c9a6:	bf00      	nop
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	240013ac 	.word	0x240013ac

0800c9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9bc:	f000 f852 	bl	800ca64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9c0:	4b06      	ldr	r3, [pc, #24]	@ (800c9dc <prvIdleTask+0x28>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d9f9      	bls.n	800c9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9c8:	4b05      	ldr	r3, [pc, #20]	@ (800c9e0 <prvIdleTask+0x2c>)
 800c9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9d8:	e7f0      	b.n	800c9bc <prvIdleTask+0x8>
 800c9da:	bf00      	nop
 800c9dc:	24000ec8 	.word	0x24000ec8
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	e00c      	b.n	800ca0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4a12      	ldr	r2, [pc, #72]	@ (800ca44 <prvInitialiseTaskLists+0x60>)
 800c9fc:	4413      	add	r3, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fc8a 	bl	800b318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3301      	adds	r3, #1
 800ca08:	607b      	str	r3, [r7, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b37      	cmp	r3, #55	@ 0x37
 800ca0e:	d9ef      	bls.n	800c9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca10:	480d      	ldr	r0, [pc, #52]	@ (800ca48 <prvInitialiseTaskLists+0x64>)
 800ca12:	f7fe fc81 	bl	800b318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca16:	480d      	ldr	r0, [pc, #52]	@ (800ca4c <prvInitialiseTaskLists+0x68>)
 800ca18:	f7fe fc7e 	bl	800b318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca1c:	480c      	ldr	r0, [pc, #48]	@ (800ca50 <prvInitialiseTaskLists+0x6c>)
 800ca1e:	f7fe fc7b 	bl	800b318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca22:	480c      	ldr	r0, [pc, #48]	@ (800ca54 <prvInitialiseTaskLists+0x70>)
 800ca24:	f7fe fc78 	bl	800b318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca28:	480b      	ldr	r0, [pc, #44]	@ (800ca58 <prvInitialiseTaskLists+0x74>)
 800ca2a:	f7fe fc75 	bl	800b318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca5c <prvInitialiseTaskLists+0x78>)
 800ca30:	4a05      	ldr	r2, [pc, #20]	@ (800ca48 <prvInitialiseTaskLists+0x64>)
 800ca32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca34:	4b0a      	ldr	r3, [pc, #40]	@ (800ca60 <prvInitialiseTaskLists+0x7c>)
 800ca36:	4a05      	ldr	r2, [pc, #20]	@ (800ca4c <prvInitialiseTaskLists+0x68>)
 800ca38:	601a      	str	r2, [r3, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	24000ec8 	.word	0x24000ec8
 800ca48:	24001328 	.word	0x24001328
 800ca4c:	2400133c 	.word	0x2400133c
 800ca50:	24001358 	.word	0x24001358
 800ca54:	2400136c 	.word	0x2400136c
 800ca58:	24001384 	.word	0x24001384
 800ca5c:	24001350 	.word	0x24001350
 800ca60:	24001354 	.word	0x24001354

0800ca64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca6a:	e019      	b.n	800caa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca6c:	f000 fdec 	bl	800d648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca70:	4b10      	ldr	r3, [pc, #64]	@ (800cab4 <prvCheckTasksWaitingTermination+0x50>)
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fe fcd5 	bl	800b42c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca82:	4b0d      	ldr	r3, [pc, #52]	@ (800cab8 <prvCheckTasksWaitingTermination+0x54>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	4a0b      	ldr	r2, [pc, #44]	@ (800cab8 <prvCheckTasksWaitingTermination+0x54>)
 800ca8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cabc <prvCheckTasksWaitingTermination+0x58>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	4a0a      	ldr	r2, [pc, #40]	@ (800cabc <prvCheckTasksWaitingTermination+0x58>)
 800ca94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca96:	f000 fe09 	bl	800d6ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f810 	bl	800cac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caa0:	4b06      	ldr	r3, [pc, #24]	@ (800cabc <prvCheckTasksWaitingTermination+0x58>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e1      	bne.n	800ca6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800caa8:	bf00      	nop
 800caaa:	bf00      	nop
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2400136c 	.word	0x2400136c
 800cab8:	24001398 	.word	0x24001398
 800cabc:	24001380 	.word	0x24001380

0800cac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3354      	adds	r3, #84	@ 0x54
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 f8db 	bl	800dc88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d108      	bne.n	800caee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 ffa7 	bl	800da34 <vPortFree>
				vPortFree( pxTCB );
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 ffa4 	bl	800da34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800caec:	e019      	b.n	800cb22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d103      	bne.n	800cb00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 ff9b 	bl	800da34 <vPortFree>
	}
 800cafe:	e010      	b.n	800cb22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d00b      	beq.n	800cb22 <prvDeleteTCB+0x62>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	60fb      	str	r3, [r7, #12]
}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	e7fd      	b.n	800cb1e <prvDeleteTCB+0x5e>
	}
 800cb22:	bf00      	nop
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb32:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <prvResetNextTaskUnblockTime+0x38>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d104      	bne.n	800cb46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb68 <prvResetNextTaskUnblockTime+0x3c>)
 800cb3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb44:	e008      	b.n	800cb58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb46:	4b07      	ldr	r3, [pc, #28]	@ (800cb64 <prvResetNextTaskUnblockTime+0x38>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	4a04      	ldr	r2, [pc, #16]	@ (800cb68 <prvResetNextTaskUnblockTime+0x3c>)
 800cb56:	6013      	str	r3, [r2, #0]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	24001350 	.word	0x24001350
 800cb68:	240013b8 	.word	0x240013b8

0800cb6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb72:	4b0b      	ldr	r3, [pc, #44]	@ (800cba0 <xTaskGetSchedulerState+0x34>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d102      	bne.n	800cb80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	607b      	str	r3, [r7, #4]
 800cb7e:	e008      	b.n	800cb92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb80:	4b08      	ldr	r3, [pc, #32]	@ (800cba4 <xTaskGetSchedulerState+0x38>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb88:	2302      	movs	r3, #2
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e001      	b.n	800cb92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb92:	687b      	ldr	r3, [r7, #4]
	}
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	240013a4 	.word	0x240013a4
 800cba4:	240013c0 	.word	0x240013c0

0800cba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d058      	beq.n	800cc70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbbe:	4b2f      	ldr	r3, [pc, #188]	@ (800cc7c <xTaskPriorityDisinherit+0xd4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	693a      	ldr	r2, [r7, #16]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d00b      	beq.n	800cbe0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	60fb      	str	r3, [r7, #12]
}
 800cbda:	bf00      	nop
 800cbdc:	bf00      	nop
 800cbde:	e7fd      	b.n	800cbdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10b      	bne.n	800cc00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	60bb      	str	r3, [r7, #8]
}
 800cbfa:	bf00      	nop
 800cbfc:	bf00      	nop
 800cbfe:	e7fd      	b.n	800cbfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc04:	1e5a      	subs	r2, r3, #1
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d02c      	beq.n	800cc70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d128      	bne.n	800cc70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	3304      	adds	r3, #4
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fc02 	bl	800b42c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc40:	4b0f      	ldr	r3, [pc, #60]	@ (800cc80 <xTaskPriorityDisinherit+0xd8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d903      	bls.n	800cc50 <xTaskPriorityDisinherit+0xa8>
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc4c:	4a0c      	ldr	r2, [pc, #48]	@ (800cc80 <xTaskPriorityDisinherit+0xd8>)
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc54:	4613      	mov	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4a09      	ldr	r2, [pc, #36]	@ (800cc84 <xTaskPriorityDisinherit+0xdc>)
 800cc5e:	441a      	add	r2, r3
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	3304      	adds	r3, #4
 800cc64:	4619      	mov	r1, r3
 800cc66:	4610      	mov	r0, r2
 800cc68:	f7fe fb83 	bl	800b372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc70:	697b      	ldr	r3, [r7, #20]
	}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3718      	adds	r7, #24
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	24000ec4 	.word	0x24000ec4
 800cc80:	240013a0 	.word	0x240013a0
 800cc84:	24000ec8 	.word	0x24000ec8

0800cc88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc92:	4b21      	ldr	r3, [pc, #132]	@ (800cd18 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc98:	4b20      	ldr	r3, [pc, #128]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0x94>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe fbc4 	bl	800b42c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccaa:	d10a      	bne.n	800ccc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb2:	4b1a      	ldr	r3, [pc, #104]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4819      	ldr	r0, [pc, #100]	@ (800cd20 <prvAddCurrentTaskToDelayedList+0x98>)
 800ccbc:	f7fe fb59 	bl	800b372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccc0:	e026      	b.n	800cd10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccca:	4b14      	ldr	r3, [pc, #80]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0x94>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d209      	bcs.n	800ccee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccda:	4b12      	ldr	r3, [pc, #72]	@ (800cd24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	4b0f      	ldr	r3, [pc, #60]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0x94>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3304      	adds	r3, #4
 800cce4:	4619      	mov	r1, r3
 800cce6:	4610      	mov	r0, r2
 800cce8:	f7fe fb67 	bl	800b3ba <vListInsert>
}
 800ccec:	e010      	b.n	800cd10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccee:	4b0e      	ldr	r3, [pc, #56]	@ (800cd28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b0a      	ldr	r3, [pc, #40]	@ (800cd1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	f7fe fb5d 	bl	800b3ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d202      	bcs.n	800cd10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd0a:	4a08      	ldr	r2, [pc, #32]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	6013      	str	r3, [r2, #0]
}
 800cd10:	bf00      	nop
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	2400139c 	.word	0x2400139c
 800cd1c:	24000ec4 	.word	0x24000ec4
 800cd20:	24001384 	.word	0x24001384
 800cd24:	24001354 	.word	0x24001354
 800cd28:	24001350 	.word	0x24001350
 800cd2c:	240013b8 	.word	0x240013b8

0800cd30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b08a      	sub	sp, #40	@ 0x28
 800cd34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd3a:	f000 fb13 	bl	800d364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb4 <xTimerCreateTimerTask+0x84>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d021      	beq.n	800cd8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd4e:	1d3a      	adds	r2, r7, #4
 800cd50:	f107 0108 	add.w	r1, r7, #8
 800cd54:	f107 030c 	add.w	r3, r7, #12
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fe fac3 	bl	800b2e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd5e:	6879      	ldr	r1, [r7, #4]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	9301      	str	r3, [sp, #4]
 800cd68:	2302      	movs	r3, #2
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	460a      	mov	r2, r1
 800cd70:	4911      	ldr	r1, [pc, #68]	@ (800cdb8 <xTimerCreateTimerTask+0x88>)
 800cd72:	4812      	ldr	r0, [pc, #72]	@ (800cdbc <xTimerCreateTimerTask+0x8c>)
 800cd74:	f7ff f87e 	bl	800be74 <xTaskCreateStatic>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	4a11      	ldr	r2, [pc, #68]	@ (800cdc0 <xTimerCreateTimerTask+0x90>)
 800cd7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd7e:	4b10      	ldr	r3, [pc, #64]	@ (800cdc0 <xTimerCreateTimerTask+0x90>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd86:	2301      	movs	r3, #1
 800cd88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10b      	bne.n	800cda8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	613b      	str	r3, [r7, #16]
}
 800cda2:	bf00      	nop
 800cda4:	bf00      	nop
 800cda6:	e7fd      	b.n	800cda4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cda8:	697b      	ldr	r3, [r7, #20]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	240013f4 	.word	0x240013f4
 800cdb8:	0800deb4 	.word	0x0800deb4
 800cdbc:	0800cefd 	.word	0x0800cefd
 800cdc0:	240013f8 	.word	0x240013f8

0800cdc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	@ 0x28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10b      	bne.n	800cdf4 <xTimerGenericCommand+0x30>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	623b      	str	r3, [r7, #32]
}
 800cdee:	bf00      	nop
 800cdf0:	bf00      	nop
 800cdf2:	e7fd      	b.n	800cdf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cdf4:	4b19      	ldr	r3, [pc, #100]	@ (800ce5c <xTimerGenericCommand+0x98>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d02a      	beq.n	800ce52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b05      	cmp	r3, #5
 800ce0c:	dc18      	bgt.n	800ce40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce0e:	f7ff fead 	bl	800cb6c <xTaskGetSchedulerState>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d109      	bne.n	800ce2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce18:	4b10      	ldr	r3, [pc, #64]	@ (800ce5c <xTimerGenericCommand+0x98>)
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	f107 0110 	add.w	r1, r7, #16
 800ce20:	2300      	movs	r3, #0
 800ce22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce24:	f7fe fc36 	bl	800b694 <xQueueGenericSend>
 800ce28:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce2a:	e012      	b.n	800ce52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce5c <xTimerGenericCommand+0x98>)
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	f107 0110 	add.w	r1, r7, #16
 800ce34:	2300      	movs	r3, #0
 800ce36:	2200      	movs	r2, #0
 800ce38:	f7fe fc2c 	bl	800b694 <xQueueGenericSend>
 800ce3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce3e:	e008      	b.n	800ce52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce40:	4b06      	ldr	r3, [pc, #24]	@ (800ce5c <xTimerGenericCommand+0x98>)
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	f107 0110 	add.w	r1, r7, #16
 800ce48:	2300      	movs	r3, #0
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	f7fe fd24 	bl	800b898 <xQueueGenericSendFromISR>
 800ce50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3728      	adds	r7, #40	@ 0x28
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	240013f4 	.word	0x240013f4

0800ce60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b088      	sub	sp, #32
 800ce64:	af02      	add	r7, sp, #8
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6a:	4b23      	ldr	r3, [pc, #140]	@ (800cef8 <prvProcessExpiredTimer+0x98>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	3304      	adds	r3, #4
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fe fad7 	bl	800b42c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce84:	f003 0304 	and.w	r3, r3, #4
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d023      	beq.n	800ced4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	699a      	ldr	r2, [r3, #24]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	18d1      	adds	r1, r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	6978      	ldr	r0, [r7, #20]
 800ce9a:	f000 f8d5 	bl	800d048 <prvInsertTimerInActiveList>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d020      	beq.n	800cee6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cea4:	2300      	movs	r3, #0
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	2100      	movs	r1, #0
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	f7ff ff88 	bl	800cdc4 <xTimerGenericCommand>
 800ceb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d114      	bne.n	800cee6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60fb      	str	r3, [r7, #12]
}
 800cece:	bf00      	nop
 800ced0:	bf00      	nop
 800ced2:	e7fd      	b.n	800ced0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceda:	f023 0301 	bic.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	6978      	ldr	r0, [r7, #20]
 800ceec:	4798      	blx	r3
}
 800ceee:	bf00      	nop
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	240013ec 	.word	0x240013ec

0800cefc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 f859 	bl	800cfc0 <prvGetNextExpireTime>
 800cf0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4619      	mov	r1, r3
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f805 	bl	800cf24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf1a:	f000 f8d7 	bl	800d0cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf1e:	bf00      	nop
 800cf20:	e7f0      	b.n	800cf04 <prvTimerTask+0x8>
	...

0800cf24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf2e:	f7ff fa05 	bl	800c33c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf32:	f107 0308 	add.w	r3, r7, #8
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 f866 	bl	800d008 <prvSampleTimeNow>
 800cf3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d130      	bne.n	800cfa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10a      	bne.n	800cf60 <prvProcessTimerOrBlockTask+0x3c>
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d806      	bhi.n	800cf60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf52:	f7ff fa01 	bl	800c358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf56:	68f9      	ldr	r1, [r7, #12]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff ff81 	bl	800ce60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf5e:	e024      	b.n	800cfaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d008      	beq.n	800cf78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf66:	4b13      	ldr	r3, [pc, #76]	@ (800cfb4 <prvProcessTimerOrBlockTask+0x90>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <prvProcessTimerOrBlockTask+0x50>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <prvProcessTimerOrBlockTask+0x52>
 800cf74:	2300      	movs	r3, #0
 800cf76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf78:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb8 <prvProcessTimerOrBlockTask+0x94>)
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	4619      	mov	r1, r3
 800cf86:	f7fe ff41 	bl	800be0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf8a:	f7ff f9e5 	bl	800c358 <xTaskResumeAll>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10a      	bne.n	800cfaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf94:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <prvProcessTimerOrBlockTask+0x98>)
 800cf96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	f3bf 8f6f 	isb	sy
}
 800cfa4:	e001      	b.n	800cfaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfa6:	f7ff f9d7 	bl	800c358 <xTaskResumeAll>
}
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	240013f0 	.word	0x240013f0
 800cfb8:	240013f4 	.word	0x240013f4
 800cfbc:	e000ed04 	.word	0xe000ed04

0800cfc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfc8:	4b0e      	ldr	r3, [pc, #56]	@ (800d004 <prvGetNextExpireTime+0x44>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <prvGetNextExpireTime+0x16>
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	e000      	b.n	800cfd8 <prvGetNextExpireTime+0x18>
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d105      	bne.n	800cff0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfe4:	4b07      	ldr	r3, [pc, #28]	@ (800d004 <prvGetNextExpireTime+0x44>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	e001      	b.n	800cff4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cff4:	68fb      	ldr	r3, [r7, #12]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	240013ec 	.word	0x240013ec

0800d008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d010:	f7ff fa40 	bl	800c494 <xTaskGetTickCount>
 800d014:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d016:	4b0b      	ldr	r3, [pc, #44]	@ (800d044 <prvSampleTimeNow+0x3c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d205      	bcs.n	800d02c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d020:	f000 f93a 	bl	800d298 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	e002      	b.n	800d032 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d032:	4a04      	ldr	r2, [pc, #16]	@ (800d044 <prvSampleTimeNow+0x3c>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d038:	68fb      	ldr	r3, [r7, #12]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	240013fc 	.word	0x240013fc

0800d048 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d812      	bhi.n	800d094 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	1ad2      	subs	r2, r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d302      	bcc.n	800d082 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d07c:	2301      	movs	r3, #1
 800d07e:	617b      	str	r3, [r7, #20]
 800d080:	e01b      	b.n	800d0ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d082:	4b10      	ldr	r3, [pc, #64]	@ (800d0c4 <prvInsertTimerInActiveList+0x7c>)
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3304      	adds	r3, #4
 800d08a:	4619      	mov	r1, r3
 800d08c:	4610      	mov	r0, r2
 800d08e:	f7fe f994 	bl	800b3ba <vListInsert>
 800d092:	e012      	b.n	800d0ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d206      	bcs.n	800d0aa <prvInsertTimerInActiveList+0x62>
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d302      	bcc.n	800d0aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	e007      	b.n	800d0ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0aa:	4b07      	ldr	r3, [pc, #28]	@ (800d0c8 <prvInsertTimerInActiveList+0x80>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7fe f980 	bl	800b3ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0ba:	697b      	ldr	r3, [r7, #20]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	240013f0 	.word	0x240013f0
 800d0c8:	240013ec 	.word	0x240013ec

0800d0cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08e      	sub	sp, #56	@ 0x38
 800d0d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0d2:	e0ce      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da19      	bge.n	800d10e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0da:	1d3b      	adds	r3, r7, #4
 800d0dc:	3304      	adds	r3, #4
 800d0de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	61fb      	str	r3, [r7, #28]
}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	e7fd      	b.n	800d0fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d104:	6850      	ldr	r0, [r2, #4]
 800d106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d108:	6892      	ldr	r2, [r2, #8]
 800d10a:	4611      	mov	r1, r2
 800d10c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	f2c0 80ae 	blt.w	800d272 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d004      	beq.n	800d12c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d124:	3304      	adds	r3, #4
 800d126:	4618      	mov	r0, r3
 800d128:	f7fe f980 	bl	800b42c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d12c:	463b      	mov	r3, r7
 800d12e:	4618      	mov	r0, r3
 800d130:	f7ff ff6a 	bl	800d008 <prvSampleTimeNow>
 800d134:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b09      	cmp	r3, #9
 800d13a:	f200 8097 	bhi.w	800d26c <prvProcessReceivedCommands+0x1a0>
 800d13e:	a201      	add	r2, pc, #4	@ (adr r2, 800d144 <prvProcessReceivedCommands+0x78>)
 800d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d144:	0800d16d 	.word	0x0800d16d
 800d148:	0800d16d 	.word	0x0800d16d
 800d14c:	0800d16d 	.word	0x0800d16d
 800d150:	0800d1e3 	.word	0x0800d1e3
 800d154:	0800d1f7 	.word	0x0800d1f7
 800d158:	0800d243 	.word	0x0800d243
 800d15c:	0800d16d 	.word	0x0800d16d
 800d160:	0800d16d 	.word	0x0800d16d
 800d164:	0800d1e3 	.word	0x0800d1e3
 800d168:	0800d1f7 	.word	0x0800d1f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d172:	f043 0301 	orr.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	18d1      	adds	r1, r2, r3
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d18a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d18c:	f7ff ff5c 	bl	800d048 <prvInsertTimerInActiveList>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d06c      	beq.n	800d270 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d19c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d061      	beq.n	800d270 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	441a      	add	r2, r3
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1be:	f7ff fe01 	bl	800cdc4 <xTimerGenericCommand>
 800d1c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d152      	bne.n	800d270 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	61bb      	str	r3, [r7, #24]
}
 800d1dc:	bf00      	nop
 800d1de:	bf00      	nop
 800d1e0:	e7fd      	b.n	800d1de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1e8:	f023 0301 	bic.w	r3, r3, #1
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d1f4:	e03d      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1fc:	f043 0301 	orr.w	r3, r3, #1
 800d200:	b2da      	uxtb	r2, r3
 800d202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d204:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10b      	bne.n	800d22e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	617b      	str	r3, [r7, #20]
}
 800d228:	bf00      	nop
 800d22a:	bf00      	nop
 800d22c:	e7fd      	b.n	800d22a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d230:	699a      	ldr	r2, [r3, #24]
 800d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d234:	18d1      	adds	r1, r2, r3
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d23a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d23c:	f7ff ff04 	bl	800d048 <prvInsertTimerInActiveList>
					break;
 800d240:	e017      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d248:	f003 0302 	and.w	r3, r3, #2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d103      	bne.n	800d258 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d252:	f000 fbef 	bl	800da34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d256:	e00c      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d25e:	f023 0301 	bic.w	r3, r3, #1
 800d262:	b2da      	uxtb	r2, r3
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d26a:	e002      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d26c:	bf00      	nop
 800d26e:	e000      	b.n	800d272 <prvProcessReceivedCommands+0x1a6>
					break;
 800d270:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d272:	4b08      	ldr	r3, [pc, #32]	@ (800d294 <prvProcessReceivedCommands+0x1c8>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	1d39      	adds	r1, r7, #4
 800d278:	2200      	movs	r2, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fe fbaa 	bl	800b9d4 <xQueueReceive>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	f47f af26 	bne.w	800d0d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	3730      	adds	r7, #48	@ 0x30
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	240013f4 	.word	0x240013f4

0800d298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d29e:	e049      	b.n	800d334 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2a0:	4b2e      	ldr	r3, [pc, #184]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b2c      	ldr	r3, [pc, #176]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe f8b7 	bl	800b42c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d02f      	beq.n	800d334 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d90e      	bls.n	800d304 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fe f85c 	bl	800b3ba <vListInsert>
 800d302:	e017      	b.n	800d334 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d304:	2300      	movs	r3, #0
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7ff fd58 	bl	800cdc4 <xTimerGenericCommand>
 800d314:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10b      	bne.n	800d334 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	603b      	str	r3, [r7, #0]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d334:	4b09      	ldr	r3, [pc, #36]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1b0      	bne.n	800d2a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d33e:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d344:	4b06      	ldr	r3, [pc, #24]	@ (800d360 <prvSwitchTimerLists+0xc8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a04      	ldr	r2, [pc, #16]	@ (800d35c <prvSwitchTimerLists+0xc4>)
 800d34a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d34c:	4a04      	ldr	r2, [pc, #16]	@ (800d360 <prvSwitchTimerLists+0xc8>)
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	6013      	str	r3, [r2, #0]
}
 800d352:	bf00      	nop
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	240013ec 	.word	0x240013ec
 800d360:	240013f0 	.word	0x240013f0

0800d364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d36a:	f000 f96d 	bl	800d648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d36e:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <prvCheckForValidListAndQueue+0x60>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d120      	bne.n	800d3b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d376:	4814      	ldr	r0, [pc, #80]	@ (800d3c8 <prvCheckForValidListAndQueue+0x64>)
 800d378:	f7fd ffce 	bl	800b318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d37c:	4813      	ldr	r0, [pc, #76]	@ (800d3cc <prvCheckForValidListAndQueue+0x68>)
 800d37e:	f7fd ffcb 	bl	800b318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d382:	4b13      	ldr	r3, [pc, #76]	@ (800d3d0 <prvCheckForValidListAndQueue+0x6c>)
 800d384:	4a10      	ldr	r2, [pc, #64]	@ (800d3c8 <prvCheckForValidListAndQueue+0x64>)
 800d386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d388:	4b12      	ldr	r3, [pc, #72]	@ (800d3d4 <prvCheckForValidListAndQueue+0x70>)
 800d38a:	4a10      	ldr	r2, [pc, #64]	@ (800d3cc <prvCheckForValidListAndQueue+0x68>)
 800d38c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d38e:	2300      	movs	r3, #0
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	4b11      	ldr	r3, [pc, #68]	@ (800d3d8 <prvCheckForValidListAndQueue+0x74>)
 800d394:	4a11      	ldr	r2, [pc, #68]	@ (800d3dc <prvCheckForValidListAndQueue+0x78>)
 800d396:	2110      	movs	r1, #16
 800d398:	200a      	movs	r0, #10
 800d39a:	f7fe f8db 	bl	800b554 <xQueueGenericCreateStatic>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	4a08      	ldr	r2, [pc, #32]	@ (800d3c4 <prvCheckForValidListAndQueue+0x60>)
 800d3a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3a4:	4b07      	ldr	r3, [pc, #28]	@ (800d3c4 <prvCheckForValidListAndQueue+0x60>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d005      	beq.n	800d3b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3ac:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <prvCheckForValidListAndQueue+0x60>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	490b      	ldr	r1, [pc, #44]	@ (800d3e0 <prvCheckForValidListAndQueue+0x7c>)
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe fd00 	bl	800bdb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3b8:	f000 f978 	bl	800d6ac <vPortExitCritical>
}
 800d3bc:	bf00      	nop
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	240013f4 	.word	0x240013f4
 800d3c8:	240013c4 	.word	0x240013c4
 800d3cc:	240013d8 	.word	0x240013d8
 800d3d0:	240013ec 	.word	0x240013ec
 800d3d4:	240013f0 	.word	0x240013f0
 800d3d8:	240014a0 	.word	0x240014a0
 800d3dc:	24001400 	.word	0x24001400
 800d3e0:	0800debc 	.word	0x0800debc

0800d3e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3b04      	subs	r3, #4
 800d3f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3b04      	subs	r3, #4
 800d402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f023 0201 	bic.w	r2, r3, #1
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3b04      	subs	r3, #4
 800d412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d414:	4a0c      	ldr	r2, [pc, #48]	@ (800d448 <pxPortInitialiseStack+0x64>)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3b14      	subs	r3, #20
 800d41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3b04      	subs	r3, #4
 800d42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f06f 0202 	mvn.w	r2, #2
 800d432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	3b20      	subs	r3, #32
 800d438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d43a:	68fb      	ldr	r3, [r7, #12]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr
 800d448:	0800d44d 	.word	0x0800d44d

0800d44c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d456:	4b13      	ldr	r3, [pc, #76]	@ (800d4a4 <prvTaskExitError+0x58>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d45e:	d00b      	beq.n	800d478 <prvTaskExitError+0x2c>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	60fb      	str	r3, [r7, #12]
}
 800d472:	bf00      	nop
 800d474:	bf00      	nop
 800d476:	e7fd      	b.n	800d474 <prvTaskExitError+0x28>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60bb      	str	r3, [r7, #8]
}
 800d48a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d48c:	bf00      	nop
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0fc      	beq.n	800d48e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	24000010 	.word	0x24000010
	...

0800d4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4b0:	4b07      	ldr	r3, [pc, #28]	@ (800d4d0 <pxCurrentTCBConst2>)
 800d4b2:	6819      	ldr	r1, [r3, #0]
 800d4b4:	6808      	ldr	r0, [r1, #0]
 800d4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ba:	f380 8809 	msr	PSP, r0
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f04f 0000 	mov.w	r0, #0
 800d4c6:	f380 8811 	msr	BASEPRI, r0
 800d4ca:	4770      	bx	lr
 800d4cc:	f3af 8000 	nop.w

0800d4d0 <pxCurrentTCBConst2>:
 800d4d0:	24000ec4 	.word	0x24000ec4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4d4:	bf00      	nop
 800d4d6:	bf00      	nop

0800d4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4d8:	4808      	ldr	r0, [pc, #32]	@ (800d4fc <prvPortStartFirstTask+0x24>)
 800d4da:	6800      	ldr	r0, [r0, #0]
 800d4dc:	6800      	ldr	r0, [r0, #0]
 800d4de:	f380 8808 	msr	MSP, r0
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8814 	msr	CONTROL, r0
 800d4ea:	b662      	cpsie	i
 800d4ec:	b661      	cpsie	f
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	df00      	svc	0
 800d4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4fa:	bf00      	nop
 800d4fc:	e000ed08 	.word	0xe000ed08

0800d500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d506:	4b47      	ldr	r3, [pc, #284]	@ (800d624 <xPortStartScheduler+0x124>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a47      	ldr	r2, [pc, #284]	@ (800d628 <xPortStartScheduler+0x128>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d10b      	bne.n	800d528 <xPortStartScheduler+0x28>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	613b      	str	r3, [r7, #16]
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	e7fd      	b.n	800d524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d528:	4b3e      	ldr	r3, [pc, #248]	@ (800d624 <xPortStartScheduler+0x124>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a3f      	ldr	r2, [pc, #252]	@ (800d62c <xPortStartScheduler+0x12c>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d10b      	bne.n	800d54a <xPortStartScheduler+0x4a>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	60fb      	str	r3, [r7, #12]
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	e7fd      	b.n	800d546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d54a:	4b39      	ldr	r3, [pc, #228]	@ (800d630 <xPortStartScheduler+0x130>)
 800d54c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	22ff      	movs	r2, #255	@ 0xff
 800d55a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	b2db      	uxtb	r3, r3
 800d562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	b2db      	uxtb	r3, r3
 800d568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	4b31      	ldr	r3, [pc, #196]	@ (800d634 <xPortStartScheduler+0x134>)
 800d570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d572:	4b31      	ldr	r3, [pc, #196]	@ (800d638 <xPortStartScheduler+0x138>)
 800d574:	2207      	movs	r2, #7
 800d576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d578:	e009      	b.n	800d58e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d57a:	4b2f      	ldr	r3, [pc, #188]	@ (800d638 <xPortStartScheduler+0x138>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	3b01      	subs	r3, #1
 800d580:	4a2d      	ldr	r2, [pc, #180]	@ (800d638 <xPortStartScheduler+0x138>)
 800d582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d584:	78fb      	ldrb	r3, [r7, #3]
 800d586:	b2db      	uxtb	r3, r3
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d58e:	78fb      	ldrb	r3, [r7, #3]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d596:	2b80      	cmp	r3, #128	@ 0x80
 800d598:	d0ef      	beq.n	800d57a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d59a:	4b27      	ldr	r3, [pc, #156]	@ (800d638 <xPortStartScheduler+0x138>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f1c3 0307 	rsb	r3, r3, #7
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d00b      	beq.n	800d5be <xPortStartScheduler+0xbe>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60bb      	str	r3, [r7, #8]
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	e7fd      	b.n	800d5ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5be:	4b1e      	ldr	r3, [pc, #120]	@ (800d638 <xPortStartScheduler+0x138>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	021b      	lsls	r3, r3, #8
 800d5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d638 <xPortStartScheduler+0x138>)
 800d5c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d638 <xPortStartScheduler+0x138>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d5d0:	4a19      	ldr	r2, [pc, #100]	@ (800d638 <xPortStartScheduler+0x138>)
 800d5d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5dc:	4b17      	ldr	r3, [pc, #92]	@ (800d63c <xPortStartScheduler+0x13c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a16      	ldr	r2, [pc, #88]	@ (800d63c <xPortStartScheduler+0x13c>)
 800d5e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d5e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5e8:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <xPortStartScheduler+0x13c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a13      	ldr	r2, [pc, #76]	@ (800d63c <xPortStartScheduler+0x13c>)
 800d5ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d5f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5f4:	f000 f8da 	bl	800d7ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5f8:	4b11      	ldr	r3, [pc, #68]	@ (800d640 <xPortStartScheduler+0x140>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5fe:	f000 f8f9 	bl	800d7f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d602:	4b10      	ldr	r3, [pc, #64]	@ (800d644 <xPortStartScheduler+0x144>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a0f      	ldr	r2, [pc, #60]	@ (800d644 <xPortStartScheduler+0x144>)
 800d608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d60c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d60e:	f7ff ff63 	bl	800d4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d612:	f7ff f809 	bl	800c628 <vTaskSwitchContext>
	prvTaskExitError();
 800d616:	f7ff ff19 	bl	800d44c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	e000ed00 	.word	0xe000ed00
 800d628:	410fc271 	.word	0x410fc271
 800d62c:	410fc270 	.word	0x410fc270
 800d630:	e000e400 	.word	0xe000e400
 800d634:	240014f0 	.word	0x240014f0
 800d638:	240014f4 	.word	0x240014f4
 800d63c:	e000ed20 	.word	0xe000ed20
 800d640:	24000010 	.word	0x24000010
 800d644:	e000ef34 	.word	0xe000ef34

0800d648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d662:	4b10      	ldr	r3, [pc, #64]	@ (800d6a4 <vPortEnterCritical+0x5c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3301      	adds	r3, #1
 800d668:	4a0e      	ldr	r2, [pc, #56]	@ (800d6a4 <vPortEnterCritical+0x5c>)
 800d66a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d66c:	4b0d      	ldr	r3, [pc, #52]	@ (800d6a4 <vPortEnterCritical+0x5c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d110      	bne.n	800d696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d674:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a8 <vPortEnterCritical+0x60>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00b      	beq.n	800d696 <vPortEnterCritical+0x4e>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	603b      	str	r3, [r7, #0]
}
 800d690:	bf00      	nop
 800d692:	bf00      	nop
 800d694:	e7fd      	b.n	800d692 <vPortEnterCritical+0x4a>
	}
}
 800d696:	bf00      	nop
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	24000010 	.word	0x24000010
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6b2:	4b12      	ldr	r3, [pc, #72]	@ (800d6fc <vPortExitCritical+0x50>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10b      	bne.n	800d6d2 <vPortExitCritical+0x26>
	__asm volatile
 800d6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6be:	f383 8811 	msr	BASEPRI, r3
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	607b      	str	r3, [r7, #4]
}
 800d6cc:	bf00      	nop
 800d6ce:	bf00      	nop
 800d6d0:	e7fd      	b.n	800d6ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <vPortExitCritical+0x50>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	4a08      	ldr	r2, [pc, #32]	@ (800d6fc <vPortExitCritical+0x50>)
 800d6da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6dc:	4b07      	ldr	r3, [pc, #28]	@ (800d6fc <vPortExitCritical+0x50>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d105      	bne.n	800d6f0 <vPortExitCritical+0x44>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f383 8811 	msr	BASEPRI, r3
}
 800d6ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	24000010 	.word	0x24000010

0800d700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d700:	f3ef 8009 	mrs	r0, PSP
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	4b15      	ldr	r3, [pc, #84]	@ (800d760 <pxCurrentTCBConst>)
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	f01e 0f10 	tst.w	lr, #16
 800d710:	bf08      	it	eq
 800d712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71a:	6010      	str	r0, [r2, #0]
 800d71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d724:	f380 8811 	msr	BASEPRI, r0
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f7fe ff7a 	bl	800c628 <vTaskSwitchContext>
 800d734:	f04f 0000 	mov.w	r0, #0
 800d738:	f380 8811 	msr	BASEPRI, r0
 800d73c:	bc09      	pop	{r0, r3}
 800d73e:	6819      	ldr	r1, [r3, #0]
 800d740:	6808      	ldr	r0, [r1, #0]
 800d742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d746:	f01e 0f10 	tst.w	lr, #16
 800d74a:	bf08      	it	eq
 800d74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d750:	f380 8809 	msr	PSP, r0
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	f3af 8000 	nop.w

0800d760 <pxCurrentTCBConst>:
 800d760:	24000ec4 	.word	0x24000ec4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d764:	bf00      	nop
 800d766:	bf00      	nop

0800d768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	607b      	str	r3, [r7, #4]
}
 800d780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d782:	f7fe fe97 	bl	800c4b4 <xTaskIncrementTick>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d78c:	4b06      	ldr	r3, [pc, #24]	@ (800d7a8 <xPortSysTickHandler+0x40>)
 800d78e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	2300      	movs	r3, #0
 800d796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	f383 8811 	msr	BASEPRI, r3
}
 800d79e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <vPortSetupTimerInterrupt+0x34>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e4 <vPortSetupTimerInterrupt+0x38>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e8 <vPortSetupTimerInterrupt+0x3c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <vPortSetupTimerInterrupt+0x40>)
 800d7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7c6:	099b      	lsrs	r3, r3, #6
 800d7c8:	4a09      	ldr	r2, [pc, #36]	@ (800d7f0 <vPortSetupTimerInterrupt+0x44>)
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7ce:	4b04      	ldr	r3, [pc, #16]	@ (800d7e0 <vPortSetupTimerInterrupt+0x34>)
 800d7d0:	2207      	movs	r2, #7
 800d7d2:	601a      	str	r2, [r3, #0]
}
 800d7d4:	bf00      	nop
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	e000e010 	.word	0xe000e010
 800d7e4:	e000e018 	.word	0xe000e018
 800d7e8:	24000000 	.word	0x24000000
 800d7ec:	10624dd3 	.word	0x10624dd3
 800d7f0:	e000e014 	.word	0xe000e014

0800d7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d804 <vPortEnableVFP+0x10>
 800d7f8:	6801      	ldr	r1, [r0, #0]
 800d7fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d7fe:	6001      	str	r1, [r0, #0]
 800d800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d802:	bf00      	nop
 800d804:	e000ed88 	.word	0xe000ed88

0800d808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d80e:	f3ef 8305 	mrs	r3, IPSR
 800d812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b0f      	cmp	r3, #15
 800d818:	d915      	bls.n	800d846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d81a:	4a18      	ldr	r2, [pc, #96]	@ (800d87c <vPortValidateInterruptPriority+0x74>)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4413      	add	r3, r2
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d824:	4b16      	ldr	r3, [pc, #88]	@ (800d880 <vPortValidateInterruptPriority+0x78>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	7afa      	ldrb	r2, [r7, #11]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d20b      	bcs.n	800d846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	607b      	str	r3, [r7, #4]
}
 800d840:	bf00      	nop
 800d842:	bf00      	nop
 800d844:	e7fd      	b.n	800d842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d846:	4b0f      	ldr	r3, [pc, #60]	@ (800d884 <vPortValidateInterruptPriority+0x7c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d84e:	4b0e      	ldr	r3, [pc, #56]	@ (800d888 <vPortValidateInterruptPriority+0x80>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	429a      	cmp	r2, r3
 800d854:	d90b      	bls.n	800d86e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	603b      	str	r3, [r7, #0]
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	e7fd      	b.n	800d86a <vPortValidateInterruptPriority+0x62>
	}
 800d86e:	bf00      	nop
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	e000e3f0 	.word	0xe000e3f0
 800d880:	240014f0 	.word	0x240014f0
 800d884:	e000ed0c 	.word	0xe000ed0c
 800d888:	240014f4 	.word	0x240014f4

0800d88c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	@ 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d898:	f7fe fd50 	bl	800c33c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d89c:	4b5f      	ldr	r3, [pc, #380]	@ (800da1c <pvPortMalloc+0x190>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8a4:	f000 f92a 	bl	800dafc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8a8:	4b5d      	ldr	r3, [pc, #372]	@ (800da20 <pvPortMalloc+0x194>)
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 8095 	bne.w	800d9e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d01e      	beq.n	800d8fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d8bc:	2208      	movs	r2, #8
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f003 0307 	and.w	r3, r3, #7
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d015      	beq.n	800d8fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f023 0307 	bic.w	r3, r3, #7
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f003 0307 	and.w	r3, r3, #7
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00b      	beq.n	800d8fa <pvPortMalloc+0x6e>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	617b      	str	r3, [r7, #20]
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	e7fd      	b.n	800d8f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d06f      	beq.n	800d9e0 <pvPortMalloc+0x154>
 800d900:	4b48      	ldr	r3, [pc, #288]	@ (800da24 <pvPortMalloc+0x198>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	429a      	cmp	r2, r3
 800d908:	d86a      	bhi.n	800d9e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d90a:	4b47      	ldr	r3, [pc, #284]	@ (800da28 <pvPortMalloc+0x19c>)
 800d90c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d90e:	4b46      	ldr	r3, [pc, #280]	@ (800da28 <pvPortMalloc+0x19c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d914:	e004      	b.n	800d920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	429a      	cmp	r2, r3
 800d928:	d903      	bls.n	800d932 <pvPortMalloc+0xa6>
 800d92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1f1      	bne.n	800d916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d932:	4b3a      	ldr	r3, [pc, #232]	@ (800da1c <pvPortMalloc+0x190>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d938:	429a      	cmp	r2, r3
 800d93a:	d051      	beq.n	800d9e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2208      	movs	r2, #8
 800d942:	4413      	add	r3, r2
 800d944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	1ad2      	subs	r2, r2, r3
 800d956:	2308      	movs	r3, #8
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d920      	bls.n	800d9a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4413      	add	r3, r2
 800d964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00b      	beq.n	800d988 <pvPortMalloc+0xfc>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	613b      	str	r3, [r7, #16]
}
 800d982:	bf00      	nop
 800d984:	bf00      	nop
 800d986:	e7fd      	b.n	800d984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d99a:	69b8      	ldr	r0, [r7, #24]
 800d99c:	f000 f912 	bl	800dbc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9a0:	4b20      	ldr	r3, [pc, #128]	@ (800da24 <pvPortMalloc+0x198>)
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	4a1e      	ldr	r2, [pc, #120]	@ (800da24 <pvPortMalloc+0x198>)
 800d9ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800da24 <pvPortMalloc+0x198>)
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	4b1e      	ldr	r3, [pc, #120]	@ (800da2c <pvPortMalloc+0x1a0>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d203      	bcs.n	800d9c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9ba:	4b1a      	ldr	r3, [pc, #104]	@ (800da24 <pvPortMalloc+0x198>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a1b      	ldr	r2, [pc, #108]	@ (800da2c <pvPortMalloc+0x1a0>)
 800d9c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	4b16      	ldr	r3, [pc, #88]	@ (800da20 <pvPortMalloc+0x194>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9d6:	4b16      	ldr	r3, [pc, #88]	@ (800da30 <pvPortMalloc+0x1a4>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	4a14      	ldr	r2, [pc, #80]	@ (800da30 <pvPortMalloc+0x1a4>)
 800d9de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9e0:	f7fe fcba 	bl	800c358 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d9ea:	f7f2 ff51 	bl	8000890 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	f003 0307 	and.w	r3, r3, #7
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00b      	beq.n	800da10 <pvPortMalloc+0x184>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	60fb      	str	r3, [r7, #12]
}
 800da0a:	bf00      	nop
 800da0c:	bf00      	nop
 800da0e:	e7fd      	b.n	800da0c <pvPortMalloc+0x180>
	return pvReturn;
 800da10:	69fb      	ldr	r3, [r7, #28]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3728      	adds	r7, #40	@ 0x28
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	24065690 	.word	0x24065690
 800da20:	240656a4 	.word	0x240656a4
 800da24:	24065694 	.word	0x24065694
 800da28:	24065688 	.word	0x24065688
 800da2c:	24065698 	.word	0x24065698
 800da30:	2406569c 	.word	0x2406569c

0800da34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b086      	sub	sp, #24
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d04f      	beq.n	800dae6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da46:	2308      	movs	r3, #8
 800da48:	425b      	negs	r3, r3
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	4b25      	ldr	r3, [pc, #148]	@ (800daf0 <vPortFree+0xbc>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4013      	ands	r3, r2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10b      	bne.n	800da7a <vPortFree+0x46>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	60fb      	str	r3, [r7, #12]
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop
 800da78:	e7fd      	b.n	800da76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00b      	beq.n	800da9a <vPortFree+0x66>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	60bb      	str	r3, [r7, #8]
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop
 800da98:	e7fd      	b.n	800da96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	685a      	ldr	r2, [r3, #4]
 800da9e:	4b14      	ldr	r3, [pc, #80]	@ (800daf0 <vPortFree+0xbc>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4013      	ands	r3, r2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d01e      	beq.n	800dae6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11a      	bne.n	800dae6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	4b0e      	ldr	r3, [pc, #56]	@ (800daf0 <vPortFree+0xbc>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	43db      	mvns	r3, r3
 800daba:	401a      	ands	r2, r3
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dac0:	f7fe fc3c 	bl	800c33c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	4b0a      	ldr	r3, [pc, #40]	@ (800daf4 <vPortFree+0xc0>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4413      	add	r3, r2
 800dace:	4a09      	ldr	r2, [pc, #36]	@ (800daf4 <vPortFree+0xc0>)
 800dad0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dad2:	6938      	ldr	r0, [r7, #16]
 800dad4:	f000 f876 	bl	800dbc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dad8:	4b07      	ldr	r3, [pc, #28]	@ (800daf8 <vPortFree+0xc4>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	4a06      	ldr	r2, [pc, #24]	@ (800daf8 <vPortFree+0xc4>)
 800dae0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dae2:	f7fe fc39 	bl	800c358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dae6:	bf00      	nop
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	240656a4 	.word	0x240656a4
 800daf4:	24065694 	.word	0x24065694
 800daf8:	240656a0 	.word	0x240656a0

0800dafc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db02:	4b29      	ldr	r3, [pc, #164]	@ (800dba8 <prvHeapInit+0xac>)
 800db04:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db06:	4b29      	ldr	r3, [pc, #164]	@ (800dbac <prvHeapInit+0xb0>)
 800db08:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f003 0307 	and.w	r3, r3, #7
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00c      	beq.n	800db2e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3307      	adds	r3, #7
 800db18:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f023 0307 	bic.w	r3, r3, #7
 800db20:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	4a20      	ldr	r2, [pc, #128]	@ (800dbac <prvHeapInit+0xb0>)
 800db2a:	4413      	add	r3, r2
 800db2c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db32:	4a1f      	ldr	r2, [pc, #124]	@ (800dbb0 <prvHeapInit+0xb4>)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db38:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb0 <prvHeapInit+0xb4>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	4413      	add	r3, r2
 800db44:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db46:	2208      	movs	r2, #8
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f023 0307 	bic.w	r3, r3, #7
 800db54:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	4a16      	ldr	r2, [pc, #88]	@ (800dbb4 <prvHeapInit+0xb8>)
 800db5a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db5c:	4b15      	ldr	r3, [pc, #84]	@ (800dbb4 <prvHeapInit+0xb8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2200      	movs	r2, #0
 800db62:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db64:	4b13      	ldr	r3, [pc, #76]	@ (800dbb4 <prvHeapInit+0xb8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2200      	movs	r2, #0
 800db6a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	1ad2      	subs	r2, r2, r3
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db7a:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb4 <prvHeapInit+0xb8>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	4a0c      	ldr	r2, [pc, #48]	@ (800dbb8 <prvHeapInit+0xbc>)
 800db88:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	4a0b      	ldr	r2, [pc, #44]	@ (800dbbc <prvHeapInit+0xc0>)
 800db90:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db92:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc0 <prvHeapInit+0xc4>)
 800db94:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800db98:	601a      	str	r2, [r3, #0]
}
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	00064190 	.word	0x00064190
 800dbac:	240014f8 	.word	0x240014f8
 800dbb0:	24065688 	.word	0x24065688
 800dbb4:	24065690 	.word	0x24065690
 800dbb8:	24065698 	.word	0x24065698
 800dbbc:	24065694 	.word	0x24065694
 800dbc0:	240656a4 	.word	0x240656a4

0800dbc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbcc:	4b28      	ldr	r3, [pc, #160]	@ (800dc70 <prvInsertBlockIntoFreeList+0xac>)
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e002      	b.n	800dbd8 <prvInsertBlockIntoFreeList+0x14>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d8f7      	bhi.n	800dbd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	4413      	add	r3, r2
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d108      	bne.n	800dc06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	441a      	add	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	441a      	add	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d118      	bne.n	800dc4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	4b15      	ldr	r3, [pc, #84]	@ (800dc74 <prvInsertBlockIntoFreeList+0xb0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d00d      	beq.n	800dc42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	441a      	add	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	e008      	b.n	800dc54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc42:	4b0c      	ldr	r3, [pc, #48]	@ (800dc74 <prvInsertBlockIntoFreeList+0xb0>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	e003      	b.n	800dc54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d002      	beq.n	800dc62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc62:	bf00      	nop
 800dc64:	3714      	adds	r7, #20
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	24065688 	.word	0x24065688
 800dc74:	24065690 	.word	0x24065690

0800dc78 <memset>:
 800dc78:	4402      	add	r2, r0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d100      	bne.n	800dc82 <memset+0xa>
 800dc80:	4770      	bx	lr
 800dc82:	f803 1b01 	strb.w	r1, [r3], #1
 800dc86:	e7f9      	b.n	800dc7c <memset+0x4>

0800dc88 <_reclaim_reent>:
 800dc88:	4b29      	ldr	r3, [pc, #164]	@ (800dd30 <_reclaim_reent+0xa8>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4283      	cmp	r3, r0
 800dc8e:	b570      	push	{r4, r5, r6, lr}
 800dc90:	4604      	mov	r4, r0
 800dc92:	d04b      	beq.n	800dd2c <_reclaim_reent+0xa4>
 800dc94:	69c3      	ldr	r3, [r0, #28]
 800dc96:	b1ab      	cbz	r3, 800dcc4 <_reclaim_reent+0x3c>
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	b16b      	cbz	r3, 800dcb8 <_reclaim_reent+0x30>
 800dc9c:	2500      	movs	r5, #0
 800dc9e:	69e3      	ldr	r3, [r4, #28]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	5959      	ldr	r1, [r3, r5]
 800dca4:	2900      	cmp	r1, #0
 800dca6:	d13b      	bne.n	800dd20 <_reclaim_reent+0x98>
 800dca8:	3504      	adds	r5, #4
 800dcaa:	2d80      	cmp	r5, #128	@ 0x80
 800dcac:	d1f7      	bne.n	800dc9e <_reclaim_reent+0x16>
 800dcae:	69e3      	ldr	r3, [r4, #28]
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	68d9      	ldr	r1, [r3, #12]
 800dcb4:	f000 f872 	bl	800dd9c <_free_r>
 800dcb8:	69e3      	ldr	r3, [r4, #28]
 800dcba:	6819      	ldr	r1, [r3, #0]
 800dcbc:	b111      	cbz	r1, 800dcc4 <_reclaim_reent+0x3c>
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f86c 	bl	800dd9c <_free_r>
 800dcc4:	6961      	ldr	r1, [r4, #20]
 800dcc6:	b111      	cbz	r1, 800dcce <_reclaim_reent+0x46>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 f867 	bl	800dd9c <_free_r>
 800dcce:	69e1      	ldr	r1, [r4, #28]
 800dcd0:	b111      	cbz	r1, 800dcd8 <_reclaim_reent+0x50>
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f000 f862 	bl	800dd9c <_free_r>
 800dcd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dcda:	b111      	cbz	r1, 800dce2 <_reclaim_reent+0x5a>
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 f85d 	bl	800dd9c <_free_r>
 800dce2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dce4:	b111      	cbz	r1, 800dcec <_reclaim_reent+0x64>
 800dce6:	4620      	mov	r0, r4
 800dce8:	f000 f858 	bl	800dd9c <_free_r>
 800dcec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dcee:	b111      	cbz	r1, 800dcf6 <_reclaim_reent+0x6e>
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 f853 	bl	800dd9c <_free_r>
 800dcf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dcf8:	b111      	cbz	r1, 800dd00 <_reclaim_reent+0x78>
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 f84e 	bl	800dd9c <_free_r>
 800dd00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dd02:	b111      	cbz	r1, 800dd0a <_reclaim_reent+0x82>
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 f849 	bl	800dd9c <_free_r>
 800dd0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd0c:	b111      	cbz	r1, 800dd14 <_reclaim_reent+0x8c>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f000 f844 	bl	800dd9c <_free_r>
 800dd14:	6a23      	ldr	r3, [r4, #32]
 800dd16:	b14b      	cbz	r3, 800dd2c <_reclaim_reent+0xa4>
 800dd18:	4620      	mov	r0, r4
 800dd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd1e:	4718      	bx	r3
 800dd20:	680e      	ldr	r6, [r1, #0]
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 f83a 	bl	800dd9c <_free_r>
 800dd28:	4631      	mov	r1, r6
 800dd2a:	e7bb      	b.n	800dca4 <_reclaim_reent+0x1c>
 800dd2c:	bd70      	pop	{r4, r5, r6, pc}
 800dd2e:	bf00      	nop
 800dd30:	24000014 	.word	0x24000014

0800dd34 <__libc_init_array>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	4d0d      	ldr	r5, [pc, #52]	@ (800dd6c <__libc_init_array+0x38>)
 800dd38:	4c0d      	ldr	r4, [pc, #52]	@ (800dd70 <__libc_init_array+0x3c>)
 800dd3a:	1b64      	subs	r4, r4, r5
 800dd3c:	10a4      	asrs	r4, r4, #2
 800dd3e:	2600      	movs	r6, #0
 800dd40:	42a6      	cmp	r6, r4
 800dd42:	d109      	bne.n	800dd58 <__libc_init_array+0x24>
 800dd44:	4d0b      	ldr	r5, [pc, #44]	@ (800dd74 <__libc_init_array+0x40>)
 800dd46:	4c0c      	ldr	r4, [pc, #48]	@ (800dd78 <__libc_init_array+0x44>)
 800dd48:	f000 f87e 	bl	800de48 <_init>
 800dd4c:	1b64      	subs	r4, r4, r5
 800dd4e:	10a4      	asrs	r4, r4, #2
 800dd50:	2600      	movs	r6, #0
 800dd52:	42a6      	cmp	r6, r4
 800dd54:	d105      	bne.n	800dd62 <__libc_init_array+0x2e>
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd5c:	4798      	blx	r3
 800dd5e:	3601      	adds	r6, #1
 800dd60:	e7ee      	b.n	800dd40 <__libc_init_array+0xc>
 800dd62:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd66:	4798      	blx	r3
 800dd68:	3601      	adds	r6, #1
 800dd6a:	e7f2      	b.n	800dd52 <__libc_init_array+0x1e>
 800dd6c:	0800df30 	.word	0x0800df30
 800dd70:	0800df30 	.word	0x0800df30
 800dd74:	0800df30 	.word	0x0800df30
 800dd78:	0800df34 	.word	0x0800df34

0800dd7c <__retarget_lock_acquire_recursive>:
 800dd7c:	4770      	bx	lr

0800dd7e <__retarget_lock_release_recursive>:
 800dd7e:	4770      	bx	lr

0800dd80 <memcpy>:
 800dd80:	440a      	add	r2, r1
 800dd82:	4291      	cmp	r1, r2
 800dd84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd88:	d100      	bne.n	800dd8c <memcpy+0xc>
 800dd8a:	4770      	bx	lr
 800dd8c:	b510      	push	{r4, lr}
 800dd8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd96:	4291      	cmp	r1, r2
 800dd98:	d1f9      	bne.n	800dd8e <memcpy+0xe>
 800dd9a:	bd10      	pop	{r4, pc}

0800dd9c <_free_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4605      	mov	r5, r0
 800dda0:	2900      	cmp	r1, #0
 800dda2:	d041      	beq.n	800de28 <_free_r+0x8c>
 800dda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dda8:	1f0c      	subs	r4, r1, #4
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	bfb8      	it	lt
 800ddae:	18e4      	addlt	r4, r4, r3
 800ddb0:	f000 f83e 	bl	800de30 <__malloc_lock>
 800ddb4:	4a1d      	ldr	r2, [pc, #116]	@ (800de2c <_free_r+0x90>)
 800ddb6:	6813      	ldr	r3, [r2, #0]
 800ddb8:	b933      	cbnz	r3, 800ddc8 <_free_r+0x2c>
 800ddba:	6063      	str	r3, [r4, #4]
 800ddbc:	6014      	str	r4, [r2, #0]
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddc4:	f000 b83a 	b.w	800de3c <__malloc_unlock>
 800ddc8:	42a3      	cmp	r3, r4
 800ddca:	d908      	bls.n	800ddde <_free_r+0x42>
 800ddcc:	6820      	ldr	r0, [r4, #0]
 800ddce:	1821      	adds	r1, r4, r0
 800ddd0:	428b      	cmp	r3, r1
 800ddd2:	bf01      	itttt	eq
 800ddd4:	6819      	ldreq	r1, [r3, #0]
 800ddd6:	685b      	ldreq	r3, [r3, #4]
 800ddd8:	1809      	addeq	r1, r1, r0
 800ddda:	6021      	streq	r1, [r4, #0]
 800dddc:	e7ed      	b.n	800ddba <_free_r+0x1e>
 800ddde:	461a      	mov	r2, r3
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	b10b      	cbz	r3, 800dde8 <_free_r+0x4c>
 800dde4:	42a3      	cmp	r3, r4
 800dde6:	d9fa      	bls.n	800ddde <_free_r+0x42>
 800dde8:	6811      	ldr	r1, [r2, #0]
 800ddea:	1850      	adds	r0, r2, r1
 800ddec:	42a0      	cmp	r0, r4
 800ddee:	d10b      	bne.n	800de08 <_free_r+0x6c>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	4401      	add	r1, r0
 800ddf4:	1850      	adds	r0, r2, r1
 800ddf6:	4283      	cmp	r3, r0
 800ddf8:	6011      	str	r1, [r2, #0]
 800ddfa:	d1e0      	bne.n	800ddbe <_free_r+0x22>
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	6053      	str	r3, [r2, #4]
 800de02:	4408      	add	r0, r1
 800de04:	6010      	str	r0, [r2, #0]
 800de06:	e7da      	b.n	800ddbe <_free_r+0x22>
 800de08:	d902      	bls.n	800de10 <_free_r+0x74>
 800de0a:	230c      	movs	r3, #12
 800de0c:	602b      	str	r3, [r5, #0]
 800de0e:	e7d6      	b.n	800ddbe <_free_r+0x22>
 800de10:	6820      	ldr	r0, [r4, #0]
 800de12:	1821      	adds	r1, r4, r0
 800de14:	428b      	cmp	r3, r1
 800de16:	bf04      	itt	eq
 800de18:	6819      	ldreq	r1, [r3, #0]
 800de1a:	685b      	ldreq	r3, [r3, #4]
 800de1c:	6063      	str	r3, [r4, #4]
 800de1e:	bf04      	itt	eq
 800de20:	1809      	addeq	r1, r1, r0
 800de22:	6021      	streq	r1, [r4, #0]
 800de24:	6054      	str	r4, [r2, #4]
 800de26:	e7ca      	b.n	800ddbe <_free_r+0x22>
 800de28:	bd38      	pop	{r3, r4, r5, pc}
 800de2a:	bf00      	nop
 800de2c:	240657e4 	.word	0x240657e4

0800de30 <__malloc_lock>:
 800de30:	4801      	ldr	r0, [pc, #4]	@ (800de38 <__malloc_lock+0x8>)
 800de32:	f7ff bfa3 	b.w	800dd7c <__retarget_lock_acquire_recursive>
 800de36:	bf00      	nop
 800de38:	240657e0 	.word	0x240657e0

0800de3c <__malloc_unlock>:
 800de3c:	4801      	ldr	r0, [pc, #4]	@ (800de44 <__malloc_unlock+0x8>)
 800de3e:	f7ff bf9e 	b.w	800dd7e <__retarget_lock_release_recursive>
 800de42:	bf00      	nop
 800de44:	240657e0 	.word	0x240657e0

0800de48 <_init>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr

0800de54 <_fini>:
 800de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de56:	bf00      	nop
 800de58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5a:	bc08      	pop	{r3}
 800de5c:	469e      	mov	lr, r3
 800de5e:	4770      	bx	lr
