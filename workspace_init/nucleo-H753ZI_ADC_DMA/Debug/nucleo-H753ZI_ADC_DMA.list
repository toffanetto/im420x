
nucleo-H753ZI_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbd0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800de70  0800de70  0000ee70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df48  0800df48  0000ef48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df50  0800df50  0000ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800df54  0800df54  0000ef54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800df58  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00065784  24000064  0800dfbc  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240657e8  0800dfbc  0000f7e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c799  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056b2  00000000  00000000  0003b82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e8  00000000  00000000  00040ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001976  00000000  00000000  00042fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dff1  00000000  00000000  0004493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b5e7  00000000  00000000  0008292f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186525  00000000  00000000  000adf16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023443b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fa0  00000000  00000000  00234480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0023d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800de58 	.word	0x0800de58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800de58 	.word	0x0800de58

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80005f6:	4a38      	ldr	r2, [pc, #224]	@ (80006d8 <MX_ADC1_Init+0x108>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005fa:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80005fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000602:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000608:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800060a:	2201      	movs	r2, #1
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000610:	2204      	movs	r2, #4
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000616:	2200      	movs	r2, #0
 8000618:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061a:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800061c:	2201      	movs	r2, #1
 800061e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000622:	2202      	movs	r2, #2
 8000624:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800063a:	2203      	movs	r2, #3
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <MX_ADC1_Init+0x104>)
 8000654:	f001 fa7a 	bl	8001b4c <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065e:	f000 fd2b 	bl	80010b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4819      	ldr	r0, [pc, #100]	@ (80006d4 <MX_ADC1_Init+0x104>)
 800066e:	f002 fa93 	bl	8002b98 <HAL_ADCEx_MultiModeConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000678:	f000 fd1e 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC1_Init+0x10c>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2306      	movs	r3, #6
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000684:	2306      	movs	r3, #6
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000688:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068e:	2304      	movs	r3, #4
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80006a0:	f001 fcce 	bl	8002040 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fd05 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_ADC1_Init+0x110>)
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b2:	230c      	movs	r3, #12
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_ADC1_Init+0x104>)
 80006bc:	f001 fcc0 	bl	8002040 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006c6:	f000 fcf7 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	24000080 	.word	0x24000080
 80006d8:	40022000 	.word	0x40022000
 80006dc:	08600004 	.word	0x08600004
 80006e0:	19200040 	.word	0x19200040

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0ba      	sub	sp, #232	@ 0xe8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22c0      	movs	r2, #192	@ 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00d fabf 	bl	800dc88 <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a45      	ldr	r2, [pc, #276]	@ (8000824 <HAL_ADC_MspInit+0x140>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f040 8082 	bne.w	800081a <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000716:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000726:	2312      	movs	r3, #18
 8000728:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000736:	23c0      	movs	r3, #192	@ 0xc0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800073a:	2320      	movs	r3, #32
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 800073e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f83c 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800075a:	f000 fcad 	bl	80010b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000782:	4a29      	ldr	r2, [pc, #164]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <HAL_ADC_MspInit+0x144>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800079a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481d      	ldr	r0, [pc, #116]	@ (800082c <HAL_ADC_MspInit+0x148>)
 80007b6:	f004 fc85 	bl	80050c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <HAL_ADC_MspInit+0x150>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007fe:	480c      	ldr	r0, [pc, #48]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000800:	f002 fb88 	bl	8002f14 <HAL_DMA_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 800080a:	f000 fc55 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000812:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <HAL_ADC_MspInit+0x14c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800081a:	bf00      	nop
 800081c:	37e8      	adds	r7, #232	@ 0xe8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000
 8000828:	58024400 	.word	0x58024400
 800082c:	58021400 	.word	0x58021400
 8000830:	240000e4 	.word	0x240000e4
 8000834:	40020010 	.word	0x40020010

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	200b      	movs	r0, #11
 8000862:	f002 fb2f 	bl	8002ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000866:	200b      	movs	r0, #11
 8000868:	f002 fb46 	bl	8002ef8 <HAL_NVIC_EnableIRQ>

}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400

08000878 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]

  for(;;)
  {
    printf_("| StackOverflow detected!!!");
 8000882:	4802      	ldr	r0, [pc, #8]	@ (800088c <vApplicationStackOverflowHook+0x14>)
 8000884:	f000 fb46 	bl	8000f14 <printf_>
 8000888:	e7fb      	b.n	8000882 <vApplicationStackOverflowHook+0xa>
 800088a:	bf00      	nop
 800088c:	0800de7c 	.word	0x0800de7c

08000890 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  for(;;)
  {
	printf_("| HeapOverflow detected!!!");
 8000894:	4801      	ldr	r0, [pc, #4]	@ (800089c <vApplicationMallocFailedHook+0xc>)
 8000896:	f000 fb3d 	bl	8000f14 <printf_>
 800089a:	e7fb      	b.n	8000894 <vApplicationMallocFailedHook+0x4>
 800089c:	0800de98 	.word	0x0800de98

080008a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a4:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <MX_FREERTOS_Init+0x18>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_FREERTOS_Init+0x1c>)
 80008aa:	f00a fc5b 	bl	800b164 <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a03      	ldr	r2, [pc, #12]	@ (80008c0 <MX_FREERTOS_Init+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800dee4 	.word	0x0800dee4
 80008bc:	080008c5 	.word	0x080008c5
 80008c0:	2400015c 	.word	0x2400015c

080008c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  unsigned int ucJoySW;
  /* Infinite loop */
  for(;;)
  {

	ucADC1Channel2 = ucADC1Buffer[0];
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <StartDefaultTask+0x38>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	617b      	str	r3, [r7, #20]
	ucADC1Channel6 = ucADC1Buffer[1];
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <StartDefaultTask+0x38>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	613b      	str	r3, [r7, #16]
	ucJoySW = HAL_GPIO_ReadPin(JoySW_GPIO_Port, JoySW_Pin);
 80008d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008dc:	4808      	ldr	r0, [pc, #32]	@ (8000900 <StartDefaultTask+0x3c>)
 80008de:	f004 fda1 	bl	8005424 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	60fb      	str	r3, [r7, #12]
	printf_("%d | %d | %d\n\r",ucADC1Channel2, ucADC1Channel6, ucJoySW);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <StartDefaultTask+0x40>)
 80008ee:	f000 fb11 	bl	8000f14 <printf_>
    osDelay(100);
 80008f2:	2064      	movs	r0, #100	@ 0x64
 80008f4:	f00a fcc8 	bl	800b288 <osDelay>
	ucADC1Channel2 = ucADC1Buffer[0];
 80008f8:	bf00      	nop
 80008fa:	e7e7      	b.n	80008cc <StartDefaultTask+0x8>
 80008fc:	24000160 	.word	0x24000160
 8000900:	58021400 	.word	0x58021400
 8000904:	0800deb4 	.word	0x0800deb4

08000908 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b91      	ldr	r3, [pc, #580]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a8f      	ldr	r2, [pc, #572]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b8d      	ldr	r3, [pc, #564]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	623b      	str	r3, [r7, #32]
 800093a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093c:	4b89      	ldr	r3, [pc, #548]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a88      	ldr	r2, [pc, #544]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b85      	ldr	r3, [pc, #532]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a80      	ldr	r2, [pc, #512]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b7e      	ldr	r3, [pc, #504]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b7a      	ldr	r3, [pc, #488]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	4a79      	ldr	r2, [pc, #484]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000988:	4b76      	ldr	r3, [pc, #472]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b73      	ldr	r3, [pc, #460]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a71      	ldr	r2, [pc, #452]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0320 	and.w	r3, r3, #32
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	4b6b      	ldr	r3, [pc, #428]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	4a6a      	ldr	r2, [pc, #424]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c4:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	4b64      	ldr	r3, [pc, #400]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a62      	ldr	r2, [pc, #392]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b60      	ldr	r3, [pc, #384]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	4a5b      	ldr	r2, [pc, #364]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a00:	4b58      	ldr	r3, [pc, #352]	@ (8000b64 <MX_GPIO_Init+0x25c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a14:	4854      	ldr	r0, [pc, #336]	@ (8000b68 <MX_GPIO_Init+0x260>)
 8000a16:	f004 fd1d 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a20:	4852      	ldr	r0, [pc, #328]	@ (8000b6c <MX_GPIO_Init+0x264>)
 8000a22:	f004 fd17 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4851      	ldr	r0, [pc, #324]	@ (8000b70 <MX_GPIO_Init+0x268>)
 8000a2c:	f004 fd12 	bl	8005454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	484b      	ldr	r0, [pc, #300]	@ (8000b74 <MX_GPIO_Init+0x26c>)
 8000a46:	f004 fb3d 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a4a:	2332      	movs	r3, #50	@ 0x32
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4843      	ldr	r0, [pc, #268]	@ (8000b74 <MX_GPIO_Init+0x26c>)
 8000a66:	f004 fb2d 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a6a:	2386      	movs	r3, #134	@ 0x86
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	483c      	ldr	r0, [pc, #240]	@ (8000b78 <MX_GPIO_Init+0x270>)
 8000a86:	f004 fb1d 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a8a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4831      	ldr	r0, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0x260>)
 8000aa4:	f004 fb0e 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	482f      	ldr	r0, [pc, #188]	@ (8000b7c <MX_GPIO_Init+0x274>)
 8000abe:	f004 fb01 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad4:	230b      	movs	r3, #11
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4822      	ldr	r0, [pc, #136]	@ (8000b68 <MX_GPIO_Init+0x260>)
 8000ae0:	f004 faf0 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <MX_GPIO_Init+0x264>)
 8000afe:	f004 fae1 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	@ (8000b80 <MX_GPIO_Init+0x278>)
 8000b18:	f004 fad4 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b1c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2e:	230b      	movs	r3, #11
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_GPIO_Init+0x278>)
 8000b3a:	f004 fac3 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_GPIO_Init+0x268>)
 8000b56:	f004 fab5 	bl	80050c4 <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	@ 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	58020c00 	.word	0x58020c00
 8000b70:	58021000 	.word	0x58021000
 8000b74:	58020800 	.word	0x58020800
 8000b78:	58020000 	.word	0x58020000
 8000b7c:	58021400 	.word	0x58021400
 8000b80:	58021800 	.word	0x58021800

08000b84 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	if (str) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <printchar_+0x26>
		**str = (char)c;
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000ba8:	e005      	b.n	8000bb6 <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000baa:	4639      	mov	r1, r7
 8000bac:	230a      	movs	r3, #10
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <printchar_+0x3c>)
 8000bb2:	f008 fe27 	bl	8009804 <HAL_UART_Transmit>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240001b4 	.word	0x240001b4

08000bc4 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd17      	ble.n	8000c10 <prints_+0x4c>
		register int len = 0;
 8000be0:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000be2:	68be      	ldr	r6, [r7, #8]
 8000be4:	e001      	b.n	8000bea <prints_+0x26>
 8000be6:	3501      	adds	r5, #1
 8000be8:	3601      	adds	r6, #1
 8000bea:	7833      	ldrb	r3, [r6, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1fa      	bne.n	8000be6 <prints_+0x22>
		if (len >= width) width = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	429d      	cmp	r5, r3
 8000bf4:	db02      	blt.n	8000bfc <prints_+0x38>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e002      	b.n	8000c02 <prints_+0x3e>
		else width -= len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1b5b      	subs	r3, r3, r5
 8000c00:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <prints_+0x4c>
 8000c0c:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d116      	bne.n	8000c48 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000c1a:	e007      	b.n	8000c2c <prints_+0x68>
			printchar_(out, padchar);
 8000c1c:	4641      	mov	r1, r8
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ffb0 	bl	8000b84 <printchar_>
			++pc;
 8000c24:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dcf4      	bgt.n	8000c1c <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000c32:	e009      	b.n	8000c48 <prints_+0x84>
		printchar_(out, *string);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff ffa2 	bl	8000b84 <printchar_>
		++pc;
 8000c40:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f1      	bne.n	8000c34 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000c50:	e007      	b.n	8000c62 <prints_+0x9e>
		printchar_(out, padchar);
 8000c52:	4641      	mov	r1, r8
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff ff95 	bl	8000b84 <printchar_>
		++pc;
 8000c5a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dcf4      	bgt.n	8000c52 <prints_+0x8e>
	}

	return pc;
 8000c68:	4623      	mov	r3, r4
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c74 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c78:	b089      	sub	sp, #36	@ 0x24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000c84:	f04f 0900 	mov.w	r9, #0
 8000c88:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000c8a:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10c      	bne.n	8000cac <printi_+0x38>
		print_buf[0] = '0';
 8000c92:	2330      	movs	r3, #48	@ 0x30
 8000c94:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000c96:	2300      	movs	r3, #0
 8000c98:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000c9a:	f107 0114 	add.w	r1, r7, #20
 8000c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <prints_>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	e04a      	b.n	8000d42 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00a      	beq.n	8000cc8 <printi_+0x54>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d107      	bne.n	8000cc8 <printi_+0x54>
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da04      	bge.n	8000cc8 <printi_+0x54>
		neg = 1;
 8000cbe:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000cc8:	f107 0414 	add.w	r4, r7, #20
 8000ccc:	340b      	adds	r4, #11
	*s = '\0';
 8000cce:	2300      	movs	r3, #0
 8000cd0:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000cd2:	e015      	b.n	8000d00 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	fbb5 f2f3 	udiv	r2, r5, r3
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	1aeb      	subs	r3, r5, r3
 8000ce0:	4698      	mov	r8, r3
		if( t >= 10 )
 8000ce2:	f1b8 0f09 	cmp.w	r8, #9
 8000ce6:	dd02      	ble.n	8000cee <printi_+0x7a>
			t += letbase - '0' - 10;
 8000ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cea:	3b3a      	subs	r3, #58	@ 0x3a
 8000cec:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000cee:	fa5f f388 	uxtb.w	r3, r8
 8000cf2:	3c01      	subs	r4, #1
 8000cf4:	3330      	adds	r3, #48	@ 0x30
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d1e7      	bne.n	8000cd4 <printi_+0x60>
	}

	if (neg) {
 8000d04:	f1b9 0f00 	cmp.w	r9, #0
 8000d08:	d013      	beq.n	8000d32 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00d      	beq.n	8000d2c <printi_+0xb8>
 8000d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <printi_+0xb8>
			printchar_(out, '-');
 8000d1a:	212d      	movs	r1, #45	@ 0x2d
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f7ff ff31 	bl	8000b84 <printchar_>
			++pc;
 8000d22:	3601      	adds	r6, #1
			--width;
 8000d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d26:	3b01      	subs	r3, #1
 8000d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d2a:	e002      	b.n	8000d32 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000d2c:	3c01      	subs	r4, #1
 8000d2e:	232d      	movs	r3, #45	@ 0x2d
 8000d30:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d36:	4621      	mov	r1, r4
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff ff43 	bl	8000bc4 <prints_>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4433      	add	r3, r6
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d4c <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d50:	b08a      	sub	sp, #40	@ 0x28
 8000d52:	af04      	add	r7, sp, #16
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000d5a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000d5c:	e0c4      	b.n	8000ee8 <print_+0x19c>
		if (*format == '%') {
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b25      	cmp	r3, #37	@ 0x25
 8000d64:	f040 80b3 	bne.w	8000ece <print_+0x182>
			++format;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80bc 	beq.w	8000ef4 <print_+0x1a8>
			if (*format == '%') goto out;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b25      	cmp	r3, #37	@ 0x25
 8000d82:	f000 80a6 	beq.w	8000ed2 <print_+0x186>
			if (*format == '-') {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d8c:	d109      	bne.n	8000da2 <print_+0x56>
				++format;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000d94:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000d96:	e004      	b.n	8000da2 <print_+0x56>
				++format;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000d9e:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b30      	cmp	r3, #48	@ 0x30
 8000da8:	d0f6      	beq.n	8000d98 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000daa:	e00b      	b.n	8000dc4 <print_+0x78>
				width *= 10;
 8000dac:	462b      	mov	r3, r5
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	442b      	add	r3, r5
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	461d      	mov	r5, r3
				width += *format - '0';
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3b30      	subs	r3, #48	@ 0x30
 8000dbc:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dca:	d903      	bls.n	8000dd4 <print_+0x88>
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b39      	cmp	r3, #57	@ 0x39
 8000dd2:	d9eb      	bls.n	8000dac <print_+0x60>
			}
			if( *format == 's' ) {
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b73      	cmp	r3, #115	@ 0x73
 8000dda:	d112      	bne.n	8000e02 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000de6:	f1b8 0f00 	cmp.w	r8, #0
 8000dea:	d001      	beq.n	8000df0 <print_+0xa4>
 8000dec:	4641      	mov	r1, r8
 8000dee:	e000      	b.n	8000df2 <print_+0xa6>
 8000df0:	4947      	ldr	r1, [pc, #284]	@ (8000f10 <print_+0x1c4>)
 8000df2:	4633      	mov	r3, r6
 8000df4:	462a      	mov	r2, r5
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff fee4 	bl	8000bc4 <prints_>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	441c      	add	r4, r3
				continue;
 8000e00:	e06f      	b.n	8000ee2 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b64      	cmp	r3, #100	@ 0x64
 8000e08:	d10f      	bne.n	8000e2a <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	1d1a      	adds	r2, r3, #4
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	2361      	movs	r3, #97	@ 0x61
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	9601      	str	r6, [sp, #4]
 8000e18:	9500      	str	r5, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff ff28 	bl	8000c74 <printi_>
 8000e24:	4603      	mov	r3, r0
 8000e26:	441c      	add	r4, r3
				continue;
 8000e28:	e05b      	b.n	8000ee2 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b78      	cmp	r3, #120	@ 0x78
 8000e30:	d10f      	bne.n	8000e52 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1d1a      	adds	r2, r3, #4
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	6819      	ldr	r1, [r3, #0]
 8000e3a:	2361      	movs	r3, #97	@ 0x61
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	9601      	str	r6, [sp, #4]
 8000e40:	9500      	str	r5, [sp, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	2210      	movs	r2, #16
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff ff14 	bl	8000c74 <printi_>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	441c      	add	r4, r3
				continue;
 8000e50:	e047      	b.n	8000ee2 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b58      	cmp	r3, #88	@ 0x58
 8000e58:	d10f      	bne.n	8000e7a <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	6819      	ldr	r1, [r3, #0]
 8000e62:	2341      	movs	r3, #65	@ 0x41
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	9601      	str	r6, [sp, #4]
 8000e68:	9500      	str	r5, [sp, #0]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff ff00 	bl	8000c74 <printi_>
 8000e74:	4603      	mov	r3, r0
 8000e76:	441c      	add	r4, r3
				continue;
 8000e78:	e033      	b.n	8000ee2 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b75      	cmp	r3, #117	@ 0x75
 8000e80:	d10f      	bne.n	8000ea2 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	2361      	movs	r3, #97	@ 0x61
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	9601      	str	r6, [sp, #4]
 8000e90:	9500      	str	r5, [sp, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	220a      	movs	r2, #10
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff feec 	bl	8000c74 <printi_>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	441c      	add	r4, r3
				continue;
 8000ea0:	e01f      	b.n	8000ee2 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b63      	cmp	r3, #99	@ 0x63
 8000ea8:	d11b      	bne.n	8000ee2 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	1d1a      	adds	r2, r3, #4
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000eba:	f107 0114 	add.w	r1, r7, #20
 8000ebe:	4633      	mov	r3, r6
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff fe7e 	bl	8000bc4 <prints_>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	441c      	add	r4, r3
				continue;
 8000ecc:	e009      	b.n	8000ee2 <print_+0x196>
			}
		}
		else {
		out:
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <print_+0x188>
			if (*format == '%') goto out;
 8000ed2:	bf00      	nop
			printchar_(out, *format);
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fe52 	bl	8000b84 <printchar_>
			++pc;
 8000ee0:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f47f af36 	bne.w	8000d5e <print_+0x12>
 8000ef2:	e000      	b.n	8000ef6 <print_+0x1aa>
			if (*format == '\0') break;
 8000ef4:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <print_+0x1b8>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000f04:	4623      	mov	r3, r4
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f10:	0800dec4 	.word	0x0800dec4

08000f14 <printf_>:

int printf_(const char *format, ...)
{
 8000f14:	b40f      	push	{r0, r1, r2, r3}
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ff10 	bl	8000d4c <print_>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f38:	b004      	add	sp, #16
 8000f3a:	4770      	bx	lr

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fb90 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f81c 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f7ff fcde 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f7ff fc74 	bl	8000838 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 f9fa 	bl	8001348 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f54:	f000 faae 	bl	80014b4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000f58:	f7ff fb3a 	bl	80005d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ucADC1Buffer, 2);
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4906      	ldr	r1, [pc, #24]	@ (8000f78 <main+0x3c>)
 8000f60:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <main+0x40>)
 8000f62:	f000 ff95 	bl	8001e90 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f66:	f00a f8b3 	bl	800b0d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f6a:	f7ff fc99 	bl	80008a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f6e:	f00a f8d3 	bl	800b118 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f72:	bf00      	nop
 8000f74:	e7fd      	b.n	8000f72 <main+0x36>
 8000f76:	bf00      	nop
 8000f78:	24000160 	.word	0x24000160
 8000f7c:	24000080 	.word	0x24000080

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09c      	sub	sp, #112	@ 0x70
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	224c      	movs	r2, #76	@ 0x4c
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00c fe7a 	bl	800dc88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2220      	movs	r2, #32
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00c fe74 	bl	800dc88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f004 fba1 	bl	80056e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <SystemClock_Config+0xf8>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	4a32      	ldr	r2, [pc, #200]	@ (8001078 <SystemClock_Config+0xf8>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fb6:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <SystemClock_Config+0xf8>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <SystemClock_Config+0xfc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800107c <SystemClock_Config+0xfc>)
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <SystemClock_Config+0xfc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fdc:	bf00      	nop
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <SystemClock_Config+0xfc>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fea:	d1f8      	bne.n	8000fde <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fec:	2303      	movs	r3, #3
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2340      	movs	r3, #64	@ 0x40
 8000ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	2302      	movs	r3, #2
 8001004:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800100a:	2312      	movs	r3, #18
 800100c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001012:	2303      	movs	r3, #3
 8001014:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800101a:	230c      	movs	r3, #12
 800101c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800101e:	2302      	movs	r3, #2
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001022:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001026:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4618      	mov	r0, r3
 800102e:	f004 fba5 	bl	800577c <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001038:	f000 f83e 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	233f      	movs	r3, #63	@ 0x3f
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2101      	movs	r1, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f004 ffe5 	bl	8006030 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800106c:	f000 f824 	bl	80010b8 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3770      	adds	r7, #112	@ 0x70
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58000400 	.word	0x58000400
 800107c:	58024800 	.word	0x58024800

08001080 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f000 fb19 	bl	80016dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_MspInit+0x38>)
 80010cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_MspInit+0x38>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_MspInit+0x38>)
 80010dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	210f      	movs	r1, #15
 80010ec:	f06f 0001 	mvn.w	r0, #1
 80010f0:	f001 fee8 	bl	8002ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400

08001100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	@ 0x40
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d827      	bhi.n	800115e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800110e:	2200      	movs	r2, #0
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	2036      	movs	r0, #54	@ 0x36
 8001114:	f001 fed6 	bl	8002ec4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001118:	2036      	movs	r0, #54	@ 0x36
 800111a:	f001 feed 	bl	8002ef8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800111e:	4a29      	ldr	r2, [pc, #164]	@ (80011c4 <HAL_InitTick+0xc4>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <HAL_InitTick+0xc8>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800112a:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <HAL_InitTick+0xc8>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_InitTick+0xc8>)
 8001136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001142:	f107 0210 	add.w	r2, r7, #16
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fafb 	bl	8006748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <HAL_InitTick+0x6a>
 800115c:	e001      	b.n	8001162 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e02b      	b.n	80011ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001162:	f005 fac5 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 8001166:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001168:	e004      	b.n	8001174 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800116a:	f005 fac1 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 800116e:	4603      	mov	r3, r0
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001176:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <HAL_InitTick+0xcc>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0c9b      	lsrs	r3, r3, #18
 800117e:	3b01      	subs	r3, #1
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <HAL_InitTick+0xd0>)
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_InitTick+0xd4>)
 8001186:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_InitTick+0xd0>)
 800118a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800118e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001190:	4a0f      	ldr	r2, [pc, #60]	@ (80011d0 <HAL_InitTick+0xd0>)
 8001192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001194:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_InitTick+0xd0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_InitTick+0xd0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <HAL_InitTick+0xd0>)
 80011a4:	f008 f810 	bl	80091c8 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <HAL_InitTick+0xd0>)
 80011b0:	f008 f86c 	bl	800928c <HAL_TIM_Base_Start_IT>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e000      	b.n	80011ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3740      	adds	r7, #64	@ 0x40
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000008 	.word	0x24000008
 80011c8:	58024400 	.word	0x58024400
 80011cc:	431bde83 	.word	0x431bde83
 80011d0:	24000168 	.word	0x24000168
 80011d4:	40001000 	.word	0x40001000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <DMA1_Stream0_IRQHandler+0x10>)
 8001216:	f002 fc43 	bl	8003aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	240000e4 	.word	0x240000e4

08001224 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f008 f8a7 	bl	800937c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000168 	.word	0x24000168

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800123c:	4b37      	ldr	r3, [pc, #220]	@ (800131c <SystemInit+0xe4>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001242:	4a36      	ldr	r2, [pc, #216]	@ (800131c <SystemInit+0xe4>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <SystemInit+0xe8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	2b06      	cmp	r3, #6
 8001256:	d807      	bhi.n	8001268 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <SystemInit+0xe8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 030f 	bic.w	r3, r3, #15
 8001260:	4a2f      	ldr	r2, [pc, #188]	@ (8001320 <SystemInit+0xe8>)
 8001262:	f043 0307 	orr.w	r3, r3, #7
 8001266:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <SystemInit+0xec>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a2d      	ldr	r2, [pc, #180]	@ (8001324 <SystemInit+0xec>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <SystemInit+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <SystemInit+0xec>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4929      	ldr	r1, [pc, #164]	@ (8001324 <SystemInit+0xec>)
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <SystemInit+0xf0>)
 8001282:	4013      	ands	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <SystemInit+0xe8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <SystemInit+0xe8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 030f 	bic.w	r3, r3, #15
 800129a:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <SystemInit+0xe8>)
 800129c:	f043 0307 	orr.w	r3, r3, #7
 80012a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <SystemInit+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <SystemInit+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <SystemInit+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <SystemInit+0xec>)
 80012b6:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <SystemInit+0xf4>)
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <SystemInit+0xec>)
 80012bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <SystemInit+0xf8>)
 80012be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <SystemInit+0xec>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <SystemInit+0xfc>)
 80012c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <SystemInit+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <SystemInit+0xec>)
 80012ce:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <SystemInit+0xfc>)
 80012d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <SystemInit+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <SystemInit+0xec>)
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <SystemInit+0xfc>)
 80012dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <SystemInit+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <SystemInit+0xec>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <SystemInit+0xec>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <SystemInit+0xec>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <SystemInit+0x100>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <SystemInit+0x104>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001302:	d202      	bcs.n	800130a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <SystemInit+0x108>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <SystemInit+0x10c>)
 800130c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001310:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	52002000 	.word	0x52002000
 8001324:	58024400 	.word	0x58024400
 8001328:	eaf6ed7f 	.word	0xeaf6ed7f
 800132c:	02020200 	.word	0x02020200
 8001330:	01ff0000 	.word	0x01ff0000
 8001334:	01010280 	.word	0x01010280
 8001338:	5c001000 	.word	0x5c001000
 800133c:	ffff0000 	.word	0xffff0000
 8001340:	51008108 	.word	0x51008108
 8001344:	52004000 	.word	0x52004000

08001348 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <MX_USART3_UART_Init+0x94>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001390:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 8001392:	f008 f9e7 	bl	8009764 <HAL_UART_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800139c:	f7ff fe8c 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 80013a4:	f009 fa7d 	bl	800a8a2 <HAL_UARTEx_SetTxFifoThreshold>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ae:	f7ff fe83 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 80013b6:	f009 fab2 	bl	800a91e <HAL_UARTEx_SetRxFifoThreshold>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f7ff fe7a 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_USART3_UART_Init+0x90>)
 80013c6:	f009 fa33 	bl	800a830 <HAL_UARTEx_DisableFifoMode>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f7ff fe72 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	240001b4 	.word	0x240001b4
 80013dc:	40004800 	.word	0x40004800

080013e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ba      	sub	sp, #232	@ 0xe8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	22c0      	movs	r2, #192	@ 0xc0
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00c fc41 	bl	800dc88 <memset>
  if(uartHandle->Instance==USART3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <HAL_UART_MspInit+0xc8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d146      	bne.n	800149e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001410:	f04f 0202 	mov.w	r2, #2
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4618      	mov	r0, r3
 8001428:	f005 f9d0 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001432:	f7ff fe41 	bl	80010b8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 8001438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001442:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800144c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <HAL_UART_MspInit+0xcc>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001472:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800148c:	2307      	movs	r3, #7
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <HAL_UART_MspInit+0xd0>)
 800149a:	f003 fe13 	bl	80050c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	37e8      	adds	r7, #232	@ 0xe8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40004800 	.word	0x40004800
 80014ac:	58024400 	.word	0x58024400
 80014b0:	58020c00 	.word	0x58020c00

080014b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c0:	2209      	movs	r2, #9
 80014c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fc:	f003 ffc3 	bl	8005486 <HAL_PCD_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001506:	f7ff fdd7 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	24000248 	.word	0x24000248
 8001514:	40080000 	.word	0x40080000

08001518 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0ba      	sub	sp, #232	@ 0xe8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	22c0      	movs	r2, #192	@ 0xc0
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f00c fba5 	bl	800dc88 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <HAL_PCD_MspInit+0xec>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d159      	bne.n	80015fc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001548:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001554:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f005 f933 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800156c:	f7ff fda4 	bl	80010b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001570:	f004 f8f4 	bl	800575c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001592:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015ac:	230a      	movs	r3, #10
 80015ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4814      	ldr	r0, [pc, #80]	@ (800160c <HAL_PCD_MspInit+0xf4>)
 80015ba:	f003 fd83 	bl	80050c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <HAL_PCD_MspInit+0xf4>)
 80015da:	f003 fd73 	bl	80050c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 80015e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015e4:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 80015e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_PCD_MspInit+0xf0>)
 80015f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015fc:	bf00      	nop
 80015fe:	37e8      	adds	r7, #232	@ 0xe8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40080000 	.word	0x40080000
 8001608:	58024400 	.word	0x58024400
 800160c:	58020000 	.word	0x58020000

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff fe10 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f00c fb81 	bl	800dd44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fc7b 	bl	8000f3c <main>
  bx  lr
 8001646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800164c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001650:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001654:	0800df58 	.word	0x0800df58
  ldr r2, =_sbss
 8001658:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800165c:	240657e8 	.word	0x240657e8

08001660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC3_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166a:	2003      	movs	r0, #3
 800166c:	f001 fc1f 	bl	8002eae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001670:	f004 fe94 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8001674:	4602      	mov	r2, r0
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	4913      	ldr	r1, [pc, #76]	@ (80016d0 <HAL_Init+0x6c>)
 8001682:	5ccb      	ldrb	r3, [r1, r3]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_Init+0x6c>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_Init+0x70>)
 80016a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_Init+0x74>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff fd26 	bl	8001100 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e002      	b.n	80016c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fd01 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024400 	.word	0x58024400
 80016d0:	0800df08 	.word	0x0800df08
 80016d4:	24000004 	.word	0x24000004
 80016d8:	24000000 	.word	0x24000000

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2400000c 	.word	0x2400000c
 8001700:	2400072c 	.word	0x2400072c

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2400072c 	.word	0x2400072c

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2400000c 	.word	0x2400000c

08001764 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetREVID+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1b      	lsrs	r3, r3, #16
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	5c001000 	.word	0x5c001000

0800177c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3360      	adds	r3, #96	@ 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3360      	adds	r3, #96	@ 0x60
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
  }
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b087      	sub	sp, #28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3330      	adds	r3, #48	@ 0x30
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	4413      	add	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	211f      	movs	r1, #31
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	f003 011f 	and.w	r1, r3, #31
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f023 0203 	bic.w	r2, r3, #3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3314      	adds	r3, #20
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	0e5b      	lsrs	r3, r3, #25
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	0d1b      	lsrs	r3, r3, #20
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	2107      	movs	r1, #7
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0d1b      	lsrs	r3, r3, #20
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0318 	and.w	r3, r3, #24
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019ac:	40d9      	lsrs	r1, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	400b      	ands	r3, r1
 80019b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	000fffff 	.word	0x000fffff

080019d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 031f 	and.w	r3, r3, #31
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <LL_ADC_DisableDeepPowerDown+0x20>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	5fffffc0 	.word	0x5fffffc0

08001a10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	6fffffc0 	.word	0x6fffffc0

08001a60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <LL_ADC_Enable+0x24>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	7fffffc0 	.word	0x7fffffc0

08001ab0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <LL_ADC_IsEnabled+0x18>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_ADC_IsEnabled+0x1a>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <LL_ADC_REG_StartConversion+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	7fffffc0 	.word	0x7fffffc0

08001b00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d101      	bne.n	8001b18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e18f      	b.n	8001e86 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe fdb5 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff3f 	bl	8001a10 <LL_ADC_IsDeepPowerDownEnabled>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff25 	bl	80019ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff5a 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d114      	bne.n	8001bdc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff3e 	bl	8001a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bbc:	4b87      	ldr	r3, [pc, #540]	@ (8001ddc <HAL_ADC_Init+0x290>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	4a87      	ldr	r2, [pc, #540]	@ (8001de0 <HAL_ADC_Init+0x294>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f9      	bne.n	8001bd0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff3d 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff77 	bl	8001b00 <LL_ADC_REG_IsConversionOngoing>
 8001c12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f040 8129 	bne.w	8001e74 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 8125 	bne.w	8001e74 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c32:	f043 0202 	orr.w	r2, r3, #2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff36 	bl	8001ab0 <LL_ADC_IsEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d136      	bne.n	8001cb8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_ADC_Init+0x298>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_Init+0x112>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a63      	ldr	r2, [pc, #396]	@ (8001de8 <HAL_ADC_Init+0x29c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10e      	bne.n	8001c7c <HAL_ADC_Init+0x130>
 8001c5e:	4861      	ldr	r0, [pc, #388]	@ (8001de4 <HAL_ADC_Init+0x298>)
 8001c60:	f7ff ff26 	bl	8001ab0 <LL_ADC_IsEnabled>
 8001c64:	4604      	mov	r4, r0
 8001c66:	4860      	ldr	r0, [pc, #384]	@ (8001de8 <HAL_ADC_Init+0x29c>)
 8001c68:	f7ff ff22 	bl	8001ab0 <LL_ADC_IsEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e008      	b.n	8001c8e <HAL_ADC_Init+0x142>
 8001c7c:	485b      	ldr	r0, [pc, #364]	@ (8001dec <HAL_ADC_Init+0x2a0>)
 8001c7e:	f7ff ff17 	bl	8001ab0 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a53      	ldr	r2, [pc, #332]	@ (8001de4 <HAL_ADC_Init+0x298>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_Init+0x15a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	@ (8001de8 <HAL_ADC_Init+0x29c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x15e>
 8001ca6:	4a52      	ldr	r2, [pc, #328]	@ (8001df0 <HAL_ADC_Init+0x2a4>)
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x160>
 8001caa:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <HAL_ADC_Init+0x2a8>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff fd62 	bl	800177c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cb8:	f7ff fd54 	bl	8001764 <HAL_GetREVID>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d914      	bls.n	8001cf0 <HAL_ADC_Init+0x1a4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d110      	bne.n	8001cf0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7d5b      	ldrb	r3, [r3, #21]
 8001cd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7f1b      	ldrb	r3, [r3, #28]
 8001ce4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ce6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ce8:	f043 030c 	orr.w	r3, r3, #12
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e00d      	b.n	8001d0c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7d5b      	ldrb	r3, [r3, #21]
 8001cf4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cfa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d00:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7f1b      	ldrb	r3, [r3, #28]
 8001d06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7f1b      	ldrb	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	045b      	lsls	r3, r3, #17
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_ADC_Init+0x2ac>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fed2 	bl	8001b00 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fedf 	bl	8001b26 <LL_ADC_INJ_IsConversionOngoing>
 8001d68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d15f      	bne.n	8001e30 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d15c      	bne.n	8001e30 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7d1b      	ldrb	r3, [r3, #20]
 8001d7a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_ADC_Init+0x2b0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d130      	bne.n	8001e04 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_ADC_Init+0x2b4>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0411      	lsls	r1, r2, #16
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dbe:	4311      	orrs	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dc4:	4311      	orrs	r1, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	e01c      	b.n	8001e14 <HAL_ADC_Init+0x2c8>
 8001dda:	bf00      	nop
 8001ddc:	24000000 	.word	0x24000000
 8001de0:	053e2d63 	.word	0x053e2d63
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40022100 	.word	0x40022100
 8001dec:	58026000 	.word	0x58026000
 8001df0:	40022300 	.word	0x40022300
 8001df4:	58026300 	.word	0x58026300
 8001df8:	fff0c003 	.word	0xfff0c003
 8001dfc:	ffffbffc 	.word	0xffffbffc
 8001e00:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fd82 	bl	8002934 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10c      	bne.n	8001e52 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f023 010f 	bic.w	r1, r3, #15
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 020f 	bic.w	r2, r2, #15
 8001e60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e72:	e007      	b.n	8001e84 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	f043 0210 	orr.w	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	bf00      	nop

08001e90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a55      	ldr	r2, [pc, #340]	@ (8001ff8 <HAL_ADC_Start_DMA+0x168>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_Start_DMA+0x20>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a54      	ldr	r2, [pc, #336]	@ (8001ffc <HAL_ADC_Start_DMA+0x16c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_Start_DMA+0x24>
 8001eb0:	4b53      	ldr	r3, [pc, #332]	@ (8002000 <HAL_ADC_Start_DMA+0x170>)
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Start_DMA+0x26>
 8001eb4:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_ADC_Start_DMA+0x174>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd8a 	bl	80019d0 <LL_ADC_GetMultimode>
 8001ebc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe1c 	bl	8001b00 <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 808c 	bne.w	8001fe8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Start_DMA+0x4e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e087      	b.n	8001fee <HAL_ADC_Start_DMA+0x15e>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d002      	beq.n	8001ef8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d170      	bne.n	8001fda <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fbfd 	bl	80026f8 <ADC_Enable>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d163      	bne.n	8001fd0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <HAL_ADC_Start_DMA+0x178>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a37      	ldr	r2, [pc, #220]	@ (8001ffc <HAL_ADC_Start_DMA+0x16c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d002      	beq.n	8001f28 <HAL_ADC_Start_DMA+0x98>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_Start_DMA+0x9a>
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_ADC_Start_DMA+0x168>)
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d002      	beq.n	8001f38 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f023 0206 	bic.w	r2, r3, #6
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f68:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_ADC_Start_DMA+0x17c>)
 8001f6a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <HAL_ADC_Start_DMA+0x180>)
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a26      	ldr	r2, [pc, #152]	@ (8002014 <HAL_ADC_Start_DMA+0x184>)
 8001f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	221c      	movs	r2, #28
 8001f82:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0210 	orr.w	r2, r2, #16
 8001f9a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7ff fcaf 	bl	800190a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3340      	adds	r3, #64	@ 0x40
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f001 fb06 	bl	80035cc <HAL_DMA_Start_IT>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd85 	bl	8001ad8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fce:	e00d      	b.n	8001fec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001fd8:	e008      	b.n	8001fec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022100 	.word	0x40022100
 8002000:	40022300 	.word	0x40022300
 8002004:	58026300 	.word	0x58026300
 8002008:	fffff0fe 	.word	0xfffff0fe
 800200c:	0800280d 	.word	0x0800280d
 8002010:	080028e5 	.word	0x080028e5
 8002014:	08002901 	.word	0x08002901

08002018 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b0a1      	sub	sp, #132	@ 0x84
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a65      	ldr	r2, [pc, #404]	@ (80021f0 <HAL_ADC_ConfigChannel+0x1b0>)
 800205a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x2a>
 8002066:	2302      	movs	r3, #2
 8002068:	e32e      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x688>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fd42 	bl	8001b00 <LL_ADC_REG_IsConversionOngoing>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 8313 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db2c      	blt.n	80020e6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x6a>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	e016      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x98>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ba:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80020c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	69d1      	ldr	r1, [r2, #28]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f7ff fbdd 	bl	80018b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fcff 	bl	8001b00 <LL_ADC_REG_IsConversionOngoing>
 8002102:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fd0c 	bl	8001b26 <LL_ADC_INJ_IsConversionOngoing>
 800210e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80b8 	bne.w	8002288 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80b4 	bne.w	8002288 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	461a      	mov	r2, r3
 800212e:	f7ff fbff 	bl	8001930 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002132:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800213a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x118>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	e01d      	b.n	8002194 <HAL_ADC_ConfigChannel+0x154>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_ADC_ConfigChannel+0x13e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	e00a      	b.n	8002194 <HAL_ADC_ConfigChannel+0x154>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d02c      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ac:	f7ff fb1a 	bl	80017e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6919      	ldr	r1, [r3, #16]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	7e5b      	ldrb	r3, [r3, #25]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x186>
 80021c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x188>
 80021c6:	2300      	movs	r3, #0
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7ff fb44 	bl	8001856 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6919      	ldr	r1, [r3, #16]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7e1b      	ldrb	r3, [r3, #24]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1a4>
 80021de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1a6>
 80021e4:	2300      	movs	r3, #0
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fb1c 	bl	8001824 <LL_ADC_SetDataRightShift>
 80021ec:	e04c      	b.n	8002288 <HAL_ADC_ConfigChannel+0x248>
 80021ee:	bf00      	nop
 80021f0:	47ff0000 	.word	0x47ff0000
 80021f4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800221a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	069b      	lsls	r3, r3, #26
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800223e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	069b      	lsls	r3, r3, #26
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002262:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	069b      	lsls	r3, r3, #26
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002286:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fc0f 	bl	8001ab0 <LL_ADC_IsEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 8211 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f7ff fb6e 	bl	8001988 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4aa1      	ldr	r2, [pc, #644]	@ (8002538 <HAL_ADC_ConfigChannel+0x4f8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f040 812e 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x2a0>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	3301      	adds	r3, #1
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e019      	b.n	8002314 <HAL_ADC_ConfigChannel+0x2d4>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80022fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2b09      	cmp	r3, #9
 800230c:	bf94      	ite	ls
 800230e:	2301      	movls	r3, #1
 8002310:	2300      	movhi	r3, #0
 8002312:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002314:	2b00      	cmp	r3, #0
 8002316:	d079      	beq.n	800240c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x2f4>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	069b      	lsls	r3, r3, #26
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002332:	e015      	b.n	8002360 <HAL_ADC_ConfigChannel+0x320>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002344:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e003      	b.n	8002358 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x340>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	3301      	adds	r3, #1
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	e017      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x370>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800238e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002390:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e003      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800239c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x396>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	051b      	lsls	r3, r3, #20
 80023d4:	e018      	b.n	8002408 <HAL_ADC_ConfigChannel+0x3c8>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e003      	b.n	80023fa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80023f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002408:	430b      	orrs	r3, r1
 800240a:	e07e      	b.n	800250a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x3e8>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	3301      	adds	r3, #1
 8002420:	069b      	lsls	r3, r3, #26
 8002422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002426:	e015      	b.n	8002454 <HAL_ADC_ConfigChannel+0x414>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800243a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e003      	b.n	800244c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	069b      	lsls	r3, r3, #26
 8002450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x434>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	e017      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x464>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	61bb      	str	r3, [r7, #24]
  return result;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	e003      	b.n	8002498 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x490>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	051b      	lsls	r3, r3, #20
 80024ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	e01b      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4c8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	60fb      	str	r3, [r7, #12]
  return result;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	3b1e      	subs	r3, #30
 8002502:	051b      	lsls	r3, r3, #20
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	430b      	orrs	r3, r1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff fa0e 	bl	8001930 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f280 80cf 	bge.w	80026bc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a06      	ldr	r2, [pc, #24]	@ (800253c <HAL_ADC_ConfigChannel+0x4fc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x4f2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_ADC_ConfigChannel+0x500>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x508>
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <HAL_ADC_ConfigChannel+0x504>)
 8002534:	e009      	b.n	800254a <HAL_ADC_ConfigChannel+0x50a>
 8002536:	bf00      	nop
 8002538:	47ff0000 	.word	0x47ff0000
 800253c:	40022000 	.word	0x40022000
 8002540:	40022100 	.word	0x40022100
 8002544:	40022300 	.word	0x40022300
 8002548:	4b61      	ldr	r3, [pc, #388]	@ (80026d0 <HAL_ADC_ConfigChannel+0x690>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f93c 	bl	80017c8 <LL_ADC_GetCommonPathInternalCh>
 8002550:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x526>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5d      	ldr	r2, [pc, #372]	@ (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10e      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x544>
 8002566:	485b      	ldr	r0, [pc, #364]	@ (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 8002568:	f7ff faa2 	bl	8001ab0 <LL_ADC_IsEnabled>
 800256c:	4604      	mov	r4, r0
 800256e:	485a      	ldr	r0, [pc, #360]	@ (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 8002570:	f7ff fa9e 	bl	8001ab0 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e008      	b.n	8002596 <HAL_ADC_ConfigChannel+0x556>
 8002584:	4855      	ldr	r0, [pc, #340]	@ (80026dc <HAL_ADC_ConfigChannel+0x69c>)
 8002586:	f7ff fa93 	bl	8001ab0 <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d07d      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_ADC_ConfigChannel+0x6a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d130      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x5c6>
 80025a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12b      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a4a      	ldr	r2, [pc, #296]	@ (80026dc <HAL_ADC_ConfigChannel+0x69c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f040 8081 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a45      	ldr	r2, [pc, #276]	@ (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x58e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a43      	ldr	r2, [pc, #268]	@ (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x592>
 80025ce:	4a45      	ldr	r2, [pc, #276]	@ (80026e4 <HAL_ADC_ConfigChannel+0x6a4>)
 80025d0:	e000      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x594>
 80025d2:	4a3f      	ldr	r2, [pc, #252]	@ (80026d0 <HAL_ADC_ConfigChannel+0x690>)
 80025d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7ff f8e0 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e2:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_ADC_ConfigChannel+0x6a8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_ADC_ConfigChannel+0x6ac>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	3301      	adds	r3, #1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025f6:	e002      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f9      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002604:	e05a      	b.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a39      	ldr	r2, [pc, #228]	@ (80026f0 <HAL_ADC_ConfigChannel+0x6b0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d11e      	bne.n	800264e <HAL_ADC_ConfigChannel+0x60e>
 8002610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2f      	ldr	r2, [pc, #188]	@ (80026dc <HAL_ADC_ConfigChannel+0x69c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d14b      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2a      	ldr	r2, [pc, #168]	@ (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x5f8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a29      	ldr	r2, [pc, #164]	@ (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x5fc>
 8002638:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <HAL_ADC_ConfigChannel+0x6a4>)
 800263a:	e000      	b.n	800263e <HAL_ADC_ConfigChannel+0x5fe>
 800263c:	4a24      	ldr	r2, [pc, #144]	@ (80026d0 <HAL_ADC_ConfigChannel+0x690>)
 800263e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002640:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f7ff f8ab 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264c:	e036      	b.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d131      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
 8002658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d12c      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_ADC_ConfigChannel+0x69c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d127      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x640>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x644>
 8002680:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002682:	e000      	b.n	8002686 <HAL_ADC_ConfigChannel+0x646>
 8002684:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_ADC_ConfigChannel+0x690>)
 8002686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002688:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f7ff f887 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
 8002694:	e012      	b.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026a8:	e008      	b.n	80026bc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3784      	adds	r7, #132	@ 0x84
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	58026300 	.word	0x58026300
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40022100 	.word	0x40022100
 80026dc:	58026000 	.word	0x58026000
 80026e0:	cb840000 	.word	0xcb840000
 80026e4:	40022300 	.word	0x40022300
 80026e8:	24000000 	.word	0x24000000
 80026ec:	053e2d63 	.word	0x053e2d63
 80026f0:	c7520000 	.word	0xc7520000
 80026f4:	cfb80000 	.word	0xcfb80000

080026f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f9d3 	bl	8001ab0 <LL_ADC_IsEnabled>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d16e      	bne.n	80027ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <ADC_Enable+0x100>)
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e05a      	b.n	80027f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f9a2 	bl	8001a88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002744:	f7fe ffde 	bl	8001704 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <ADC_Enable+0x104>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <ADC_Enable+0x66>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a29      	ldr	r2, [pc, #164]	@ (8002800 <ADC_Enable+0x108>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <ADC_Enable+0x6a>
 800275e:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <ADC_Enable+0x10c>)
 8002760:	e000      	b.n	8002764 <ADC_Enable+0x6c>
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <ADC_Enable+0x110>)
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f933 	bl	80019d0 <LL_ADC_GetMultimode>
 800276a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <ADC_Enable+0x108>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d002      	beq.n	800277c <ADC_Enable+0x84>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	e000      	b.n	800277e <ADC_Enable+0x86>
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <ADC_Enable+0x104>)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	4293      	cmp	r3, r2
 8002784:	d02c      	beq.n	80027e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d130      	bne.n	80027ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800278c:	e028      	b.n	80027e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f98c 	bl	8001ab0 <LL_ADC_IsEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d104      	bne.n	80027a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f970 	bl	8001a88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a8:	f7fe ffac 	bl	8001704 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d914      	bls.n	80027e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00d      	beq.n	80027e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d1cf      	bne.n	800278e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	8000003f 	.word	0x8000003f
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022100 	.word	0x40022100
 8002804:	40022300 	.word	0x40022300
 8002808:	58026300 	.word	0x58026300

0800280c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14b      	bne.n	80028be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d021      	beq.n	8002884 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f821 	bl	800188c <LL_ADC_REG_IsTriggerSourceSWStart>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12b      	bne.n	80028b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11f      	bne.n	80028b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
 8002882:	e018      	b.n	80028b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d111      	bne.n	80028b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7fe fbe2 	bl	8001080 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028bc:	e00e      	b.n	80028dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fbae 	bl	800202c <HAL_ADC_ErrorCallback>
}
 80028d0:	e004      	b.n	80028dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fb90 	bl	8002018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fb80 	bl	800202c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7a      	ldr	r2, [pc, #488]	@ (8002b2c <ADC_ConfigureBoostMode+0x1f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <ADC_ConfigureBoostMode+0x1c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a79      	ldr	r2, [pc, #484]	@ (8002b30 <ADC_ConfigureBoostMode+0x1fc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d109      	bne.n	8002964 <ADC_ConfigureBoostMode+0x30>
 8002950:	4b78      	ldr	r3, [pc, #480]	@ (8002b34 <ADC_ConfigureBoostMode+0x200>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e008      	b.n	8002976 <ADC_ConfigureBoostMode+0x42>
 8002964:	4b74      	ldr	r3, [pc, #464]	@ (8002b38 <ADC_ConfigureBoostMode+0x204>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01c      	beq.n	80029b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800297a:	f003 fe89 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 800297e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002988:	d010      	beq.n	80029ac <ADC_ConfigureBoostMode+0x78>
 800298a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800298e:	d873      	bhi.n	8002a78 <ADC_ConfigureBoostMode+0x144>
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d002      	beq.n	800299c <ADC_ConfigureBoostMode+0x68>
 8002996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800299a:	d16d      	bne.n	8002a78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	60fb      	str	r3, [r7, #12]
        break;
 80029aa:	e068      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	60fb      	str	r3, [r7, #12]
        break;
 80029b2:	e064      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	f005 f910 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
 80029c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029ca:	d051      	beq.n	8002a70 <ADC_ConfigureBoostMode+0x13c>
 80029cc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80029d0:	d854      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 80029d2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029d6:	d047      	beq.n	8002a68 <ADC_ConfigureBoostMode+0x134>
 80029d8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029dc:	d84e      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 80029de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029e2:	d03d      	beq.n	8002a60 <ADC_ConfigureBoostMode+0x12c>
 80029e4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029e8:	d848      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 80029ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ee:	d033      	beq.n	8002a58 <ADC_ConfigureBoostMode+0x124>
 80029f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f4:	d842      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 80029f6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029fa:	d029      	beq.n	8002a50 <ADC_ConfigureBoostMode+0x11c>
 80029fc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a00:	d83c      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 8002a02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a06:	d01a      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x10a>
 8002a08:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a0c:	d836      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 8002a0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a12:	d014      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x10a>
 8002a14:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a18:	d830      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 8002a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1e:	d00e      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x10a>
 8002a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a24:	d82a      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 8002a26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a2a:	d008      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x10a>
 8002a2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a30:	d824      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x148>
 8002a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a36:	d002      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x10a>
 8002a38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a3c:	d11e      	bne.n	8002a7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	60fb      	str	r3, [r7, #12]
        break;
 8002a4e:	e016      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
        break;
 8002a56:	e012      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	60fb      	str	r3, [r7, #12]
        break;
 8002a5e:	e00e      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	60fb      	str	r3, [r7, #12]
        break;
 8002a66:	e00a      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	09db      	lsrs	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
        break;
 8002a6e:	e006      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	60fb      	str	r3, [r7, #12]
        break;
 8002a76:	e002      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a7c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a7e:	f7fe fe71 	bl	8001764 <HAL_GetREVID>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d815      	bhi.n	8002ab8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b3c <ADC_ConfigureBoostMode+0x208>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d908      	bls.n	8002aa6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002aa4:	e03e      	b.n	8002b24 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	e035      	b.n	8002b24 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <ADC_ConfigureBoostMode+0x20c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d808      	bhi.n	8002ad8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ad4:	609a      	str	r2, [r3, #8]
}
 8002ad6:	e025      	b.n	8002b24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <ADC_ConfigureBoostMode+0x210>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d80a      	bhi.n	8002af6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	e016      	b.n	8002b24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <ADC_ConfigureBoostMode+0x214>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d80a      	bhi.n	8002b14 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	e007      	b.n	8002b24 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40022100 	.word	0x40022100
 8002b34:	40022300 	.word	0x40022300
 8002b38:	58026300 	.word	0x58026300
 8002b3c:	01312d00 	.word	0x01312d00
 8002b40:	005f5e10 	.word	0x005f5e10
 8002b44:	00bebc20 	.word	0x00bebc20
 8002b48:	017d7840 	.word	0x017d7840

08002b4c <LL_ADC_IsEnabled>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <LL_ADC_IsEnabled+0x18>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <LL_ADC_IsEnabled+0x1a>
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b09f      	sub	sp, #124	@ 0x7c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0be      	b.n	8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5c      	ldr	r2, [pc, #368]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d102      	bne.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e001      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e09d      	b.n	8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ffb9 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002c00:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffb3 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d17f      	bne.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d17c      	bne.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a47      	ldr	r2, [pc, #284]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a46      	ldr	r2, [pc, #280]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c2c:	4b45      	ldr	r3, [pc, #276]	@ (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c2e:	e000      	b.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c30:	4b45      	ldr	r3, [pc, #276]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c32:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d039      	beq.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a38      	ldr	r2, [pc, #224]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10e      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c62:	4836      	ldr	r0, [pc, #216]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c64:	f7ff ff72 	bl	8002b4c <LL_ADC_IsEnabled>
 8002c68:	4604      	mov	r4, r0
 8002c6a:	4835      	ldr	r0, [pc, #212]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c6c:	f7ff ff6e 	bl	8002b4c <LL_ADC_IsEnabled>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4323      	orrs	r3, r4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e008      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c80:	4832      	ldr	r0, [pc, #200]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c82:	f7ff ff63 	bl	8002b4c <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d047      	beq.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	6892      	ldr	r2, [r2, #8]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cae:	e03a      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10e      	bne.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002cd0:	481a      	ldr	r0, [pc, #104]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cd2:	f7ff ff3b 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4819      	ldr	r0, [pc, #100]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cda:	f7ff ff37 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4323      	orrs	r3, r4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e008      	b.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cee:	4817      	ldr	r0, [pc, #92]	@ (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cf0:	f7ff ff2c 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d0e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d10:	e009      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d24:	e000      	b.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d26:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d30:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	377c      	adds	r7, #124	@ 0x7c
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40022100 	.word	0x40022100
 8002d44:	40022300 	.word	0x40022300
 8002d48:	58026300 	.word	0x58026300
 8002d4c:	58026000 	.word	0x58026000
 8002d50:	fffff0e0 	.word	0xfffff0e0

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x40>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	@ (8002d94 <__NVIC_SetPriorityGrouping+0x40>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	05fa0000 	.word	0x05fa0000

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4907      	ldr	r1, [pc, #28]	@ (8002df0 <__NVIC_EnableIRQ+0x38>)
 8002dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	@ (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	@ (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff4c 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed2:	f7ff ff63 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002ed6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	6978      	ldr	r0, [r7, #20]
 8002ede:	f7ff ffb3 	bl	8002e48 <NVIC_EncodePriority>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff82 	bl	8002df4 <__NVIC_SetPriority>
}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff56 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7fe fbf2 	bl	8001704 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e316      	b.n	800355a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a66      	ldr	r2, [pc, #408]	@ (80030cc <HAL_DMA_Init+0x1b8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04a      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a65      	ldr	r2, [pc, #404]	@ (80030d0 <HAL_DMA_Init+0x1bc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d045      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a63      	ldr	r2, [pc, #396]	@ (80030d4 <HAL_DMA_Init+0x1c0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a62      	ldr	r2, [pc, #392]	@ (80030d8 <HAL_DMA_Init+0x1c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d03b      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a60      	ldr	r2, [pc, #384]	@ (80030dc <HAL_DMA_Init+0x1c8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d036      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_DMA_Init+0x1cc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <HAL_DMA_Init+0x1d0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02c      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5c      	ldr	r2, [pc, #368]	@ (80030e8 <HAL_DMA_Init+0x1d4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d027      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5a      	ldr	r2, [pc, #360]	@ (80030ec <HAL_DMA_Init+0x1d8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a59      	ldr	r2, [pc, #356]	@ (80030f0 <HAL_DMA_Init+0x1dc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d01d      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a57      	ldr	r2, [pc, #348]	@ (80030f4 <HAL_DMA_Init+0x1e0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a56      	ldr	r2, [pc, #344]	@ (80030f8 <HAL_DMA_Init+0x1e4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_DMA_Init+0x1e8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a53      	ldr	r2, [pc, #332]	@ (8003100 <HAL_DMA_Init+0x1ec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	@ (8003104 <HAL_DMA_Init+0x1f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_Init+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a50      	ldr	r2, [pc, #320]	@ (8003108 <HAL_DMA_Init+0x1f4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Init+0xbc>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_DMA_Init+0xbe>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 813b 	beq.w	800324e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a37      	ldr	r2, [pc, #220]	@ (80030cc <HAL_DMA_Init+0x1b8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d04a      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a36      	ldr	r2, [pc, #216]	@ (80030d0 <HAL_DMA_Init+0x1bc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d045      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <HAL_DMA_Init+0x1c0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d040      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a33      	ldr	r2, [pc, #204]	@ (80030d8 <HAL_DMA_Init+0x1c4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d03b      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_DMA_Init+0x1c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d036      	beq.n	8003088 <HAL_DMA_Init+0x174>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a30      	ldr	r2, [pc, #192]	@ (80030e0 <HAL_DMA_Init+0x1cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d031      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <HAL_DMA_Init+0x1d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d02c      	beq.n	8003088 <HAL_DMA_Init+0x174>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_DMA_Init+0x1d4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d027      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2b      	ldr	r2, [pc, #172]	@ (80030ec <HAL_DMA_Init+0x1d8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2a      	ldr	r2, [pc, #168]	@ (80030f0 <HAL_DMA_Init+0x1dc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01d      	beq.n	8003088 <HAL_DMA_Init+0x174>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	@ (80030f4 <HAL_DMA_Init+0x1e0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <HAL_DMA_Init+0x1e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	@ (80030fc <HAL_DMA_Init+0x1e8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_DMA_Init+0x174>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a24      	ldr	r2, [pc, #144]	@ (8003100 <HAL_DMA_Init+0x1ec>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_DMA_Init+0x174>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <HAL_DMA_Init+0x1f0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_DMA_Init+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	@ (8003108 <HAL_DMA_Init+0x1f4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <HAL_DMA_Init+0x186>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e007      	b.n	80030aa <HAL_DMA_Init+0x196>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030aa:	e02f      	b.n	800310c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ac:	f7fe fb2a 	bl	8001704 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d928      	bls.n	800310c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e246      	b.n	800355a <HAL_DMA_Init+0x646>
 80030cc:	40020010 	.word	0x40020010
 80030d0:	40020028 	.word	0x40020028
 80030d4:	40020040 	.word	0x40020040
 80030d8:	40020058 	.word	0x40020058
 80030dc:	40020070 	.word	0x40020070
 80030e0:	40020088 	.word	0x40020088
 80030e4:	400200a0 	.word	0x400200a0
 80030e8:	400200b8 	.word	0x400200b8
 80030ec:	40020410 	.word	0x40020410
 80030f0:	40020428 	.word	0x40020428
 80030f4:	40020440 	.word	0x40020440
 80030f8:	40020458 	.word	0x40020458
 80030fc:	40020470 	.word	0x40020470
 8003100:	40020488 	.word	0x40020488
 8003104:	400204a0 	.word	0x400204a0
 8003108:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1c8      	bne.n	80030ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4b83      	ldr	r3, [pc, #524]	@ (8003334 <HAL_DMA_Init+0x420>)
 8003126:	4013      	ands	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003132:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	4313      	orrs	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003170:	4b71      	ldr	r3, [pc, #452]	@ (8003338 <HAL_DMA_Init+0x424>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b71      	ldr	r3, [pc, #452]	@ (800333c <HAL_DMA_Init+0x428>)
 8003176:	4013      	ands	r3, r2
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800317c:	d328      	bcc.n	80031d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b28      	cmp	r3, #40	@ 0x28
 8003184:	d903      	bls.n	800318e <HAL_DMA_Init+0x27a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b2e      	cmp	r3, #46	@ 0x2e
 800318c:	d917      	bls.n	80031be <HAL_DMA_Init+0x2aa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b3e      	cmp	r3, #62	@ 0x3e
 8003194:	d903      	bls.n	800319e <HAL_DMA_Init+0x28a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b42      	cmp	r3, #66	@ 0x42
 800319c:	d90f      	bls.n	80031be <HAL_DMA_Init+0x2aa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b46      	cmp	r3, #70	@ 0x46
 80031a4:	d903      	bls.n	80031ae <HAL_DMA_Init+0x29a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b48      	cmp	r3, #72	@ 0x48
 80031ac:	d907      	bls.n	80031be <HAL_DMA_Init+0x2aa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80031b4:	d905      	bls.n	80031c2 <HAL_DMA_Init+0x2ae>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b52      	cmp	r3, #82	@ 0x52
 80031bc:	d801      	bhi.n	80031c2 <HAL_DMA_Init+0x2ae>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_DMA_Init+0x2b0>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d117      	bne.n	800322a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f001 fdcf 	bl	8004db0 <DMA_CheckFifoParam>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2240      	movs	r2, #64	@ 0x40
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e197      	b.n	800355a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f001 fd0a 	bl	8004c4c <DMA_CalcBaseAndBitshift>
 8003238:	4603      	mov	r3, r0
 800323a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	223f      	movs	r2, #63	@ 0x3f
 8003246:	409a      	lsls	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	e0cd      	b.n	80033ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a3b      	ldr	r2, [pc, #236]	@ (8003340 <HAL_DMA_Init+0x42c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_Init+0x38a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a39      	ldr	r2, [pc, #228]	@ (8003344 <HAL_DMA_Init+0x430>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_Init+0x38a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a38      	ldr	r2, [pc, #224]	@ (8003348 <HAL_DMA_Init+0x434>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_Init+0x38a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a36      	ldr	r2, [pc, #216]	@ (800334c <HAL_DMA_Init+0x438>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_Init+0x38a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a35      	ldr	r2, [pc, #212]	@ (8003350 <HAL_DMA_Init+0x43c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Init+0x38a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <HAL_DMA_Init+0x440>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_Init+0x38a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a32      	ldr	r2, [pc, #200]	@ (8003358 <HAL_DMA_Init+0x444>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Init+0x38a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_DMA_Init+0x448>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_Init+0x38e>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_Init+0x390>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8097 	beq.w	80033d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a24      	ldr	r2, [pc, #144]	@ (8003340 <HAL_DMA_Init+0x42c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d021      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <HAL_DMA_Init+0x430>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01c      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	@ (8003348 <HAL_DMA_Init+0x434>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d017      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_DMA_Init+0x438>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d012      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_DMA_Init+0x43c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00d      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_DMA_Init+0x440>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d008      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_DMA_Init+0x444>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <HAL_DMA_Init+0x3e4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	@ (800335c <HAL_DMA_Init+0x448>)
 80032f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <HAL_DMA_Init+0x44c>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d021      	beq.n	8003364 <HAL_DMA_Init+0x450>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d102      	bne.n	800332e <HAL_DMA_Init+0x41a>
 8003328:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800332c:	e01b      	b.n	8003366 <HAL_DMA_Init+0x452>
 800332e:	2300      	movs	r3, #0
 8003330:	e019      	b.n	8003366 <HAL_DMA_Init+0x452>
 8003332:	bf00      	nop
 8003334:	fe10803f 	.word	0xfe10803f
 8003338:	5c001000 	.word	0x5c001000
 800333c:	ffff0000 	.word	0xffff0000
 8003340:	58025408 	.word	0x58025408
 8003344:	5802541c 	.word	0x5802541c
 8003348:	58025430 	.word	0x58025430
 800334c:	58025444 	.word	0x58025444
 8003350:	58025458 	.word	0x58025458
 8003354:	5802546c 	.word	0x5802546c
 8003358:	58025480 	.word	0x58025480
 800335c:	58025494 	.word	0x58025494
 8003360:	fffe000f 	.word	0xfffe000f
 8003364:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800336c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800337c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800338c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003394:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003564 <HAL_DMA_Init+0x650>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003568 <HAL_DMA_Init+0x654>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 fc45 	bl	8004c4c <DMA_CalcBaseAndBitshift>
 80033c2:	4603      	mov	r3, r0
 80033c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2201      	movs	r2, #1
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e008      	b.n	80033ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2203      	movs	r2, #3
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0b7      	b.n	800355a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5f      	ldr	r2, [pc, #380]	@ (800356c <HAL_DMA_Init+0x658>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d072      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003570 <HAL_DMA_Init+0x65c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d06d      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5c      	ldr	r2, [pc, #368]	@ (8003574 <HAL_DMA_Init+0x660>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d068      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5a      	ldr	r2, [pc, #360]	@ (8003578 <HAL_DMA_Init+0x664>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d063      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a59      	ldr	r2, [pc, #356]	@ (800357c <HAL_DMA_Init+0x668>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d05e      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a57      	ldr	r2, [pc, #348]	@ (8003580 <HAL_DMA_Init+0x66c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d059      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a56      	ldr	r2, [pc, #344]	@ (8003584 <HAL_DMA_Init+0x670>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d054      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a54      	ldr	r2, [pc, #336]	@ (8003588 <HAL_DMA_Init+0x674>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04f      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a53      	ldr	r2, [pc, #332]	@ (800358c <HAL_DMA_Init+0x678>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04a      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a51      	ldr	r2, [pc, #324]	@ (8003590 <HAL_DMA_Init+0x67c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d045      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a50      	ldr	r2, [pc, #320]	@ (8003594 <HAL_DMA_Init+0x680>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4e      	ldr	r2, [pc, #312]	@ (8003598 <HAL_DMA_Init+0x684>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4d      	ldr	r2, [pc, #308]	@ (800359c <HAL_DMA_Init+0x688>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a4b      	ldr	r2, [pc, #300]	@ (80035a0 <HAL_DMA_Init+0x68c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4a      	ldr	r2, [pc, #296]	@ (80035a4 <HAL_DMA_Init+0x690>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_DMA_Init+0x694>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d027      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_DMA_Init+0x698>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a45      	ldr	r2, [pc, #276]	@ (80035b0 <HAL_DMA_Init+0x69c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a44      	ldr	r2, [pc, #272]	@ (80035b4 <HAL_DMA_Init+0x6a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a42      	ldr	r2, [pc, #264]	@ (80035b8 <HAL_DMA_Init+0x6a4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a41      	ldr	r2, [pc, #260]	@ (80035bc <HAL_DMA_Init+0x6a8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3f      	ldr	r2, [pc, #252]	@ (80035c0 <HAL_DMA_Init+0x6ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3e      	ldr	r2, [pc, #248]	@ (80035c4 <HAL_DMA_Init+0x6b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_DMA_Init+0x5c6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3c      	ldr	r2, [pc, #240]	@ (80035c8 <HAL_DMA_Init+0x6b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Init+0x5ca>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_DMA_Init+0x5cc>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 fcdf 	bl	8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b80      	cmp	r3, #128	@ 0x80
 80034f0:	d102      	bne.n	80034f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800350c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_DMA_Init+0x624>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b08      	cmp	r3, #8
 800351c:	d80c      	bhi.n	8003538 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f001 fd5c 	bl	8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e008      	b.n	800354a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	a7fdabf8 	.word	0xa7fdabf8
 8003568:	cccccccd 	.word	0xcccccccd
 800356c:	40020010 	.word	0x40020010
 8003570:	40020028 	.word	0x40020028
 8003574:	40020040 	.word	0x40020040
 8003578:	40020058 	.word	0x40020058
 800357c:	40020070 	.word	0x40020070
 8003580:	40020088 	.word	0x40020088
 8003584:	400200a0 	.word	0x400200a0
 8003588:	400200b8 	.word	0x400200b8
 800358c:	40020410 	.word	0x40020410
 8003590:	40020428 	.word	0x40020428
 8003594:	40020440 	.word	0x40020440
 8003598:	40020458 	.word	0x40020458
 800359c:	40020470 	.word	0x40020470
 80035a0:	40020488 	.word	0x40020488
 80035a4:	400204a0 	.word	0x400204a0
 80035a8:	400204b8 	.word	0x400204b8
 80035ac:	58025408 	.word	0x58025408
 80035b0:	5802541c 	.word	0x5802541c
 80035b4:	58025430 	.word	0x58025430
 80035b8:	58025444 	.word	0x58025444
 80035bc:	58025458 	.word	0x58025458
 80035c0:	5802546c 	.word	0x5802546c
 80035c4:	58025480 	.word	0x58025480
 80035c8:	58025494 	.word	0x58025494

080035cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e226      	b.n	8003a36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_DMA_Start_IT+0x2a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e21f      	b.n	8003a36 <HAL_DMA_Start_IT+0x46a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	f040 820a 	bne.w	8003a20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_DMA_Start_IT+0x1f4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d04a      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a66      	ldr	r2, [pc, #408]	@ (80037c4 <HAL_DMA_Start_IT+0x1f8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d045      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a65      	ldr	r2, [pc, #404]	@ (80037c8 <HAL_DMA_Start_IT+0x1fc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a63      	ldr	r2, [pc, #396]	@ (80037cc <HAL_DMA_Start_IT+0x200>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d03b      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a62      	ldr	r2, [pc, #392]	@ (80037d0 <HAL_DMA_Start_IT+0x204>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d036      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <HAL_DMA_Start_IT+0x208>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <HAL_DMA_Start_IT+0x20c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02c      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_DMA_Start_IT+0x210>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	@ (80037e0 <HAL_DMA_Start_IT+0x214>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <HAL_DMA_Start_IT+0x218>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a59      	ldr	r2, [pc, #356]	@ (80037e8 <HAL_DMA_Start_IT+0x21c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a57      	ldr	r2, [pc, #348]	@ (80037ec <HAL_DMA_Start_IT+0x220>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a56      	ldr	r2, [pc, #344]	@ (80037f0 <HAL_DMA_Start_IT+0x224>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a54      	ldr	r2, [pc, #336]	@ (80037f4 <HAL_DMA_Start_IT+0x228>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a53      	ldr	r2, [pc, #332]	@ (80037f8 <HAL_DMA_Start_IT+0x22c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_Start_IT+0xee>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a51      	ldr	r2, [pc, #324]	@ (80037fc <HAL_DMA_Start_IT+0x230>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <HAL_DMA_Start_IT+0x100>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e007      	b.n	80036dc <HAL_DMA_Start_IT+0x110>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f001 f906 	bl	80048f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a34      	ldr	r2, [pc, #208]	@ (80037c0 <HAL_DMA_Start_IT+0x1f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a33      	ldr	r2, [pc, #204]	@ (80037c4 <HAL_DMA_Start_IT+0x1f8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a31      	ldr	r2, [pc, #196]	@ (80037c8 <HAL_DMA_Start_IT+0x1fc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a30      	ldr	r2, [pc, #192]	@ (80037cc <HAL_DMA_Start_IT+0x200>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <HAL_DMA_Start_IT+0x204>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2d      	ldr	r2, [pc, #180]	@ (80037d4 <HAL_DMA_Start_IT+0x208>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2b      	ldr	r2, [pc, #172]	@ (80037d8 <HAL_DMA_Start_IT+0x20c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2a      	ldr	r2, [pc, #168]	@ (80037dc <HAL_DMA_Start_IT+0x210>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	@ (80037e0 <HAL_DMA_Start_IT+0x214>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <HAL_DMA_Start_IT+0x218>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a25      	ldr	r2, [pc, #148]	@ (80037e8 <HAL_DMA_Start_IT+0x21c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a24      	ldr	r2, [pc, #144]	@ (80037ec <HAL_DMA_Start_IT+0x220>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <HAL_DMA_Start_IT+0x224>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <HAL_DMA_Start_IT+0x228>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <HAL_DMA_Start_IT+0x22c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Start_IT+0x1bc>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <HAL_DMA_Start_IT+0x230>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Start_IT+0x1c0>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Start_IT+0x1c2>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d036      	beq.n	8003800 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 021e 	bic.w	r2, r3, #30
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0216 	orr.w	r2, r2, #22
 80037a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d03e      	beq.n	800382c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0208 	orr.w	r2, r2, #8
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e035      	b.n	800382c <HAL_DMA_Start_IT+0x260>
 80037c0:	40020010 	.word	0x40020010
 80037c4:	40020028 	.word	0x40020028
 80037c8:	40020040 	.word	0x40020040
 80037cc:	40020058 	.word	0x40020058
 80037d0:	40020070 	.word	0x40020070
 80037d4:	40020088 	.word	0x40020088
 80037d8:	400200a0 	.word	0x400200a0
 80037dc:	400200b8 	.word	0x400200b8
 80037e0:	40020410 	.word	0x40020410
 80037e4:	40020428 	.word	0x40020428
 80037e8:	40020440 	.word	0x40020440
 80037ec:	40020458 	.word	0x40020458
 80037f0:	40020470 	.word	0x40020470
 80037f4:	40020488 	.word	0x40020488
 80037f8:	400204a0 	.word	0x400204a0
 80037fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 020e 	bic.w	r2, r3, #14
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 020a 	orr.w	r2, r2, #10
 8003812:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0204 	orr.w	r2, r2, #4
 800382a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a83      	ldr	r2, [pc, #524]	@ (8003a40 <HAL_DMA_Start_IT+0x474>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d072      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a82      	ldr	r2, [pc, #520]	@ (8003a44 <HAL_DMA_Start_IT+0x478>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d06d      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a80      	ldr	r2, [pc, #512]	@ (8003a48 <HAL_DMA_Start_IT+0x47c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d068      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a4c <HAL_DMA_Start_IT+0x480>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d063      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7d      	ldr	r2, [pc, #500]	@ (8003a50 <HAL_DMA_Start_IT+0x484>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d05e      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7c      	ldr	r2, [pc, #496]	@ (8003a54 <HAL_DMA_Start_IT+0x488>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d059      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a58 <HAL_DMA_Start_IT+0x48c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d054      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a79      	ldr	r2, [pc, #484]	@ (8003a5c <HAL_DMA_Start_IT+0x490>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04f      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a77      	ldr	r2, [pc, #476]	@ (8003a60 <HAL_DMA_Start_IT+0x494>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d04a      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a76      	ldr	r2, [pc, #472]	@ (8003a64 <HAL_DMA_Start_IT+0x498>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d045      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a74      	ldr	r2, [pc, #464]	@ (8003a68 <HAL_DMA_Start_IT+0x49c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d040      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	@ (8003a6c <HAL_DMA_Start_IT+0x4a0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d03b      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a71      	ldr	r2, [pc, #452]	@ (8003a70 <HAL_DMA_Start_IT+0x4a4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d036      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a70      	ldr	r2, [pc, #448]	@ (8003a74 <HAL_DMA_Start_IT+0x4a8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d031      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a78 <HAL_DMA_Start_IT+0x4ac>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a7c <HAL_DMA_Start_IT+0x4b0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d027      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a80 <HAL_DMA_Start_IT+0x4b4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6a      	ldr	r2, [pc, #424]	@ (8003a84 <HAL_DMA_Start_IT+0x4b8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a68      	ldr	r2, [pc, #416]	@ (8003a88 <HAL_DMA_Start_IT+0x4bc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a67      	ldr	r2, [pc, #412]	@ (8003a8c <HAL_DMA_Start_IT+0x4c0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <HAL_DMA_Start_IT+0x4c4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a64      	ldr	r2, [pc, #400]	@ (8003a94 <HAL_DMA_Start_IT+0x4c8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a62      	ldr	r2, [pc, #392]	@ (8003a98 <HAL_DMA_Start_IT+0x4cc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_DMA_Start_IT+0x350>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a61      	ldr	r2, [pc, #388]	@ (8003a9c <HAL_DMA_Start_IT+0x4d0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Start_IT+0x354>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_DMA_Start_IT+0x356>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01a      	beq.n	800395c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003942:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800395a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a37      	ldr	r2, [pc, #220]	@ (8003a40 <HAL_DMA_Start_IT+0x474>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d04a      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a36      	ldr	r2, [pc, #216]	@ (8003a44 <HAL_DMA_Start_IT+0x478>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d045      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	@ (8003a48 <HAL_DMA_Start_IT+0x47c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d040      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a33      	ldr	r2, [pc, #204]	@ (8003a4c <HAL_DMA_Start_IT+0x480>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d03b      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a31      	ldr	r2, [pc, #196]	@ (8003a50 <HAL_DMA_Start_IT+0x484>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d036      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a30      	ldr	r2, [pc, #192]	@ (8003a54 <HAL_DMA_Start_IT+0x488>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d031      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a58 <HAL_DMA_Start_IT+0x48c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02c      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a5c <HAL_DMA_Start_IT+0x490>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d027      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_DMA_Start_IT+0x494>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d022      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003a64 <HAL_DMA_Start_IT+0x498>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d01d      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <HAL_DMA_Start_IT+0x49c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d018      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a27      	ldr	r2, [pc, #156]	@ (8003a6c <HAL_DMA_Start_IT+0x4a0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <HAL_DMA_Start_IT+0x4a4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00e      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <HAL_DMA_Start_IT+0x4a8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a22      	ldr	r2, [pc, #136]	@ (8003a78 <HAL_DMA_Start_IT+0x4ac>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_DMA_Start_IT+0x430>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a21      	ldr	r2, [pc, #132]	@ (8003a7c <HAL_DMA_Start_IT+0x4b0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <HAL_DMA_Start_IT+0x442>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e012      	b.n	8003a34 <HAL_DMA_Start_IT+0x468>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e009      	b.n	8003a34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40020010 	.word	0x40020010
 8003a44:	40020028 	.word	0x40020028
 8003a48:	40020040 	.word	0x40020040
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	40020070 	.word	0x40020070
 8003a54:	40020088 	.word	0x40020088
 8003a58:	400200a0 	.word	0x400200a0
 8003a5c:	400200b8 	.word	0x400200b8
 8003a60:	40020410 	.word	0x40020410
 8003a64:	40020428 	.word	0x40020428
 8003a68:	40020440 	.word	0x40020440
 8003a6c:	40020458 	.word	0x40020458
 8003a70:	40020470 	.word	0x40020470
 8003a74:	40020488 	.word	0x40020488
 8003a78:	400204a0 	.word	0x400204a0
 8003a7c:	400204b8 	.word	0x400204b8
 8003a80:	58025408 	.word	0x58025408
 8003a84:	5802541c 	.word	0x5802541c
 8003a88:	58025430 	.word	0x58025430
 8003a8c:	58025444 	.word	0x58025444
 8003a90:	58025458 	.word	0x58025458
 8003a94:	5802546c 	.word	0x5802546c
 8003a98:	58025480 	.word	0x58025480
 8003a9c:	58025494 	.word	0x58025494

08003aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aac:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_DMA_IRQHandler+0x1ac>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a67      	ldr	r2, [pc, #412]	@ (8003c50 <HAL_DMA_IRQHandler+0x1b0>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c54 <HAL_DMA_IRQHandler+0x1b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d04a      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c58 <HAL_DMA_IRQHandler+0x1b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d045      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	@ (8003c5c <HAL_DMA_IRQHandler+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d040      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c60 <HAL_DMA_IRQHandler+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d03b      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a59      	ldr	r2, [pc, #356]	@ (8003c64 <HAL_DMA_IRQHandler+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d036      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a57      	ldr	r2, [pc, #348]	@ (8003c68 <HAL_DMA_IRQHandler+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d031      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a56      	ldr	r2, [pc, #344]	@ (8003c6c <HAL_DMA_IRQHandler+0x1cc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d02c      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a54      	ldr	r2, [pc, #336]	@ (8003c70 <HAL_DMA_IRQHandler+0x1d0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a53      	ldr	r2, [pc, #332]	@ (8003c74 <HAL_DMA_IRQHandler+0x1d4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a51      	ldr	r2, [pc, #324]	@ (8003c78 <HAL_DMA_IRQHandler+0x1d8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a50      	ldr	r2, [pc, #320]	@ (8003c7c <HAL_DMA_IRQHandler+0x1dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a4e      	ldr	r2, [pc, #312]	@ (8003c80 <HAL_DMA_IRQHandler+0x1e0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c84 <HAL_DMA_IRQHandler+0x1e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4b      	ldr	r2, [pc, #300]	@ (8003c88 <HAL_DMA_IRQHandler+0x1e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4a      	ldr	r2, [pc, #296]	@ (8003c8c <HAL_DMA_IRQHandler+0x1ec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a48      	ldr	r2, [pc, #288]	@ (8003c90 <HAL_DMA_IRQHandler+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_DMA_IRQHandler+0xd6>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_IRQHandler+0xd8>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 842b 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2208      	movs	r2, #8
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a2 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2e      	ldr	r2, [pc, #184]	@ (8003c54 <HAL_DMA_IRQHandler+0x1b4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d04a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <HAL_DMA_IRQHandler+0x1b8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d045      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <HAL_DMA_IRQHandler+0x1bc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <HAL_DMA_IRQHandler+0x1c0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d03b      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a28      	ldr	r2, [pc, #160]	@ (8003c64 <HAL_DMA_IRQHandler+0x1c4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d036      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a27      	ldr	r2, [pc, #156]	@ (8003c68 <HAL_DMA_IRQHandler+0x1c8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a25      	ldr	r2, [pc, #148]	@ (8003c6c <HAL_DMA_IRQHandler+0x1cc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02c      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <HAL_DMA_IRQHandler+0x1d0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d027      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <HAL_DMA_IRQHandler+0x1d4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	@ (8003c78 <HAL_DMA_IRQHandler+0x1d8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <HAL_DMA_IRQHandler+0x1dc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <HAL_DMA_IRQHandler+0x1e0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_DMA_IRQHandler+0x1e4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_DMA_IRQHandler+0x1e8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <HAL_DMA_IRQHandler+0x1ec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <HAL_DMA_IRQHandler+0x1f0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d12f      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x1f4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e02e      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x208>
 8003c4a:	bf00      	nop
 8003c4c:	24000000 	.word	0x24000000
 8003c50:	1b4e81b5 	.word	0x1b4e81b5
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d06e      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a69      	ldr	r2, [pc, #420]	@ (8003e98 <HAL_DMA_IRQHandler+0x3f8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	@ (8003e9c <HAL_DMA_IRQHandler+0x3fc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a66      	ldr	r2, [pc, #408]	@ (8003ea0 <HAL_DMA_IRQHandler+0x400>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a64      	ldr	r2, [pc, #400]	@ (8003ea4 <HAL_DMA_IRQHandler+0x404>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a63      	ldr	r2, [pc, #396]	@ (8003ea8 <HAL_DMA_IRQHandler+0x408>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a61      	ldr	r2, [pc, #388]	@ (8003eac <HAL_DMA_IRQHandler+0x40c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a60      	ldr	r2, [pc, #384]	@ (8003eb0 <HAL_DMA_IRQHandler+0x410>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb4 <HAL_DMA_IRQHandler+0x414>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb8 <HAL_DMA_IRQHandler+0x418>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ebc <HAL_DMA_IRQHandler+0x41c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec0 <HAL_DMA_IRQHandler+0x420>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a58      	ldr	r2, [pc, #352]	@ (8003ec4 <HAL_DMA_IRQHandler+0x424>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a57      	ldr	r2, [pc, #348]	@ (8003ec8 <HAL_DMA_IRQHandler+0x428>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a55      	ldr	r2, [pc, #340]	@ (8003ecc <HAL_DMA_IRQHandler+0x42c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a54      	ldr	r2, [pc, #336]	@ (8003ed0 <HAL_DMA_IRQHandler+0x430>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_DMA_IRQHandler+0x434>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10a      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x304>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e003      	b.n	8003dac <HAL_DMA_IRQHandler+0x30c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f043 0202 	orr.w	r2, r3, #2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 808f 	beq.w	8003f00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e98 <HAL_DMA_IRQHandler+0x3f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e9c <HAL_DMA_IRQHandler+0x3fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a29      	ldr	r2, [pc, #164]	@ (8003ea0 <HAL_DMA_IRQHandler+0x400>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a27      	ldr	r2, [pc, #156]	@ (8003ea4 <HAL_DMA_IRQHandler+0x404>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_DMA_IRQHandler+0x408>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a24      	ldr	r2, [pc, #144]	@ (8003eac <HAL_DMA_IRQHandler+0x40c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a23      	ldr	r2, [pc, #140]	@ (8003eb0 <HAL_DMA_IRQHandler+0x410>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <HAL_DMA_IRQHandler+0x414>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a20      	ldr	r2, [pc, #128]	@ (8003eb8 <HAL_DMA_IRQHandler+0x418>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	@ (8003ebc <HAL_DMA_IRQHandler+0x41c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec0 <HAL_DMA_IRQHandler+0x420>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <HAL_DMA_IRQHandler+0x424>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec8 <HAL_DMA_IRQHandler+0x428>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <HAL_DMA_IRQHandler+0x42c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <HAL_DMA_IRQHandler+0x430>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <HAL_DMA_IRQHandler+0x434>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d12a      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x438>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e023      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x440>
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2204      	movs	r2, #4
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	f043 0204 	orr.w	r2, r3, #4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2210      	movs	r2, #16
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a6 	beq.w	8004062 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a85      	ldr	r2, [pc, #532]	@ (8004130 <HAL_DMA_IRQHandler+0x690>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a83      	ldr	r2, [pc, #524]	@ (8004134 <HAL_DMA_IRQHandler+0x694>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a82      	ldr	r2, [pc, #520]	@ (8004138 <HAL_DMA_IRQHandler+0x698>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a80      	ldr	r2, [pc, #512]	@ (800413c <HAL_DMA_IRQHandler+0x69c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7f      	ldr	r2, [pc, #508]	@ (8004140 <HAL_DMA_IRQHandler+0x6a0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004144 <HAL_DMA_IRQHandler+0x6a4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7c      	ldr	r2, [pc, #496]	@ (8004148 <HAL_DMA_IRQHandler+0x6a8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a7a      	ldr	r2, [pc, #488]	@ (800414c <HAL_DMA_IRQHandler+0x6ac>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a79      	ldr	r2, [pc, #484]	@ (8004150 <HAL_DMA_IRQHandler+0x6b0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a77      	ldr	r2, [pc, #476]	@ (8004154 <HAL_DMA_IRQHandler+0x6b4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a76      	ldr	r2, [pc, #472]	@ (8004158 <HAL_DMA_IRQHandler+0x6b8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a74      	ldr	r2, [pc, #464]	@ (800415c <HAL_DMA_IRQHandler+0x6bc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a73      	ldr	r2, [pc, #460]	@ (8004160 <HAL_DMA_IRQHandler+0x6c0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a71      	ldr	r2, [pc, #452]	@ (8004164 <HAL_DMA_IRQHandler+0x6c4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a70      	ldr	r2, [pc, #448]	@ (8004168 <HAL_DMA_IRQHandler+0x6c8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800416c <HAL_DMA_IRQHandler+0x6cc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10a      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x52c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e009      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x540>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2210      	movs	r2, #16
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d108      	bne.n	8004022 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
 8004020:	e01f      	b.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
 8004032:	e016      	b.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2220      	movs	r2, #32
 800406c:	409a      	lsls	r2, r3
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8110 	beq.w	8004298 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <HAL_DMA_IRQHandler+0x690>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <HAL_DMA_IRQHandler+0x694>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <HAL_DMA_IRQHandler+0x698>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a28      	ldr	r2, [pc, #160]	@ (800413c <HAL_DMA_IRQHandler+0x69c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_DMA_IRQHandler+0x6a0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a25      	ldr	r2, [pc, #148]	@ (8004144 <HAL_DMA_IRQHandler+0x6a4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <HAL_DMA_IRQHandler+0x6a8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a22      	ldr	r2, [pc, #136]	@ (800414c <HAL_DMA_IRQHandler+0x6ac>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a20      	ldr	r2, [pc, #128]	@ (8004150 <HAL_DMA_IRQHandler+0x6b0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <HAL_DMA_IRQHandler+0x6b4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <HAL_DMA_IRQHandler+0x6b8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	@ (800415c <HAL_DMA_IRQHandler+0x6bc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_DMA_IRQHandler+0x6c0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <HAL_DMA_IRQHandler+0x6c4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a17      	ldr	r2, [pc, #92]	@ (8004168 <HAL_DMA_IRQHandler+0x6c8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <HAL_DMA_IRQHandler+0x6cc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d12b      	bne.n	8004170 <HAL_DMA_IRQHandler+0x6d0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e02a      	b.n	8004184 <HAL_DMA_IRQHandler+0x6e4>
 800412e:	bf00      	nop
 8004130:	40020010 	.word	0x40020010
 8004134:	40020028 	.word	0x40020028
 8004138:	40020040 	.word	0x40020040
 800413c:	40020058 	.word	0x40020058
 8004140:	40020070 	.word	0x40020070
 8004144:	40020088 	.word	0x40020088
 8004148:	400200a0 	.word	0x400200a0
 800414c:	400200b8 	.word	0x400200b8
 8004150:	40020410 	.word	0x40020410
 8004154:	40020428 	.word	0x40020428
 8004158:	40020440 	.word	0x40020440
 800415c:	40020458 	.word	0x40020458
 8004160:	40020470 	.word	0x40020470
 8004164:	40020488 	.word	0x40020488
 8004168:	400204a0 	.word	0x400204a0
 800416c:	400204b8 	.word	0x400204b8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8087 	beq.w	8004298 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2220      	movs	r2, #32
 8004194:	409a      	lsls	r2, r3
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d139      	bne.n	800421a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0216 	bic.w	r2, r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x736>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	223f      	movs	r2, #63	@ 0x3f
 80041f0:	409a      	lsls	r2, r3
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 834a 	beq.w	80048a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
          }
          return;
 8004218:	e344      	b.n	80048a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
 8004246:	e027      	b.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
 8004258:	e01e      	b.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0210 	bic.w	r2, r2, #16
 8004276:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8306 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8088 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2204      	movs	r2, #4
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7a      	ldr	r2, [pc, #488]	@ (80044a8 <HAL_DMA_IRQHandler+0xa08>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04a      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a79      	ldr	r2, [pc, #484]	@ (80044ac <HAL_DMA_IRQHandler+0xa0c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d045      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a77      	ldr	r2, [pc, #476]	@ (80044b0 <HAL_DMA_IRQHandler+0xa10>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d040      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a76      	ldr	r2, [pc, #472]	@ (80044b4 <HAL_DMA_IRQHandler+0xa14>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d03b      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a74      	ldr	r2, [pc, #464]	@ (80044b8 <HAL_DMA_IRQHandler+0xa18>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d036      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a73      	ldr	r2, [pc, #460]	@ (80044bc <HAL_DMA_IRQHandler+0xa1c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d031      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a71      	ldr	r2, [pc, #452]	@ (80044c0 <HAL_DMA_IRQHandler+0xa20>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a70      	ldr	r2, [pc, #448]	@ (80044c4 <HAL_DMA_IRQHandler+0xa24>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d027      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6e      	ldr	r2, [pc, #440]	@ (80044c8 <HAL_DMA_IRQHandler+0xa28>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6d      	ldr	r2, [pc, #436]	@ (80044cc <HAL_DMA_IRQHandler+0xa2c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6b      	ldr	r2, [pc, #428]	@ (80044d0 <HAL_DMA_IRQHandler+0xa30>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6a      	ldr	r2, [pc, #424]	@ (80044d4 <HAL_DMA_IRQHandler+0xa34>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a68      	ldr	r2, [pc, #416]	@ (80044d8 <HAL_DMA_IRQHandler+0xa38>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a67      	ldr	r2, [pc, #412]	@ (80044dc <HAL_DMA_IRQHandler+0xa3c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a65      	ldr	r2, [pc, #404]	@ (80044e0 <HAL_DMA_IRQHandler+0xa40>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a64      	ldr	r2, [pc, #400]	@ (80044e4 <HAL_DMA_IRQHandler+0xa44>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <HAL_DMA_IRQHandler+0x8ca>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e007      	b.n	800437a <HAL_DMA_IRQHandler+0x8da>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	429a      	cmp	r2, r3
 8004384:	d307      	bcc.n	8004396 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f2      	bne.n	800437a <HAL_DMA_IRQHandler+0x8da>
 8004394:	e000      	b.n	8004398 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004396:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80043ae:	e003      	b.n	80043b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8272 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	e26c      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a43      	ldr	r2, [pc, #268]	@ (80044e8 <HAL_DMA_IRQHandler+0xa48>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a42      	ldr	r2, [pc, #264]	@ (80044ec <HAL_DMA_IRQHandler+0xa4c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d01d      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a40      	ldr	r2, [pc, #256]	@ (80044f0 <HAL_DMA_IRQHandler+0xa50>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3f      	ldr	r2, [pc, #252]	@ (80044f4 <HAL_DMA_IRQHandler+0xa54>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a3d      	ldr	r2, [pc, #244]	@ (80044f8 <HAL_DMA_IRQHandler+0xa58>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3c      	ldr	r2, [pc, #240]	@ (80044fc <HAL_DMA_IRQHandler+0xa5c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3a      	ldr	r2, [pc, #232]	@ (8004500 <HAL_DMA_IRQHandler+0xa60>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a39      	ldr	r2, [pc, #228]	@ (8004504 <HAL_DMA_IRQHandler+0xa64>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_DMA_IRQHandler+0x988>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_DMA_IRQHandler+0x98a>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 823f 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2204      	movs	r2, #4
 8004442:	409a      	lsls	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80cd 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xb48>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80c7 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2204      	movs	r2, #4
 8004464:	409a      	lsls	r2, r3
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d049      	beq.n	8004508 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8210 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004490:	e20a      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8206 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a4:	e200      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
 80044a6:	bf00      	nop
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	58025408 	.word	0x58025408
 80044ec:	5802541c 	.word	0x5802541c
 80044f0:	58025430 	.word	0x58025430
 80044f4:	58025444 	.word	0x58025444
 80044f8:	58025458 	.word	0x58025458
 80044fc:	5802546c 	.word	0x5802546c
 8004500:	58025480 	.word	0x58025480
 8004504:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d160      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7f      	ldr	r2, [pc, #508]	@ (8004714 <HAL_DMA_IRQHandler+0xc74>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d04a      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7d      	ldr	r2, [pc, #500]	@ (8004718 <HAL_DMA_IRQHandler+0xc78>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d045      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7c      	ldr	r2, [pc, #496]	@ (800471c <HAL_DMA_IRQHandler+0xc7c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7a      	ldr	r2, [pc, #488]	@ (8004720 <HAL_DMA_IRQHandler+0xc80>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a79      	ldr	r2, [pc, #484]	@ (8004724 <HAL_DMA_IRQHandler+0xc84>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d036      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a77      	ldr	r2, [pc, #476]	@ (8004728 <HAL_DMA_IRQHandler+0xc88>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a76      	ldr	r2, [pc, #472]	@ (800472c <HAL_DMA_IRQHandler+0xc8c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d02c      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a74      	ldr	r2, [pc, #464]	@ (8004730 <HAL_DMA_IRQHandler+0xc90>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	@ (8004734 <HAL_DMA_IRQHandler+0xc94>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a71      	ldr	r2, [pc, #452]	@ (8004738 <HAL_DMA_IRQHandler+0xc98>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a70      	ldr	r2, [pc, #448]	@ (800473c <HAL_DMA_IRQHandler+0xc9c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6e      	ldr	r2, [pc, #440]	@ (8004740 <HAL_DMA_IRQHandler+0xca0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6d      	ldr	r2, [pc, #436]	@ (8004744 <HAL_DMA_IRQHandler+0xca4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6b      	ldr	r2, [pc, #428]	@ (8004748 <HAL_DMA_IRQHandler+0xca8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6a      	ldr	r2, [pc, #424]	@ (800474c <HAL_DMA_IRQHandler+0xcac>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a68      	ldr	r2, [pc, #416]	@ (8004750 <HAL_DMA_IRQHandler+0xcb0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d108      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xb24>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0208 	bic.w	r2, r2, #8
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e007      	b.n	80045d4 <HAL_DMA_IRQHandler+0xb34>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8165 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e6:	e15f      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2202      	movs	r2, #2
 80045f2:	409a      	lsls	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80c5 	beq.w	8004788 <HAL_DMA_IRQHandler+0xce8>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80bf 	beq.w	8004788 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2202      	movs	r2, #2
 8004614:	409a      	lsls	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 813a 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004640:	e134      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8130 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	e12a      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8089 	bne.w	8004774 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <HAL_DMA_IRQHandler+0xc74>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a29      	ldr	r2, [pc, #164]	@ (8004718 <HAL_DMA_IRQHandler+0xc78>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a28      	ldr	r2, [pc, #160]	@ (800471c <HAL_DMA_IRQHandler+0xc7c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <HAL_DMA_IRQHandler+0xc80>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a25      	ldr	r2, [pc, #148]	@ (8004724 <HAL_DMA_IRQHandler+0xc84>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a23      	ldr	r2, [pc, #140]	@ (8004728 <HAL_DMA_IRQHandler+0xc88>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a22      	ldr	r2, [pc, #136]	@ (800472c <HAL_DMA_IRQHandler+0xc8c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a20      	ldr	r2, [pc, #128]	@ (8004730 <HAL_DMA_IRQHandler+0xc90>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004734 <HAL_DMA_IRQHandler+0xc94>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004738 <HAL_DMA_IRQHandler+0xc98>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	@ (800473c <HAL_DMA_IRQHandler+0xc9c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004740 <HAL_DMA_IRQHandler+0xca0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a19      	ldr	r2, [pc, #100]	@ (8004744 <HAL_DMA_IRQHandler+0xca4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a17      	ldr	r2, [pc, #92]	@ (8004748 <HAL_DMA_IRQHandler+0xca8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a16      	ldr	r2, [pc, #88]	@ (800474c <HAL_DMA_IRQHandler+0xcac>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_IRQHandler+0xc62>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a14      	ldr	r2, [pc, #80]	@ (8004750 <HAL_DMA_IRQHandler+0xcb0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d128      	bne.n	8004754 <HAL_DMA_IRQHandler+0xcb4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0214 	bic.w	r2, r2, #20
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e027      	b.n	8004764 <HAL_DMA_IRQHandler+0xcc4>
 8004714:	40020010 	.word	0x40020010
 8004718:	40020028 	.word	0x40020028
 800471c:	40020040 	.word	0x40020040
 8004720:	40020058 	.word	0x40020058
 8004724:	40020070 	.word	0x40020070
 8004728:	40020088 	.word	0x40020088
 800472c:	400200a0 	.word	0x400200a0
 8004730:	400200b8 	.word	0x400200b8
 8004734:	40020410 	.word	0x40020410
 8004738:	40020428 	.word	0x40020428
 800473c:	40020440 	.word	0x40020440
 8004740:	40020458 	.word	0x40020458
 8004744:	40020470 	.word	0x40020470
 8004748:	40020488 	.word	0x40020488
 800474c:	400204a0 	.word	0x400204a0
 8004750:	400204b8 	.word	0x400204b8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 020a 	bic.w	r2, r2, #10
 8004762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8097 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004786:	e091      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2208      	movs	r2, #8
 8004792:	409a      	lsls	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8088 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8082 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a41      	ldr	r2, [pc, #260]	@ (80048b4 <HAL_DMA_IRQHandler+0xe14>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3f      	ldr	r2, [pc, #252]	@ (80048b8 <HAL_DMA_IRQHandler+0xe18>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3e      	ldr	r2, [pc, #248]	@ (80048bc <HAL_DMA_IRQHandler+0xe1c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3c      	ldr	r2, [pc, #240]	@ (80048c0 <HAL_DMA_IRQHandler+0xe20>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	@ (80048c4 <HAL_DMA_IRQHandler+0xe24>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a39      	ldr	r2, [pc, #228]	@ (80048c8 <HAL_DMA_IRQHandler+0xe28>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a38      	ldr	r2, [pc, #224]	@ (80048cc <HAL_DMA_IRQHandler+0xe2c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a36      	ldr	r2, [pc, #216]	@ (80048d0 <HAL_DMA_IRQHandler+0xe30>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a35      	ldr	r2, [pc, #212]	@ (80048d4 <HAL_DMA_IRQHandler+0xe34>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a33      	ldr	r2, [pc, #204]	@ (80048d8 <HAL_DMA_IRQHandler+0xe38>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a32      	ldr	r2, [pc, #200]	@ (80048dc <HAL_DMA_IRQHandler+0xe3c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a30      	ldr	r2, [pc, #192]	@ (80048e0 <HAL_DMA_IRQHandler+0xe40>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2f      	ldr	r2, [pc, #188]	@ (80048e4 <HAL_DMA_IRQHandler+0xe44>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <HAL_DMA_IRQHandler+0xe48>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <HAL_DMA_IRQHandler+0xe4c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_DMA_IRQHandler+0xe50>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_DMA_IRQHandler+0xdbc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 021c 	bic.w	r2, r2, #28
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DMA_IRQHandler+0xdcc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 020e 	bic.w	r2, r2, #14
 800486a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	e004      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048a4:	bf00      	nop
 80048a6:	e002      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ae:	3728      	adds	r7, #40	@ 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8

080048f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7f      	ldr	r2, [pc, #508]	@ (8004b10 <DMA_SetConfig+0x21c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d072      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b14 <DMA_SetConfig+0x220>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d06d      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7c      	ldr	r2, [pc, #496]	@ (8004b18 <DMA_SetConfig+0x224>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d068      	beq.n	80049fe <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7a      	ldr	r2, [pc, #488]	@ (8004b1c <DMA_SetConfig+0x228>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d063      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a79      	ldr	r2, [pc, #484]	@ (8004b20 <DMA_SetConfig+0x22c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d05e      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a77      	ldr	r2, [pc, #476]	@ (8004b24 <DMA_SetConfig+0x230>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d059      	beq.n	80049fe <DMA_SetConfig+0x10a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a76      	ldr	r2, [pc, #472]	@ (8004b28 <DMA_SetConfig+0x234>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d054      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a74      	ldr	r2, [pc, #464]	@ (8004b2c <DMA_SetConfig+0x238>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04f      	beq.n	80049fe <DMA_SetConfig+0x10a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a73      	ldr	r2, [pc, #460]	@ (8004b30 <DMA_SetConfig+0x23c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d04a      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a71      	ldr	r2, [pc, #452]	@ (8004b34 <DMA_SetConfig+0x240>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d045      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a70      	ldr	r2, [pc, #448]	@ (8004b38 <DMA_SetConfig+0x244>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d040      	beq.n	80049fe <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6e      	ldr	r2, [pc, #440]	@ (8004b3c <DMA_SetConfig+0x248>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d03b      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b40 <DMA_SetConfig+0x24c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d036      	beq.n	80049fe <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6b      	ldr	r2, [pc, #428]	@ (8004b44 <DMA_SetConfig+0x250>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d031      	beq.n	80049fe <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b48 <DMA_SetConfig+0x254>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d02c      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a68      	ldr	r2, [pc, #416]	@ (8004b4c <DMA_SetConfig+0x258>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d027      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a67      	ldr	r2, [pc, #412]	@ (8004b50 <DMA_SetConfig+0x25c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a65      	ldr	r2, [pc, #404]	@ (8004b54 <DMA_SetConfig+0x260>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a64      	ldr	r2, [pc, #400]	@ (8004b58 <DMA_SetConfig+0x264>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a62      	ldr	r2, [pc, #392]	@ (8004b5c <DMA_SetConfig+0x268>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a61      	ldr	r2, [pc, #388]	@ (8004b60 <DMA_SetConfig+0x26c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b64 <DMA_SetConfig+0x270>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004b68 <DMA_SetConfig+0x274>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <DMA_SetConfig+0x10a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b6c <DMA_SetConfig+0x278>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <DMA_SetConfig+0x10e>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <DMA_SetConfig+0x110>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a39      	ldr	r2, [pc, #228]	@ (8004b10 <DMA_SetConfig+0x21c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d04a      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <DMA_SetConfig+0x220>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d045      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a36      	ldr	r2, [pc, #216]	@ (8004b18 <DMA_SetConfig+0x224>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d040      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a35      	ldr	r2, [pc, #212]	@ (8004b1c <DMA_SetConfig+0x228>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d03b      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <DMA_SetConfig+0x22c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d036      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <DMA_SetConfig+0x230>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d031      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <DMA_SetConfig+0x234>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d02c      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b2c <DMA_SetConfig+0x238>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d027      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2d      	ldr	r2, [pc, #180]	@ (8004b30 <DMA_SetConfig+0x23c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d022      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <DMA_SetConfig+0x240>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d01d      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b38 <DMA_SetConfig+0x244>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <DMA_SetConfig+0x248>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a27      	ldr	r2, [pc, #156]	@ (8004b40 <DMA_SetConfig+0x24c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a26      	ldr	r2, [pc, #152]	@ (8004b44 <DMA_SetConfig+0x250>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a24      	ldr	r2, [pc, #144]	@ (8004b48 <DMA_SetConfig+0x254>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <DMA_SetConfig+0x1d0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a23      	ldr	r2, [pc, #140]	@ (8004b4c <DMA_SetConfig+0x258>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <DMA_SetConfig+0x1d4>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <DMA_SetConfig+0x1d6>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d059      	beq.n	8004b82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	223f      	movs	r2, #63	@ 0x3f
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004aec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d138      	bne.n	8004b70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b0e:	e086      	b.n	8004c1e <DMA_SetConfig+0x32a>
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	58025408 	.word	0x58025408
 8004b54:	5802541c 	.word	0x5802541c
 8004b58:	58025430 	.word	0x58025430
 8004b5c:	58025444 	.word	0x58025444
 8004b60:	58025458 	.word	0x58025458
 8004b64:	5802546c 	.word	0x5802546c
 8004b68:	58025480 	.word	0x58025480
 8004b6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
}
 8004b80:	e04d      	b.n	8004c1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a29      	ldr	r2, [pc, #164]	@ (8004c2c <DMA_SetConfig+0x338>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a27      	ldr	r2, [pc, #156]	@ (8004c30 <DMA_SetConfig+0x33c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <DMA_SetConfig+0x340>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	@ (8004c38 <DMA_SetConfig+0x344>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <DMA_SetConfig+0x348>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <DMA_SetConfig+0x34c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a20      	ldr	r2, [pc, #128]	@ (8004c44 <DMA_SetConfig+0x350>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <DMA_SetConfig+0x2de>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <DMA_SetConfig+0x354>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <DMA_SetConfig+0x2e2>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <DMA_SetConfig+0x2e4>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2201      	movs	r2, #1
 8004be6:	409a      	lsls	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d108      	bne.n	8004c0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	60da      	str	r2, [r3, #12]
}
 8004c0c:	e007      	b.n	8004c1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	58025408 	.word	0x58025408
 8004c30:	5802541c 	.word	0x5802541c
 8004c34:	58025430 	.word	0x58025430
 8004c38:	58025444 	.word	0x58025444
 8004c3c:	58025458 	.word	0x58025458
 8004c40:	5802546c 	.word	0x5802546c
 8004c44:	58025480 	.word	0x58025480
 8004c48:	58025494 	.word	0x58025494

08004c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a42      	ldr	r2, [pc, #264]	@ (8004d64 <DMA_CalcBaseAndBitshift+0x118>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d04a      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a41      	ldr	r2, [pc, #260]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d045      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d6c <DMA_CalcBaseAndBitshift+0x120>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d040      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3e      	ldr	r2, [pc, #248]	@ (8004d70 <DMA_CalcBaseAndBitshift+0x124>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d03b      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3c      	ldr	r2, [pc, #240]	@ (8004d74 <DMA_CalcBaseAndBitshift+0x128>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d036      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d031      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a39      	ldr	r2, [pc, #228]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x130>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02c      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a38      	ldr	r2, [pc, #224]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x134>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d027      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a33      	ldr	r2, [pc, #204]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x140>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a32      	ldr	r2, [pc, #200]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x144>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x148>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2f      	ldr	r2, [pc, #188]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x150>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x154>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <DMA_CalcBaseAndBitshift+0xac>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <DMA_CalcBaseAndBitshift+0xae>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d024      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3b10      	subs	r3, #16
 8004d06:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x158>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	4a24      	ldr	r2, [pc, #144]	@ (8004da8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d18:	5cd3      	ldrb	r3, [r2, r3]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d908      	bls.n	8004d38 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <DMA_CalcBaseAndBitshift+0x160>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d36:	e00d      	b.n	8004d54 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <DMA_CalcBaseAndBitshift+0x160>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d46:	e005      	b.n	8004d54 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8
 8004da4:	aaaaaaab 	.word	0xaaaaaaab
 8004da8:	0800df18 	.word	0x0800df18
 8004dac:	fffffc00 	.word	0xfffffc00

08004db0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d120      	bne.n	8004e06 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d858      	bhi.n	8004e7e <DMA_CheckFifoParam+0xce>
 8004dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <DMA_CheckFifoParam+0x24>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df7 	.word	0x08004df7
 8004ddc:	08004de5 	.word	0x08004de5
 8004de0:	08004e7f 	.word	0x08004e7f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d048      	beq.n	8004e82 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df4:	e045      	b.n	8004e82 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dfe:	d142      	bne.n	8004e86 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e04:	e03f      	b.n	8004e86 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0e:	d123      	bne.n	8004e58 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d838      	bhi.n	8004e8a <DMA_CheckFifoParam+0xda>
 8004e18:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <DMA_CheckFifoParam+0x70>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e37 	.word	0x08004e37
 8004e28:	08004e31 	.word	0x08004e31
 8004e2c:	08004e49 	.word	0x08004e49
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
        break;
 8004e34:	e030      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d025      	beq.n	8004e8e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e46:	e022      	b.n	8004e8e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e50:	d11f      	bne.n	8004e92 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e56:	e01c      	b.n	8004e92 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d902      	bls.n	8004e66 <DMA_CheckFifoParam+0xb6>
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d003      	beq.n	8004e6c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e64:	e018      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        break;
 8004e6a:	e015      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00e      	beq.n	8004e96 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e7c:	e00b      	b.n	8004e96 <DMA_CheckFifoParam+0xe6>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e00a      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        break;
 8004e82:	bf00      	nop
 8004e84:	e008      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        break;
 8004e86:	bf00      	nop
 8004e88:	e006      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e004      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
        break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <DMA_CheckFifoParam+0xe8>
    break;
 8004e96:	bf00      	nop
    }
  }

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a38      	ldr	r2, [pc, #224]	@ (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a36      	ldr	r2, [pc, #216]	@ (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01d      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a33      	ldr	r2, [pc, #204]	@ (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a32      	ldr	r2, [pc, #200]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a30      	ldr	r2, [pc, #192]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01a      	beq.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	3b08      	subs	r3, #8
 8004f18:	4a28      	ldr	r2, [pc, #160]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4b26      	ldr	r3, [pc, #152]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a24      	ldr	r2, [pc, #144]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f34:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f44:	e024      	b.n	8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	3b10      	subs	r3, #16
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d806      	bhi.n	8004f6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d902      	bls.n	8004f6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4b18      	ldr	r3, [pc, #96]	@ (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	461a      	mov	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	2201      	movs	r2, #1
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	58025408 	.word	0x58025408
 8004fa0:	5802541c 	.word	0x5802541c
 8004fa4:	58025430 	.word	0x58025430
 8004fa8:	58025444 	.word	0x58025444
 8004fac:	58025458 	.word	0x58025458
 8004fb0:	5802546c 	.word	0x5802546c
 8004fb4:	58025480 	.word	0x58025480
 8004fb8:	58025494 	.word	0x58025494
 8004fbc:	cccccccd 	.word	0xcccccccd
 8004fc0:	16009600 	.word	0x16009600
 8004fc4:	58025880 	.word	0x58025880
 8004fc8:	aaaaaaab 	.word	0xaaaaaaab
 8004fcc:	400204b8 	.word	0x400204b8
 8004fd0:	4002040f 	.word	0x4002040f
 8004fd4:	10008200 	.word	0x10008200
 8004fd8:	40020880 	.word	0x40020880

08004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04a      	beq.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d847      	bhi.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a25      	ldr	r2, [pc, #148]	@ (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d022      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a24      	ldr	r2, [pc, #144]	@ (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d01d      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a22      	ldr	r2, [pc, #136]	@ (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d018      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a21      	ldr	r2, [pc, #132]	@ (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1f      	ldr	r2, [pc, #124]	@ (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d009      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d101      	bne.n	800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800504c:	2300      	movs	r3, #0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005064:	671a      	str	r2, [r3, #112]	@ 0x70
 8005066:	e009      	b.n	800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a11      	ldr	r2, [pc, #68]	@ (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800507a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3b01      	subs	r3, #1
 8005080:	2201      	movs	r2, #1
 8005082:	409a      	lsls	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	58025408 	.word	0x58025408
 8005098:	5802541c 	.word	0x5802541c
 800509c:	58025430 	.word	0x58025430
 80050a0:	58025444 	.word	0x58025444
 80050a4:	58025458 	.word	0x58025458
 80050a8:	5802546c 	.word	0x5802546c
 80050ac:	58025480 	.word	0x58025480
 80050b0:	58025494 	.word	0x58025494
 80050b4:	1600963f 	.word	0x1600963f
 80050b8:	58025940 	.word	0x58025940
 80050bc:	1000823f 	.word	0x1000823f
 80050c0:	40020940 	.word	0x40020940

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	@ 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050d2:	4b89      	ldr	r3, [pc, #548]	@ (80052f8 <HAL_GPIO_Init+0x234>)
 80050d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050d6:	e194      	b.n	8005402 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	2101      	movs	r1, #1
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	4013      	ands	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8186 	beq.w	80053fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d005      	beq.n	8005108 <HAL_GPIO_Init+0x44>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d130      	bne.n	800516a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2203      	movs	r2, #3
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800513e:	2201      	movs	r2, #1
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 0201 	and.w	r2, r3, #1
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b03      	cmp	r3, #3
 8005174:	d017      	beq.n	80051a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d123      	bne.n	80051fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	08da      	lsrs	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3208      	adds	r2, #8
 80051ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	220f      	movs	r2, #15
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	08da      	lsrs	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3208      	adds	r2, #8
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2203      	movs	r2, #3
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80e0 	beq.w	80053fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523c:	4b2f      	ldr	r3, [pc, #188]	@ (80052fc <HAL_GPIO_Init+0x238>)
 800523e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005242:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <HAL_GPIO_Init+0x238>)
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800524c:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <HAL_GPIO_Init+0x238>)
 800524e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800525a:	4a29      	ldr	r2, [pc, #164]	@ (8005300 <HAL_GPIO_Init+0x23c>)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	3302      	adds	r3, #2
 8005262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	220f      	movs	r2, #15
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a20      	ldr	r2, [pc, #128]	@ (8005304 <HAL_GPIO_Init+0x240>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d052      	beq.n	800532c <HAL_GPIO_Init+0x268>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <HAL_GPIO_Init+0x244>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d031      	beq.n	80052f2 <HAL_GPIO_Init+0x22e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <HAL_GPIO_Init+0x248>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02b      	beq.n	80052ee <HAL_GPIO_Init+0x22a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <HAL_GPIO_Init+0x24c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d025      	beq.n	80052ea <HAL_GPIO_Init+0x226>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005314 <HAL_GPIO_Init+0x250>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01f      	beq.n	80052e6 <HAL_GPIO_Init+0x222>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <HAL_GPIO_Init+0x254>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d019      	beq.n	80052e2 <HAL_GPIO_Init+0x21e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1a      	ldr	r2, [pc, #104]	@ (800531c <HAL_GPIO_Init+0x258>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_GPIO_Init+0x21a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <HAL_GPIO_Init+0x25c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00d      	beq.n	80052da <HAL_GPIO_Init+0x216>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <HAL_GPIO_Init+0x260>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <HAL_GPIO_Init+0x212>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a17      	ldr	r2, [pc, #92]	@ (8005328 <HAL_GPIO_Init+0x264>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_GPIO_Init+0x20e>
 80052ce:	2309      	movs	r3, #9
 80052d0:	e02d      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052d2:	230a      	movs	r3, #10
 80052d4:	e02b      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052d6:	2308      	movs	r3, #8
 80052d8:	e029      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052da:	2307      	movs	r3, #7
 80052dc:	e027      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052de:	2306      	movs	r3, #6
 80052e0:	e025      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052e2:	2305      	movs	r3, #5
 80052e4:	e023      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e021      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052ea:	2303      	movs	r3, #3
 80052ec:	e01f      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e01d      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01b      	b.n	800532e <HAL_GPIO_Init+0x26a>
 80052f6:	bf00      	nop
 80052f8:	58000080 	.word	0x58000080
 80052fc:	58024400 	.word	0x58024400
 8005300:	58000400 	.word	0x58000400
 8005304:	58020000 	.word	0x58020000
 8005308:	58020400 	.word	0x58020400
 800530c:	58020800 	.word	0x58020800
 8005310:	58020c00 	.word	0x58020c00
 8005314:	58021000 	.word	0x58021000
 8005318:	58021400 	.word	0x58021400
 800531c:	58021800 	.word	0x58021800
 8005320:	58021c00 	.word	0x58021c00
 8005324:	58022000 	.word	0x58022000
 8005328:	58022400 	.word	0x58022400
 800532c:	2300      	movs	r3, #0
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	f002 0203 	and.w	r2, r2, #3
 8005334:	0092      	lsls	r2, r2, #2
 8005336:	4093      	lsls	r3, r2
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533e:	4938      	ldr	r1, [pc, #224]	@ (8005420 <HAL_GPIO_Init+0x35c>)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	3302      	adds	r3, #2
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800534c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	f47f ae63 	bne.w	80050d8 <HAL_GPIO_Init+0x14>
  }
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	3724      	adds	r7, #36	@ 0x24
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	58000400 	.word	0x58000400

08005424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e001      	b.n	8005446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
 8005460:	4613      	mov	r3, r2
 8005462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005464:	787b      	ldrb	r3, [r7, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800546a:	887a      	ldrh	r2, [r7, #2]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005470:	e003      	b.n	800547a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005472:	887b      	ldrh	r3, [r7, #2]
 8005474:	041a      	lsls	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	619a      	str	r2, [r3, #24]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af02      	add	r7, sp, #8
 800548c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0fe      	b.n	8005696 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc f833 	bl	8001518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2203      	movs	r2, #3
 80054b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f005 fb2c 	bl	800ab1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7c1a      	ldrb	r2, [r3, #16]
 80054cc:	f88d 2000 	strb.w	r2, [sp]
 80054d0:	3304      	adds	r3, #4
 80054d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054d4:	f005 fab0 	bl	800aa38 <USB_CoreInit>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0d5      	b.n	8005696 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f005 fb24 	bl	800ab3e <USB_SetCurrentMode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0c6      	b.n	8005696 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	e04a      	b.n	80055a4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3315      	adds	r3, #21
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3314      	adds	r3, #20
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	b298      	uxth	r0, r3
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	332e      	adds	r3, #46	@ 0x2e
 800554a:	4602      	mov	r2, r0
 800554c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3318      	adds	r3, #24
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005562:	7bfa      	ldrb	r2, [r7, #15]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	331c      	adds	r3, #28
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	3320      	adds	r3, #32
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3324      	adds	r3, #36	@ 0x24
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	3301      	adds	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	791b      	ldrb	r3, [r3, #4]
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d3af      	bcc.n	800550e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
 80055b2:	e044      	b.n	800563e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ca:	7bfa      	ldrb	r2, [r7, #15]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055e0:	7bfa      	ldrb	r2, [r7, #15]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	3301      	adds	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	429a      	cmp	r2, r3
 8005646:	d3b5      	bcc.n	80055b4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	7c1a      	ldrb	r2, [r3, #16]
 8005650:	f88d 2000 	strb.w	r2, [sp]
 8005654:	3304      	adds	r3, #4
 8005656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005658:	f005 fabe 	bl	800abd8 <USB_DevInit>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e013      	b.n	8005696 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7b1b      	ldrb	r3, [r3, #12]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d102      	bne.n	800568a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f80b 	bl	80056a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f005 fc79 	bl	800af86 <USB_DevDisconnect>

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	10000003 	.word	0x10000003

080056e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056f0:	4b19      	ldr	r3, [pc, #100]	@ (8005758 <HAL_PWREx_ConfigSupply+0x70>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d00a      	beq.n	8005712 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056fc:	4b16      	ldr	r3, [pc, #88]	@ (8005758 <HAL_PWREx_ConfigSupply+0x70>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d001      	beq.n	800570e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e01f      	b.n	800574e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e01d      	b.n	800574e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005712:	4b11      	ldr	r3, [pc, #68]	@ (8005758 <HAL_PWREx_ConfigSupply+0x70>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f023 0207 	bic.w	r2, r3, #7
 800571a:	490f      	ldr	r1, [pc, #60]	@ (8005758 <HAL_PWREx_ConfigSupply+0x70>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4313      	orrs	r3, r2
 8005720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005722:	f7fb ffef 	bl	8001704 <HAL_GetTick>
 8005726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005728:	e009      	b.n	800573e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800572a:	f7fb ffeb 	bl	8001704 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005738:	d901      	bls.n	800573e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800573e:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <HAL_PWREx_ConfigSupply+0x70>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800574a:	d1ee      	bne.n	800572a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	58024800 	.word	0x58024800

0800575c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576a:	60d3      	str	r3, [r2, #12]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58024800 	.word	0x58024800

0800577c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	@ 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f000 bc48 	b.w	8006020 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8088 	beq.w	80058ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579e:	4b99      	ldr	r3, [pc, #612]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057a8:	4b96      	ldr	r3, [pc, #600]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d007      	beq.n	80057c4 <HAL_RCC_OscConfig+0x48>
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	2b18      	cmp	r3, #24
 80057b8:	d111      	bne.n	80057de <HAL_RCC_OscConfig+0x62>
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d10c      	bne.n	80057de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d06d      	beq.n	80058ac <HAL_RCC_OscConfig+0x130>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d169      	bne.n	80058ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f000 bc21 	b.w	8006020 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x7a>
 80057e8:	4b86      	ldr	r3, [pc, #536]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a85      	ldr	r2, [pc, #532]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80057ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e02e      	b.n	8005854 <HAL_RCC_OscConfig+0xd8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x9c>
 80057fe:	4b81      	ldr	r3, [pc, #516]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a80      	ldr	r2, [pc, #512]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005810:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e01d      	b.n	8005854 <HAL_RCC_OscConfig+0xd8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0xc0>
 8005822:	4b78      	ldr	r3, [pc, #480]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a77      	ldr	r2, [pc, #476]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b75      	ldr	r3, [pc, #468]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a74      	ldr	r2, [pc, #464]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e00b      	b.n	8005854 <HAL_RCC_OscConfig+0xd8>
 800583c:	4b71      	ldr	r3, [pc, #452]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a70      	ldr	r2, [pc, #448]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4b6e      	ldr	r3, [pc, #440]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a6d      	ldr	r2, [pc, #436]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800584e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d013      	beq.n	8005884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fb ff52 	bl	8001704 <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005864:	f7fb ff4e 	bl	8001704 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	@ 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e3d4      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005876:	4b63      	ldr	r3, [pc, #396]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0xe8>
 8005882:	e014      	b.n	80058ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fb ff3e 	bl	8001704 <HAL_GetTick>
 8005888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800588c:	f7fb ff3a 	bl	8001704 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	@ 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e3c0      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800589e:	4b59      	ldr	r3, [pc, #356]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x110>
 80058aa:	e000      	b.n	80058ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80ca 	beq.w	8005a50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058bc:	4b51      	ldr	r3, [pc, #324]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_RCC_OscConfig+0x166>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b18      	cmp	r3, #24
 80058d6:	d156      	bne.n	8005986 <HAL_RCC_OscConfig+0x20a>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d151      	bne.n	8005986 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e2:	4b48      	ldr	r3, [pc, #288]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x17e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e392      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058fa:	4b42      	ldr	r3, [pc, #264]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 0219 	bic.w	r2, r3, #25
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	493f      	ldr	r1, [pc, #252]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005908:	4313      	orrs	r3, r2
 800590a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fb fefa 	bl	8001704 <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005914:	f7fb fef6 	bl	8001704 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e37c      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005926:	4b37      	ldr	r3, [pc, #220]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	f7fb ff17 	bl	8001764 <HAL_GetREVID>
 8005936:	4603      	mov	r3, r0
 8005938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800593c:	4293      	cmp	r3, r2
 800593e:	d817      	bhi.n	8005970 <HAL_RCC_OscConfig+0x1f4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d108      	bne.n	800595a <HAL_RCC_OscConfig+0x1de>
 8005948:	4b2e      	ldr	r3, [pc, #184]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005950:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005958:	e07a      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	031b      	lsls	r3, r3, #12
 8005968:	4926      	ldr	r1, [pc, #152]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800596a:	4313      	orrs	r3, r2
 800596c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800596e:	e06f      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	4921      	ldr	r1, [pc, #132]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005984:	e064      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d047      	beq.n	8005a1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800598e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 0219 	bic.w	r2, r3, #25
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	491a      	ldr	r1, [pc, #104]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 800599c:	4313      	orrs	r3, r2
 800599e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fb feb0 	bl	8001704 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fb feac 	bl	8001704 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e332      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ba:	4b12      	ldr	r3, [pc, #72]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	f7fb fecd 	bl	8001764 <HAL_GetREVID>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d819      	bhi.n	8005a08 <HAL_RCC_OscConfig+0x28c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d108      	bne.n	80059ee <HAL_RCC_OscConfig+0x272>
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80059e4:	4a07      	ldr	r2, [pc, #28]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	e030      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
 80059ee:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	031b      	lsls	r3, r3, #12
 80059fc:	4901      	ldr	r1, [pc, #4]	@ (8005a04 <HAL_RCC_OscConfig+0x288>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
 8005a02:	e025      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
 8005a04:	58024400 	.word	0x58024400
 8005a08:	4b9a      	ldr	r3, [pc, #616]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	061b      	lsls	r3, r3, #24
 8005a16:	4997      	ldr	r1, [pc, #604]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
 8005a1c:	e018      	b.n	8005a50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1e:	4b95      	ldr	r3, [pc, #596]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a94      	ldr	r2, [pc, #592]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fb fe6b 	bl	8001704 <HAL_GetTick>
 8005a2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a32:	f7fb fe67 	bl	8001704 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e2ed      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a44:	4b8b      	ldr	r3, [pc, #556]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f0      	bne.n	8005a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a9 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a5e:	4b85      	ldr	r3, [pc, #532]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a68:	4b82      	ldr	r3, [pc, #520]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d007      	beq.n	8005a84 <HAL_RCC_OscConfig+0x308>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b18      	cmp	r3, #24
 8005a78:	d13a      	bne.n	8005af0 <HAL_RCC_OscConfig+0x374>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d135      	bne.n	8005af0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a84:	4b7b      	ldr	r3, [pc, #492]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_OscConfig+0x320>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b80      	cmp	r3, #128	@ 0x80
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e2c1      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a9c:	f7fb fe62 	bl	8001764 <HAL_GetREVID>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d817      	bhi.n	8005ada <HAL_RCC_OscConfig+0x35e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x348>
 8005ab2:	4b70      	ldr	r3, [pc, #448]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005aba:	4a6e      	ldr	r2, [pc, #440]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005abc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ac0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac2:	e075      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	069b      	lsls	r3, r3, #26
 8005ad2:	4968      	ldr	r1, [pc, #416]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ad8:	e06a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ada:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	4962      	ldr	r1, [pc, #392]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aee:	e05f      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d042      	beq.n	8005b7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005af8:	4b5e      	ldr	r3, [pc, #376]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5d      	ldr	r2, [pc, #372]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fb fdfe 	bl	8001704 <HAL_GetTick>
 8005b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b0c:	f7fb fdfa 	bl	8001704 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e280      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b1e:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b2a:	f7fb fe1b 	bl	8001764 <HAL_GetREVID>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d817      	bhi.n	8005b68 <HAL_RCC_OscConfig+0x3ec>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d108      	bne.n	8005b52 <HAL_RCC_OscConfig+0x3d6>
 8005b40:	4b4c      	ldr	r3, [pc, #304]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b48:	4a4a      	ldr	r2, [pc, #296]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b4e:	6053      	str	r3, [r2, #4]
 8005b50:	e02e      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
 8005b52:	4b48      	ldr	r3, [pc, #288]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	069b      	lsls	r3, r3, #26
 8005b60:	4944      	ldr	r1, [pc, #272]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
 8005b66:	e023      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
 8005b68:	4b42      	ldr	r3, [pc, #264]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	061b      	lsls	r3, r3, #24
 8005b76:	493f      	ldr	r1, [pc, #252]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
 8005b7c:	e018      	b.n	8005bb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3c      	ldr	r2, [pc, #240]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7fb fdbb 	bl	8001704 <HAL_GetTick>
 8005b8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b92:	f7fb fdb7 	bl	8001704 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e23d      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ba4:	4b33      	ldr	r3, [pc, #204]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f0      	bne.n	8005b92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d036      	beq.n	8005c2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fb fd98 	bl	8001704 <HAL_GetTick>
 8005bd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fb fd94 	bl	8001704 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e21a      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bea:	4b22      	ldr	r3, [pc, #136]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x45c>
 8005bf6:	e018      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c04:	f7fb fd7e 	bl	8001704 <HAL_GetTick>
 8005c08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0c:	f7fb fd7a 	bl	8001704 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e200      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c1e:	4b15      	ldr	r3, [pc, #84]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d039      	beq.n	8005caa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a0c      	ldr	r2, [pc, #48]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c4a:	f7fb fd5b 	bl	8001704 <HAL_GetTick>
 8005c4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c52:	f7fb fd57 	bl	8001704 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e1dd      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c64:	4b03      	ldr	r3, [pc, #12]	@ (8005c74 <HAL_RCC_OscConfig+0x4f8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x4d6>
 8005c70:	e01b      	b.n	8005caa <HAL_RCC_OscConfig+0x52e>
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c78:	4b9b      	ldr	r3, [pc, #620]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a9a      	ldr	r2, [pc, #616]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c84:	f7fb fd3e 	bl	8001704 <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c8c:	f7fb fd3a 	bl	8001704 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1c0      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c9e:	4b92      	ldr	r3, [pc, #584]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8081 	beq.w	8005dba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8005eec <HAL_RCC_OscConfig+0x770>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a8b      	ldr	r2, [pc, #556]	@ (8005eec <HAL_RCC_OscConfig+0x770>)
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cc4:	f7fb fd1e 	bl	8001704 <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ccc:	f7fb fd1a 	bl	8001704 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e1a0      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cde:	4b83      	ldr	r3, [pc, #524]	@ (8005eec <HAL_RCC_OscConfig+0x770>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d106      	bne.n	8005d00 <HAL_RCC_OscConfig+0x584>
 8005cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfe:	e02d      	b.n	8005d5c <HAL_RCC_OscConfig+0x5e0>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10c      	bne.n	8005d22 <HAL_RCC_OscConfig+0x5a6>
 8005d08:	4b77      	ldr	r3, [pc, #476]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	4a76      	ldr	r2, [pc, #472]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d14:	4b74      	ldr	r3, [pc, #464]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d18:	4a73      	ldr	r2, [pc, #460]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d20:	e01c      	b.n	8005d5c <HAL_RCC_OscConfig+0x5e0>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x5c8>
 8005d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d30:	f043 0304 	orr.w	r3, r3, #4
 8005d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d36:	4b6c      	ldr	r3, [pc, #432]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d42:	e00b      	b.n	8005d5c <HAL_RCC_OscConfig+0x5e0>
 8005d44:	4b68      	ldr	r3, [pc, #416]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d48:	4a67      	ldr	r2, [pc, #412]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d50:	4b65      	ldr	r3, [pc, #404]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d54:	4a64      	ldr	r2, [pc, #400]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d56:	f023 0304 	bic.w	r3, r3, #4
 8005d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fb fcce 	bl	8001704 <HAL_GetTick>
 8005d68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6c:	f7fb fcca 	bl	8001704 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e14e      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d82:	4b59      	ldr	r3, [pc, #356]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ee      	beq.n	8005d6c <HAL_RCC_OscConfig+0x5f0>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fb fcb8 	bl	8001704 <HAL_GetTick>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fb fcb4 	bl	8001704 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e138      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dae:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1ee      	bne.n	8005d98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 812d 	beq.w	800601e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005dc4:	4b48      	ldr	r3, [pc, #288]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dcc:	2b18      	cmp	r3, #24
 8005dce:	f000 80bd 	beq.w	8005f4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f040 809e 	bne.w	8005f18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ddc:	4b42      	ldr	r3, [pc, #264]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a41      	ldr	r2, [pc, #260]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fb fc8c 	bl	8001704 <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fb fc88 	bl	8001704 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e10e      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e02:	4b39      	ldr	r3, [pc, #228]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e12:	4b37      	ldr	r3, [pc, #220]	@ (8005ef0 <HAL_RCC_OscConfig+0x774>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e1e:	0112      	lsls	r2, r2, #4
 8005e20:	430a      	orrs	r2, r1
 8005e22:	4931      	ldr	r1, [pc, #196]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e36:	3b01      	subs	r3, #1
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	3b01      	subs	r3, #1
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e58:	4923      	ldr	r1, [pc, #140]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e6e:	4b21      	ldr	r3, [pc, #132]	@ (8005ef4 <HAL_RCC_OscConfig+0x778>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e76:	00d2      	lsls	r2, r2, #3
 8005e78:	491b      	ldr	r1, [pc, #108]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	f023 020c 	bic.w	r2, r3, #12
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	4917      	ldr	r1, [pc, #92]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e90:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	f023 0202 	bic.w	r2, r3, #2
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	4912      	ldr	r1, [pc, #72]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ea2:	4b11      	ldr	r3, [pc, #68]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	4a10      	ldr	r2, [pc, #64]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005eba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ec6:	4b08      	ldr	r3, [pc, #32]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	4a07      	ldr	r2, [pc, #28]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed2:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ede:	f7fb fc11 	bl	8001704 <HAL_GetTick>
 8005ee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee4:	e011      	b.n	8005f0a <HAL_RCC_OscConfig+0x78e>
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	58024800 	.word	0x58024800
 8005ef0:	fffffc0c 	.word	0xfffffc0c
 8005ef4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fb fc04 	bl	8001704 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e08a      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f0a:	4b47      	ldr	r3, [pc, #284]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x77c>
 8005f16:	e082      	b.n	800601e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f18:	4b43      	ldr	r3, [pc, #268]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a42      	ldr	r2, [pc, #264]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fb fbee 	bl	8001704 <HAL_GetTick>
 8005f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2c:	f7fb fbea 	bl	8001704 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e070      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x7b0>
 8005f4a:	e068      	b.n	800601e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f4c:	4b36      	ldr	r3, [pc, #216]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f52:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d031      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f003 0203 	and.w	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d12a      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d122      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d11a      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	0a5b      	lsrs	r3, r3, #9
 8005f92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d111      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d108      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	0e1b      	lsrs	r3, r3, #24
 8005fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e02b      	b.n	8006020 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fc8:	4b17      	ldr	r3, [pc, #92]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fcc:	08db      	lsrs	r3, r3, #3
 8005fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d01f      	beq.n	800601e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fde:	4b12      	ldr	r3, [pc, #72]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fea:	f7fb fb8b 	bl	8001704 <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005ff0:	bf00      	nop
 8005ff2:	f7fb fb87 	bl	8001704 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d0f9      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8006000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006002:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <HAL_RCC_OscConfig+0x8b0>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800600a:	00d2      	lsls	r2, r2, #3
 800600c:	4906      	ldr	r1, [pc, #24]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 800600e:	4313      	orrs	r3, r2
 8006010:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006012:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	4a04      	ldr	r2, [pc, #16]	@ (8006028 <HAL_RCC_OscConfig+0x8ac>)
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3730      	adds	r7, #48	@ 0x30
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	58024400 	.word	0x58024400
 800602c:	ffff0007 	.word	0xffff0007

08006030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e19c      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006044:	4b8a      	ldr	r3, [pc, #552]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d910      	bls.n	8006074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b87      	ldr	r3, [pc, #540]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 020f 	bic.w	r2, r3, #15
 800605a:	4985      	ldr	r1, [pc, #532]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b83      	ldr	r3, [pc, #524]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e184      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	4b7b      	ldr	r3, [pc, #492]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800608c:	429a      	cmp	r2, r3
 800608e:	d908      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006090:	4b78      	ldr	r3, [pc, #480]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4975      	ldr	r1, [pc, #468]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	4b70      	ldr	r3, [pc, #448]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d908      	bls.n	80060d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060be:	4b6d      	ldr	r3, [pc, #436]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	496a      	ldr	r1, [pc, #424]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	4b64      	ldr	r3, [pc, #400]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d908      	bls.n	80060fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060ec:	4b61      	ldr	r3, [pc, #388]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	495e      	ldr	r1, [pc, #376]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d010      	beq.n	800612c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	4b59      	ldr	r3, [pc, #356]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006116:	429a      	cmp	r2, r3
 8006118:	d908      	bls.n	800612c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800611a:	4b56      	ldr	r3, [pc, #344]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4953      	ldr	r1, [pc, #332]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006128:	4313      	orrs	r3, r2
 800612a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	4b4d      	ldr	r3, [pc, #308]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	429a      	cmp	r2, r3
 8006146:	d908      	bls.n	800615a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f023 020f 	bic.w	r2, r3, #15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4947      	ldr	r1, [pc, #284]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006156:	4313      	orrs	r3, r2
 8006158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d055      	beq.n	8006212 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006166:	4b43      	ldr	r3, [pc, #268]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4940      	ldr	r1, [pc, #256]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006174:	4313      	orrs	r3, r2
 8006176:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006180:	4b3c      	ldr	r3, [pc, #240]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d121      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0f6      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d107      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006198:	4b36      	ldr	r3, [pc, #216]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d115      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0ea      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061b0:	4b30      	ldr	r3, [pc, #192]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0de      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0d6      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061d0:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f023 0207 	bic.w	r2, r3, #7
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4925      	ldr	r1, [pc, #148]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e2:	f7fb fa8f 	bl	8001704 <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e8:	e00a      	b.n	8006200 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ea:	f7fb fa8b 	bl	8001704 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e0be      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006200:	4b1c      	ldr	r3, [pc, #112]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	429a      	cmp	r2, r3
 8006210:	d1eb      	bne.n	80061ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d010      	beq.n	8006240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	429a      	cmp	r2, r3
 800622c:	d208      	bcs.n	8006240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622e:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	490e      	ldr	r1, [pc, #56]	@ (8006274 <HAL_RCC_ClockConfig+0x244>)
 800623c:	4313      	orrs	r3, r2
 800623e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d214      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b08      	ldr	r3, [pc, #32]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 020f 	bic.w	r2, r3, #15
 8006256:	4906      	ldr	r1, [pc, #24]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	4313      	orrs	r3, r2
 800625c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <HAL_RCC_ClockConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d005      	beq.n	8006278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e086      	b.n	800637e <HAL_RCC_ClockConfig+0x34e>
 8006270:	52002000 	.word	0x52002000
 8006274:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	4b3f      	ldr	r3, [pc, #252]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006290:	429a      	cmp	r2, r3
 8006292:	d208      	bcs.n	80062a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006294:	4b3c      	ldr	r3, [pc, #240]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4939      	ldr	r1, [pc, #228]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	4b34      	ldr	r3, [pc, #208]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062be:	429a      	cmp	r2, r3
 80062c0:	d208      	bcs.n	80062d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c2:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	492e      	ldr	r1, [pc, #184]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	4b28      	ldr	r3, [pc, #160]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d208      	bcs.n	8006302 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062f0:	4b25      	ldr	r3, [pc, #148]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	4922      	ldr	r1, [pc, #136]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69da      	ldr	r2, [r3, #28]
 8006312:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800631a:	429a      	cmp	r2, r3
 800631c:	d208      	bcs.n	8006330 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800631e:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4917      	ldr	r1, [pc, #92]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 800632c:	4313      	orrs	r3, r2
 800632e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006330:	f000 f834 	bl	800639c <HAL_RCC_GetSysClockFreq>
 8006334:	4602      	mov	r2, r0
 8006336:	4b14      	ldr	r3, [pc, #80]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	4912      	ldr	r1, [pc, #72]	@ (800638c <HAL_RCC_ClockConfig+0x35c>)
 8006342:	5ccb      	ldrb	r3, [r1, r3]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800634e:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <HAL_RCC_ClockConfig+0x358>)
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	4a0d      	ldr	r2, [pc, #52]	@ (800638c <HAL_RCC_ClockConfig+0x35c>)
 8006358:	5cd3      	ldrb	r3, [r2, r3]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <HAL_RCC_ClockConfig+0x360>)
 8006366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006368:	4a0a      	ldr	r2, [pc, #40]	@ (8006394 <HAL_RCC_ClockConfig+0x364>)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800636e:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <HAL_RCC_ClockConfig+0x368>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fa fec4 	bl	8001100 <HAL_InitTick>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400
 800638c:	0800df08 	.word	0x0800df08
 8006390:	24000004 	.word	0x24000004
 8006394:	24000000 	.word	0x24000000
 8006398:	24000008 	.word	0x24000008

0800639c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	@ 0x24
 80063a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a2:	4bb3      	ldr	r3, [pc, #716]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063aa:	2b18      	cmp	r3, #24
 80063ac:	f200 8155 	bhi.w	800665a <HAL_RCC_GetSysClockFreq+0x2be>
 80063b0:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800665b 	.word	0x0800665b
 80063c0:	0800665b 	.word	0x0800665b
 80063c4:	0800665b 	.word	0x0800665b
 80063c8:	0800665b 	.word	0x0800665b
 80063cc:	0800665b 	.word	0x0800665b
 80063d0:	0800665b 	.word	0x0800665b
 80063d4:	0800665b 	.word	0x0800665b
 80063d8:	08006443 	.word	0x08006443
 80063dc:	0800665b 	.word	0x0800665b
 80063e0:	0800665b 	.word	0x0800665b
 80063e4:	0800665b 	.word	0x0800665b
 80063e8:	0800665b 	.word	0x0800665b
 80063ec:	0800665b 	.word	0x0800665b
 80063f0:	0800665b 	.word	0x0800665b
 80063f4:	0800665b 	.word	0x0800665b
 80063f8:	08006449 	.word	0x08006449
 80063fc:	0800665b 	.word	0x0800665b
 8006400:	0800665b 	.word	0x0800665b
 8006404:	0800665b 	.word	0x0800665b
 8006408:	0800665b 	.word	0x0800665b
 800640c:	0800665b 	.word	0x0800665b
 8006410:	0800665b 	.word	0x0800665b
 8006414:	0800665b 	.word	0x0800665b
 8006418:	0800644f 	.word	0x0800644f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641c:	4b94      	ldr	r3, [pc, #592]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006428:	4b91      	ldr	r3, [pc, #580]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	4a90      	ldr	r2, [pc, #576]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800643a:	e111      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800643c:	4b8d      	ldr	r3, [pc, #564]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800643e:	61bb      	str	r3, [r7, #24]
      break;
 8006440:	e10e      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006442:	4b8d      	ldr	r3, [pc, #564]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006444:	61bb      	str	r3, [r7, #24]
      break;
 8006446:	e10b      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006448:	4b8c      	ldr	r3, [pc, #560]	@ (800667c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800644a:	61bb      	str	r3, [r7, #24]
      break;
 800644c:	e108      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800644e:	4b88      	ldr	r3, [pc, #544]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006458:	4b85      	ldr	r3, [pc, #532]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006462:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006464:	4b82      	ldr	r3, [pc, #520]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800646e:	4b80      	ldr	r3, [pc, #512]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80e1 	beq.w	8006654 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b02      	cmp	r3, #2
 8006496:	f000 8083 	beq.w	80065a0 <HAL_RCC_GetSysClockFreq+0x204>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b02      	cmp	r3, #2
 800649e:	f200 80a1 	bhi.w	80065e4 <HAL_RCC_GetSysClockFreq+0x248>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x114>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d056      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ae:	e099      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02d      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b62      	ldr	r3, [pc, #392]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006516:	e087      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006684 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652a:	4b51      	ldr	r3, [pc, #324]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	ed97 6a02 	vldr	s12, [r7, #8]
 800653e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800654e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800655a:	e065      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b40      	ldr	r3, [pc, #256]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006582:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800659e:	e043      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800668c <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065e2:	e021      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006688 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	ed97 6a02 	vldr	s12, [r7, #8]
 800660a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006626:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006628:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	0a5b      	lsrs	r3, r3, #9
 800662e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006632:	3301      	adds	r3, #1
 8006634:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006640:	edd7 6a07 	vldr	s13, [r7, #28]
 8006644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664c:	ee17 3a90 	vmov	r3, s15
 8006650:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006652:	e005      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
      break;
 8006658:	e002      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800665a:	4b07      	ldr	r3, [pc, #28]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800665c:	61bb      	str	r3, [r7, #24]
      break;
 800665e:	bf00      	nop
  }

  return sysclockfreq;
 8006660:	69bb      	ldr	r3, [r7, #24]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3724      	adds	r7, #36	@ 0x24
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	007a1200 	.word	0x007a1200
 8006680:	46000000 	.word	0x46000000
 8006684:	4c742400 	.word	0x4c742400
 8006688:	4a742400 	.word	0x4a742400
 800668c:	4af42400 	.word	0x4af42400

08006690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006696:	f7ff fe81 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490f      	ldr	r1, [pc, #60]	@ (80066e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066b4:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	4a09      	ldr	r2, [pc, #36]	@ (80066e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	4a07      	ldr	r2, [pc, #28]	@ (80066e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ce:	4a07      	ldr	r2, [pc, #28]	@ (80066ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80066d6:	681b      	ldr	r3, [r3, #0]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	58024400 	.word	0x58024400
 80066e4:	0800df08 	.word	0x0800df08
 80066e8:	24000004 	.word	0x24000004
 80066ec:	24000000 	.word	0x24000000

080066f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066f4:	f7ff ffcc 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	4904      	ldr	r1, [pc, #16]	@ (8006718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006706:	5ccb      	ldrb	r3, [r1, r3]
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006710:	4618      	mov	r0, r3
 8006712:	bd80      	pop	{r7, pc}
 8006714:	58024400 	.word	0x58024400
 8006718:	0800df08 	.word	0x0800df08

0800671c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006720:	f7ff ffb6 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	4904      	ldr	r1, [pc, #16]	@ (8006744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006732:	5ccb      	ldrb	r3, [r1, r3]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	58024400 	.word	0x58024400
 8006744:	0800df08 	.word	0x0800df08

08006748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	223f      	movs	r2, #63	@ 0x3f
 8006756:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006758:	4b1a      	ldr	r3, [pc, #104]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0207 	and.w	r2, r3, #7
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006764:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006770:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800677c:	4b11      	ldr	r3, [pc, #68]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006788:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80067a0:	4b08      	ldr	r3, [pc, #32]	@ (80067c4 <HAL_RCC_GetClockConfig+0x7c>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067ac:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <HAL_RCC_GetClockConfig+0x80>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 020f 	and.w	r2, r3, #15
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	58024400 	.word	0x58024400
 80067c8:	52002000 	.word	0x52002000

080067cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d0:	b0ca      	sub	sp, #296	@ 0x128
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80067f0:	2500      	movs	r5, #0
 80067f2:	ea54 0305 	orrs.w	r3, r4, r5
 80067f6:	d049      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006802:	d02f      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006808:	d828      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800680a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680e:	d01a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006814:	d822      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800681a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681e:	d007      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006820:	e01c      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006822:	4bb8      	ldr	r3, [pc, #736]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	4ab7      	ldr	r2, [pc, #732]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800682e:	e01a      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	3308      	adds	r3, #8
 8006836:	2102      	movs	r1, #2
 8006838:	4618      	mov	r0, r3
 800683a:	f002 fb61 	bl	8008f00 <RCCEx_PLL2_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006844:	e00f      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	3328      	adds	r3, #40	@ 0x28
 800684c:	2102      	movs	r1, #2
 800684e:	4618      	mov	r0, r3
 8006850:	f002 fc08 	bl	8009064 <RCCEx_PLL3_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800685a:	e004      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800686e:	4ba5      	ldr	r3, [pc, #660]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006872:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800687c:	4aa1      	ldr	r2, [pc, #644]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800687e:	430b      	orrs	r3, r1
 8006880:	6513      	str	r3, [r2, #80]	@ 0x50
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006898:	f04f 0900 	mov.w	r9, #0
 800689c:	ea58 0309 	orrs.w	r3, r8, r9
 80068a0:	d047      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d82a      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068ac:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068c9 	.word	0x080068c9
 80068b8:	080068d7 	.word	0x080068d7
 80068bc:	080068ed 	.word	0x080068ed
 80068c0:	0800690b 	.word	0x0800690b
 80068c4:	0800690b 	.word	0x0800690b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	4a8d      	ldr	r2, [pc, #564]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068d4:	e01a      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	3308      	adds	r3, #8
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f002 fb0e 	bl	8008f00 <RCCEx_PLL2_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068ea:	e00f      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	3328      	adds	r3, #40	@ 0x28
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 fbb5 	bl	8009064 <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006900:	e004      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800690a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006914:	4b7b      	ldr	r3, [pc, #492]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006918:	f023 0107 	bic.w	r1, r3, #7
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006922:	4a78      	ldr	r2, [pc, #480]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006924:	430b      	orrs	r3, r1
 8006926:	6513      	str	r3, [r2, #80]	@ 0x50
 8006928:	e003      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800693e:	f04f 0b00 	mov.w	fp, #0
 8006942:	ea5a 030b 	orrs.w	r3, sl, fp
 8006946:	d04c      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006952:	d030      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006958:	d829      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800695a:	2bc0      	cmp	r3, #192	@ 0xc0
 800695c:	d02d      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800695e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006960:	d825      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006962:	2b80      	cmp	r3, #128	@ 0x80
 8006964:	d018      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006966:	2b80      	cmp	r3, #128	@ 0x80
 8006968:	d821      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800696e:	2b40      	cmp	r3, #64	@ 0x40
 8006970:	d007      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006972:	e01c      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b63      	ldr	r3, [pc, #396]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4a62      	ldr	r2, [pc, #392]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006980:	e01c      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	3308      	adds	r3, #8
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f002 fab8 	bl	8008f00 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006996:	e011      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699c:	3328      	adds	r3, #40	@ 0x28
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f002 fb5f 	bl	8009064 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069b6:	bf00      	nop
 80069b8:	e000      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80069ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80069d8:	e003      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80069ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80069f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80069fc:	460b      	mov	r3, r1
 80069fe:	4313      	orrs	r3, r2
 8006a00:	d053      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a0e:	d035      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a14:	d82e      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a1a:	d031      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a20:	d828      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a26:	d01a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a2c:	d822      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a36:	d007      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a38:	e01c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3a:	4b32      	ldr	r3, [pc, #200]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	4a31      	ldr	r2, [pc, #196]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a46:	e01c      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f002 fa55 	bl	8008f00 <RCCEx_PLL2_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a5c:	e011      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	3328      	adds	r3, #40	@ 0x28
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 fafc 	bl	8009064 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a72:	e006      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aa0:	e003      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006ab6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ac0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d056      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad6:	d038      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ad8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006adc:	d831      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ade:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ae2:	d034      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ae4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ae8:	d82b      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aee:	d01d      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006af0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006af4:	d825      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006afe:	d00a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b00:	e01f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b08:	4ba2      	ldr	r3, [pc, #648]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4aa1      	ldr	r2, [pc, #644]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b14:	e01c      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 f9ee 	bl	8008f00 <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b2a:	e011      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	3328      	adds	r3, #40	@ 0x28
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fa95 	bl	8009064 <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b48:	e002      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b58:	4b8e      	ldr	r3, [pc, #568]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b68:	4a8a      	ldr	r2, [pc, #552]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b6e:	e003      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b92:	460b      	mov	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	d03a      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9e:	2b30      	cmp	r3, #48	@ 0x30
 8006ba0:	d01f      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ba2:	2b30      	cmp	r3, #48	@ 0x30
 8006ba4:	d819      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d815      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d019      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d111      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb6:	4b77      	ldr	r3, [pc, #476]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	4a76      	ldr	r2, [pc, #472]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bc2:	e011      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc8:	3308      	adds	r3, #8
 8006bca:	2102      	movs	r1, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f002 f997 	bl	8008f00 <RCCEx_PLL2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006bd8:	e006      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be0:	e002      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006be2:	bf00      	nop
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bf0:	4b68      	ldr	r3, [pc, #416]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bfe:	4a65      	ldr	r2, [pc, #404]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c00:	430b      	orrs	r3, r1
 8006c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c04:	e003      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d051      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c38:	d035      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c3e:	d82e      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c44:	d031      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c4a:	d828      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c50:	d01a      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c56:	d822      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c62:	e01c      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b4b      	ldr	r3, [pc, #300]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a4a      	ldr	r2, [pc, #296]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c70:	e01c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	3308      	adds	r3, #8
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 f940 	bl	8008f00 <RCCEx_PLL2_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c86:	e011      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8c:	3328      	adds	r3, #40	@ 0x28
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 f9e7 	bl	8009064 <RCCEx_PLL3_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c9c:	e006      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cb4:	4b37      	ldr	r3, [pc, #220]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc2:	4a34      	ldr	r2, [pc, #208]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cc8:	e003      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ce8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006cec:	460b      	mov	r3, r1
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	d056      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cfc:	d033      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006cfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d02:	d82c      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d08:	d02f      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d0e:	d826      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d14:	d02b      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d1a:	d820      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d20:	d012      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d26:	d81a      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d022      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d30:	d115      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	3308      	adds	r3, #8
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 f8e0 	bl	8008f00 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d46:	e015      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4c:	3328      	adds	r3, #40	@ 0x28
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4618      	mov	r0, r3
 8006d52:	f002 f987 	bl	8009064 <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d5c:	e00a      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d66:	bf00      	nop
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d8a:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006db6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d055      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dcc:	d033      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dd2:	d82c      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd8:	d02f      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	d826      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006de0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006de4:	d02b      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006de6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dea:	d820      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df0:	d012      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df6:	d81a      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e00:	d115      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	3308      	adds	r3, #8
 8006e08:	2101      	movs	r1, #1
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 f878 	bl	8008f00 <RCCEx_PLL2_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e16:	e015      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	3328      	adds	r3, #40	@ 0x28
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 f91f 	bl	8009064 <RCCEx_PLL3_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e00a      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e34:	e006      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e36:	bf00      	nop
 8006e38:	e004      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e002      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10b      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e4c:	4ba3      	ldr	r3, [pc, #652]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e5c:	4a9f      	ldr	r2, [pc, #636]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	d037      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e96:	d00e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e9c:	d816      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d018      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006ea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	4a8b      	ldr	r2, [pc, #556]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006eb4:	e00f      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	3308      	adds	r3, #8
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 f81e 	bl	8008f00 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006eca:	e004      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ede:	4b7f      	ldr	r3, [pc, #508]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eec:	4a7b      	ldr	r2, [pc, #492]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ef2:	e003      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	d039      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d81c      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f26:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f69 	.word	0x08006f69
 8006f30:	08006f3d 	.word	0x08006f3d
 8006f34:	08006f4b 	.word	0x08006f4b
 8006f38:	08006f69 	.word	0x08006f69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b67      	ldr	r3, [pc, #412]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4a66      	ldr	r2, [pc, #408]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f48:	e00f      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	3308      	adds	r3, #8
 8006f50:	2102      	movs	r1, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 ffd4 	bl	8008f00 <RCCEx_PLL2_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f5e:	e004      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f66:	e000      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f72:	4b5a      	ldr	r3, [pc, #360]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f76:	f023 0103 	bic.w	r1, r3, #3
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f80:	4a56      	ldr	r2, [pc, #344]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f82:	430b      	orrs	r3, r1
 8006f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f000 809f 	beq.w	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fbe:	f7fa fba1 	bl	8001704 <HAL_GetTick>
 8006fc2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc6:	e00b      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc8:	f7fa fb9c 	bl	8001704 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b64      	cmp	r3, #100	@ 0x64
 8006fd6:	d903      	bls.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fde:	e005      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ed      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d179      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ff4:	4b39      	ldr	r3, [pc, #228]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007000:	4053      	eors	r3, r2
 8007002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007006:	2b00      	cmp	r3, #0
 8007008:	d015      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800700a:	4b34      	ldr	r3, [pc, #208]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007012:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007016:	4b31      	ldr	r3, [pc, #196]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701a:	4a30      	ldr	r2, [pc, #192]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007020:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007022:	4b2e      	ldr	r3, [pc, #184]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	4a2d      	ldr	r2, [pc, #180]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800702c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800702e:	4a2b      	ldr	r2, [pc, #172]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007034:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800703e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007042:	d118      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fa fb5e 	bl	8001704 <HAL_GetTick>
 8007048:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800704c:	e00d      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704e:	f7fa fb59 	bl	8001704 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800705e:	429a      	cmp	r2, r3
 8007060:	d903      	bls.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007068:	e005      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800706a:	4b1c      	ldr	r3, [pc, #112]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0eb      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707a:	2b00      	cmp	r3, #0
 800707c:	d129      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800708a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800708e:	d10e      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007090:	4b12      	ldr	r3, [pc, #72]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070a0:	091a      	lsrs	r2, r3, #4
 80070a2:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	4a0d      	ldr	r2, [pc, #52]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6113      	str	r3, [r2, #16]
 80070ac:	e005      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80070ae:	4b0b      	ldr	r3, [pc, #44]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	4a0a      	ldr	r2, [pc, #40]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070b8:	6113      	str	r3, [r2, #16]
 80070ba:	4b08      	ldr	r3, [pc, #32]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ca:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d0:	e00e      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80070da:	e009      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80070dc:	58024400 	.word	0x58024400
 80070e0:	58024800 	.word	0x58024800
 80070e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f002 0301 	and.w	r3, r2, #1
 80070fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007106:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	f000 8089 	beq.w	8007224 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007118:	2b28      	cmp	r3, #40	@ 0x28
 800711a:	d86b      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800711c:	a201      	add	r2, pc, #4	@ (adr r2, 8007124 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	080071fd 	.word	0x080071fd
 8007128:	080071f5 	.word	0x080071f5
 800712c:	080071f5 	.word	0x080071f5
 8007130:	080071f5 	.word	0x080071f5
 8007134:	080071f5 	.word	0x080071f5
 8007138:	080071f5 	.word	0x080071f5
 800713c:	080071f5 	.word	0x080071f5
 8007140:	080071f5 	.word	0x080071f5
 8007144:	080071c9 	.word	0x080071c9
 8007148:	080071f5 	.word	0x080071f5
 800714c:	080071f5 	.word	0x080071f5
 8007150:	080071f5 	.word	0x080071f5
 8007154:	080071f5 	.word	0x080071f5
 8007158:	080071f5 	.word	0x080071f5
 800715c:	080071f5 	.word	0x080071f5
 8007160:	080071f5 	.word	0x080071f5
 8007164:	080071df 	.word	0x080071df
 8007168:	080071f5 	.word	0x080071f5
 800716c:	080071f5 	.word	0x080071f5
 8007170:	080071f5 	.word	0x080071f5
 8007174:	080071f5 	.word	0x080071f5
 8007178:	080071f5 	.word	0x080071f5
 800717c:	080071f5 	.word	0x080071f5
 8007180:	080071f5 	.word	0x080071f5
 8007184:	080071fd 	.word	0x080071fd
 8007188:	080071f5 	.word	0x080071f5
 800718c:	080071f5 	.word	0x080071f5
 8007190:	080071f5 	.word	0x080071f5
 8007194:	080071f5 	.word	0x080071f5
 8007198:	080071f5 	.word	0x080071f5
 800719c:	080071f5 	.word	0x080071f5
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	080071fd 	.word	0x080071fd
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	080071f5 	.word	0x080071f5
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f5 	.word	0x080071f5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071f5 	.word	0x080071f5
 80071c4:	080071fd 	.word	0x080071fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	3308      	adds	r3, #8
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fe95 	bl	8008f00 <RCCEx_PLL2_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071dc:	e00f      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	3328      	adds	r3, #40	@ 0x28
 80071e4:	2101      	movs	r1, #1
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 ff3c 	bl	8009064 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071f2:	e004      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80071fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007206:	4bbf      	ldr	r3, [pc, #764]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007214:	4abb      	ldr	r2, [pc, #748]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6553      	str	r3, [r2, #84]	@ 0x54
 800721a:	e003      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f002 0302 	and.w	r3, r2, #2
 8007230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007234:	2300      	movs	r3, #0
 8007236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800723a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800723e:	460b      	mov	r3, r1
 8007240:	4313      	orrs	r3, r2
 8007242:	d041      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800724a:	2b05      	cmp	r3, #5
 800724c:	d824      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800724e:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072a1 	.word	0x080072a1
 8007258:	0800726d 	.word	0x0800726d
 800725c:	08007283 	.word	0x08007283
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	3308      	adds	r3, #8
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fe43 	bl	8008f00 <RCCEx_PLL2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007280:	e00f      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	3328      	adds	r3, #40	@ 0x28
 8007288:	2101      	movs	r1, #1
 800728a:	4618      	mov	r0, r3
 800728c:	f001 feea 	bl	8009064 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007296:	e004      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80072a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072aa:	4b96      	ldr	r3, [pc, #600]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ae:	f023 0107 	bic.w	r1, r3, #7
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072b8:	4a92      	ldr	r2, [pc, #584]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 0304 	and.w	r3, r2, #4
 80072d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d044      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d825      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007349 	.word	0x08007349
 8007300:	08007315 	.word	0x08007315
 8007304:	0800732b 	.word	0x0800732b
 8007308:	08007349 	.word	0x08007349
 800730c:	08007349 	.word	0x08007349
 8007310:	08007349 	.word	0x08007349
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	3308      	adds	r3, #8
 800731a:	2101      	movs	r1, #1
 800731c:	4618      	mov	r0, r3
 800731e:	f001 fdef 	bl	8008f00 <RCCEx_PLL2_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007328:	e00f      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	3328      	adds	r3, #40	@ 0x28
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f001 fe96 	bl	8009064 <RCCEx_PLL3_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800733e:	e004      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007346:	e000      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007352:	4b6c      	ldr	r3, [pc, #432]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007356:	f023 0107 	bic.w	r1, r3, #7
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007362:	4a68      	ldr	r2, [pc, #416]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007364:	430b      	orrs	r3, r1
 8007366:	6593      	str	r3, [r2, #88]	@ 0x58
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f002 0320 	and.w	r3, r2, #32
 800737e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d055      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800739e:	d033      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80073a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a4:	d82c      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073aa:	d02f      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80073ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b0:	d826      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073b6:	d02b      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80073b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073bc:	d820      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c2:	d012      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80073c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073c8:	d81a      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d022      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073d2:	d115      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d8:	3308      	adds	r3, #8
 80073da:	2100      	movs	r1, #0
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 fd8f 	bl	8008f00 <RCCEx_PLL2_Config>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073e8:	e015      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	3328      	adds	r3, #40	@ 0x28
 80073f0:	2102      	movs	r1, #2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fe36 	bl	8009064 <RCCEx_PLL3_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073fe:	e00a      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007406:	e006      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800741e:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007422:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	4a35      	ldr	r2, [pc, #212]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007430:	430b      	orrs	r3, r1
 8007432:	6553      	str	r3, [r2, #84]	@ 0x54
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800744a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007454:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d058      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007466:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800746a:	d033      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800746c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007470:	d82c      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007476:	d02f      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747c:	d826      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800747e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007482:	d02b      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007488:	d820      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748e:	d012      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007494:	d81a      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d022      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749e:	d115      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	3308      	adds	r3, #8
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fd29 	bl	8008f00 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074b4:	e015      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ba:	3328      	adds	r3, #40	@ 0x28
 80074bc:	2102      	movs	r1, #2
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fdd0 	bl	8009064 <RCCEx_PLL3_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074ca:	e00a      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d2:	e006      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d4:	bf00      	nop
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074d8:	bf00      	nop
 80074da:	e002      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10e      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074ea:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074fa:	4a02      	ldr	r2, [pc, #8]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800751c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007526:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d055      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007538:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800753c:	d033      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800753e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007542:	d82c      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007548:	d02f      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800754a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800754e:	d826      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007550:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007554:	d02b      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007556:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800755a:	d820      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800755c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007560:	d012      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007566:	d81a      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d022      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800756c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007570:	d115      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	3308      	adds	r3, #8
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f001 fcc0 	bl	8008f00 <RCCEx_PLL2_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007586:	e015      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	3328      	adds	r3, #40	@ 0x28
 800758e:	2102      	movs	r1, #2
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fd67 	bl	8009064 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800759c:	e00a      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a4:	e006      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075a6:	bf00      	nop
 80075a8:	e004      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075aa:	bf00      	nop
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10b      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075cc:	4a9d      	ldr	r2, [pc, #628]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d2:	e003      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f002 0308 	and.w	r3, r2, #8
 80075e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ec:	2300      	movs	r3, #0
 80075ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075f6:	460b      	mov	r3, r1
 80075f8:	4313      	orrs	r3, r2
 80075fa:	d01e      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007608:	d10c      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800760a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760e:	3328      	adds	r3, #40	@ 0x28
 8007610:	2102      	movs	r1, #2
 8007612:	4618      	mov	r0, r3
 8007614:	f001 fd26 	bl	8009064 <RCCEx_PLL3_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007624:	4b87      	ldr	r3, [pc, #540]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007628:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007634:	4a83      	ldr	r2, [pc, #524]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007636:	430b      	orrs	r3, r1
 8007638:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f002 0310 	and.w	r3, r2, #16
 8007646:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007650:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007654:	460b      	mov	r3, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	d01e      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007666:	d10c      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766c:	3328      	adds	r3, #40	@ 0x28
 800766e:	2102      	movs	r1, #2
 8007670:	4618      	mov	r0, r3
 8007672:	f001 fcf7 	bl	8009064 <RCCEx_PLL3_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007682:	4b70      	ldr	r3, [pc, #448]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007686:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007692:	4a6c      	ldr	r2, [pc, #432]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007694:	430b      	orrs	r3, r1
 8007696:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d03e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c4:	d022      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80076c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ca:	d81b      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d4:	d00b      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80076d6:	e015      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076dc:	3308      	adds	r3, #8
 80076de:	2100      	movs	r1, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 fc0d 	bl	8008f00 <RCCEx_PLL2_Config>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076ec:	e00f      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	3328      	adds	r3, #40	@ 0x28
 80076f4:	2102      	movs	r1, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fcb4 	bl	8009064 <RCCEx_PLL3_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007702:	e004      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800770c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007716:	4b4b      	ldr	r3, [pc, #300]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007726:	4a47      	ldr	r2, [pc, #284]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007728:	430b      	orrs	r3, r1
 800772a:	6593      	str	r3, [r2, #88]	@ 0x58
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007742:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007744:	2300      	movs	r3, #0
 8007746:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007748:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800774c:	460b      	mov	r3, r1
 800774e:	4313      	orrs	r3, r2
 8007750:	d03b      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800775e:	d01f      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007760:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007764:	d818      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800776a:	d003      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800776c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007770:	d007      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007772:	e011      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4b33      	ldr	r3, [pc, #204]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4a32      	ldr	r2, [pc, #200]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007780:	e00f      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	3328      	adds	r3, #40	@ 0x28
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fc6a 	bl	8009064 <RCCEx_PLL3_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007796:	e004      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800779e:	e000      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80077a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077aa:	4b26      	ldr	r3, [pc, #152]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	4a22      	ldr	r2, [pc, #136]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	6553      	str	r3, [r2, #84]	@ 0x54
 80077c0:	e003      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80077d8:	2300      	movs	r3, #0
 80077da:	677b      	str	r3, [r7, #116]	@ 0x74
 80077dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80077e0:	460b      	mov	r3, r1
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d034      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f4:	d007      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80077f6:	e011      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f8:	4b12      	ldr	r3, [pc, #72]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	4a11      	ldr	r2, [pc, #68]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007804:	e00e      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	3308      	adds	r3, #8
 800780c:	2102      	movs	r1, #2
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fb76 	bl	8008f00 <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800781a:	e003      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10d      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800782c:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007830:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783a:	4a02      	ldr	r2, [pc, #8]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783c:	430b      	orrs	r3, r1
 800783e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007840:	e006      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800785c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800785e:	2300      	movs	r3, #0
 8007860:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007862:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007866:	460b      	mov	r3, r1
 8007868:	4313      	orrs	r3, r2
 800786a:	d00c      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	3328      	adds	r3, #40	@ 0x28
 8007872:	2102      	movs	r1, #2
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fbf5 	bl	8009064 <RCCEx_PLL3_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007892:	663b      	str	r3, [r7, #96]	@ 0x60
 8007894:	2300      	movs	r3, #0
 8007896:	667b      	str	r3, [r7, #100]	@ 0x64
 8007898:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800789c:	460b      	mov	r3, r1
 800789e:	4313      	orrs	r3, r2
 80078a0:	d038      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ae:	d018      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80078b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b4:	d811      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ba:	d014      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80078bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c0:	d80b      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d011      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ca:	d106      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4bc3      	ldr	r3, [pc, #780]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	4ac2      	ldr	r2, [pc, #776]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078d8:	e008      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e0:	e004      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078e2:	bf00      	nop
 80078e4:	e002      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078e6:	bf00      	nop
 80078e8:	e000      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10b      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078f4:	4bb9      	ldr	r3, [pc, #740]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007904:	4ab5      	ldr	r2, [pc, #724]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007906:	430b      	orrs	r3, r1
 8007908:	6553      	str	r3, [r2, #84]	@ 0x54
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007920:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007922:	2300      	movs	r3, #0
 8007924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007926:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007930:	4baa      	ldr	r3, [pc, #680]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007934:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793e:	4aa7      	ldr	r2, [pc, #668]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007940:	430b      	orrs	r3, r1
 8007942:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007950:	653b      	str	r3, [r7, #80]	@ 0x50
 8007952:	2300      	movs	r3, #0
 8007954:	657b      	str	r3, [r7, #84]	@ 0x54
 8007956:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007960:	4b9e      	ldr	r3, [pc, #632]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007970:	4a9a      	ldr	r2, [pc, #616]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007972:	430b      	orrs	r3, r1
 8007974:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007984:	2300      	movs	r3, #0
 8007986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007988:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800798c:	460b      	mov	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007992:	4b92      	ldr	r3, [pc, #584]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007996:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079a0:	4a8e      	ldr	r2, [pc, #568]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079a2:	430b      	orrs	r3, r1
 80079a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b4:	2300      	movs	r3, #0
 80079b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80079bc:	460b      	mov	r3, r1
 80079be:	4313      	orrs	r3, r2
 80079c0:	d00e      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079c2:	4b86      	ldr	r3, [pc, #536]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	4a85      	ldr	r2, [pc, #532]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079cc:	6113      	str	r3, [r2, #16]
 80079ce:	4b83      	ldr	r3, [pc, #524]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079d0:	6919      	ldr	r1, [r3, #16]
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079da:	4a80      	ldr	r2, [pc, #512]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079f6:	460b      	mov	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079fc:	4b77      	ldr	r3, [pc, #476]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0a:	4a74      	ldr	r2, [pc, #464]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d00a      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a3c:	4a67      	ldr	r2, [pc, #412]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d011      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	3308      	adds	r3, #8
 8007a64:	2100      	movs	r1, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 fa4a 	bl	8008f00 <RCCEx_PLL2_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6239      	str	r1, [r7, #32]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d011      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 fa2a 	bl	8008f00 <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	2100      	movs	r1, #0
 8007acc:	61b9      	str	r1, [r7, #24]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d011      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fa0a 	bl	8008f00 <RCCEx_PLL2_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6139      	str	r1, [r7, #16]
 8007b0e:	f003 0308 	and.w	r3, r3, #8
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	d011      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	3328      	adds	r3, #40	@ 0x28
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 fa9c 	bl	8009064 <RCCEx_PLL3_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	d011      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b62:	3328      	adds	r3, #40	@ 0x28
 8007b64:	2101      	movs	r1, #1
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fa7c 	bl	8009064 <RCCEx_PLL3_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3328      	adds	r3, #40	@ 0x28
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fa5c 	bl	8009064 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007bc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bdc:	58024400 	.word	0x58024400

08007be0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b090      	sub	sp, #64	@ 0x40
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	f040 8094 	bne.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007bf8:	4b9e      	ldr	r3, [pc, #632]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	f200 8087 	bhi.w	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007d11 	.word	0x08007d11
 8007c20:	08007c9d 	.word	0x08007c9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c24:	4b93      	ldr	r3, [pc, #588]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c30:	d108      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 f810 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c40:	f000 bd45 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c48:	f000 bd41 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c4c:	4b89      	ldr	r3, [pc, #548]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c58:	d108      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5a:	f107 0318 	add.w	r3, r7, #24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fd54 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c68:	f000 bd31 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	f000 bd2d 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c74:	4b7f      	ldr	r3, [pc, #508]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c80:	d108      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fe94 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c90:	f000 bd1d 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c98:	f000 bd19 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c9c:	4b75      	ldr	r3, [pc, #468]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ca6:	4b73      	ldr	r3, [pc, #460]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	08db      	lsrs	r3, r3, #3
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cca:	e01f      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ccc:	4b69      	ldr	r3, [pc, #420]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd8:	d106      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ce2:	4b66      	ldr	r3, [pc, #408]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce6:	e011      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ce8:	4b62      	ldr	r3, [pc, #392]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cfc:	d102      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cfe:	4b60      	ldr	r3, [pc, #384]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d02:	e003      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d08:	f000 bce1 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d0c:	f000 bcdf 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d10:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d14:	f000 bcdb 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1c:	f000 bcd7 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	f040 80ad 	bne.w	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007d2e:	4b51      	ldr	r3, [pc, #324]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d32:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007d36:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d3e:	d056      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d46:	f200 8090 	bhi.w	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d4e:	f000 8088 	beq.w	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d56:	f200 8088 	bhi.w	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	2b80      	cmp	r3, #128	@ 0x80
 8007d5e:	d032      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	2b80      	cmp	r3, #128	@ 0x80
 8007d64:	f200 8081 	bhi.w	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	2b40      	cmp	r3, #64	@ 0x40
 8007d72:	d014      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007d74:	e079      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d76:	4b3f      	ldr	r3, [pc, #252]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d82:	d108      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 ff67 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d92:	f000 bc9c 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9a:	f000 bc98 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d9e:	4b35      	ldr	r3, [pc, #212]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007daa:	d108      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dac:	f107 0318 	add.w	r3, r7, #24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fcab 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dba:	f000 bc88 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc2:	f000 bc84 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd2:	d108      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd4:	f107 030c 	add.w	r3, r7, #12
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fdeb 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de2:	f000 bc74 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dea:	f000 bc70 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dee:	4b21      	ldr	r3, [pc, #132]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007df8:	4b1e      	ldr	r3, [pc, #120]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d10c      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e1c:	e01f      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e1e:	4b15      	ldr	r3, [pc, #84]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e32:	d102      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e34:	4b11      	ldr	r3, [pc, #68]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	e011      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e46:	d106      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e4e:	d102      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e50:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e54:	e003      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e5a:	f000 bc38 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e5e:	f000 bc36 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e62:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e66:	f000 bc32 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6e:	f000 bc2e 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e72:	bf00      	nop
 8007e74:	58024400 	.word	0x58024400
 8007e78:	03d09000 	.word	0x03d09000
 8007e7c:	003d0900 	.word	0x003d0900
 8007e80:	007a1200 	.word	0x007a1200
 8007e84:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007e90:	430b      	orrs	r3, r1
 8007e92:	f040 809c 	bne.w	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007e96:	4b9e      	ldr	r3, [pc, #632]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007e9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ea6:	d054      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007eae:	f200 808b 	bhi.w	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007eb8:	f000 8083 	beq.w	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ec2:	f200 8081 	bhi.w	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ecc:	d02f      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ed4:	d878      	bhi.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ee2:	d012      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007ee4:	e070      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ef2:	d107      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 feaf 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f02:	e3e4      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f08:	e3e1      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f0a:	4b81      	ldr	r3, [pc, #516]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f16:	d107      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f18:	f107 0318 	add.w	r3, r7, #24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fbf5 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f26:	e3d2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e3cf      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f2e:	4b78      	ldr	r3, [pc, #480]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fd37 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4a:	e3c0      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f50:	e3bd      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f52:	4b6f      	ldr	r3, [pc, #444]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d10c      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6e:	4b68      	ldr	r3, [pc, #416]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	08db      	lsrs	r3, r3, #3
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	4a66      	ldr	r2, [pc, #408]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f80:	e01e      	b.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f82:	4b63      	ldr	r3, [pc, #396]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f8e:	d106      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f96:	d102      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f98:	4b5f      	ldr	r3, [pc, #380]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f9c:	e010      	b.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007faa:	d106      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb2:	d102      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fb4:	4b59      	ldr	r3, [pc, #356]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fb8:	e002      	b.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fbe:	e386      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fc0:	e385      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fc2:	4b57      	ldr	r3, [pc, #348]	@ (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc6:	e382      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fcc:	e37f      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	f040 80a7 	bne.w	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007fe4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fec:	d055      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ff4:	f200 8096 	bhi.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ffe:	f000 8084 	beq.w	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008008:	f200 808c 	bhi.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008012:	d030      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800801a:	f200 8083 	bhi.w	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800802a:	d012      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800802c:	e07a      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800802e:	4b38      	ldr	r3, [pc, #224]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800803a:	d107      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800803c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008040:	4618      	mov	r0, r3
 8008042:	f000 fe0b 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804a:	e340      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e33d      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008052:	4b2f      	ldr	r3, [pc, #188]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800805a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800805e:	d107      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008060:	f107 0318 	add.w	r3, r7, #24
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fb51 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800806e:	e32e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008074:	e32b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008076:	4b26      	ldr	r3, [pc, #152]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800807e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008082:	d107      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fc93 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008092:	e31c      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008098:	e319      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800809a:	4b1d      	ldr	r3, [pc, #116]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800809c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800809e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d10c      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80080b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080b6:	4b16      	ldr	r3, [pc, #88]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	08db      	lsrs	r3, r3, #3
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	4a14      	ldr	r2, [pc, #80]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080c2:	fa22 f303 	lsr.w	r3, r2, r3
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080c8:	e01e      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080ca:	4b11      	ldr	r3, [pc, #68]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d6:	d106      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80080d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080de:	d102      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080e4:	e010      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080f2:	d106      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80080f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080fa:	d102      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080fc:	4b07      	ldr	r3, [pc, #28]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008106:	e2e2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008108:	e2e1      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800810a:	4b05      	ldr	r3, [pc, #20]	@ (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800810e:	e2de      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	003d0900 	.word	0x003d0900
 800811c:	007a1200 	.word	0x007a1200
 8008120:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	e2d1      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800812a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008132:	430b      	orrs	r3, r1
 8008134:	f040 809c 	bne.w	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008138:	4b93      	ldr	r3, [pc, #588]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800813a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008140:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008148:	d054      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008150:	f200 808b 	bhi.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800815a:	f000 8083 	beq.w	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008164:	f200 8081 	bhi.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816e:	d02f      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008176:	d878      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008184:	d012      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008186:	e070      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008188:	4b7f      	ldr	r3, [pc, #508]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008194:	d107      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fd5e 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a4:	e293      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081aa:	e290      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081ac:	4b76      	ldr	r3, [pc, #472]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b8:	d107      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ba:	f107 0318 	add.w	r3, r7, #24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 faa4 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c8:	e281      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ce:	e27e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d0:	4b6d      	ldr	r3, [pc, #436]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081dc:	d107      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fbe6 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ec:	e26f      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f2:	e26c      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081f4:	4b64      	ldr	r3, [pc, #400]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081fe:	4b62      	ldr	r3, [pc, #392]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b04      	cmp	r3, #4
 8008208:	d10c      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800820a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008210:	4b5d      	ldr	r3, [pc, #372]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	08db      	lsrs	r3, r3, #3
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	4a5c      	ldr	r2, [pc, #368]	@ (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
 8008220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008222:	e01e      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008224:	4b58      	ldr	r3, [pc, #352]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800822c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008230:	d106      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008238:	d102      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800823a:	4b55      	ldr	r3, [pc, #340]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800823c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800823e:	e010      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008240:	4b51      	ldr	r3, [pc, #324]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800824c:	d106      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800824e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008254:	d102      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008256:	4b4f      	ldr	r3, [pc, #316]	@ (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800825a:	e002      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008260:	e235      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008262:	e234      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008264:	4b4c      	ldr	r3, [pc, #304]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008268:	e231      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826e:	e22e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008274:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008278:	430b      	orrs	r3, r1
 800827a:	f040 808f 	bne.w	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800827e:	4b42      	ldr	r3, [pc, #264]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008282:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008286:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800828e:	d06b      	beq.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008296:	d874      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800829e:	d056      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082a6:	d86c      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082ae:	d03b      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082b6:	d864      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082be:	d021      	beq.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c6:	d85c      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d4:	d004      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80082d6:	e054      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7fe fa0a 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 80082dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082de:	e1f6      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082e0:	4b29      	ldr	r3, [pc, #164]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ee:	f107 0318 	add.w	r3, r7, #24
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fa0a 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fc:	e1e7      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008302:	e1e4      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008304:	4b20      	ldr	r3, [pc, #128]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800830c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008310:	d107      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fb4c 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008320:	e1d5      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008326:	e1d2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008328:	4b17      	ldr	r3, [pc, #92]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d109      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008334:	4b14      	ldr	r3, [pc, #80]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	08db      	lsrs	r3, r3, #3
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	4a13      	ldr	r2, [pc, #76]	@ (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008346:	e1c2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834c:	e1bf      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800834e:	4b0e      	ldr	r3, [pc, #56]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800835a:	d102      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800835c:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008360:	e1b5      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008366:	e1b2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008368:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008374:	d102      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008376:	4b07      	ldr	r3, [pc, #28]	@ (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800837a:	e1a8      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008380:	e1a5      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008386:	e1a2      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008388:	58024400 	.word	0x58024400
 800838c:	03d09000 	.word	0x03d09000
 8008390:	003d0900 	.word	0x003d0900
 8008394:	007a1200 	.word	0x007a1200
 8008398:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800839c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80083a4:	430b      	orrs	r3, r1
 80083a6:	d173      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083a8:	4b9c      	ldr	r3, [pc, #624]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b8:	d02f      	beq.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c0:	d863      	bhi.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ce:	d012      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80083d0:	e05b      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083d2:	4b92      	ldr	r3, [pc, #584]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083de:	d107      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e0:	f107 0318 	add.w	r3, r7, #24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f991 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ee:	e16e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f4:	e16b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083f6:	4b89      	ldr	r3, [pc, #548]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008402:	d107      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008404:	f107 030c 	add.w	r3, r7, #12
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fad3 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008412:	e15c      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008418:	e159      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800841a:	4b80      	ldr	r3, [pc, #512]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800841c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008424:	4b7d      	ldr	r3, [pc, #500]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b04      	cmp	r3, #4
 800842e:	d10c      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008436:	4b79      	ldr	r3, [pc, #484]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	08db      	lsrs	r3, r3, #3
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	4a77      	ldr	r2, [pc, #476]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008442:	fa22 f303 	lsr.w	r3, r2, r3
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008448:	e01e      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800844a:	4b74      	ldr	r3, [pc, #464]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008456:	d106      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800845e:	d102      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008460:	4b70      	ldr	r3, [pc, #448]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008464:	e010      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008466:	4b6d      	ldr	r3, [pc, #436]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847a:	d102      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800847c:	4b6a      	ldr	r3, [pc, #424]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008480:	e002      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008486:	e122      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008488:	e121      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848e:	e11e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008494:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008498:	430b      	orrs	r3, r1
 800849a:	d133      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800849c:	4b5f      	ldr	r3, [pc, #380]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800849e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b2:	d012      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80084b4:	e023      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084b6:	4b59      	ldr	r3, [pc, #356]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084c2:	d107      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fbc7 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d2:	e0fc      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d8:	e0f9      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084da:	4b50      	ldr	r3, [pc, #320]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e6:	d107      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e8:	f107 0318 	add.w	r3, r7, #24
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f90d 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f6:	e0ea      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fc:	e0e7      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008502:	e0e4      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008508:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800850c:	430b      	orrs	r3, r1
 800850e:	f040 808d 	bne.w	800862c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008512:	4b42      	ldr	r3, [pc, #264]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800851a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800851c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008522:	d06b      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800852a:	d874      	bhi.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800852c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008532:	d056      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d86c      	bhi.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008542:	d03b      	beq.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800854a:	d864      	bhi.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008552:	d021      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800855a:	d85c      	bhi.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008568:	d004      	beq.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800856a:	e054      	b.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800856c:	f000 f8b8 	bl	80086e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008570:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008572:	e0ac      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008574:	4b29      	ldr	r3, [pc, #164]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800857c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008580:	d107      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008582:	f107 0318 	add.w	r3, r7, #24
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f8c0 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008590:	e09d      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008596:	e09a      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008598:	4b20      	ldr	r3, [pc, #128]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	d107      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a6:	f107 030c 	add.w	r3, r7, #12
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fa02 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b4:	e08b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ba:	e088      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085bc:	4b17      	ldr	r3, [pc, #92]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d109      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	08db      	lsrs	r3, r3, #3
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	4a13      	ldr	r2, [pc, #76]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085da:	e078      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e075      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085e2:	4b0e      	ldr	r3, [pc, #56]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ee:	d102      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80085f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f4:	e06b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fa:	e068      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008608:	d102      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800860a:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860e:	e05e      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	e05b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861a:	e058      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800861c:	58024400 	.word	0x58024400
 8008620:	03d09000 	.word	0x03d09000
 8008624:	003d0900 	.word	0x003d0900
 8008628:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800862c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008630:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008634:	430b      	orrs	r3, r1
 8008636:	d148      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008638:	4b27      	ldr	r3, [pc, #156]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800863a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800863c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008648:	d02a      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800864a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008650:	d838      	bhi.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800865e:	d00d      	beq.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008660:	e030      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008662:	4b1d      	ldr	r3, [pc, #116]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866e:	d102      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008670:	4b1a      	ldr	r3, [pc, #104]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008674:	e02b      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	e028      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800867c:	4b16      	ldr	r3, [pc, #88]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008688:	d107      	bne.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800868a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fae4 	bl	8008c5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008698:	e019      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800869e:	e016      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086a0:	4b0d      	ldr	r3, [pc, #52]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ac:	d107      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ae:	f107 0318 	add.w	r3, r7, #24
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 f82a 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086bc:	e007      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c2:	e004      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c8:	e001      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80086ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3740      	adds	r7, #64	@ 0x40
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	58024400 	.word	0x58024400
 80086dc:	007a1200 	.word	0x007a1200

080086e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086e4:	f7fd ffd4 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 80086e8:	4602      	mov	r2, r0
 80086ea:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	091b      	lsrs	r3, r3, #4
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	4904      	ldr	r1, [pc, #16]	@ (8008708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086f6:	5ccb      	ldrb	r3, [r1, r3]
 80086f8:	f003 031f 	and.w	r3, r3, #31
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008700:	4618      	mov	r0, r3
 8008702:	bd80      	pop	{r7, pc}
 8008704:	58024400 	.word	0x58024400
 8008708:	0800df08 	.word	0x0800df08

0800870c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800870c:	b480      	push	{r7}
 800870e:	b089      	sub	sp, #36	@ 0x24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008714:	4ba1      	ldr	r3, [pc, #644]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800871e:	4b9f      	ldr	r3, [pc, #636]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	0b1b      	lsrs	r3, r3, #12
 8008724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800872a:	4b9c      	ldr	r3, [pc, #624]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	091b      	lsrs	r3, r3, #4
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008736:	4b99      	ldr	r3, [pc, #612]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873a:	08db      	lsrs	r3, r3, #3
 800873c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	fb02 f303 	mul.w	r3, r2, r3
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8111 	beq.w	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b02      	cmp	r3, #2
 800875e:	f000 8083 	beq.w	8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b02      	cmp	r3, #2
 8008766:	f200 80a1 	bhi.w	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d056      	beq.n	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008776:	e099      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008778:	4b88      	ldr	r3, [pc, #544]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b00      	cmp	r3, #0
 8008782:	d02d      	beq.n	80087e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008784:	4b85      	ldr	r3, [pc, #532]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	08db      	lsrs	r3, r3, #3
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	4a84      	ldr	r2, [pc, #528]	@ (80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ae:	4b7b      	ldr	r3, [pc, #492]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087de:	e087      	b.n	80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f2:	4b6a      	ldr	r3, [pc, #424]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008802:	ed97 6a03 	vldr	s12, [r7, #12]
 8008806:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800880a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008822:	e065      	b.n	80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008836:	4b59      	ldr	r3, [pc, #356]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008846:	ed97 6a03 	vldr	s12, [r7, #12]
 800884a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800884e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008866:	e043      	b.n	80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008872:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887a:	4b48      	ldr	r3, [pc, #288]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888a:	ed97 6a03 	vldr	s12, [r7, #12]
 800888e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088aa:	e021      	b.n	80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088be:	4b37      	ldr	r3, [pc, #220]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80088f0:	4b2a      	ldr	r3, [pc, #168]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f4:	0a5b      	lsrs	r3, r3, #9
 80088f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800890a:	edd7 6a07 	vldr	s13, [r7, #28]
 800890e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008916:	ee17 2a90 	vmov	r2, s15
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800891e:	4b1f      	ldr	r3, [pc, #124]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008930:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008938:	edd7 6a07 	vldr	s13, [r7, #28]
 800893c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008944:	ee17 2a90 	vmov	r2, s15
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800894c:	4b13      	ldr	r3, [pc, #76]	@ (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	0e1b      	lsrs	r3, r3, #24
 8008952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008966:	edd7 6a07 	vldr	s13, [r7, #28]
 800896a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008972:	ee17 2a90 	vmov	r2, s15
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800897a:	e008      	b.n	800898e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	609a      	str	r2, [r3, #8]
}
 800898e:	bf00      	nop
 8008990:	3724      	adds	r7, #36	@ 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	58024400 	.word	0x58024400
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	46000000 	.word	0x46000000
 80089a8:	4c742400 	.word	0x4c742400
 80089ac:	4a742400 	.word	0x4a742400
 80089b0:	4af42400 	.word	0x4af42400

080089b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b089      	sub	sp, #36	@ 0x24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089bc:	4ba1      	ldr	r3, [pc, #644]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089c6:	4b9f      	ldr	r3, [pc, #636]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ca:	0d1b      	lsrs	r3, r3, #20
 80089cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089de:	4b99      	ldr	r3, [pc, #612]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e2:	08db      	lsrs	r3, r3, #3
 80089e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8111 	beq.w	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	f000 8083 	beq.w	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	f200 80a1 	bhi.w	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d056      	beq.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a1e:	e099      	b.n	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a20:	4b88      	ldr	r3, [pc, #544]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d02d      	beq.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a2c:	4b85      	ldr	r3, [pc, #532]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	08db      	lsrs	r3, r3, #3
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	4a84      	ldr	r2, [pc, #528]	@ (8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	ee07 3a90 	vmov	s15, r3
 8008a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a56:	4b7b      	ldr	r3, [pc, #492]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a86:	e087      	b.n	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aca:	e065      	b.n	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b59      	ldr	r3, [pc, #356]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0e:	e043      	b.n	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b48      	ldr	r3, [pc, #288]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b52:	e021      	b.n	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	4b37      	ldr	r3, [pc, #220]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b98:	4b2a      	ldr	r3, [pc, #168]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9c:	0a5b      	lsrs	r3, r3, #9
 8008b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bbe:	ee17 2a90 	vmov	r2, s15
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	0c1b      	lsrs	r3, r3, #16
 8008bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd0:	ee07 3a90 	vmov	s15, r3
 8008bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bec:	ee17 2a90 	vmov	r2, s15
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008bf4:	4b13      	ldr	r3, [pc, #76]	@ (8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf8:	0e1b      	lsrs	r3, r3, #24
 8008bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1a:	ee17 2a90 	vmov	r2, s15
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c22:	e008      	b.n	8008c36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
}
 8008c36:	bf00      	nop
 8008c38:	3724      	adds	r7, #36	@ 0x24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	58024400 	.word	0x58024400
 8008c48:	03d09000 	.word	0x03d09000
 8008c4c:	46000000 	.word	0x46000000
 8008c50:	4c742400 	.word	0x4c742400
 8008c54:	4a742400 	.word	0x4a742400
 8008c58:	4af42400 	.word	0x4af42400

08008c5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b089      	sub	sp, #36	@ 0x24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c64:	4ba0      	ldr	r3, [pc, #640]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c68:	f003 0303 	and.w	r3, r3, #3
 8008c6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008c6e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c72:	091b      	lsrs	r3, r3, #4
 8008c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c7a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c84:	4b98      	ldr	r3, [pc, #608]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	ee07 3a90 	vmov	s15, r3
 8008c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8111 	beq.w	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	f000 8083 	beq.w	8008db6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	f200 80a1 	bhi.w	8008dfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d056      	beq.n	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008cc4:	e099      	b.n	8008dfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cc6:	4b88      	ldr	r3, [pc, #544]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d02d      	beq.n	8008d2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cd2:	4b85      	ldr	r3, [pc, #532]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	08db      	lsrs	r3, r3, #3
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	4a83      	ldr	r2, [pc, #524]	@ (8008eec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008cde:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfc:	4b7a      	ldr	r3, [pc, #488]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d04:	ee07 3a90 	vmov	s15, r3
 8008d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d10:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d2c:	e087      	b.n	8008e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d40:	4b69      	ldr	r3, [pc, #420]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d50:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d54:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d70:	e065      	b.n	8008e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d84:	4b58      	ldr	r3, [pc, #352]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8c:	ee07 3a90 	vmov	s15, r3
 8008d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d98:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db4:	e043      	b.n	8008e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008efc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc8:	4b47      	ldr	r3, [pc, #284]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ddc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df8:	e021      	b.n	8008e3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e04:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0c:	4b36      	ldr	r3, [pc, #216]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e20:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e42:	0a5b      	lsrs	r3, r3, #9
 8008e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e64:	ee17 2a90 	vmov	r2, s15
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e92:	ee17 2a90 	vmov	r2, s15
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008e9a:	4b13      	ldr	r3, [pc, #76]	@ (8008ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec0:	ee17 2a90 	vmov	r2, s15
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008ec8:	e008      	b.n	8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	609a      	str	r2, [r3, #8]
}
 8008edc:	bf00      	nop
 8008ede:	3724      	adds	r7, #36	@ 0x24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	03d09000 	.word	0x03d09000
 8008ef0:	46000000 	.word	0x46000000
 8008ef4:	4c742400 	.word	0x4c742400
 8008ef8:	4a742400 	.word	0x4a742400
 8008efc:	4af42400 	.word	0x4af42400

08008f00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f0e:	4b53      	ldr	r3, [pc, #332]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d101      	bne.n	8008f1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e099      	b.n	8009052 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a4e      	ldr	r2, [pc, #312]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f2a:	f7f8 fbeb 	bl	8001704 <HAL_GetTick>
 8008f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f30:	e008      	b.n	8008f44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f32:	f7f8 fbe7 	bl	8001704 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e086      	b.n	8009052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f44:	4b45      	ldr	r3, [pc, #276]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1f0      	bne.n	8008f32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f50:	4b42      	ldr	r3, [pc, #264]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	031b      	lsls	r3, r3, #12
 8008f5e:	493f      	ldr	r1, [pc, #252]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	025b      	lsls	r3, r3, #9
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	061b      	lsls	r3, r3, #24
 8008f90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f94:	4931      	ldr	r1, [pc, #196]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f9a:	4b30      	ldr	r3, [pc, #192]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	492d      	ldr	r1, [pc, #180]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fac:	4b2b      	ldr	r3, [pc, #172]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb0:	f023 0220 	bic.w	r2, r3, #32
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	4928      	ldr	r1, [pc, #160]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fbe:	4b27      	ldr	r3, [pc, #156]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	4a26      	ldr	r2, [pc, #152]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f023 0310 	bic.w	r3, r3, #16
 8008fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fca:	4b24      	ldr	r3, [pc, #144]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fce:	4b24      	ldr	r3, [pc, #144]	@ (8009060 <RCCEx_PLL2_Config+0x160>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	69d2      	ldr	r2, [r2, #28]
 8008fd6:	00d2      	lsls	r2, r2, #3
 8008fd8:	4920      	ldr	r1, [pc, #128]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fde:	4b1f      	ldr	r3, [pc, #124]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fe4:	f043 0310 	orr.w	r3, r3, #16
 8008fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d106      	bne.n	8008ffe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff4:	4a19      	ldr	r2, [pc, #100]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8008ff6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ffc:	e00f      	b.n	800901e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d106      	bne.n	8009012 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009004:	4b15      	ldr	r3, [pc, #84]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	4a14      	ldr	r2, [pc, #80]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 800900a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800900e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009010:	e005      	b.n	800901e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009012:	4b12      	ldr	r3, [pc, #72]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	4a11      	ldr	r2, [pc, #68]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800901c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800901e:	4b0f      	ldr	r3, [pc, #60]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a0e      	ldr	r2, [pc, #56]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009024:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902a:	f7f8 fb6b 	bl	8001704 <HAL_GetTick>
 800902e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009030:	e008      	b.n	8009044 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009032:	f7f8 fb67 	bl	8001704 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e006      	b.n	8009052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009044:	4b05      	ldr	r3, [pc, #20]	@ (800905c <RCCEx_PLL2_Config+0x15c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	58024400 	.word	0x58024400
 8009060:	ffff0007 	.word	0xffff0007

08009064 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009072:	4b53      	ldr	r3, [pc, #332]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	2b03      	cmp	r3, #3
 800907c:	d101      	bne.n	8009082 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e099      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009082:	4b4f      	ldr	r3, [pc, #316]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a4e      	ldr	r2, [pc, #312]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800908c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908e:	f7f8 fb39 	bl	8001704 <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009094:	e008      	b.n	80090a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009096:	f7f8 fb35 	bl	8001704 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e086      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090a8:	4b45      	ldr	r3, [pc, #276]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f0      	bne.n	8009096 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090b4:	4b42      	ldr	r3, [pc, #264]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	051b      	lsls	r3, r3, #20
 80090c2:	493f      	ldr	r1, [pc, #252]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	025b      	lsls	r3, r3, #9
 80090da:	b29b      	uxth	r3, r3
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	041b      	lsls	r3, r3, #16
 80090e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	061b      	lsls	r3, r3, #24
 80090f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090f8:	4931      	ldr	r1, [pc, #196]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090fe:	4b30      	ldr	r3, [pc, #192]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009102:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	492d      	ldr	r1, [pc, #180]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800910c:	4313      	orrs	r3, r2
 800910e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009110:	4b2b      	ldr	r3, [pc, #172]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	4928      	ldr	r1, [pc, #160]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800911e:	4313      	orrs	r3, r2
 8009120:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009122:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009126:	4a26      	ldr	r2, [pc, #152]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800912c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009132:	4b24      	ldr	r3, [pc, #144]	@ (80091c4 <RCCEx_PLL3_Config+0x160>)
 8009134:	4013      	ands	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	69d2      	ldr	r2, [r2, #28]
 800913a:	00d2      	lsls	r2, r2, #3
 800913c:	4920      	ldr	r1, [pc, #128]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009142:	4b1f      	ldr	r3, [pc, #124]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009146:	4a1e      	ldr	r2, [pc, #120]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800914c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009154:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800915a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800915e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009160:	e00f      	b.n	8009182 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d106      	bne.n	8009176 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009168:	4b15      	ldr	r3, [pc, #84]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	4a14      	ldr	r2, [pc, #80]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800916e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009174:	e005      	b.n	8009182 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009176:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917a:	4a11      	ldr	r2, [pc, #68]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800917c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009180:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009182:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a0e      	ldr	r2, [pc, #56]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800918c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918e:	f7f8 fab9 	bl	8001704 <HAL_GetTick>
 8009192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009194:	e008      	b.n	80091a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009196:	f7f8 fab5 	bl	8001704 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e006      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091a8:	4b05      	ldr	r3, [pc, #20]	@ (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
 80091c4:	ffff0007 	.word	0xffff0007

080091c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e049      	b.n	800926e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f841 	bl	8009276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f000 f9e8 	bl	80095dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d001      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e054      	b.n	800934e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a26      	ldr	r2, [pc, #152]	@ (800935c <HAL_TIM_Base_Start_IT+0xd0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d022      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ce:	d01d      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a22      	ldr	r2, [pc, #136]	@ (8009360 <HAL_TIM_Base_Start_IT+0xd4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d018      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a21      	ldr	r2, [pc, #132]	@ (8009364 <HAL_TIM_Base_Start_IT+0xd8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d013      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009368 <HAL_TIM_Base_Start_IT+0xdc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00e      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a1e      	ldr	r2, [pc, #120]	@ (800936c <HAL_TIM_Base_Start_IT+0xe0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d009      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009370 <HAL_TIM_Base_Start_IT+0xe4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d004      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x80>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1b      	ldr	r2, [pc, #108]	@ (8009374 <HAL_TIM_Base_Start_IT+0xe8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d115      	bne.n	8009338 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	4b19      	ldr	r3, [pc, #100]	@ (8009378 <HAL_TIM_Base_Start_IT+0xec>)
 8009314:	4013      	ands	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b06      	cmp	r3, #6
 800931c:	d015      	beq.n	800934a <HAL_TIM_Base_Start_IT+0xbe>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009324:	d011      	beq.n	800934a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0201 	orr.w	r2, r2, #1
 8009334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009336:	e008      	b.n	800934a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e000      	b.n	800934c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800934a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40010000 	.word	0x40010000
 8009360:	40000400 	.word	0x40000400
 8009364:	40000800 	.word	0x40000800
 8009368:	40000c00 	.word	0x40000c00
 800936c:	40010400 	.word	0x40010400
 8009370:	40001800 	.word	0x40001800
 8009374:	40014000 	.word	0x40014000
 8009378:	00010007 	.word	0x00010007

0800937c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d020      	beq.n	80093e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01b      	beq.n	80093e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0202 	mvn.w	r2, #2
 80093b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8e9 	bl	800959e <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8db 	bl	800958a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8ec 	bl	80095b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d020      	beq.n	800942c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d01b      	beq.n	800942c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0204 	mvn.w	r2, #4
 80093fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8c3 	bl	800959e <HAL_TIM_IC_CaptureCallback>
 8009418:	e005      	b.n	8009426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f8b5 	bl	800958a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8c6 	bl	80095b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f003 0308 	and.w	r3, r3, #8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d020      	beq.n	8009478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01b      	beq.n	8009478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0208 	mvn.w	r2, #8
 8009448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2204      	movs	r2, #4
 800944e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f89d 	bl	800959e <HAL_TIM_IC_CaptureCallback>
 8009464:	e005      	b.n	8009472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f88f 	bl	800958a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f8a0 	bl	80095b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f003 0310 	and.w	r3, r3, #16
 800947e:	2b00      	cmp	r3, #0
 8009480:	d020      	beq.n	80094c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01b      	beq.n	80094c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0210 	mvn.w	r2, #16
 8009494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2208      	movs	r2, #8
 800949a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f877 	bl	800959e <HAL_TIM_IC_CaptureCallback>
 80094b0:	e005      	b.n	80094be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f869 	bl	800958a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f87a 	bl	80095b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00c      	beq.n	80094e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d007      	beq.n	80094e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f06f 0201 	mvn.w	r2, #1
 80094e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7f7 fdd6 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f913 	bl	800973c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f90b 	bl	8009750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00c      	beq.n	800955e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f834 	bl	80095c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d007      	beq.n	8009582 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f06f 0220 	mvn.w	r2, #32
 800957a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f8d3 	bl	8009728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a46      	ldr	r2, [pc, #280]	@ (8009708 <TIM_Base_SetConfig+0x12c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d013      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095fa:	d00f      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a43      	ldr	r2, [pc, #268]	@ (800970c <TIM_Base_SetConfig+0x130>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00b      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a42      	ldr	r2, [pc, #264]	@ (8009710 <TIM_Base_SetConfig+0x134>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d007      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a41      	ldr	r2, [pc, #260]	@ (8009714 <TIM_Base_SetConfig+0x138>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a40      	ldr	r2, [pc, #256]	@ (8009718 <TIM_Base_SetConfig+0x13c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d108      	bne.n	800962e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a35      	ldr	r2, [pc, #212]	@ (8009708 <TIM_Base_SetConfig+0x12c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d01f      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800963c:	d01b      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a32      	ldr	r2, [pc, #200]	@ (800970c <TIM_Base_SetConfig+0x130>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d017      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a31      	ldr	r2, [pc, #196]	@ (8009710 <TIM_Base_SetConfig+0x134>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d013      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a30      	ldr	r2, [pc, #192]	@ (8009714 <TIM_Base_SetConfig+0x138>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00f      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2f      	ldr	r2, [pc, #188]	@ (8009718 <TIM_Base_SetConfig+0x13c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00b      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2e      	ldr	r2, [pc, #184]	@ (800971c <TIM_Base_SetConfig+0x140>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d007      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2d      	ldr	r2, [pc, #180]	@ (8009720 <TIM_Base_SetConfig+0x144>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d003      	beq.n	8009676 <TIM_Base_SetConfig+0x9a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2c      	ldr	r2, [pc, #176]	@ (8009724 <TIM_Base_SetConfig+0x148>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d108      	bne.n	8009688 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800967c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a16      	ldr	r2, [pc, #88]	@ (8009708 <TIM_Base_SetConfig+0x12c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00f      	beq.n	80096d4 <TIM_Base_SetConfig+0xf8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a18      	ldr	r2, [pc, #96]	@ (8009718 <TIM_Base_SetConfig+0x13c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00b      	beq.n	80096d4 <TIM_Base_SetConfig+0xf8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a17      	ldr	r2, [pc, #92]	@ (800971c <TIM_Base_SetConfig+0x140>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_Base_SetConfig+0xf8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a16      	ldr	r2, [pc, #88]	@ (8009720 <TIM_Base_SetConfig+0x144>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_Base_SetConfig+0xf8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a15      	ldr	r2, [pc, #84]	@ (8009724 <TIM_Base_SetConfig+0x148>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d103      	bne.n	80096dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d105      	bne.n	80096fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	611a      	str	r2, [r3, #16]
  }
}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	40010000 	.word	0x40010000
 800970c:	40000400 	.word	0x40000400
 8009710:	40000800 	.word	0x40000800
 8009714:	40000c00 	.word	0x40000c00
 8009718:	40010400 	.word	0x40010400
 800971c:	40014000 	.word	0x40014000
 8009720:	40014400 	.word	0x40014400
 8009724:	40014800 	.word	0x40014800

08009728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e042      	b.n	80097fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7f7 fe29 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2224      	movs	r2, #36	@ 0x24
 8009792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 0201 	bic.w	r2, r2, #1
 80097a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fe1e 	bl	800a3f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8b3 	bl	8009920 <UART_SetConfig>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e01b      	b.n	80097fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fe9d 	bl	800a534 <UART_CheckIdleState>
 80097fa:	4603      	mov	r3, r0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08a      	sub	sp, #40	@ 0x28
 8009808:	af02      	add	r7, sp, #8
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800981a:	2b20      	cmp	r3, #32
 800981c:	d17b      	bne.n	8009916 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <HAL_UART_Transmit+0x26>
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e074      	b.n	8009918 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2221      	movs	r2, #33	@ 0x21
 800983a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800983e:	f7f7 ff61 	bl	8001704 <HAL_GetTick>
 8009842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	88fa      	ldrh	r2, [r7, #6]
 8009848:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	88fa      	ldrh	r2, [r7, #6]
 8009850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985c:	d108      	bne.n	8009870 <HAL_UART_Transmit+0x6c>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	61bb      	str	r3, [r7, #24]
 800986e:	e003      	b.n	8009878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009878:	e030      	b.n	80098dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2200      	movs	r2, #0
 8009882:	2180      	movs	r1, #128	@ 0x80
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 feff 	bl	800a688 <UART_WaitOnFlagUntilTimeout>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e03d      	b.n	8009918 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	3302      	adds	r3, #2
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e007      	b.n	80098ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1c8      	bne.n	800987a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2200      	movs	r2, #0
 80098f0:	2140      	movs	r1, #64	@ 0x40
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 fec8 	bl	800a688 <UART_WaitOnFlagUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2220      	movs	r2, #32
 8009902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e006      	b.n	8009918 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e000      	b.n	8009918 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009916:	2302      	movs	r3, #2
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009924:	b092      	sub	sp, #72	@ 0x48
 8009926:	af00      	add	r7, sp, #0
 8009928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	431a      	orrs	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	431a      	orrs	r2, r3
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	4313      	orrs	r3, r2
 8009946:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4bbe      	ldr	r3, [pc, #760]	@ (8009c48 <UART_SetConfig+0x328>)
 8009950:	4013      	ands	r3, r2
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009958:	430b      	orrs	r3, r1
 800995a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4ab3      	ldr	r2, [pc, #716]	@ (8009c4c <UART_SetConfig+0x32c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d004      	beq.n	800998c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009988:	4313      	orrs	r3, r2
 800998a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	4baf      	ldr	r3, [pc, #700]	@ (8009c50 <UART_SetConfig+0x330>)
 8009994:	4013      	ands	r3, r2
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800999c:	430b      	orrs	r3, r1
 800999e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	f023 010f 	bic.w	r1, r3, #15
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4aa6      	ldr	r2, [pc, #664]	@ (8009c54 <UART_SetConfig+0x334>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d177      	bne.n	8009ab0 <UART_SetConfig+0x190>
 80099c0:	4ba5      	ldr	r3, [pc, #660]	@ (8009c58 <UART_SetConfig+0x338>)
 80099c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099c8:	2b28      	cmp	r3, #40	@ 0x28
 80099ca:	d86d      	bhi.n	8009aa8 <UART_SetConfig+0x188>
 80099cc:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <UART_SetConfig+0xb4>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	08009a79 	.word	0x08009a79
 80099d8:	08009aa9 	.word	0x08009aa9
 80099dc:	08009aa9 	.word	0x08009aa9
 80099e0:	08009aa9 	.word	0x08009aa9
 80099e4:	08009aa9 	.word	0x08009aa9
 80099e8:	08009aa9 	.word	0x08009aa9
 80099ec:	08009aa9 	.word	0x08009aa9
 80099f0:	08009aa9 	.word	0x08009aa9
 80099f4:	08009a81 	.word	0x08009a81
 80099f8:	08009aa9 	.word	0x08009aa9
 80099fc:	08009aa9 	.word	0x08009aa9
 8009a00:	08009aa9 	.word	0x08009aa9
 8009a04:	08009aa9 	.word	0x08009aa9
 8009a08:	08009aa9 	.word	0x08009aa9
 8009a0c:	08009aa9 	.word	0x08009aa9
 8009a10:	08009aa9 	.word	0x08009aa9
 8009a14:	08009a89 	.word	0x08009a89
 8009a18:	08009aa9 	.word	0x08009aa9
 8009a1c:	08009aa9 	.word	0x08009aa9
 8009a20:	08009aa9 	.word	0x08009aa9
 8009a24:	08009aa9 	.word	0x08009aa9
 8009a28:	08009aa9 	.word	0x08009aa9
 8009a2c:	08009aa9 	.word	0x08009aa9
 8009a30:	08009aa9 	.word	0x08009aa9
 8009a34:	08009a91 	.word	0x08009a91
 8009a38:	08009aa9 	.word	0x08009aa9
 8009a3c:	08009aa9 	.word	0x08009aa9
 8009a40:	08009aa9 	.word	0x08009aa9
 8009a44:	08009aa9 	.word	0x08009aa9
 8009a48:	08009aa9 	.word	0x08009aa9
 8009a4c:	08009aa9 	.word	0x08009aa9
 8009a50:	08009aa9 	.word	0x08009aa9
 8009a54:	08009a99 	.word	0x08009a99
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009aa9 	.word	0x08009aa9
 8009a60:	08009aa9 	.word	0x08009aa9
 8009a64:	08009aa9 	.word	0x08009aa9
 8009a68:	08009aa9 	.word	0x08009aa9
 8009a6c:	08009aa9 	.word	0x08009aa9
 8009a70:	08009aa9 	.word	0x08009aa9
 8009a74:	08009aa1 	.word	0x08009aa1
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e222      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009a80:	2304      	movs	r3, #4
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e21e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009a88:	2308      	movs	r3, #8
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e21a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009a90:	2310      	movs	r3, #16
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e216      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009a98:	2320      	movs	r3, #32
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e212      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009aa0:	2340      	movs	r3, #64	@ 0x40
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e20e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009aa8:	2380      	movs	r3, #128	@ 0x80
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e20a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a69      	ldr	r2, [pc, #420]	@ (8009c5c <UART_SetConfig+0x33c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d130      	bne.n	8009b1c <UART_SetConfig+0x1fc>
 8009aba:	4b67      	ldr	r3, [pc, #412]	@ (8009c58 <UART_SetConfig+0x338>)
 8009abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	d826      	bhi.n	8009b14 <UART_SetConfig+0x1f4>
 8009ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8009acc <UART_SetConfig+0x1ac>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009aed 	.word	0x08009aed
 8009ad4:	08009af5 	.word	0x08009af5
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009b05 	.word	0x08009b05
 8009ae0:	08009b0d 	.word	0x08009b0d
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e1ec      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e1e8      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e1e4      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e1e0      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b04:	2320      	movs	r3, #32
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e1dc      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b0c:	2340      	movs	r3, #64	@ 0x40
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e1d8      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e1d4      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a4f      	ldr	r2, [pc, #316]	@ (8009c60 <UART_SetConfig+0x340>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d130      	bne.n	8009b88 <UART_SetConfig+0x268>
 8009b26:	4b4c      	ldr	r3, [pc, #304]	@ (8009c58 <UART_SetConfig+0x338>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d826      	bhi.n	8009b80 <UART_SetConfig+0x260>
 8009b32:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <UART_SetConfig+0x218>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e1b6      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e1b2      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e1ae      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e1aa      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e1a6      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b78:	2340      	movs	r3, #64	@ 0x40
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e1a2      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b80:	2380      	movs	r3, #128	@ 0x80
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e19e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a35      	ldr	r2, [pc, #212]	@ (8009c64 <UART_SetConfig+0x344>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d130      	bne.n	8009bf4 <UART_SetConfig+0x2d4>
 8009b92:	4b31      	ldr	r3, [pc, #196]	@ (8009c58 <UART_SetConfig+0x338>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d826      	bhi.n	8009bec <UART_SetConfig+0x2cc>
 8009b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <UART_SetConfig+0x284>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bc5 	.word	0x08009bc5
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e180      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e17c      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e178      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e174      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e170      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009be4:	2340      	movs	r3, #64	@ 0x40
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e16c      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e168      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c68 <UART_SetConfig+0x348>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d142      	bne.n	8009c84 <UART_SetConfig+0x364>
 8009bfe:	4b16      	ldr	r3, [pc, #88]	@ (8009c58 <UART_SetConfig+0x338>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d838      	bhi.n	8009c7c <UART_SetConfig+0x35c>
 8009c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c10 <UART_SetConfig+0x2f0>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c6d 	.word	0x08009c6d
 8009c24:	08009c75 	.word	0x08009c75
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e14a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e146      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3e:	e142      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e13e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c48:	cfff69f3 	.word	0xcfff69f3
 8009c4c:	58000c00 	.word	0x58000c00
 8009c50:	11fff4ff 	.word	0x11fff4ff
 8009c54:	40011000 	.word	0x40011000
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	40004400 	.word	0x40004400
 8009c60:	40004800 	.word	0x40004800
 8009c64:	40004c00 	.word	0x40004c00
 8009c68:	40005000 	.word	0x40005000
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e128      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c74:	2340      	movs	r3, #64	@ 0x40
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e124      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c7c:	2380      	movs	r3, #128	@ 0x80
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e120      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4acb      	ldr	r2, [pc, #812]	@ (8009fb8 <UART_SetConfig+0x698>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d176      	bne.n	8009d7c <UART_SetConfig+0x45c>
 8009c8e:	4bcb      	ldr	r3, [pc, #812]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c96:	2b28      	cmp	r3, #40	@ 0x28
 8009c98:	d86c      	bhi.n	8009d74 <UART_SetConfig+0x454>
 8009c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <UART_SetConfig+0x380>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009d45 	.word	0x08009d45
 8009ca4:	08009d75 	.word	0x08009d75
 8009ca8:	08009d75 	.word	0x08009d75
 8009cac:	08009d75 	.word	0x08009d75
 8009cb0:	08009d75 	.word	0x08009d75
 8009cb4:	08009d75 	.word	0x08009d75
 8009cb8:	08009d75 	.word	0x08009d75
 8009cbc:	08009d75 	.word	0x08009d75
 8009cc0:	08009d4d 	.word	0x08009d4d
 8009cc4:	08009d75 	.word	0x08009d75
 8009cc8:	08009d75 	.word	0x08009d75
 8009ccc:	08009d75 	.word	0x08009d75
 8009cd0:	08009d75 	.word	0x08009d75
 8009cd4:	08009d75 	.word	0x08009d75
 8009cd8:	08009d75 	.word	0x08009d75
 8009cdc:	08009d75 	.word	0x08009d75
 8009ce0:	08009d55 	.word	0x08009d55
 8009ce4:	08009d75 	.word	0x08009d75
 8009ce8:	08009d75 	.word	0x08009d75
 8009cec:	08009d75 	.word	0x08009d75
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d75 	.word	0x08009d75
 8009cf8:	08009d75 	.word	0x08009d75
 8009cfc:	08009d75 	.word	0x08009d75
 8009d00:	08009d5d 	.word	0x08009d5d
 8009d04:	08009d75 	.word	0x08009d75
 8009d08:	08009d75 	.word	0x08009d75
 8009d0c:	08009d75 	.word	0x08009d75
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d75 	.word	0x08009d75
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	08009d75 	.word	0x08009d75
 8009d28:	08009d75 	.word	0x08009d75
 8009d2c:	08009d75 	.word	0x08009d75
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d75 	.word	0x08009d75
 8009d3c:	08009d75 	.word	0x08009d75
 8009d40:	08009d6d 	.word	0x08009d6d
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e0bc      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e0b8      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e0b4      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e0b0      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d64:	2320      	movs	r3, #32
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e0ac      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d6c:	2340      	movs	r3, #64	@ 0x40
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d72:	e0a8      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d74:	2380      	movs	r3, #128	@ 0x80
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e0a4      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a8f      	ldr	r2, [pc, #572]	@ (8009fc0 <UART_SetConfig+0x6a0>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d130      	bne.n	8009de8 <UART_SetConfig+0x4c8>
 8009d86:	4b8d      	ldr	r3, [pc, #564]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d826      	bhi.n	8009de0 <UART_SetConfig+0x4c0>
 8009d92:	a201      	add	r2, pc, #4	@ (adr r2, 8009d98 <UART_SetConfig+0x478>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e086      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e082      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e07e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e07a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e076      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009dd8:	2340      	movs	r3, #64	@ 0x40
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dde:	e072      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009de0:	2380      	movs	r3, #128	@ 0x80
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e06e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a75      	ldr	r2, [pc, #468]	@ (8009fc4 <UART_SetConfig+0x6a4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d130      	bne.n	8009e54 <UART_SetConfig+0x534>
 8009df2:	4b72      	ldr	r3, [pc, #456]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d826      	bhi.n	8009e4c <UART_SetConfig+0x52c>
 8009dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <UART_SetConfig+0x4e4>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e1d 	.word	0x08009e1d
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e2d 	.word	0x08009e2d
 8009e10:	08009e35 	.word	0x08009e35
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e050      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e24:	2304      	movs	r3, #4
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e04c      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e32:	e048      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e34:	2310      	movs	r3, #16
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3a:	e044      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e42:	e040      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e44:	2340      	movs	r3, #64	@ 0x40
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4a:	e03c      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e4c:	2380      	movs	r3, #128	@ 0x80
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e038      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a5b      	ldr	r2, [pc, #364]	@ (8009fc8 <UART_SetConfig+0x6a8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d130      	bne.n	8009ec0 <UART_SetConfig+0x5a0>
 8009e5e:	4b57      	ldr	r3, [pc, #348]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d826      	bhi.n	8009eb8 <UART_SetConfig+0x598>
 8009e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e70 <UART_SetConfig+0x550>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2302      	movs	r3, #2
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e01a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e016      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e012      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e00e      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eae:	e00a      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009eb0:	2340      	movs	r3, #64	@ 0x40
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb6:	e006      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009eb8:	2380      	movs	r3, #128	@ 0x80
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ebe:	e002      	b.n	8009ec6 <UART_SetConfig+0x5a6>
 8009ec0:	2380      	movs	r3, #128	@ 0x80
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc8 <UART_SetConfig+0x6a8>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	f040 80f8 	bne.w	800a0c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ed2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	dc46      	bgt.n	8009f68 <UART_SetConfig+0x648>
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	f2c0 8082 	blt.w	8009fe4 <UART_SetConfig+0x6c4>
 8009ee0:	3b02      	subs	r3, #2
 8009ee2:	2b1e      	cmp	r3, #30
 8009ee4:	d87e      	bhi.n	8009fe4 <UART_SetConfig+0x6c4>
 8009ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eec <UART_SetConfig+0x5cc>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f6f 	.word	0x08009f6f
 8009ef0:	08009fe5 	.word	0x08009fe5
 8009ef4:	08009f77 	.word	0x08009f77
 8009ef8:	08009fe5 	.word	0x08009fe5
 8009efc:	08009fe5 	.word	0x08009fe5
 8009f00:	08009fe5 	.word	0x08009fe5
 8009f04:	08009f87 	.word	0x08009f87
 8009f08:	08009fe5 	.word	0x08009fe5
 8009f0c:	08009fe5 	.word	0x08009fe5
 8009f10:	08009fe5 	.word	0x08009fe5
 8009f14:	08009fe5 	.word	0x08009fe5
 8009f18:	08009fe5 	.word	0x08009fe5
 8009f1c:	08009fe5 	.word	0x08009fe5
 8009f20:	08009fe5 	.word	0x08009fe5
 8009f24:	08009f97 	.word	0x08009f97
 8009f28:	08009fe5 	.word	0x08009fe5
 8009f2c:	08009fe5 	.word	0x08009fe5
 8009f30:	08009fe5 	.word	0x08009fe5
 8009f34:	08009fe5 	.word	0x08009fe5
 8009f38:	08009fe5 	.word	0x08009fe5
 8009f3c:	08009fe5 	.word	0x08009fe5
 8009f40:	08009fe5 	.word	0x08009fe5
 8009f44:	08009fe5 	.word	0x08009fe5
 8009f48:	08009fe5 	.word	0x08009fe5
 8009f4c:	08009fe5 	.word	0x08009fe5
 8009f50:	08009fe5 	.word	0x08009fe5
 8009f54:	08009fe5 	.word	0x08009fe5
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	08009fe5 	.word	0x08009fe5
 8009f60:	08009fe5 	.word	0x08009fe5
 8009f64:	08009fd7 	.word	0x08009fd7
 8009f68:	2b40      	cmp	r3, #64	@ 0x40
 8009f6a:	d037      	beq.n	8009fdc <UART_SetConfig+0x6bc>
 8009f6c:	e03a      	b.n	8009fe4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f6e:	f7fe fbb7 	bl	80086e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f74:	e03c      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fbc6 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e034      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f86:	f107 0318 	add.w	r3, r7, #24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fd12 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f94:	e02c      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f96:	4b09      	ldr	r3, [pc, #36]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d016      	beq.n	8009fd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fa2:	4b06      	ldr	r3, [pc, #24]	@ (8009fbc <UART_SetConfig+0x69c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	4a07      	ldr	r2, [pc, #28]	@ (8009fcc <UART_SetConfig+0x6ac>)
 8009fae:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fb4:	e01c      	b.n	8009ff0 <UART_SetConfig+0x6d0>
 8009fb6:	bf00      	nop
 8009fb8:	40011400 	.word	0x40011400
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	40007800 	.word	0x40007800
 8009fc4:	40007c00 	.word	0x40007c00
 8009fc8:	58000c00 	.word	0x58000c00
 8009fcc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fd0:	4b9d      	ldr	r3, [pc, #628]	@ (800a248 <UART_SetConfig+0x928>)
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd4:	e00c      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fd6:	4b9d      	ldr	r3, [pc, #628]	@ (800a24c <UART_SetConfig+0x92c>)
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fda:	e009      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe2:	e005      	b.n	8009ff0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 81de 	beq.w	800a3b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	4a94      	ldr	r2, [pc, #592]	@ (800a250 <UART_SetConfig+0x930>)
 8009ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a002:	461a      	mov	r2, r3
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	fbb3 f3f2 	udiv	r3, r3, r2
 800a00a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	4413      	add	r3, r2
 800a016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a018:	429a      	cmp	r2, r3
 800a01a:	d305      	bcc.n	800a028 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a024:	429a      	cmp	r2, r3
 800a026:	d903      	bls.n	800a030 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a02e:	e1c1      	b.n	800a3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a032:	2200      	movs	r2, #0
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	60fa      	str	r2, [r7, #12]
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03c:	4a84      	ldr	r2, [pc, #528]	@ (800a250 <UART_SetConfig+0x930>)
 800a03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a042:	b29b      	uxth	r3, r3
 800a044:	2200      	movs	r2, #0
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a052:	f7f6 f945 	bl	80002e0 <__aeabi_uldivmod>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4610      	mov	r0, r2
 800a05c:	4619      	mov	r1, r3
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	020b      	lsls	r3, r1, #8
 800a068:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a06c:	0202      	lsls	r2, r0, #8
 800a06e:	6979      	ldr	r1, [r7, #20]
 800a070:	6849      	ldr	r1, [r1, #4]
 800a072:	0849      	lsrs	r1, r1, #1
 800a074:	2000      	movs	r0, #0
 800a076:	460c      	mov	r4, r1
 800a078:	4605      	mov	r5, r0
 800a07a:	eb12 0804 	adds.w	r8, r2, r4
 800a07e:	eb43 0905 	adc.w	r9, r3, r5
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	469a      	mov	sl, r3
 800a08a:	4693      	mov	fp, r2
 800a08c:	4652      	mov	r2, sl
 800a08e:	465b      	mov	r3, fp
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 f924 	bl	80002e0 <__aeabi_uldivmod>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4613      	mov	r3, r2
 800a09e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0a6:	d308      	bcc.n	800a0ba <UART_SetConfig+0x79a>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0ae:	d204      	bcs.n	800a0ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0b6:	60da      	str	r2, [r3, #12]
 800a0b8:	e17c      	b.n	800a3b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0c0:	e178      	b.n	800a3b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ca:	f040 80c5 	bne.w	800a258 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	dc48      	bgt.n	800a168 <UART_SetConfig+0x848>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	db7b      	blt.n	800a1d2 <UART_SetConfig+0x8b2>
 800a0da:	2b20      	cmp	r3, #32
 800a0dc:	d879      	bhi.n	800a1d2 <UART_SetConfig+0x8b2>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <UART_SetConfig+0x7c4>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a16f 	.word	0x0800a16f
 800a0e8:	0800a177 	.word	0x0800a177
 800a0ec:	0800a1d3 	.word	0x0800a1d3
 800a0f0:	0800a1d3 	.word	0x0800a1d3
 800a0f4:	0800a17f 	.word	0x0800a17f
 800a0f8:	0800a1d3 	.word	0x0800a1d3
 800a0fc:	0800a1d3 	.word	0x0800a1d3
 800a100:	0800a1d3 	.word	0x0800a1d3
 800a104:	0800a18f 	.word	0x0800a18f
 800a108:	0800a1d3 	.word	0x0800a1d3
 800a10c:	0800a1d3 	.word	0x0800a1d3
 800a110:	0800a1d3 	.word	0x0800a1d3
 800a114:	0800a1d3 	.word	0x0800a1d3
 800a118:	0800a1d3 	.word	0x0800a1d3
 800a11c:	0800a1d3 	.word	0x0800a1d3
 800a120:	0800a1d3 	.word	0x0800a1d3
 800a124:	0800a19f 	.word	0x0800a19f
 800a128:	0800a1d3 	.word	0x0800a1d3
 800a12c:	0800a1d3 	.word	0x0800a1d3
 800a130:	0800a1d3 	.word	0x0800a1d3
 800a134:	0800a1d3 	.word	0x0800a1d3
 800a138:	0800a1d3 	.word	0x0800a1d3
 800a13c:	0800a1d3 	.word	0x0800a1d3
 800a140:	0800a1d3 	.word	0x0800a1d3
 800a144:	0800a1d3 	.word	0x0800a1d3
 800a148:	0800a1d3 	.word	0x0800a1d3
 800a14c:	0800a1d3 	.word	0x0800a1d3
 800a150:	0800a1d3 	.word	0x0800a1d3
 800a154:	0800a1d3 	.word	0x0800a1d3
 800a158:	0800a1d3 	.word	0x0800a1d3
 800a15c:	0800a1d3 	.word	0x0800a1d3
 800a160:	0800a1d3 	.word	0x0800a1d3
 800a164:	0800a1c5 	.word	0x0800a1c5
 800a168:	2b40      	cmp	r3, #64	@ 0x40
 800a16a:	d02e      	beq.n	800a1ca <UART_SetConfig+0x8aa>
 800a16c:	e031      	b.n	800a1d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a16e:	f7fc fabf 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 800a172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a174:	e033      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a176:	f7fc fad1 	bl	800671c <HAL_RCC_GetPCLK2Freq>
 800a17a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a17c:	e02f      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fac2 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18c:	e027      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a18e:	f107 0318 	add.w	r3, r7, #24
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fc0e 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19c:	e01f      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a19e:	4b2d      	ldr	r3, [pc, #180]	@ (800a254 <UART_SetConfig+0x934>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a254 <UART_SetConfig+0x934>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	08db      	lsrs	r3, r3, #3
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	4a24      	ldr	r2, [pc, #144]	@ (800a248 <UART_SetConfig+0x928>)
 800a1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1bc:	e00f      	b.n	800a1de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a1be:	4b22      	ldr	r3, [pc, #136]	@ (800a248 <UART_SetConfig+0x928>)
 800a1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c2:	e00c      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1c4:	4b21      	ldr	r3, [pc, #132]	@ (800a24c <UART_SetConfig+0x92c>)
 800a1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c8:	e009      	b.n	800a1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d0:	e005      	b.n	800a1de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80e7 	beq.w	800a3b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ea:	4a19      	ldr	r2, [pc, #100]	@ (800a250 <UART_SetConfig+0x930>)
 800a1ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1f8:	005a      	lsls	r2, r3, #1
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	085b      	lsrs	r3, r3, #1
 800a200:	441a      	add	r2, r3
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	2b0f      	cmp	r3, #15
 800a210:	d916      	bls.n	800a240 <UART_SetConfig+0x920>
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a218:	d212      	bcs.n	800a240 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f023 030f 	bic.w	r3, r3, #15
 800a222:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	085b      	lsrs	r3, r3, #1
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	b29a      	uxth	r2, r3
 800a230:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a232:	4313      	orrs	r3, r2
 800a234:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a23c:	60da      	str	r2, [r3, #12]
 800a23e:	e0b9      	b.n	800a3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a246:	e0b5      	b.n	800a3b4 <UART_SetConfig+0xa94>
 800a248:	03d09000 	.word	0x03d09000
 800a24c:	003d0900 	.word	0x003d0900
 800a250:	0800df20 	.word	0x0800df20
 800a254:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a258:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	dc49      	bgt.n	800a2f4 <UART_SetConfig+0x9d4>
 800a260:	2b00      	cmp	r3, #0
 800a262:	db7c      	blt.n	800a35e <UART_SetConfig+0xa3e>
 800a264:	2b20      	cmp	r3, #32
 800a266:	d87a      	bhi.n	800a35e <UART_SetConfig+0xa3e>
 800a268:	a201      	add	r2, pc, #4	@ (adr r2, 800a270 <UART_SetConfig+0x950>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a2fb 	.word	0x0800a2fb
 800a274:	0800a303 	.word	0x0800a303
 800a278:	0800a35f 	.word	0x0800a35f
 800a27c:	0800a35f 	.word	0x0800a35f
 800a280:	0800a30b 	.word	0x0800a30b
 800a284:	0800a35f 	.word	0x0800a35f
 800a288:	0800a35f 	.word	0x0800a35f
 800a28c:	0800a35f 	.word	0x0800a35f
 800a290:	0800a31b 	.word	0x0800a31b
 800a294:	0800a35f 	.word	0x0800a35f
 800a298:	0800a35f 	.word	0x0800a35f
 800a29c:	0800a35f 	.word	0x0800a35f
 800a2a0:	0800a35f 	.word	0x0800a35f
 800a2a4:	0800a35f 	.word	0x0800a35f
 800a2a8:	0800a35f 	.word	0x0800a35f
 800a2ac:	0800a35f 	.word	0x0800a35f
 800a2b0:	0800a32b 	.word	0x0800a32b
 800a2b4:	0800a35f 	.word	0x0800a35f
 800a2b8:	0800a35f 	.word	0x0800a35f
 800a2bc:	0800a35f 	.word	0x0800a35f
 800a2c0:	0800a35f 	.word	0x0800a35f
 800a2c4:	0800a35f 	.word	0x0800a35f
 800a2c8:	0800a35f 	.word	0x0800a35f
 800a2cc:	0800a35f 	.word	0x0800a35f
 800a2d0:	0800a35f 	.word	0x0800a35f
 800a2d4:	0800a35f 	.word	0x0800a35f
 800a2d8:	0800a35f 	.word	0x0800a35f
 800a2dc:	0800a35f 	.word	0x0800a35f
 800a2e0:	0800a35f 	.word	0x0800a35f
 800a2e4:	0800a35f 	.word	0x0800a35f
 800a2e8:	0800a35f 	.word	0x0800a35f
 800a2ec:	0800a35f 	.word	0x0800a35f
 800a2f0:	0800a351 	.word	0x0800a351
 800a2f4:	2b40      	cmp	r3, #64	@ 0x40
 800a2f6:	d02e      	beq.n	800a356 <UART_SetConfig+0xa36>
 800a2f8:	e031      	b.n	800a35e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2fa:	f7fc f9f9 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 800a2fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a300:	e033      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a302:	f7fc fa0b 	bl	800671c <HAL_RCC_GetPCLK2Freq>
 800a306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a308:	e02f      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe f9fc 	bl	800870c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a318:	e027      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31a:	f107 0318 	add.w	r3, r7, #24
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fb48 	bl	80089b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e01f      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32a:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e0 <UART_SetConfig+0xac0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b00      	cmp	r3, #0
 800a334:	d009      	beq.n	800a34a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a336:	4b2a      	ldr	r3, [pc, #168]	@ (800a3e0 <UART_SetConfig+0xac0>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	08db      	lsrs	r3, r3, #3
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	4a28      	ldr	r2, [pc, #160]	@ (800a3e4 <UART_SetConfig+0xac4>)
 800a342:	fa22 f303 	lsr.w	r3, r2, r3
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a348:	e00f      	b.n	800a36a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a34a:	4b26      	ldr	r3, [pc, #152]	@ (800a3e4 <UART_SetConfig+0xac4>)
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34e:	e00c      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a350:	4b25      	ldr	r3, [pc, #148]	@ (800a3e8 <UART_SetConfig+0xac8>)
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a354:	e009      	b.n	800a36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a35c:	e005      	b.n	800a36a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a368:	bf00      	nop
    }

    if (pclk != 0U)
 800a36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d021      	beq.n	800a3b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	4a1d      	ldr	r2, [pc, #116]	@ (800a3ec <UART_SetConfig+0xacc>)
 800a376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a37a:	461a      	mov	r2, r3
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	085b      	lsrs	r3, r3, #1
 800a388:	441a      	add	r2, r3
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a392:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	2b0f      	cmp	r3, #15
 800a398:	d909      	bls.n	800a3ae <UART_SetConfig+0xa8e>
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a0:	d205      	bcs.n	800a3ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60da      	str	r2, [r3, #12]
 800a3ac:	e002      	b.n	800a3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3748      	adds	r7, #72	@ 0x48
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3de:	bf00      	nop
 800a3e0:	58024400 	.word	0x58024400
 800a3e4:	03d09000 	.word	0x03d09000
 800a3e8:	003d0900 	.word	0x003d0900
 800a3ec:	0800df20 	.word	0x0800df20

0800a3f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	f003 0308 	and.w	r3, r3, #8
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01a      	beq.n	800a506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ee:	d10a      	bne.n	800a506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	605a      	str	r2, [r3, #4]
  }
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b098      	sub	sp, #96	@ 0x60
 800a538:	af02      	add	r7, sp, #8
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a544:	f7f7 f8de 	bl	8001704 <HAL_GetTick>
 800a548:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0308 	and.w	r3, r3, #8
 800a554:	2b08      	cmp	r3, #8
 800a556:	d12f      	bne.n	800a5b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a560:	2200      	movs	r2, #0
 800a562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f88e 	bl	800a688 <UART_WaitOnFlagUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d022      	beq.n	800a5b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	e853 3f00 	ldrex	r3, [r3]
 800a57e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a586:	653b      	str	r3, [r7, #80]	@ 0x50
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a590:	647b      	str	r3, [r7, #68]	@ 0x44
 800a592:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a598:	e841 2300 	strex	r3, r2, [r1]
 800a59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e6      	bne.n	800a572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e063      	b.n	800a680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d149      	bne.n	800a65a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f857 	bl	800a688 <UART_WaitOnFlagUntilTimeout>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d03c      	beq.n	800a65a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a600:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e6      	bne.n	800a5e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	60fb      	str	r3, [r7, #12]
   return(result);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f023 0301 	bic.w	r3, r3, #1
 800a628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3308      	adds	r3, #8
 800a630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a632:	61fa      	str	r2, [r7, #28]
 800a634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a636:	69b9      	ldr	r1, [r7, #24]
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	e841 2300 	strex	r3, r2, [r1]
 800a63e:	617b      	str	r3, [r7, #20]
   return(result);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1e5      	bne.n	800a612 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2220      	movs	r2, #32
 800a64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e012      	b.n	800a680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2220      	movs	r2, #32
 800a666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3758      	adds	r7, #88	@ 0x58
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a698:	e04f      	b.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6a0:	d04b      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a2:	f7f7 f82f 	bl	8001704 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d302      	bcc.n	800a6b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e04e      	b.n	800a75a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d037      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b80      	cmp	r3, #128	@ 0x80
 800a6ce:	d034      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b40      	cmp	r3, #64	@ 0x40
 800a6d4:	d031      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	f003 0308 	and.w	r3, r3, #8
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d110      	bne.n	800a706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f839 	bl	800a764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2208      	movs	r2, #8
 800a6f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e029      	b.n	800a75a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a714:	d111      	bne.n	800a73a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a71e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f81f 	bl	800a764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e00f      	b.n	800a75a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69da      	ldr	r2, [r3, #28]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4013      	ands	r3, r2
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	429a      	cmp	r2, r3
 800a748:	bf0c      	ite	eq
 800a74a:	2301      	moveq	r3, #1
 800a74c:	2300      	movne	r3, #0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	461a      	mov	r2, r3
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	429a      	cmp	r2, r3
 800a756:	d0a0      	beq.n	800a69a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a764:	b480      	push	{r7}
 800a766:	b095      	sub	sp, #84	@ 0x54
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a78a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a78c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e6      	bne.n	800a76c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a82c <UART_EndRxTransfer+0xc8>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d118      	bne.n	800a80c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f023 0310 	bic.w	r3, r3, #16
 800a7ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6979      	ldr	r1, [r7, #20]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	613b      	str	r3, [r7, #16]
   return(result);
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e6      	bne.n	800a7da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a820:	bf00      	nop
 800a822:	3754      	adds	r7, #84	@ 0x54
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	effffffe 	.word	0xeffffffe

0800a830 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d101      	bne.n	800a846 <HAL_UARTEx_DisableFifoMode+0x16>
 800a842:	2302      	movs	r3, #2
 800a844:	e027      	b.n	800a896 <HAL_UARTEx_DisableFifoMode+0x66>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2224      	movs	r2, #36	@ 0x24
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0201 	bic.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a874:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e02d      	b.n	800a916 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2224      	movs	r2, #36	@ 0x24
 800a8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f850 	bl	800a99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2220      	movs	r2, #32
 800a908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d101      	bne.n	800a936 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a932:	2302      	movs	r3, #2
 800a934:	e02d      	b.n	800a992 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2224      	movs	r2, #36	@ 0x24
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 0201 	bic.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f812 	bl	800a99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d108      	bne.n	800a9be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9bc:	e031      	b.n	800aa22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9be:	2310      	movs	r3, #16
 800a9c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9c2:	2310      	movs	r3, #16
 800a9c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	0e5b      	lsrs	r3, r3, #25
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	0f5b      	lsrs	r3, r3, #29
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0307 	and.w	r3, r3, #7
 800a9e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	7b3a      	ldrb	r2, [r7, #12]
 800a9ea:	4911      	ldr	r1, [pc, #68]	@ (800aa30 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ec:	5c8a      	ldrb	r2, [r1, r2]
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9f2:	7b3a      	ldrb	r2, [r7, #12]
 800a9f4:	490f      	ldr	r1, [pc, #60]	@ (800aa34 <UARTEx_SetNbDataToProcess+0x98>)
 800a9f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	7b7a      	ldrb	r2, [r7, #13]
 800aa08:	4909      	ldr	r1, [pc, #36]	@ (800aa30 <UARTEx_SetNbDataToProcess+0x94>)
 800aa0a:	5c8a      	ldrb	r2, [r1, r2]
 800aa0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa10:	7b7a      	ldrb	r2, [r7, #13]
 800aa12:	4908      	ldr	r1, [pc, #32]	@ (800aa34 <UARTEx_SetNbDataToProcess+0x98>)
 800aa14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa16:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	0800df38 	.word	0x0800df38
 800aa34:	0800df40 	.word	0x0800df40

0800aa38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa38:	b084      	sub	sp, #16
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	f107 001c 	add.w	r0, r7, #28
 800aa46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d121      	bne.n	800aa96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	4b2c      	ldr	r3, [pc, #176]	@ (800ab14 <USB_CoreInit+0xdc>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d105      	bne.n	800aa8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 faaa 	bl	800afe4 <USB_CoreReset>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e01b      	b.n	800aace <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa9e 	bl	800afe4 <USB_CoreReset>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aaac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d106      	bne.n	800aac2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	639a      	str	r2, [r3, #56]	@ 0x38
 800aac0:	e005      	b.n	800aace <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aace:	7fbb      	ldrb	r3, [r7, #30]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d116      	bne.n	800ab02 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aae2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab18 <USB_CoreInit+0xe0>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f043 0206 	orr.w	r2, r3, #6
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f043 0220 	orr.w	r2, r3, #32
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab0e:	b004      	add	sp, #16
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	ffbdffbf 	.word	0xffbdffbf
 800ab18:	03ee0000 	.word	0x03ee0000

0800ab1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f023 0201 	bic.w	r2, r3, #1
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d115      	bne.n	800ab8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab6c:	200a      	movs	r0, #10
 800ab6e:	f7f6 fdd5 	bl	800171c <HAL_Delay>
      ms += 10U;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	330a      	adds	r3, #10
 800ab76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fa25 	bl	800afc8 <USB_GetMode>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d01e      	beq.n	800abc2 <USB_SetCurrentMode+0x84>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab88:	d9f0      	bls.n	800ab6c <USB_SetCurrentMode+0x2e>
 800ab8a:	e01a      	b.n	800abc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d115      	bne.n	800abbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab9e:	200a      	movs	r0, #10
 800aba0:	f7f6 fdbc 	bl	800171c <HAL_Delay>
      ms += 10U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	330a      	adds	r3, #10
 800aba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa0c 	bl	800afc8 <USB_GetMode>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <USB_SetCurrentMode+0x84>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2bc7      	cmp	r3, #199	@ 0xc7
 800abba:	d9f0      	bls.n	800ab9e <USB_SetCurrentMode+0x60>
 800abbc:	e001      	b.n	800abc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e005      	b.n	800abce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2bc8      	cmp	r3, #200	@ 0xc8
 800abc6:	d101      	bne.n	800abcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e000      	b.n	800abce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abd8:	b084      	sub	sp, #16
 800abda:	b580      	push	{r7, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
 800abf6:	e009      	b.n	800ac0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3340      	adds	r3, #64	@ 0x40
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	613b      	str	r3, [r7, #16]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b0e      	cmp	r3, #14
 800ac10:	d9f2      	bls.n	800abf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d11c      	bne.n	800ac54 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac28:	f043 0302 	orr.w	r3, r3, #2
 800ac2c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac32:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	e005      	b.n	800ac60 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac58:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac66:	461a      	mov	r2, r3
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac6c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d10d      	bne.n	800ac90 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f968 	bl	800af54 <USB_SetDevSpeed>
 800ac84:	e008      	b.n	800ac98 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac86:	2101      	movs	r1, #1
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f963 	bl	800af54 <USB_SetDevSpeed>
 800ac8e:	e003      	b.n	800ac98 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac90:	2103      	movs	r1, #3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f95e 	bl	800af54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac98:	2110      	movs	r1, #16
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f8fa 	bl	800ae94 <USB_FlushTxFifo>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f924 	bl	800aef8 <USB_FlushRxFifo>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc0:	461a      	mov	r2, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800accc:	461a      	mov	r2, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd8:	461a      	mov	r2, r3
 800acda:	2300      	movs	r3, #0
 800acdc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	e043      	b.n	800ad6c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acfa:	d118      	bne.n	800ad2e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	e013      	b.n	800ad40 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad24:	461a      	mov	r2, r3
 800ad26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	e008      	b.n	800ad40 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad70:	461a      	mov	r2, r3
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d3b5      	bcc.n	800ace4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	e043      	b.n	800ae06 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad94:	d118      	bne.n	800adc8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada8:	461a      	mov	r2, r3
 800adaa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	e013      	b.n	800adda <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbe:	461a      	mov	r2, r3
 800adc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	e008      	b.n	800adda <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add4:	461a      	mov	r2, r3
 800add6:	2300      	movs	r3, #0
 800add8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	015a      	lsls	r2, r3, #5
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade6:	461a      	mov	r2, r3
 800ade8:	2300      	movs	r3, #0
 800adea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf8:	461a      	mov	r2, r3
 800adfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800adfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	3301      	adds	r3, #1
 800ae04:	613b      	str	r3, [r7, #16]
 800ae06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d3b5      	bcc.n	800ad7e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d105      	bne.n	800ae48 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	f043 0210 	orr.w	r2, r3, #16
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	699a      	ldr	r2, [r3, #24]
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae8c <USB_DevInit+0x2b4>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f043 0208 	orr.w	r2, r3, #8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d105      	bne.n	800ae7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <USB_DevInit+0x2b8>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae88:	b004      	add	sp, #16
 800ae8a:	4770      	bx	lr
 800ae8c:	803c3800 	.word	0x803c3800
 800ae90:	40000004 	.word	0x40000004

0800ae94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeae:	d901      	bls.n	800aeb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e01b      	b.n	800aeec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	daf2      	bge.n	800aea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	019b      	lsls	r3, r3, #6
 800aec4:	f043 0220 	orr.w	r2, r3, #32
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3301      	adds	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aed8:	d901      	bls.n	800aede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e006      	b.n	800aeec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	d0f0      	beq.n	800aecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af10:	d901      	bls.n	800af16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e018      	b.n	800af48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	daf2      	bge.n	800af04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2210      	movs	r2, #16
 800af26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af34:	d901      	bls.n	800af3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e006      	b.n	800af48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	f003 0310 	and.w	r3, r3, #16
 800af42:	2b10      	cmp	r3, #16
 800af44:	d0f0      	beq.n	800af28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af74:	4313      	orrs	r3, r2
 800af76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	f003 0301 	and.w	r3, r3, #1
}
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3301      	adds	r3, #1
 800aff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800affc:	d901      	bls.n	800b002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e01b      	b.n	800b03a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	daf2      	bge.n	800aff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f043 0201 	orr.w	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3301      	adds	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b026:	d901      	bls.n	800b02c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e006      	b.n	800b03a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b01      	cmp	r3, #1
 800b036:	d0f0      	beq.n	800b01a <USB_CoreReset+0x36>

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
	...

0800b048 <__NVIC_SetPriority>:
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	6039      	str	r1, [r7, #0]
 800b052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	db0a      	blt.n	800b072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	490c      	ldr	r1, [pc, #48]	@ (800b094 <__NVIC_SetPriority+0x4c>)
 800b062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b066:	0112      	lsls	r2, r2, #4
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	440b      	add	r3, r1
 800b06c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b070:	e00a      	b.n	800b088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	b2da      	uxtb	r2, r3
 800b076:	4908      	ldr	r1, [pc, #32]	@ (800b098 <__NVIC_SetPriority+0x50>)
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	f003 030f 	and.w	r3, r3, #15
 800b07e:	3b04      	subs	r3, #4
 800b080:	0112      	lsls	r2, r2, #4
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	440b      	add	r3, r1
 800b086:	761a      	strb	r2, [r3, #24]
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	e000e100 	.word	0xe000e100
 800b098:	e000ed00 	.word	0xe000ed00

0800b09c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b0a0:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <SysTick_Handler+0x1c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b0a4:	f001 fd6a 	bl	800cb7c <xTaskGetSchedulerState>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d001      	beq.n	800b0b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b0ae:	f002 fb63 	bl	800d778 <xPortSysTickHandler>
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	e000e010 	.word	0xe000e010

0800b0bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	f06f 0004 	mvn.w	r0, #4
 800b0c6:	f7ff ffbf 	bl	800b048 <__NVIC_SetPriority>
#endif
}
 800b0ca:	bf00      	nop
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0d6:	f3ef 8305 	mrs	r3, IPSR
 800b0da:	603b      	str	r3, [r7, #0]
  return(result);
 800b0dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b0e2:	f06f 0305 	mvn.w	r3, #5
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	e00c      	b.n	800b104 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b114 <osKernelInitialize+0x44>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d105      	bne.n	800b0fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b0f2:	4b08      	ldr	r3, [pc, #32]	@ (800b114 <osKernelInitialize+0x44>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	607b      	str	r3, [r7, #4]
 800b0fc:	e002      	b.n	800b104 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b104:	687b      	ldr	r3, [r7, #4]
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	24000730 	.word	0x24000730

0800b118 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b11e:	f3ef 8305 	mrs	r3, IPSR
 800b122:	603b      	str	r3, [r7, #0]
  return(result);
 800b124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b12a:	f06f 0305 	mvn.w	r3, #5
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	e010      	b.n	800b154 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b132:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <osKernelStart+0x48>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d109      	bne.n	800b14e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b13a:	f7ff ffbf 	bl	800b0bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b13e:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <osKernelStart+0x48>)
 800b140:	2202      	movs	r2, #2
 800b142:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b144:	f001 f892 	bl	800c26c <vTaskStartScheduler>
      stat = osOK;
 800b148:	2300      	movs	r3, #0
 800b14a:	607b      	str	r3, [r7, #4]
 800b14c:	e002      	b.n	800b154 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b154:	687b      	ldr	r3, [r7, #4]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	24000730 	.word	0x24000730

0800b164 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b164:	b580      	push	{r7, lr}
 800b166:	b08e      	sub	sp, #56	@ 0x38
 800b168:	af04      	add	r7, sp, #16
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b174:	f3ef 8305 	mrs	r3, IPSR
 800b178:	617b      	str	r3, [r7, #20]
  return(result);
 800b17a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d17e      	bne.n	800b27e <osThreadNew+0x11a>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d07b      	beq.n	800b27e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b186:	2380      	movs	r3, #128	@ 0x80
 800b188:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b18a:	2318      	movs	r3, #24
 800b18c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b196:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d045      	beq.n	800b22a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <osThreadNew+0x48>
        name = attr->name;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d008      	beq.n	800b1d2 <osThreadNew+0x6e>
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	2b38      	cmp	r3, #56	@ 0x38
 800b1c4:	d805      	bhi.n	800b1d2 <osThreadNew+0x6e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <osThreadNew+0x72>
        return (NULL);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e054      	b.n	800b280 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	089b      	lsrs	r3, r3, #2
 800b1e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00e      	beq.n	800b20c <osThreadNew+0xa8>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	2ba7      	cmp	r3, #167	@ 0xa7
 800b1f4:	d90a      	bls.n	800b20c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <osThreadNew+0xa8>
        mem = 1;
 800b206:	2301      	movs	r3, #1
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	e010      	b.n	800b22e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10c      	bne.n	800b22e <osThreadNew+0xca>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d108      	bne.n	800b22e <osThreadNew+0xca>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <osThreadNew+0xca>
          mem = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	61bb      	str	r3, [r7, #24]
 800b228:	e001      	b.n	800b22e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d110      	bne.n	800b256 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b23c:	9202      	str	r2, [sp, #8]
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6a3a      	ldr	r2, [r7, #32]
 800b248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fe1a 	bl	800be84 <xTaskCreateStatic>
 800b250:	4603      	mov	r3, r0
 800b252:	613b      	str	r3, [r7, #16]
 800b254:	e013      	b.n	800b27e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d110      	bne.n	800b27e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	b29a      	uxth	r2, r3
 800b260:	f107 0310 	add.w	r3, r7, #16
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 fe68 	bl	800bf44 <xTaskCreate>
 800b274:	4603      	mov	r3, r0
 800b276:	2b01      	cmp	r3, #1
 800b278:	d001      	beq.n	800b27e <osThreadNew+0x11a>
            hTask = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b27e:	693b      	ldr	r3, [r7, #16]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3728      	adds	r7, #40	@ 0x28
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b290:	f3ef 8305 	mrs	r3, IPSR
 800b294:	60bb      	str	r3, [r7, #8]
  return(result);
 800b296:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <osDelay+0x1c>
    stat = osErrorISR;
 800b29c:	f06f 0305 	mvn.w	r3, #5
 800b2a0:	60fb      	str	r3, [r7, #12]
 800b2a2:	e007      	b.n	800b2b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 ffa6 	bl	800c200 <vTaskDelay>
    }
  }

  return (stat);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4a07      	ldr	r2, [pc, #28]	@ (800b2ec <vApplicationGetIdleTaskMemory+0x2c>)
 800b2d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4a06      	ldr	r2, [pc, #24]	@ (800b2f0 <vApplicationGetIdleTaskMemory+0x30>)
 800b2d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2280      	movs	r2, #128	@ 0x80
 800b2dc:	601a      	str	r2, [r3, #0]
}
 800b2de:	bf00      	nop
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	24000734 	.word	0x24000734
 800b2f0:	240007dc 	.word	0x240007dc

0800b2f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a07      	ldr	r2, [pc, #28]	@ (800b320 <vApplicationGetTimerTaskMemory+0x2c>)
 800b304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	4a06      	ldr	r2, [pc, #24]	@ (800b324 <vApplicationGetTimerTaskMemory+0x30>)
 800b30a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	240009dc 	.word	0x240009dc
 800b324:	24000a84 	.word	0x24000a84

0800b328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f103 0208 	add.w	r2, r3, #8
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f103 0208 	add.w	r2, r3, #8
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f103 0208 	add.w	r2, r3, #8
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	689a      	ldr	r2, [r3, #8]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e0:	d103      	bne.n	800b3ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e00c      	b.n	800b404 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e002      	b.n	800b3f8 <vListInsert+0x2e>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	429a      	cmp	r2, r3
 800b402:	d2f6      	bcs.n	800b3f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	601a      	str	r2, [r3, #0]
}
 800b430:	bf00      	nop
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6892      	ldr	r2, [r2, #8]
 800b452:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6852      	ldr	r2, [r2, #4]
 800b45c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d103      	bne.n	800b470 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	1e5a      	subs	r2, r3, #1
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4bc:	f002 f8cc 	bl	800d658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c8:	68f9      	ldr	r1, [r7, #12]
 800b4ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	441a      	add	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	441a      	add	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	22ff      	movs	r2, #255	@ 0xff
 800b500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	22ff      	movs	r2, #255	@ 0xff
 800b508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d114      	bne.n	800b53c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01a      	beq.n	800b550 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3310      	adds	r3, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 f966 	bl	800c7f0 <xTaskRemoveFromEventList>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d012      	beq.n	800b550 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <xQueueGenericReset+0xd0>)
 800b52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	e009      	b.n	800b550 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3310      	adds	r3, #16
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fef1 	bl	800b328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3324      	adds	r3, #36	@ 0x24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff feec 	bl	800b328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b550:	f002 f8b4 	bl	800d6bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b554:	2301      	movs	r3, #1
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	e000ed04 	.word	0xe000ed04

0800b564 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08e      	sub	sp, #56	@ 0x38
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <xQueueGenericCreateStatic+0x56>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <xQueueGenericCreateStatic+0x5a>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e000      	b.n	800b5c0 <xQueueGenericCreateStatic+0x5c>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	623b      	str	r3, [r7, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	e7fd      	b.n	800b5d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <xQueueGenericCreateStatic+0x84>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <xQueueGenericCreateStatic+0x88>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e000      	b.n	800b5ee <xQueueGenericCreateStatic+0x8a>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	61fb      	str	r3, [r7, #28]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b60a:	2350      	movs	r3, #80	@ 0x50
 800b60c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b50      	cmp	r3, #80	@ 0x50
 800b612:	d00b      	beq.n	800b62c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	61bb      	str	r3, [r7, #24]
}
 800b626:	bf00      	nop
 800b628:	bf00      	nop
 800b62a:	e7fd      	b.n	800b628 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b62c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00d      	beq.n	800b654 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b640:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f805 	bl	800b65e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b656:	4618      	mov	r0, r3
 800b658:	3730      	adds	r7, #48	@ 0x30
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d103      	bne.n	800b67a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	e002      	b.n	800b680 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b68c:	2101      	movs	r1, #1
 800b68e:	69b8      	ldr	r0, [r7, #24]
 800b690:	f7ff fefe 	bl	800b490 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b69c:	bf00      	nop
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	@ 0x38
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10b      	bne.n	800b6d8 <xQueueGenericSend+0x34>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6d2:	bf00      	nop
 800b6d4:	bf00      	nop
 800b6d6:	e7fd      	b.n	800b6d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <xQueueGenericSend+0x42>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <xQueueGenericSend+0x46>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e000      	b.n	800b6ec <xQueueGenericSend+0x48>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10b      	bne.n	800b708 <xQueueGenericSend+0x64>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b702:	bf00      	nop
 800b704:	bf00      	nop
 800b706:	e7fd      	b.n	800b704 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d103      	bne.n	800b716 <xQueueGenericSend+0x72>
 800b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <xQueueGenericSend+0x76>
 800b716:	2301      	movs	r3, #1
 800b718:	e000      	b.n	800b71c <xQueueGenericSend+0x78>
 800b71a:	2300      	movs	r3, #0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10b      	bne.n	800b738 <xQueueGenericSend+0x94>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	623b      	str	r3, [r7, #32]
}
 800b732:	bf00      	nop
 800b734:	bf00      	nop
 800b736:	e7fd      	b.n	800b734 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b738:	f001 fa20 	bl	800cb7c <xTaskGetSchedulerState>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d102      	bne.n	800b748 <xQueueGenericSend+0xa4>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <xQueueGenericSend+0xa8>
 800b748:	2301      	movs	r3, #1
 800b74a:	e000      	b.n	800b74e <xQueueGenericSend+0xaa>
 800b74c:	2300      	movs	r3, #0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10b      	bne.n	800b76a <xQueueGenericSend+0xc6>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	61fb      	str	r3, [r7, #28]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b76a:	f001 ff75 	bl	800d658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b776:	429a      	cmp	r2, r3
 800b778:	d302      	bcc.n	800b780 <xQueueGenericSend+0xdc>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d129      	bne.n	800b7d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b786:	f000 fa0f 	bl	800bba8 <prvCopyDataToQueue>
 800b78a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b790:	2b00      	cmp	r3, #0
 800b792:	d010      	beq.n	800b7b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	3324      	adds	r3, #36	@ 0x24
 800b798:	4618      	mov	r0, r3
 800b79a:	f001 f829 	bl	800c7f0 <xTaskRemoveFromEventList>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d013      	beq.n	800b7cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7a4:	4b3f      	ldr	r3, [pc, #252]	@ (800b8a4 <xQueueGenericSend+0x200>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	e00a      	b.n	800b7cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d007      	beq.n	800b7cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7bc:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <xQueueGenericSend+0x200>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7cc:	f001 ff76 	bl	800d6bc <vPortExitCritical>
				return pdPASS;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e063      	b.n	800b89c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d103      	bne.n	800b7e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7da:	f001 ff6f 	bl	800d6bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e05c      	b.n	800b89c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d106      	bne.n	800b7f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f001 f863 	bl	800c8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7f6:	f001 ff61 	bl	800d6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7fa:	f000 fda7 	bl	800c34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7fe:	f001 ff2b 	bl	800d658 <vPortEnterCritical>
 800b802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b808:	b25b      	sxtb	r3, r3
 800b80a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b80e:	d103      	bne.n	800b818 <xQueueGenericSend+0x174>
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b81e:	b25b      	sxtb	r3, r3
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b824:	d103      	bne.n	800b82e <xQueueGenericSend+0x18a>
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b82e:	f001 ff45 	bl	800d6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b832:	1d3a      	adds	r2, r7, #4
 800b834:	f107 0314 	add.w	r3, r7, #20
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f001 f852 	bl	800c8e4 <xTaskCheckForTimeOut>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d124      	bne.n	800b890 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b846:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b848:	f000 faa6 	bl	800bd98 <prvIsQueueFull>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d018      	beq.n	800b884 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b854:	3310      	adds	r3, #16
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 ff76 	bl	800c74c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b862:	f000 fa31 	bl	800bcc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b866:	f000 fd7f 	bl	800c368 <xTaskResumeAll>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f47f af7c 	bne.w	800b76a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b872:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a4 <xQueueGenericSend+0x200>)
 800b874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	e772      	b.n	800b76a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b886:	f000 fa1f 	bl	800bcc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b88a:	f000 fd6d 	bl	800c368 <xTaskResumeAll>
 800b88e:	e76c      	b.n	800b76a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b892:	f000 fa19 	bl	800bcc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b896:	f000 fd67 	bl	800c368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b89a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3738      	adds	r7, #56	@ 0x38
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	e000ed04 	.word	0xe000ed04

0800b8a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b090      	sub	sp, #64	@ 0x40
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10b      	bne.n	800b8d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8d2:	bf00      	nop
 800b8d4:	bf00      	nop
 800b8d6:	e7fd      	b.n	800b8d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d103      	bne.n	800b8e6 <xQueueGenericSendFromISR+0x3e>
 800b8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <xQueueGenericSendFromISR+0x42>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <xQueueGenericSendFromISR+0x44>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10b      	bne.n	800b908 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d103      	bne.n	800b916 <xQueueGenericSendFromISR+0x6e>
 800b90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b912:	2b01      	cmp	r3, #1
 800b914:	d101      	bne.n	800b91a <xQueueGenericSendFromISR+0x72>
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <xQueueGenericSendFromISR+0x74>
 800b91a:	2300      	movs	r3, #0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10b      	bne.n	800b938 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	623b      	str	r3, [r7, #32]
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b938:	f001 ff6e 	bl	800d818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b93c:	f3ef 8211 	mrs	r2, BASEPRI
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	61fa      	str	r2, [r7, #28]
 800b952:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b954:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b956:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b960:	429a      	cmp	r2, r3
 800b962:	d302      	bcc.n	800b96a <xQueueGenericSendFromISR+0xc2>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d12f      	bne.n	800b9ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b970:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b978:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b980:	f000 f912 	bl	800bba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b984:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b98c:	d112      	bne.n	800b9b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b992:	2b00      	cmp	r3, #0
 800b994:	d016      	beq.n	800b9c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	3324      	adds	r3, #36	@ 0x24
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 ff28 	bl	800c7f0 <xTaskRemoveFromEventList>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00e      	beq.n	800b9c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00b      	beq.n	800b9c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	e007      	b.n	800b9c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	b25a      	sxtb	r2, r3
 800b9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b9c8:	e001      	b.n	800b9ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3740      	adds	r7, #64	@ 0x40
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08c      	sub	sp, #48	@ 0x30
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10b      	bne.n	800ba16 <xQueueReceive+0x32>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	623b      	str	r3, [r7, #32]
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <xQueueReceive+0x40>
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <xQueueReceive+0x44>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e000      	b.n	800ba2a <xQueueReceive+0x46>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <xQueueReceive+0x62>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	61fb      	str	r3, [r7, #28]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba46:	f001 f899 	bl	800cb7c <xTaskGetSchedulerState>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d102      	bne.n	800ba56 <xQueueReceive+0x72>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <xQueueReceive+0x76>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e000      	b.n	800ba5c <xQueueReceive+0x78>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xQueueReceive+0x94>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	61bb      	str	r3, [r7, #24]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba78:	f001 fdee 	bl	800d658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01f      	beq.n	800bac8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8c:	f000 f8f6 	bl	800bc7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00f      	beq.n	800bac0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa2:	3310      	adds	r3, #16
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fea3 	bl	800c7f0 <xTaskRemoveFromEventList>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d007      	beq.n	800bac0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bab0:	4b3c      	ldr	r3, [pc, #240]	@ (800bba4 <xQueueReceive+0x1c0>)
 800bab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bac0:	f001 fdfc 	bl	800d6bc <vPortExitCritical>
				return pdPASS;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e069      	b.n	800bb9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d103      	bne.n	800bad6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bace:	f001 fdf5 	bl	800d6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e062      	b.n	800bb9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800badc:	f107 0310 	add.w	r3, r7, #16
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fee9 	bl	800c8b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baea:	f001 fde7 	bl	800d6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baee:	f000 fc2d 	bl	800c34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baf2:	f001 fdb1 	bl	800d658 <vPortEnterCritical>
 800baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bafc:	b25b      	sxtb	r3, r3
 800bafe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb02:	d103      	bne.n	800bb0c <xQueueReceive+0x128>
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb12:	b25b      	sxtb	r3, r3
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb18:	d103      	bne.n	800bb22 <xQueueReceive+0x13e>
 800bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb22:	f001 fdcb 	bl	800d6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb26:	1d3a      	adds	r2, r7, #4
 800bb28:	f107 0310 	add.w	r3, r7, #16
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fed8 	bl	800c8e4 <xTaskCheckForTimeOut>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d123      	bne.n	800bb82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb3c:	f000 f916 	bl	800bd6c <prvIsQueueEmpty>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d017      	beq.n	800bb76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb48:	3324      	adds	r3, #36	@ 0x24
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fdfc 	bl	800c74c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb56:	f000 f8b7 	bl	800bcc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb5a:	f000 fc05 	bl	800c368 <xTaskResumeAll>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d189      	bne.n	800ba78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bb64:	4b0f      	ldr	r3, [pc, #60]	@ (800bba4 <xQueueReceive+0x1c0>)
 800bb66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	e780      	b.n	800ba78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb78:	f000 f8a6 	bl	800bcc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb7c:	f000 fbf4 	bl	800c368 <xTaskResumeAll>
 800bb80:	e77a      	b.n	800ba78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb84:	f000 f8a0 	bl	800bcc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb88:	f000 fbee 	bl	800c368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb8e:	f000 f8ed 	bl	800bd6c <prvIsQueueEmpty>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f43f af6f 	beq.w	800ba78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3730      	adds	r7, #48	@ 0x30
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10d      	bne.n	800bbe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d14d      	bne.n	800bc6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fff0 	bl	800cbb8 <xTaskPriorityDisinherit>
 800bbd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	609a      	str	r2, [r3, #8]
 800bbe0:	e043      	b.n	800bc6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d119      	bne.n	800bc1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6858      	ldr	r0, [r3, #4]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	f002 f8cc 	bl	800dd90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc00:	441a      	add	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d32b      	bcc.n	800bc6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	e026      	b.n	800bc6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68d8      	ldr	r0, [r3, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc24:	461a      	mov	r2, r3
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	f002 f8b2 	bl	800dd90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc34:	425b      	negs	r3, r3
 800bc36:	441a      	add	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d207      	bcs.n	800bc58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc50:	425b      	negs	r3, r3
 800bc52:	441a      	add	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d105      	bne.n	800bc6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bc72:	697b      	ldr	r3, [r7, #20]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d018      	beq.n	800bcc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68da      	ldr	r2, [r3, #12]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc96:	441a      	add	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68da      	ldr	r2, [r3, #12]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d303      	bcc.n	800bcb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68d9      	ldr	r1, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb8:	461a      	mov	r2, r3
 800bcba:	6838      	ldr	r0, [r7, #0]
 800bcbc:	f002 f868 	bl	800dd90 <memcpy>
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcd0:	f001 fcc2 	bl	800d658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcdc:	e011      	b.n	800bd02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d012      	beq.n	800bd0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3324      	adds	r3, #36	@ 0x24
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 fd80 	bl	800c7f0 <xTaskRemoveFromEventList>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcf6:	f000 fe59 	bl	800c9ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dce9      	bgt.n	800bcde <prvUnlockQueue+0x16>
 800bd0a:	e000      	b.n	800bd0e <prvUnlockQueue+0x46>
					break;
 800bd0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	22ff      	movs	r2, #255	@ 0xff
 800bd12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bd16:	f001 fcd1 	bl	800d6bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd1a:	f001 fc9d 	bl	800d658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd26:	e011      	b.n	800bd4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d012      	beq.n	800bd56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3310      	adds	r3, #16
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fd5b 	bl	800c7f0 <xTaskRemoveFromEventList>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd40:	f000 fe34 	bl	800c9ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dce9      	bgt.n	800bd28 <prvUnlockQueue+0x60>
 800bd54:	e000      	b.n	800bd58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	22ff      	movs	r2, #255	@ 0xff
 800bd5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bd60:	f001 fcac 	bl	800d6bc <vPortExitCritical>
}
 800bd64:	bf00      	nop
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd74:	f001 fc70 	bl	800d658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e001      	b.n	800bd8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd8a:	f001 fc97 	bl	800d6bc <vPortExitCritical>

	return xReturn;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bda0:	f001 fc5a 	bl	800d658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d102      	bne.n	800bdb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	60fb      	str	r3, [r7, #12]
 800bdb4:	e001      	b.n	800bdba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdba:	f001 fc7f 	bl	800d6bc <vPortExitCritical>

	return xReturn;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	e014      	b.n	800be02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bdd8:	4a0f      	ldr	r2, [pc, #60]	@ (800be18 <vQueueAddToRegistry+0x50>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10b      	bne.n	800bdfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bde4:	490c      	ldr	r1, [pc, #48]	@ (800be18 <vQueueAddToRegistry+0x50>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdee:	4a0a      	ldr	r2, [pc, #40]	@ (800be18 <vQueueAddToRegistry+0x50>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdfa:	e006      	b.n	800be0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3301      	adds	r3, #1
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b07      	cmp	r3, #7
 800be06:	d9e7      	bls.n	800bdd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	24000e84 	.word	0x24000e84

0800be1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be2c:	f001 fc14 	bl	800d658 <vPortEnterCritical>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be36:	b25b      	sxtb	r3, r3
 800be38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be3c:	d103      	bne.n	800be46 <vQueueWaitForMessageRestricted+0x2a>
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be52:	d103      	bne.n	800be5c <vQueueWaitForMessageRestricted+0x40>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be5c:	f001 fc2e 	bl	800d6bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be64:	2b00      	cmp	r3, #0
 800be66:	d106      	bne.n	800be76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	3324      	adds	r3, #36	@ 0x24
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fc91 	bl	800c798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be76:	6978      	ldr	r0, [r7, #20]
 800be78:	f7ff ff26 	bl	800bcc8 <prvUnlockQueue>
	}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08e      	sub	sp, #56	@ 0x38
 800be88:	af04      	add	r7, sp, #16
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	623b      	str	r3, [r7, #32]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <xTaskCreateStatic+0x4a>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	61fb      	str	r3, [r7, #28]
}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	e7fd      	b.n	800beca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bece:	23a8      	movs	r3, #168	@ 0xa8
 800bed0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2ba8      	cmp	r3, #168	@ 0xa8
 800bed6:	d00b      	beq.n	800bef0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bedc:	f383 8811 	msr	BASEPRI, r3
 800bee0:	f3bf 8f6f 	isb	sy
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	61bb      	str	r3, [r7, #24]
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	e7fd      	b.n	800beec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bef0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01e      	beq.n	800bf36 <xTaskCreateStatic+0xb2>
 800bef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01b      	beq.n	800bf36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800befe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf10:	2300      	movs	r3, #0
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 f851 	bl	800bfd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf30:	f000 f8f6 	bl	800c120 <prvAddNewTaskToReadyList>
 800bf34:	e001      	b.n	800bf3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf3a:	697b      	ldr	r3, [r7, #20]
	}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3728      	adds	r7, #40	@ 0x28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08c      	sub	sp, #48	@ 0x30
 800bf48:	af04      	add	r7, sp, #16
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	4613      	mov	r3, r2
 800bf52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf54:	88fb      	ldrh	r3, [r7, #6]
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f001 fc9f 	bl	800d89c <pvPortMalloc>
 800bf5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00e      	beq.n	800bf84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf66:	20a8      	movs	r0, #168	@ 0xa8
 800bf68:	f001 fc98 	bl	800d89c <pvPortMalloc>
 800bf6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf7a:	e005      	b.n	800bf88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf7c:	6978      	ldr	r0, [r7, #20]
 800bf7e:	f001 fd61 	bl	800da44 <vPortFree>
 800bf82:	e001      	b.n	800bf88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d017      	beq.n	800bfbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf96:	88fa      	ldrh	r2, [r7, #6]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9303      	str	r3, [sp, #12]
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa2:	9301      	str	r3, [sp, #4]
 800bfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 f80f 	bl	800bfd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfb2:	69f8      	ldr	r0, [r7, #28]
 800bfb4:	f000 f8b4 	bl	800c120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e002      	b.n	800bfc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
	}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	21a5      	movs	r1, #165	@ 0xa5
 800bfea:	f001 fe4d 	bl	800dc88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bff8:	440b      	add	r3, r1
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	f023 0307 	bic.w	r3, r3, #7
 800c006:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	f003 0307 	and.w	r3, r3, #7
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00b      	beq.n	800c02a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	617b      	str	r3, [r7, #20]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d01f      	beq.n	800c070 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c030:	2300      	movs	r3, #0
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e012      	b.n	800c05c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	7819      	ldrb	r1, [r3, #0]
 800c03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4413      	add	r3, r2
 800c044:	3334      	adds	r3, #52	@ 0x34
 800c046:	460a      	mov	r2, r1
 800c048:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	4413      	add	r3, r2
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	3301      	adds	r3, #1
 800c05a:	61fb      	str	r3, [r7, #28]
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	2b0f      	cmp	r3, #15
 800c060:	d9e9      	bls.n	800c036 <prvInitialiseNewTask+0x66>
 800c062:	e000      	b.n	800c066 <prvInitialiseNewTask+0x96>
			{
				break;
 800c064:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c06e:	e003      	b.n	800c078 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	2b37      	cmp	r3, #55	@ 0x37
 800c07c:	d901      	bls.n	800c082 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c07e:	2337      	movs	r3, #55	@ 0x37
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c086:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c08c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	2200      	movs	r2, #0
 800c092:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	3304      	adds	r3, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff f965 	bl	800b368 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	3318      	adds	r3, #24
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff f960 	bl	800b368 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	3354      	adds	r3, #84	@ 0x54
 800c0d2:	224c      	movs	r2, #76	@ 0x4c
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 fdd6 	bl	800dc88 <memset>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	4a0d      	ldr	r2, [pc, #52]	@ (800c114 <prvInitialiseNewTask+0x144>)
 800c0e0:	659a      	str	r2, [r3, #88]	@ 0x58
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <prvInitialiseNewTask+0x148>)
 800c0e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c11c <prvInitialiseNewTask+0x14c>)
 800c0ec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	68f9      	ldr	r1, [r7, #12]
 800c0f2:	69b8      	ldr	r0, [r7, #24]
 800c0f4:	f001 f97e 	bl	800d3f4 <pxPortInitialiseStack>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c10a:	bf00      	nop
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	240656a8 	.word	0x240656a8
 800c118:	24065710 	.word	0x24065710
 800c11c:	24065778 	.word	0x24065778

0800c120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c128:	f001 fa96 	bl	800d658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c12c:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e4 <prvAddNewTaskToReadyList+0xc4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3301      	adds	r3, #1
 800c132:	4a2c      	ldr	r2, [pc, #176]	@ (800c1e4 <prvAddNewTaskToReadyList+0xc4>)
 800c134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c136:	4b2c      	ldr	r3, [pc, #176]	@ (800c1e8 <prvAddNewTaskToReadyList+0xc8>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d109      	bne.n	800c152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c13e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1e8 <prvAddNewTaskToReadyList+0xc8>)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c144:	4b27      	ldr	r3, [pc, #156]	@ (800c1e4 <prvAddNewTaskToReadyList+0xc4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d110      	bne.n	800c16e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c14c:	f000 fc52 	bl	800c9f4 <prvInitialiseTaskLists>
 800c150:	e00d      	b.n	800c16e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c152:	4b26      	ldr	r3, [pc, #152]	@ (800c1ec <prvAddNewTaskToReadyList+0xcc>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d109      	bne.n	800c16e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c15a:	4b23      	ldr	r3, [pc, #140]	@ (800c1e8 <prvAddNewTaskToReadyList+0xc8>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c164:	429a      	cmp	r2, r3
 800c166:	d802      	bhi.n	800c16e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c168:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e8 <prvAddNewTaskToReadyList+0xc8>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c16e:	4b20      	ldr	r3, [pc, #128]	@ (800c1f0 <prvAddNewTaskToReadyList+0xd0>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3301      	adds	r3, #1
 800c174:	4a1e      	ldr	r2, [pc, #120]	@ (800c1f0 <prvAddNewTaskToReadyList+0xd0>)
 800c176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c178:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f0 <prvAddNewTaskToReadyList+0xd0>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f4 <prvAddNewTaskToReadyList+0xd4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d903      	bls.n	800c194 <prvAddNewTaskToReadyList+0x74>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c190:	4a18      	ldr	r2, [pc, #96]	@ (800c1f4 <prvAddNewTaskToReadyList+0xd4>)
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4a15      	ldr	r2, [pc, #84]	@ (800c1f8 <prvAddNewTaskToReadyList+0xd8>)
 800c1a2:	441a      	add	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	f7ff f8e9 	bl	800b382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1b0:	f001 fa84 	bl	800d6bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <prvAddNewTaskToReadyList+0xcc>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00e      	beq.n	800c1da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e8 <prvAddNewTaskToReadyList+0xc8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d207      	bcs.n	800c1da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c1fc <prvAddNewTaskToReadyList+0xdc>)
 800c1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	24001398 	.word	0x24001398
 800c1e8:	24000ec4 	.word	0x24000ec4
 800c1ec:	240013a4 	.word	0x240013a4
 800c1f0:	240013b4 	.word	0x240013b4
 800c1f4:	240013a0 	.word	0x240013a0
 800c1f8:	24000ec8 	.word	0x24000ec8
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c212:	4b14      	ldr	r3, [pc, #80]	@ (800c264 <vTaskDelay+0x64>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00b      	beq.n	800c232 <vTaskDelay+0x32>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60bb      	str	r3, [r7, #8]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c232:	f000 f88b 	bl	800c34c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fd2d 	bl	800cc98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c23e:	f000 f893 	bl	800c368 <xTaskResumeAll>
 800c242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d107      	bne.n	800c25a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c24a:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <vTaskDelay+0x68>)
 800c24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	240013c0 	.word	0x240013c0
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08a      	sub	sp, #40	@ 0x28
 800c270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c27a:	463a      	mov	r2, r7
 800c27c:	1d39      	adds	r1, r7, #4
 800c27e:	f107 0308 	add.w	r3, r7, #8
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff f81c 	bl	800b2c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	9202      	str	r2, [sp, #8]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2300      	movs	r3, #0
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	2300      	movs	r3, #0
 800c298:	460a      	mov	r2, r1
 800c29a:	4924      	ldr	r1, [pc, #144]	@ (800c32c <vTaskStartScheduler+0xc0>)
 800c29c:	4824      	ldr	r0, [pc, #144]	@ (800c330 <vTaskStartScheduler+0xc4>)
 800c29e:	f7ff fdf1 	bl	800be84 <xTaskCreateStatic>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4a23      	ldr	r2, [pc, #140]	@ (800c334 <vTaskStartScheduler+0xc8>)
 800c2a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2a8:	4b22      	ldr	r3, [pc, #136]	@ (800c334 <vTaskStartScheduler+0xc8>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	e001      	b.n	800c2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d102      	bne.n	800c2c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2c0:	f000 fd3e 	bl	800cd40 <xTimerCreateTimerTask>
 800c2c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d11b      	bne.n	800c304 <vTaskStartScheduler+0x98>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	613b      	str	r3, [r7, #16]
}
 800c2de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2e0:	4b15      	ldr	r3, [pc, #84]	@ (800c338 <vTaskStartScheduler+0xcc>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3354      	adds	r3, #84	@ 0x54
 800c2e6:	4a15      	ldr	r2, [pc, #84]	@ (800c33c <vTaskStartScheduler+0xd0>)
 800c2e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2ea:	4b15      	ldr	r3, [pc, #84]	@ (800c340 <vTaskStartScheduler+0xd4>)
 800c2ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2f2:	4b14      	ldr	r3, [pc, #80]	@ (800c344 <vTaskStartScheduler+0xd8>)
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2f8:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <vTaskStartScheduler+0xdc>)
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2fe:	f001 f907 	bl	800d510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c302:	e00f      	b.n	800c324 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c30a:	d10b      	bne.n	800c324 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	60fb      	str	r3, [r7, #12]
}
 800c31e:	bf00      	nop
 800c320:	bf00      	nop
 800c322:	e7fd      	b.n	800c320 <vTaskStartScheduler+0xb4>
}
 800c324:	bf00      	nop
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	0800decc 	.word	0x0800decc
 800c330:	0800c9c5 	.word	0x0800c9c5
 800c334:	240013bc 	.word	0x240013bc
 800c338:	24000ec4 	.word	0x24000ec4
 800c33c:	24000014 	.word	0x24000014
 800c340:	240013b8 	.word	0x240013b8
 800c344:	240013a4 	.word	0x240013a4
 800c348:	2400139c 	.word	0x2400139c

0800c34c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c350:	4b04      	ldr	r3, [pc, #16]	@ (800c364 <vTaskSuspendAll+0x18>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	4a03      	ldr	r2, [pc, #12]	@ (800c364 <vTaskSuspendAll+0x18>)
 800c358:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c35a:	bf00      	nop
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	240013c0 	.word	0x240013c0

0800c368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c372:	2300      	movs	r3, #0
 800c374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c376:	4b42      	ldr	r3, [pc, #264]	@ (800c480 <xTaskResumeAll+0x118>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <xTaskResumeAll+0x2e>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	603b      	str	r3, [r7, #0]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c396:	f001 f95f 	bl	800d658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c39a:	4b39      	ldr	r3, [pc, #228]	@ (800c480 <xTaskResumeAll+0x118>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	4a37      	ldr	r2, [pc, #220]	@ (800c480 <xTaskResumeAll+0x118>)
 800c3a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3a4:	4b36      	ldr	r3, [pc, #216]	@ (800c480 <xTaskResumeAll+0x118>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d162      	bne.n	800c472 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3ac:	4b35      	ldr	r3, [pc, #212]	@ (800c484 <xTaskResumeAll+0x11c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d05e      	beq.n	800c472 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3b4:	e02f      	b.n	800c416 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b6:	4b34      	ldr	r3, [pc, #208]	@ (800c488 <xTaskResumeAll+0x120>)
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3318      	adds	r3, #24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff f83a 	bl	800b43c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff f835 	bl	800b43c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d6:	4b2d      	ldr	r3, [pc, #180]	@ (800c48c <xTaskResumeAll+0x124>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d903      	bls.n	800c3e6 <xTaskResumeAll+0x7e>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c48c <xTaskResumeAll+0x124>)
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4a27      	ldr	r2, [pc, #156]	@ (800c490 <xTaskResumeAll+0x128>)
 800c3f4:	441a      	add	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	f7fe ffc0 	bl	800b382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c406:	4b23      	ldr	r3, [pc, #140]	@ (800c494 <xTaskResumeAll+0x12c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d302      	bcc.n	800c416 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c410:	4b21      	ldr	r3, [pc, #132]	@ (800c498 <xTaskResumeAll+0x130>)
 800c412:	2201      	movs	r2, #1
 800c414:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c416:	4b1c      	ldr	r3, [pc, #112]	@ (800c488 <xTaskResumeAll+0x120>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1cb      	bne.n	800c3b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c424:	f000 fb8a 	bl	800cb3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c428:	4b1c      	ldr	r3, [pc, #112]	@ (800c49c <xTaskResumeAll+0x134>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d010      	beq.n	800c456 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c434:	f000 f846 	bl	800c4c4 <xTaskIncrementTick>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c43e:	4b16      	ldr	r3, [pc, #88]	@ (800c498 <xTaskResumeAll+0x130>)
 800c440:	2201      	movs	r2, #1
 800c442:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3b01      	subs	r3, #1
 800c448:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1f1      	bne.n	800c434 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c450:	4b12      	ldr	r3, [pc, #72]	@ (800c49c <xTaskResumeAll+0x134>)
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c456:	4b10      	ldr	r3, [pc, #64]	@ (800c498 <xTaskResumeAll+0x130>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d009      	beq.n	800c472 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c462:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <xTaskResumeAll+0x138>)
 800c464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c472:	f001 f923 	bl	800d6bc <vPortExitCritical>

	return xAlreadyYielded;
 800c476:	68bb      	ldr	r3, [r7, #8]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	240013c0 	.word	0x240013c0
 800c484:	24001398 	.word	0x24001398
 800c488:	24001358 	.word	0x24001358
 800c48c:	240013a0 	.word	0x240013a0
 800c490:	24000ec8 	.word	0x24000ec8
 800c494:	24000ec4 	.word	0x24000ec4
 800c498:	240013ac 	.word	0x240013ac
 800c49c:	240013a8 	.word	0x240013a8
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4aa:	4b05      	ldr	r3, [pc, #20]	@ (800c4c0 <xTaskGetTickCount+0x1c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4b0:	687b      	ldr	r3, [r7, #4]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	2400139c 	.word	0x2400139c

0800c4c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c60c <xTaskIncrementTick+0x148>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f040 8090 	bne.w	800c5f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4d8:	4b4d      	ldr	r3, [pc, #308]	@ (800c610 <xTaskIncrementTick+0x14c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4e0:	4a4b      	ldr	r2, [pc, #300]	@ (800c610 <xTaskIncrementTick+0x14c>)
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d121      	bne.n	800c530 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4ec:	4b49      	ldr	r3, [pc, #292]	@ (800c614 <xTaskIncrementTick+0x150>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00b      	beq.n	800c50e <xTaskIncrementTick+0x4a>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	603b      	str	r3, [r7, #0]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <xTaskIncrementTick+0x46>
 800c50e:	4b41      	ldr	r3, [pc, #260]	@ (800c614 <xTaskIncrementTick+0x150>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	4b40      	ldr	r3, [pc, #256]	@ (800c618 <xTaskIncrementTick+0x154>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a3e      	ldr	r2, [pc, #248]	@ (800c614 <xTaskIncrementTick+0x150>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	4a3e      	ldr	r2, [pc, #248]	@ (800c618 <xTaskIncrementTick+0x154>)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	4b3e      	ldr	r3, [pc, #248]	@ (800c61c <xTaskIncrementTick+0x158>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3301      	adds	r3, #1
 800c528:	4a3c      	ldr	r2, [pc, #240]	@ (800c61c <xTaskIncrementTick+0x158>)
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	f000 fb06 	bl	800cb3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c530:	4b3b      	ldr	r3, [pc, #236]	@ (800c620 <xTaskIncrementTick+0x15c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	429a      	cmp	r2, r3
 800c538:	d349      	bcc.n	800c5ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c53a:	4b36      	ldr	r3, [pc, #216]	@ (800c614 <xTaskIncrementTick+0x150>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c544:	4b36      	ldr	r3, [pc, #216]	@ (800c620 <xTaskIncrementTick+0x15c>)
 800c546:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c54a:	601a      	str	r2, [r3, #0]
					break;
 800c54c:	e03f      	b.n	800c5ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c54e:	4b31      	ldr	r3, [pc, #196]	@ (800c614 <xTaskIncrementTick+0x150>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	429a      	cmp	r2, r3
 800c564:	d203      	bcs.n	800c56e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c566:	4a2e      	ldr	r2, [pc, #184]	@ (800c620 <xTaskIncrementTick+0x15c>)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c56c:	e02f      	b.n	800c5ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	3304      	adds	r3, #4
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe ff62 	bl	800b43c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d004      	beq.n	800c58a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	3318      	adds	r3, #24
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe ff59 	bl	800b43c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c58e:	4b25      	ldr	r3, [pc, #148]	@ (800c624 <xTaskIncrementTick+0x160>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d903      	bls.n	800c59e <xTaskIncrementTick+0xda>
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c59a:	4a22      	ldr	r2, [pc, #136]	@ (800c624 <xTaskIncrementTick+0x160>)
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4a1f      	ldr	r2, [pc, #124]	@ (800c628 <xTaskIncrementTick+0x164>)
 800c5ac:	441a      	add	r2, r3
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fe fee4 	bl	800b382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5be:	4b1b      	ldr	r3, [pc, #108]	@ (800c62c <xTaskIncrementTick+0x168>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d3b8      	bcc.n	800c53a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5cc:	e7b5      	b.n	800c53a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5ce:	4b17      	ldr	r3, [pc, #92]	@ (800c62c <xTaskIncrementTick+0x168>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d4:	4914      	ldr	r1, [pc, #80]	@ (800c628 <xTaskIncrementTick+0x164>)
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	440b      	add	r3, r1
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d901      	bls.n	800c5ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5ea:	4b11      	ldr	r3, [pc, #68]	@ (800c630 <xTaskIncrementTick+0x16c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d007      	beq.n	800c602 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	617b      	str	r3, [r7, #20]
 800c5f6:	e004      	b.n	800c602 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c5f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c634 <xTaskIncrementTick+0x170>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c634 <xTaskIncrementTick+0x170>)
 800c600:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c602:	697b      	ldr	r3, [r7, #20]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	240013c0 	.word	0x240013c0
 800c610:	2400139c 	.word	0x2400139c
 800c614:	24001350 	.word	0x24001350
 800c618:	24001354 	.word	0x24001354
 800c61c:	240013b0 	.word	0x240013b0
 800c620:	240013b8 	.word	0x240013b8
 800c624:	240013a0 	.word	0x240013a0
 800c628:	24000ec8 	.word	0x24000ec8
 800c62c:	24000ec4 	.word	0x24000ec4
 800c630:	240013ac 	.word	0x240013ac
 800c634:	240013a8 	.word	0x240013a8

0800c638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c63e:	4b3d      	ldr	r3, [pc, #244]	@ (800c734 <vTaskSwitchContext+0xfc>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c646:	4b3c      	ldr	r3, [pc, #240]	@ (800c738 <vTaskSwitchContext+0x100>)
 800c648:	2201      	movs	r2, #1
 800c64a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c64c:	e06e      	b.n	800c72c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800c64e:	4b3a      	ldr	r3, [pc, #232]	@ (800c738 <vTaskSwitchContext+0x100>)
 800c650:	2200      	movs	r2, #0
 800c652:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c654:	4b39      	ldr	r3, [pc, #228]	@ (800c73c <vTaskSwitchContext+0x104>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65a:	613b      	str	r3, [r7, #16]
 800c65c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d111      	bne.n	800c690 <vTaskSwitchContext+0x58>
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	3304      	adds	r3, #4
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	429a      	cmp	r2, r3
 800c676:	d10b      	bne.n	800c690 <vTaskSwitchContext+0x58>
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	3308      	adds	r3, #8
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	429a      	cmp	r2, r3
 800c682:	d105      	bne.n	800c690 <vTaskSwitchContext+0x58>
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	330c      	adds	r3, #12
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d008      	beq.n	800c6a2 <vTaskSwitchContext+0x6a>
 800c690:	4b2a      	ldr	r3, [pc, #168]	@ (800c73c <vTaskSwitchContext+0x104>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	4b29      	ldr	r3, [pc, #164]	@ (800c73c <vTaskSwitchContext+0x104>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	3334      	adds	r3, #52	@ 0x34
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7f4 f8eb 	bl	8000878 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a2:	4b27      	ldr	r3, [pc, #156]	@ (800c740 <vTaskSwitchContext+0x108>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e011      	b.n	800c6ce <vTaskSwitchContext+0x96>
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <vTaskSwitchContext+0x90>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	607b      	str	r3, [r7, #4]
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <vTaskSwitchContext+0x8c>
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	491d      	ldr	r1, [pc, #116]	@ (800c744 <vTaskSwitchContext+0x10c>)
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0e3      	beq.n	800c6aa <vTaskSwitchContext+0x72>
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4a15      	ldr	r2, [pc, #84]	@ (800c744 <vTaskSwitchContext+0x10c>)
 800c6ee:	4413      	add	r3, r2
 800c6f0:	60bb      	str	r3, [r7, #8]
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	3308      	adds	r3, #8
 800c704:	429a      	cmp	r2, r3
 800c706:	d104      	bne.n	800c712 <vTaskSwitchContext+0xda>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	605a      	str	r2, [r3, #4]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	4a08      	ldr	r2, [pc, #32]	@ (800c73c <vTaskSwitchContext+0x104>)
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	4a08      	ldr	r2, [pc, #32]	@ (800c740 <vTaskSwitchContext+0x108>)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c722:	4b06      	ldr	r3, [pc, #24]	@ (800c73c <vTaskSwitchContext+0x104>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3354      	adds	r3, #84	@ 0x54
 800c728:	4a07      	ldr	r2, [pc, #28]	@ (800c748 <vTaskSwitchContext+0x110>)
 800c72a:	6013      	str	r3, [r2, #0]
}
 800c72c:	bf00      	nop
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	240013c0 	.word	0x240013c0
 800c738:	240013ac 	.word	0x240013ac
 800c73c:	24000ec4 	.word	0x24000ec4
 800c740:	240013a0 	.word	0x240013a0
 800c744:	24000ec8 	.word	0x24000ec8
 800c748:	24000014 	.word	0x24000014

0800c74c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10b      	bne.n	800c774 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	60fb      	str	r3, [r7, #12]
}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	e7fd      	b.n	800c770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c774:	4b07      	ldr	r3, [pc, #28]	@ (800c794 <vTaskPlaceOnEventList+0x48>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3318      	adds	r3, #24
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7fe fe24 	bl	800b3ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c782:	2101      	movs	r1, #1
 800c784:	6838      	ldr	r0, [r7, #0]
 800c786:	f000 fa87 	bl	800cc98 <prvAddCurrentTaskToDelayedList>
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	24000ec4 	.word	0x24000ec4

0800c798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	617b      	str	r3, [r7, #20]
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	e7fd      	b.n	800c7be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ec <vTaskPlaceOnEventListRestricted+0x54>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7fe fdd9 	bl	800b382 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	68b8      	ldr	r0, [r7, #8]
 800c7e0:	f000 fa5a 	bl	800cc98 <prvAddCurrentTaskToDelayedList>
	}
 800c7e4:	bf00      	nop
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	24000ec4 	.word	0x24000ec4

0800c7f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10b      	bne.n	800c81e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60fb      	str	r3, [r7, #12]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	3318      	adds	r3, #24
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fe0a 	bl	800b43c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c828:	4b1d      	ldr	r3, [pc, #116]	@ (800c8a0 <xTaskRemoveFromEventList+0xb0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d11d      	bne.n	800c86c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fe01 	bl	800b43c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c83e:	4b19      	ldr	r3, [pc, #100]	@ (800c8a4 <xTaskRemoveFromEventList+0xb4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d903      	bls.n	800c84e <xTaskRemoveFromEventList+0x5e>
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84a:	4a16      	ldr	r2, [pc, #88]	@ (800c8a4 <xTaskRemoveFromEventList+0xb4>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a13      	ldr	r2, [pc, #76]	@ (800c8a8 <xTaskRemoveFromEventList+0xb8>)
 800c85c:	441a      	add	r2, r3
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fe fd8c 	bl	800b382 <vListInsertEnd>
 800c86a:	e005      	b.n	800c878 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	3318      	adds	r3, #24
 800c870:	4619      	mov	r1, r3
 800c872:	480e      	ldr	r0, [pc, #56]	@ (800c8ac <xTaskRemoveFromEventList+0xbc>)
 800c874:	f7fe fd85 	bl	800b382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c87c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b0 <xTaskRemoveFromEventList+0xc0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c882:	429a      	cmp	r2, r3
 800c884:	d905      	bls.n	800c892 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c886:	2301      	movs	r3, #1
 800c888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c88a:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b4 <xTaskRemoveFromEventList+0xc4>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e001      	b.n	800c896 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c892:	2300      	movs	r3, #0
 800c894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c896:	697b      	ldr	r3, [r7, #20]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	240013c0 	.word	0x240013c0
 800c8a4:	240013a0 	.word	0x240013a0
 800c8a8:	24000ec8 	.word	0x24000ec8
 800c8ac:	24001358 	.word	0x24001358
 800c8b0:	24000ec4 	.word	0x24000ec4
 800c8b4:	240013ac 	.word	0x240013ac

0800c8b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8c0:	4b06      	ldr	r3, [pc, #24]	@ (800c8dc <vTaskInternalSetTimeOutState+0x24>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8c8:	4b05      	ldr	r3, [pc, #20]	@ (800c8e0 <vTaskInternalSetTimeOutState+0x28>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	605a      	str	r2, [r3, #4]
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	240013b0 	.word	0x240013b0
 800c8e0:	2400139c 	.word	0x2400139c

0800c8e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10b      	bne.n	800c90c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	613b      	str	r3, [r7, #16]
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	e7fd      	b.n	800c908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d10b      	bne.n	800c92a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	60fb      	str	r3, [r7, #12]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c92a:	f000 fe95 	bl	800d658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c92e:	4b1d      	ldr	r3, [pc, #116]	@ (800c9a4 <xTaskCheckForTimeOut+0xc0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c946:	d102      	bne.n	800c94e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c948:	2300      	movs	r3, #0
 800c94a:	61fb      	str	r3, [r7, #28]
 800c94c:	e023      	b.n	800c996 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b15      	ldr	r3, [pc, #84]	@ (800c9a8 <xTaskCheckForTimeOut+0xc4>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d007      	beq.n	800c96a <xTaskCheckForTimeOut+0x86>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	69ba      	ldr	r2, [r7, #24]
 800c960:	429a      	cmp	r2, r3
 800c962:	d302      	bcc.n	800c96a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c964:	2301      	movs	r3, #1
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e015      	b.n	800c996 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	429a      	cmp	r2, r3
 800c972:	d20b      	bcs.n	800c98c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	1ad2      	subs	r2, r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff ff99 	bl	800c8b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c986:	2300      	movs	r3, #0
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	e004      	b.n	800c996 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c992:	2301      	movs	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c996:	f000 fe91 	bl	800d6bc <vPortExitCritical>

	return xReturn;
 800c99a:	69fb      	ldr	r3, [r7, #28]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3720      	adds	r7, #32
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	2400139c 	.word	0x2400139c
 800c9a8:	240013b0 	.word	0x240013b0

0800c9ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9b0:	4b03      	ldr	r3, [pc, #12]	@ (800c9c0 <vTaskMissedYield+0x14>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	240013ac 	.word	0x240013ac

0800c9c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9cc:	f000 f852 	bl	800ca74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9d0:	4b06      	ldr	r3, [pc, #24]	@ (800c9ec <prvIdleTask+0x28>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d9f9      	bls.n	800c9cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9d8:	4b05      	ldr	r3, [pc, #20]	@ (800c9f0 <prvIdleTask+0x2c>)
 800c9da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9e8:	e7f0      	b.n	800c9cc <prvIdleTask+0x8>
 800c9ea:	bf00      	nop
 800c9ec:	24000ec8 	.word	0x24000ec8
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	607b      	str	r3, [r7, #4]
 800c9fe:	e00c      	b.n	800ca1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4a12      	ldr	r2, [pc, #72]	@ (800ca54 <prvInitialiseTaskLists+0x60>)
 800ca0c:	4413      	add	r3, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe fc8a 	bl	800b328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3301      	adds	r3, #1
 800ca18:	607b      	str	r3, [r7, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b37      	cmp	r3, #55	@ 0x37
 800ca1e:	d9ef      	bls.n	800ca00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca20:	480d      	ldr	r0, [pc, #52]	@ (800ca58 <prvInitialiseTaskLists+0x64>)
 800ca22:	f7fe fc81 	bl	800b328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca26:	480d      	ldr	r0, [pc, #52]	@ (800ca5c <prvInitialiseTaskLists+0x68>)
 800ca28:	f7fe fc7e 	bl	800b328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca2c:	480c      	ldr	r0, [pc, #48]	@ (800ca60 <prvInitialiseTaskLists+0x6c>)
 800ca2e:	f7fe fc7b 	bl	800b328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca32:	480c      	ldr	r0, [pc, #48]	@ (800ca64 <prvInitialiseTaskLists+0x70>)
 800ca34:	f7fe fc78 	bl	800b328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca38:	480b      	ldr	r0, [pc, #44]	@ (800ca68 <prvInitialiseTaskLists+0x74>)
 800ca3a:	f7fe fc75 	bl	800b328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca6c <prvInitialiseTaskLists+0x78>)
 800ca40:	4a05      	ldr	r2, [pc, #20]	@ (800ca58 <prvInitialiseTaskLists+0x64>)
 800ca42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca44:	4b0a      	ldr	r3, [pc, #40]	@ (800ca70 <prvInitialiseTaskLists+0x7c>)
 800ca46:	4a05      	ldr	r2, [pc, #20]	@ (800ca5c <prvInitialiseTaskLists+0x68>)
 800ca48:	601a      	str	r2, [r3, #0]
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	24000ec8 	.word	0x24000ec8
 800ca58:	24001328 	.word	0x24001328
 800ca5c:	2400133c 	.word	0x2400133c
 800ca60:	24001358 	.word	0x24001358
 800ca64:	2400136c 	.word	0x2400136c
 800ca68:	24001384 	.word	0x24001384
 800ca6c:	24001350 	.word	0x24001350
 800ca70:	24001354 	.word	0x24001354

0800ca74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca7a:	e019      	b.n	800cab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca7c:	f000 fdec 	bl	800d658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca80:	4b10      	ldr	r3, [pc, #64]	@ (800cac4 <prvCheckTasksWaitingTermination+0x50>)
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fcd5 	bl	800b43c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca92:	4b0d      	ldr	r3, [pc, #52]	@ (800cac8 <prvCheckTasksWaitingTermination+0x54>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	4a0b      	ldr	r2, [pc, #44]	@ (800cac8 <prvCheckTasksWaitingTermination+0x54>)
 800ca9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	@ (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	4a0a      	ldr	r2, [pc, #40]	@ (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800caa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caa6:	f000 fe09 	bl	800d6bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f810 	bl	800cad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cab0:	4b06      	ldr	r3, [pc, #24]	@ (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e1      	bne.n	800ca7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	2400136c 	.word	0x2400136c
 800cac8:	24001398 	.word	0x24001398
 800cacc:	24001380 	.word	0x24001380

0800cad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	3354      	adds	r3, #84	@ 0x54
 800cadc:	4618      	mov	r0, r3
 800cade:	f001 f8db 	bl	800dc98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d108      	bne.n	800cafe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 ffa7 	bl	800da44 <vPortFree>
				vPortFree( pxTCB );
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 ffa4 	bl	800da44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cafc:	e019      	b.n	800cb32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d103      	bne.n	800cb10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 ff9b 	bl	800da44 <vPortFree>
	}
 800cb0e:	e010      	b.n	800cb32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d00b      	beq.n	800cb32 <prvDeleteTCB+0x62>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	60fb      	str	r3, [r7, #12]
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	e7fd      	b.n	800cb2e <prvDeleteTCB+0x5e>
	}
 800cb32:	bf00      	nop
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb42:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <prvResetNextTaskUnblockTime+0x38>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d104      	bne.n	800cb56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <prvResetNextTaskUnblockTime+0x3c>)
 800cb4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb54:	e008      	b.n	800cb68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb56:	4b07      	ldr	r3, [pc, #28]	@ (800cb74 <prvResetNextTaskUnblockTime+0x38>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4a04      	ldr	r2, [pc, #16]	@ (800cb78 <prvResetNextTaskUnblockTime+0x3c>)
 800cb66:	6013      	str	r3, [r2, #0]
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	24001350 	.word	0x24001350
 800cb78:	240013b8 	.word	0x240013b8

0800cb7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb82:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb0 <xTaskGetSchedulerState+0x34>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	607b      	str	r3, [r7, #4]
 800cb8e:	e008      	b.n	800cba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb90:	4b08      	ldr	r3, [pc, #32]	@ (800cbb4 <xTaskGetSchedulerState+0x38>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb98:	2302      	movs	r3, #2
 800cb9a:	607b      	str	r3, [r7, #4]
 800cb9c:	e001      	b.n	800cba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cba2:	687b      	ldr	r3, [r7, #4]
	}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	240013a4 	.word	0x240013a4
 800cbb4:	240013c0 	.word	0x240013c0

0800cbb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d058      	beq.n	800cc80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbce:	4b2f      	ldr	r3, [pc, #188]	@ (800cc8c <xTaskPriorityDisinherit+0xd4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d00b      	beq.n	800cbf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	60fb      	str	r3, [r7, #12]
}
 800cbea:	bf00      	nop
 800cbec:	bf00      	nop
 800cbee:	e7fd      	b.n	800cbec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10b      	bne.n	800cc10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60bb      	str	r3, [r7, #8]
}
 800cc0a:	bf00      	nop
 800cc0c:	bf00      	nop
 800cc0e:	e7fd      	b.n	800cc0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d02c      	beq.n	800cc80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d128      	bne.n	800cc80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fc02 	bl	800b43c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc50:	4b0f      	ldr	r3, [pc, #60]	@ (800cc90 <xTaskPriorityDisinherit+0xd8>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d903      	bls.n	800cc60 <xTaskPriorityDisinherit+0xa8>
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5c:	4a0c      	ldr	r2, [pc, #48]	@ (800cc90 <xTaskPriorityDisinherit+0xd8>)
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4a09      	ldr	r2, [pc, #36]	@ (800cc94 <xTaskPriorityDisinherit+0xdc>)
 800cc6e:	441a      	add	r2, r3
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe fb83 	bl	800b382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc80:	697b      	ldr	r3, [r7, #20]
	}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	24000ec4 	.word	0x24000ec4
 800cc90:	240013a0 	.word	0x240013a0
 800cc94:	24000ec8 	.word	0x24000ec8

0800cc98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cca2:	4b21      	ldr	r3, [pc, #132]	@ (800cd28 <prvAddCurrentTaskToDelayedList+0x90>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cca8:	4b20      	ldr	r3, [pc, #128]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3304      	adds	r3, #4
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fbc4 	bl	800b43c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccba:	d10a      	bne.n	800ccd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccc2:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4819      	ldr	r0, [pc, #100]	@ (800cd30 <prvAddCurrentTaskToDelayedList+0x98>)
 800cccc:	f7fe fb59 	bl	800b382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccd0:	e026      	b.n	800cd20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccda:	4b14      	ldr	r3, [pc, #80]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d209      	bcs.n	800ccfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccea:	4b12      	ldr	r3, [pc, #72]	@ (800cd34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	4b0f      	ldr	r3, [pc, #60]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7fe fb67 	bl	800b3ca <vListInsert>
}
 800ccfc:	e010      	b.n	800cd20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cd38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <prvAddCurrentTaskToDelayedList+0x94>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3304      	adds	r3, #4
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	f7fe fb5d 	bl	800b3ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd10:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d202      	bcs.n	800cd20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd1a:	4a08      	ldr	r2, [pc, #32]	@ (800cd3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6013      	str	r3, [r2, #0]
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	2400139c 	.word	0x2400139c
 800cd2c:	24000ec4 	.word	0x24000ec4
 800cd30:	24001384 	.word	0x24001384
 800cd34:	24001354 	.word	0x24001354
 800cd38:	24001350 	.word	0x24001350
 800cd3c:	240013b8 	.word	0x240013b8

0800cd40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	@ 0x28
 800cd44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd4a:	f000 fb13 	bl	800d374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc4 <xTimerCreateTimerTask+0x84>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d021      	beq.n	800cd9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd5e:	1d3a      	adds	r2, r7, #4
 800cd60:	f107 0108 	add.w	r1, r7, #8
 800cd64:	f107 030c 	add.w	r3, r7, #12
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fac3 	bl	800b2f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	9202      	str	r2, [sp, #8]
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	2302      	movs	r3, #2
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	460a      	mov	r2, r1
 800cd80:	4911      	ldr	r1, [pc, #68]	@ (800cdc8 <xTimerCreateTimerTask+0x88>)
 800cd82:	4812      	ldr	r0, [pc, #72]	@ (800cdcc <xTimerCreateTimerTask+0x8c>)
 800cd84:	f7ff f87e 	bl	800be84 <xTaskCreateStatic>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	4a11      	ldr	r2, [pc, #68]	@ (800cdd0 <xTimerCreateTimerTask+0x90>)
 800cd8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd8e:	4b10      	ldr	r3, [pc, #64]	@ (800cdd0 <xTimerCreateTimerTask+0x90>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd96:	2301      	movs	r3, #1
 800cd98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	613b      	str	r3, [r7, #16]
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	e7fd      	b.n	800cdb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cdb8:	697b      	ldr	r3, [r7, #20]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	240013f4 	.word	0x240013f4
 800cdc8:	0800ded4 	.word	0x0800ded4
 800cdcc:	0800cf0d 	.word	0x0800cf0d
 800cdd0:	240013f8 	.word	0x240013f8

0800cdd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	@ 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <xTimerGenericCommand+0x30>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	623b      	str	r3, [r7, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	e7fd      	b.n	800ce00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce04:	4b19      	ldr	r3, [pc, #100]	@ (800ce6c <xTimerGenericCommand+0x98>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d02a      	beq.n	800ce62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	dc18      	bgt.n	800ce50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce1e:	f7ff fead 	bl	800cb7c <xTaskGetSchedulerState>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d109      	bne.n	800ce3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce28:	4b10      	ldr	r3, [pc, #64]	@ (800ce6c <xTimerGenericCommand+0x98>)
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	f107 0110 	add.w	r1, r7, #16
 800ce30:	2300      	movs	r3, #0
 800ce32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce34:	f7fe fc36 	bl	800b6a4 <xQueueGenericSend>
 800ce38:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce3a:	e012      	b.n	800ce62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce6c <xTimerGenericCommand+0x98>)
 800ce3e:	6818      	ldr	r0, [r3, #0]
 800ce40:	f107 0110 	add.w	r1, r7, #16
 800ce44:	2300      	movs	r3, #0
 800ce46:	2200      	movs	r2, #0
 800ce48:	f7fe fc2c 	bl	800b6a4 <xQueueGenericSend>
 800ce4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce4e:	e008      	b.n	800ce62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce50:	4b06      	ldr	r3, [pc, #24]	@ (800ce6c <xTimerGenericCommand+0x98>)
 800ce52:	6818      	ldr	r0, [r3, #0]
 800ce54:	f107 0110 	add.w	r1, r7, #16
 800ce58:	2300      	movs	r3, #0
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	f7fe fd24 	bl	800b8a8 <xQueueGenericSendFromISR>
 800ce60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3728      	adds	r7, #40	@ 0x28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	240013f4 	.word	0x240013f4

0800ce70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce7a:	4b23      	ldr	r3, [pc, #140]	@ (800cf08 <prvProcessExpiredTimer+0x98>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe fad7 	bl	800b43c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d023      	beq.n	800cee4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	18d1      	adds	r1, r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f000 f8d5 	bl	800d058 <prvInsertTimerInActiveList>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d020      	beq.n	800cef6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	2100      	movs	r1, #0
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f7ff ff88 	bl	800cdd4 <xTimerGenericCommand>
 800cec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d114      	bne.n	800cef6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	60fb      	str	r3, [r7, #12]
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	e7fd      	b.n	800cee0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceea:	f023 0301 	bic.w	r3, r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	6978      	ldr	r0, [r7, #20]
 800cefc:	4798      	blx	r3
}
 800cefe:	bf00      	nop
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	240013ec 	.word	0x240013ec

0800cf0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 f859 	bl	800cfd0 <prvGetNextExpireTime>
 800cf1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	4619      	mov	r1, r3
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f000 f805 	bl	800cf34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf2a:	f000 f8d7 	bl	800d0dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf2e:	bf00      	nop
 800cf30:	e7f0      	b.n	800cf14 <prvTimerTask+0x8>
	...

0800cf34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf3e:	f7ff fa05 	bl	800c34c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf42:	f107 0308 	add.w	r3, r7, #8
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f866 	bl	800d018 <prvSampleTimeNow>
 800cf4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d130      	bne.n	800cfb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10a      	bne.n	800cf70 <prvProcessTimerOrBlockTask+0x3c>
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d806      	bhi.n	800cf70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf62:	f7ff fa01 	bl	800c368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf66:	68f9      	ldr	r1, [r7, #12]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff ff81 	bl	800ce70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf6e:	e024      	b.n	800cfba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d008      	beq.n	800cf88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf76:	4b13      	ldr	r3, [pc, #76]	@ (800cfc4 <prvProcessTimerOrBlockTask+0x90>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <prvProcessTimerOrBlockTask+0x50>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e000      	b.n	800cf86 <prvProcessTimerOrBlockTask+0x52>
 800cf84:	2300      	movs	r3, #0
 800cf86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf88:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <prvProcessTimerOrBlockTask+0x94>)
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	4619      	mov	r1, r3
 800cf96:	f7fe ff41 	bl	800be1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf9a:	f7ff f9e5 	bl	800c368 <xTaskResumeAll>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cfa4:	4b09      	ldr	r3, [pc, #36]	@ (800cfcc <prvProcessTimerOrBlockTask+0x98>)
 800cfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	f3bf 8f6f 	isb	sy
}
 800cfb4:	e001      	b.n	800cfba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfb6:	f7ff f9d7 	bl	800c368 <xTaskResumeAll>
}
 800cfba:	bf00      	nop
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	240013f0 	.word	0x240013f0
 800cfc8:	240013f4 	.word	0x240013f4
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfd8:	4b0e      	ldr	r3, [pc, #56]	@ (800d014 <prvGetNextExpireTime+0x44>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <prvGetNextExpireTime+0x16>
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	e000      	b.n	800cfe8 <prvGetNextExpireTime+0x18>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d105      	bne.n	800d000 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cff4:	4b07      	ldr	r3, [pc, #28]	@ (800d014 <prvGetNextExpireTime+0x44>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e001      	b.n	800d004 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d004:	68fb      	ldr	r3, [r7, #12]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	240013ec 	.word	0x240013ec

0800d018 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d020:	f7ff fa40 	bl	800c4a4 <xTaskGetTickCount>
 800d024:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d026:	4b0b      	ldr	r3, [pc, #44]	@ (800d054 <prvSampleTimeNow+0x3c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d205      	bcs.n	800d03c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d030:	f000 f93a 	bl	800d2a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	e002      	b.n	800d042 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d042:	4a04      	ldr	r2, [pc, #16]	@ (800d054 <prvSampleTimeNow+0x3c>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d048:	68fb      	ldr	r3, [r7, #12]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	240013fc 	.word	0x240013fc

0800d058 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d066:	2300      	movs	r3, #0
 800d068:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d812      	bhi.n	800d0a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	1ad2      	subs	r2, r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d302      	bcc.n	800d092 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d08c:	2301      	movs	r3, #1
 800d08e:	617b      	str	r3, [r7, #20]
 800d090:	e01b      	b.n	800d0ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d092:	4b10      	ldr	r3, [pc, #64]	@ (800d0d4 <prvInsertTimerInActiveList+0x7c>)
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3304      	adds	r3, #4
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f7fe f994 	bl	800b3ca <vListInsert>
 800d0a2:	e012      	b.n	800d0ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d206      	bcs.n	800d0ba <prvInsertTimerInActiveList+0x62>
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d302      	bcc.n	800d0ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	e007      	b.n	800d0ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0ba:	4b07      	ldr	r3, [pc, #28]	@ (800d0d8 <prvInsertTimerInActiveList+0x80>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	f7fe f980 	bl	800b3ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0ca:	697b      	ldr	r3, [r7, #20]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	240013f0 	.word	0x240013f0
 800d0d8:	240013ec 	.word	0x240013ec

0800d0dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08e      	sub	sp, #56	@ 0x38
 800d0e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0e2:	e0ce      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da19      	bge.n	800d11e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0ea:	1d3b      	adds	r3, r7, #4
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10b      	bne.n	800d10e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	61fb      	str	r3, [r7, #28]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d114:	6850      	ldr	r0, [r2, #4]
 800d116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d118:	6892      	ldr	r2, [r2, #8]
 800d11a:	4611      	mov	r1, r2
 800d11c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	f2c0 80ae 	blt.w	800d282 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d004      	beq.n	800d13c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe f980 	bl	800b43c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d13c:	463b      	mov	r3, r7
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff ff6a 	bl	800d018 <prvSampleTimeNow>
 800d144:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b09      	cmp	r3, #9
 800d14a:	f200 8097 	bhi.w	800d27c <prvProcessReceivedCommands+0x1a0>
 800d14e:	a201      	add	r2, pc, #4	@ (adr r2, 800d154 <prvProcessReceivedCommands+0x78>)
 800d150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d154:	0800d17d 	.word	0x0800d17d
 800d158:	0800d17d 	.word	0x0800d17d
 800d15c:	0800d17d 	.word	0x0800d17d
 800d160:	0800d1f3 	.word	0x0800d1f3
 800d164:	0800d207 	.word	0x0800d207
 800d168:	0800d253 	.word	0x0800d253
 800d16c:	0800d17d 	.word	0x0800d17d
 800d170:	0800d17d 	.word	0x0800d17d
 800d174:	0800d1f3 	.word	0x0800d1f3
 800d178:	0800d207 	.word	0x0800d207
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d182:	f043 0301 	orr.w	r3, r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	18d1      	adds	r1, r2, r3
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d19a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d19c:	f7ff ff5c 	bl	800d058 <prvInsertTimerInActiveList>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d06c      	beq.n	800d280 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d061      	beq.n	800d280 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	441a      	add	r2, r3
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1ce:	f7ff fe01 	bl	800cdd4 <xTimerGenericCommand>
 800d1d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d152      	bne.n	800d280 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	61bb      	str	r3, [r7, #24]
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	e7fd      	b.n	800d1ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1f8:	f023 0301 	bic.w	r3, r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d204:	e03d      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d20c:	f043 0301 	orr.w	r3, r3, #1
 800d210:	b2da      	uxtb	r2, r3
 800d212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10b      	bne.n	800d23e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	617b      	str	r3, [r7, #20]
}
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
 800d23c:	e7fd      	b.n	800d23a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d240:	699a      	ldr	r2, [r3, #24]
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	18d1      	adds	r1, r2, r3
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d24a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d24c:	f7ff ff04 	bl	800d058 <prvInsertTimerInActiveList>
					break;
 800d250:	e017      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d103      	bne.n	800d268 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d262:	f000 fbef 	bl	800da44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d266:	e00c      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d26e:	f023 0301 	bic.w	r3, r3, #1
 800d272:	b2da      	uxtb	r2, r3
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d27a:	e002      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d27c:	bf00      	nop
 800d27e:	e000      	b.n	800d282 <prvProcessReceivedCommands+0x1a6>
					break;
 800d280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d282:	4b08      	ldr	r3, [pc, #32]	@ (800d2a4 <prvProcessReceivedCommands+0x1c8>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	1d39      	adds	r1, r7, #4
 800d288:	2200      	movs	r2, #0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fbaa 	bl	800b9e4 <xQueueReceive>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	f47f af26 	bne.w	800d0e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	3730      	adds	r7, #48	@ 0x30
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	240013f4 	.word	0x240013f4

0800d2a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2ae:	e049      	b.n	800d344 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ba:	4b2c      	ldr	r3, [pc, #176]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe f8b7 	bl	800b43c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d02f      	beq.n	800d344 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d90e      	bls.n	800d314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d302:	4b1a      	ldr	r3, [pc, #104]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3304      	adds	r3, #4
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7fe f85c 	bl	800b3ca <vListInsert>
 800d312:	e017      	b.n	800d344 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d314:	2300      	movs	r3, #0
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	2300      	movs	r3, #0
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	2100      	movs	r1, #0
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f7ff fd58 	bl	800cdd4 <xTimerGenericCommand>
 800d324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10b      	bne.n	800d344 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	603b      	str	r3, [r7, #0]
}
 800d33e:	bf00      	nop
 800d340:	bf00      	nop
 800d342:	e7fd      	b.n	800d340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d344:	4b09      	ldr	r3, [pc, #36]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1b0      	bne.n	800d2b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d34e:	4b07      	ldr	r3, [pc, #28]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d354:	4b06      	ldr	r3, [pc, #24]	@ (800d370 <prvSwitchTimerLists+0xc8>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a04      	ldr	r2, [pc, #16]	@ (800d36c <prvSwitchTimerLists+0xc4>)
 800d35a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d35c:	4a04      	ldr	r2, [pc, #16]	@ (800d370 <prvSwitchTimerLists+0xc8>)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	6013      	str	r3, [r2, #0]
}
 800d362:	bf00      	nop
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	240013ec 	.word	0x240013ec
 800d370:	240013f0 	.word	0x240013f0

0800d374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d37a:	f000 f96d 	bl	800d658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d37e:	4b15      	ldr	r3, [pc, #84]	@ (800d3d4 <prvCheckForValidListAndQueue+0x60>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d120      	bne.n	800d3c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d386:	4814      	ldr	r0, [pc, #80]	@ (800d3d8 <prvCheckForValidListAndQueue+0x64>)
 800d388:	f7fd ffce 	bl	800b328 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d38c:	4813      	ldr	r0, [pc, #76]	@ (800d3dc <prvCheckForValidListAndQueue+0x68>)
 800d38e:	f7fd ffcb 	bl	800b328 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d392:	4b13      	ldr	r3, [pc, #76]	@ (800d3e0 <prvCheckForValidListAndQueue+0x6c>)
 800d394:	4a10      	ldr	r2, [pc, #64]	@ (800d3d8 <prvCheckForValidListAndQueue+0x64>)
 800d396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d398:	4b12      	ldr	r3, [pc, #72]	@ (800d3e4 <prvCheckForValidListAndQueue+0x70>)
 800d39a:	4a10      	ldr	r2, [pc, #64]	@ (800d3dc <prvCheckForValidListAndQueue+0x68>)
 800d39c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d39e:	2300      	movs	r3, #0
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	4b11      	ldr	r3, [pc, #68]	@ (800d3e8 <prvCheckForValidListAndQueue+0x74>)
 800d3a4:	4a11      	ldr	r2, [pc, #68]	@ (800d3ec <prvCheckForValidListAndQueue+0x78>)
 800d3a6:	2110      	movs	r1, #16
 800d3a8:	200a      	movs	r0, #10
 800d3aa:	f7fe f8db 	bl	800b564 <xQueueGenericCreateStatic>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4a08      	ldr	r2, [pc, #32]	@ (800d3d4 <prvCheckForValidListAndQueue+0x60>)
 800d3b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3b4:	4b07      	ldr	r3, [pc, #28]	@ (800d3d4 <prvCheckForValidListAndQueue+0x60>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d005      	beq.n	800d3c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3bc:	4b05      	ldr	r3, [pc, #20]	@ (800d3d4 <prvCheckForValidListAndQueue+0x60>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	490b      	ldr	r1, [pc, #44]	@ (800d3f0 <prvCheckForValidListAndQueue+0x7c>)
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fd00 	bl	800bdc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3c8:	f000 f978 	bl	800d6bc <vPortExitCritical>
}
 800d3cc:	bf00      	nop
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	240013f4 	.word	0x240013f4
 800d3d8:	240013c4 	.word	0x240013c4
 800d3dc:	240013d8 	.word	0x240013d8
 800d3e0:	240013ec 	.word	0x240013ec
 800d3e4:	240013f0 	.word	0x240013f0
 800d3e8:	240014a0 	.word	0x240014a0
 800d3ec:	24001400 	.word	0x24001400
 800d3f0:	0800dedc 	.word	0x0800dedc

0800d3f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3b04      	subs	r3, #4
 800d404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3b04      	subs	r3, #4
 800d412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	f023 0201 	bic.w	r2, r3, #1
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3b04      	subs	r3, #4
 800d422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d424:	4a0c      	ldr	r2, [pc, #48]	@ (800d458 <pxPortInitialiseStack+0x64>)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3b14      	subs	r3, #20
 800d42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3b04      	subs	r3, #4
 800d43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f06f 0202 	mvn.w	r2, #2
 800d442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3b20      	subs	r3, #32
 800d448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d44a:	68fb      	ldr	r3, [r7, #12]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3714      	adds	r7, #20
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr
 800d458:	0800d45d 	.word	0x0800d45d

0800d45c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d466:	4b13      	ldr	r3, [pc, #76]	@ (800d4b4 <prvTaskExitError+0x58>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d46e:	d00b      	beq.n	800d488 <prvTaskExitError+0x2c>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	60fb      	str	r3, [r7, #12]
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <prvTaskExitError+0x28>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	60bb      	str	r3, [r7, #8]
}
 800d49a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d49c:	bf00      	nop
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d0fc      	beq.n	800d49e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4a4:	bf00      	nop
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	24000010 	.word	0x24000010
	...

0800d4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <pxCurrentTCBConst2>)
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	6808      	ldr	r0, [r1, #0]
 800d4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ca:	f380 8809 	msr	PSP, r0
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f04f 0000 	mov.w	r0, #0
 800d4d6:	f380 8811 	msr	BASEPRI, r0
 800d4da:	4770      	bx	lr
 800d4dc:	f3af 8000 	nop.w

0800d4e0 <pxCurrentTCBConst2>:
 800d4e0:	24000ec4 	.word	0x24000ec4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4e4:	bf00      	nop
 800d4e6:	bf00      	nop

0800d4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4e8:	4808      	ldr	r0, [pc, #32]	@ (800d50c <prvPortStartFirstTask+0x24>)
 800d4ea:	6800      	ldr	r0, [r0, #0]
 800d4ec:	6800      	ldr	r0, [r0, #0]
 800d4ee:	f380 8808 	msr	MSP, r0
 800d4f2:	f04f 0000 	mov.w	r0, #0
 800d4f6:	f380 8814 	msr	CONTROL, r0
 800d4fa:	b662      	cpsie	i
 800d4fc:	b661      	cpsie	f
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	df00      	svc	0
 800d508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d50a:	bf00      	nop
 800d50c:	e000ed08 	.word	0xe000ed08

0800d510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d516:	4b47      	ldr	r3, [pc, #284]	@ (800d634 <xPortStartScheduler+0x124>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a47      	ldr	r2, [pc, #284]	@ (800d638 <xPortStartScheduler+0x128>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d10b      	bne.n	800d538 <xPortStartScheduler+0x28>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	613b      	str	r3, [r7, #16]
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d538:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <xPortStartScheduler+0x124>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a3f      	ldr	r2, [pc, #252]	@ (800d63c <xPortStartScheduler+0x12c>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d10b      	bne.n	800d55a <xPortStartScheduler+0x4a>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	60fb      	str	r3, [r7, #12]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d55a:	4b39      	ldr	r3, [pc, #228]	@ (800d640 <xPortStartScheduler+0x130>)
 800d55c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	22ff      	movs	r2, #255	@ 0xff
 800d56a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	b2db      	uxtb	r3, r3
 800d572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d574:	78fb      	ldrb	r3, [r7, #3]
 800d576:	b2db      	uxtb	r3, r3
 800d578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	4b31      	ldr	r3, [pc, #196]	@ (800d644 <xPortStartScheduler+0x134>)
 800d580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d582:	4b31      	ldr	r3, [pc, #196]	@ (800d648 <xPortStartScheduler+0x138>)
 800d584:	2207      	movs	r2, #7
 800d586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d588:	e009      	b.n	800d59e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d58a:	4b2f      	ldr	r3, [pc, #188]	@ (800d648 <xPortStartScheduler+0x138>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3b01      	subs	r3, #1
 800d590:	4a2d      	ldr	r2, [pc, #180]	@ (800d648 <xPortStartScheduler+0x138>)
 800d592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	b2db      	uxtb	r3, r3
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d59e:	78fb      	ldrb	r3, [r7, #3]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5a6:	2b80      	cmp	r3, #128	@ 0x80
 800d5a8:	d0ef      	beq.n	800d58a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5aa:	4b27      	ldr	r3, [pc, #156]	@ (800d648 <xPortStartScheduler+0x138>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f1c3 0307 	rsb	r3, r3, #7
 800d5b2:	2b04      	cmp	r3, #4
 800d5b4:	d00b      	beq.n	800d5ce <xPortStartScheduler+0xbe>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	60bb      	str	r3, [r7, #8]
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5ce:	4b1e      	ldr	r3, [pc, #120]	@ (800d648 <xPortStartScheduler+0x138>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	4a1c      	ldr	r2, [pc, #112]	@ (800d648 <xPortStartScheduler+0x138>)
 800d5d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800d648 <xPortStartScheduler+0x138>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d5e0:	4a19      	ldr	r2, [pc, #100]	@ (800d648 <xPortStartScheduler+0x138>)
 800d5e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5ec:	4b17      	ldr	r3, [pc, #92]	@ (800d64c <xPortStartScheduler+0x13c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a16      	ldr	r2, [pc, #88]	@ (800d64c <xPortStartScheduler+0x13c>)
 800d5f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d5f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5f8:	4b14      	ldr	r3, [pc, #80]	@ (800d64c <xPortStartScheduler+0x13c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a13      	ldr	r2, [pc, #76]	@ (800d64c <xPortStartScheduler+0x13c>)
 800d5fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d604:	f000 f8da 	bl	800d7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d608:	4b11      	ldr	r3, [pc, #68]	@ (800d650 <xPortStartScheduler+0x140>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d60e:	f000 f8f9 	bl	800d804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d612:	4b10      	ldr	r3, [pc, #64]	@ (800d654 <xPortStartScheduler+0x144>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a0f      	ldr	r2, [pc, #60]	@ (800d654 <xPortStartScheduler+0x144>)
 800d618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d61c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d61e:	f7ff ff63 	bl	800d4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d622:	f7ff f809 	bl	800c638 <vTaskSwitchContext>
	prvTaskExitError();
 800d626:	f7ff ff19 	bl	800d45c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	e000ed00 	.word	0xe000ed00
 800d638:	410fc271 	.word	0x410fc271
 800d63c:	410fc270 	.word	0x410fc270
 800d640:	e000e400 	.word	0xe000e400
 800d644:	240014f0 	.word	0x240014f0
 800d648:	240014f4 	.word	0x240014f4
 800d64c:	e000ed20 	.word	0xe000ed20
 800d650:	24000010 	.word	0x24000010
 800d654:	e000ef34 	.word	0xe000ef34

0800d658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	607b      	str	r3, [r7, #4]
}
 800d670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d672:	4b10      	ldr	r3, [pc, #64]	@ (800d6b4 <vPortEnterCritical+0x5c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3301      	adds	r3, #1
 800d678:	4a0e      	ldr	r2, [pc, #56]	@ (800d6b4 <vPortEnterCritical+0x5c>)
 800d67a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d67c:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b4 <vPortEnterCritical+0x5c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d110      	bne.n	800d6a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d684:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b8 <vPortEnterCritical+0x60>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00b      	beq.n	800d6a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	603b      	str	r3, [r7, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <vPortEnterCritical+0x4a>
	}
}
 800d6a6:	bf00      	nop
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	24000010 	.word	0x24000010
 800d6b8:	e000ed04 	.word	0xe000ed04

0800d6bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6c2:	4b12      	ldr	r3, [pc, #72]	@ (800d70c <vPortExitCritical+0x50>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10b      	bne.n	800d6e2 <vPortExitCritical+0x26>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	607b      	str	r3, [r7, #4]
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	e7fd      	b.n	800d6de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d70c <vPortExitCritical+0x50>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	4a08      	ldr	r2, [pc, #32]	@ (800d70c <vPortExitCritical+0x50>)
 800d6ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6ec:	4b07      	ldr	r3, [pc, #28]	@ (800d70c <vPortExitCritical+0x50>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d105      	bne.n	800d700 <vPortExitCritical+0x44>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f383 8811 	msr	BASEPRI, r3
}
 800d6fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	24000010 	.word	0x24000010

0800d710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d710:	f3ef 8009 	mrs	r0, PSP
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	4b15      	ldr	r3, [pc, #84]	@ (800d770 <pxCurrentTCBConst>)
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	f01e 0f10 	tst.w	lr, #16
 800d720:	bf08      	it	eq
 800d722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	6010      	str	r0, [r2, #0]
 800d72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d734:	f380 8811 	msr	BASEPRI, r0
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f7fe ff7a 	bl	800c638 <vTaskSwitchContext>
 800d744:	f04f 0000 	mov.w	r0, #0
 800d748:	f380 8811 	msr	BASEPRI, r0
 800d74c:	bc09      	pop	{r0, r3}
 800d74e:	6819      	ldr	r1, [r3, #0]
 800d750:	6808      	ldr	r0, [r1, #0]
 800d752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d756:	f01e 0f10 	tst.w	lr, #16
 800d75a:	bf08      	it	eq
 800d75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d760:	f380 8809 	msr	PSP, r0
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w

0800d770 <pxCurrentTCBConst>:
 800d770:	24000ec4 	.word	0x24000ec4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop

0800d778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	607b      	str	r3, [r7, #4]
}
 800d790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d792:	f7fe fe97 	bl	800c4c4 <xTaskIncrementTick>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d79c:	4b06      	ldr	r3, [pc, #24]	@ (800d7b8 <xPortSysTickHandler+0x40>)
 800d79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	f383 8811 	msr	BASEPRI, r3
}
 800d7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	e000ed04 	.word	0xe000ed04

0800d7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7bc:	b480      	push	{r7}
 800d7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f0 <vPortSetupTimerInterrupt+0x34>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <vPortSetupTimerInterrupt+0x38>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d7f8 <vPortSetupTimerInterrupt+0x3c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7fc <vPortSetupTimerInterrupt+0x40>)
 800d7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d6:	099b      	lsrs	r3, r3, #6
 800d7d8:	4a09      	ldr	r2, [pc, #36]	@ (800d800 <vPortSetupTimerInterrupt+0x44>)
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7de:	4b04      	ldr	r3, [pc, #16]	@ (800d7f0 <vPortSetupTimerInterrupt+0x34>)
 800d7e0:	2207      	movs	r2, #7
 800d7e2:	601a      	str	r2, [r3, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	e000e010 	.word	0xe000e010
 800d7f4:	e000e018 	.word	0xe000e018
 800d7f8:	24000000 	.word	0x24000000
 800d7fc:	10624dd3 	.word	0x10624dd3
 800d800:	e000e014 	.word	0xe000e014

0800d804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d814 <vPortEnableVFP+0x10>
 800d808:	6801      	ldr	r1, [r0, #0]
 800d80a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d80e:	6001      	str	r1, [r0, #0]
 800d810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d812:	bf00      	nop
 800d814:	e000ed88 	.word	0xe000ed88

0800d818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d81e:	f3ef 8305 	mrs	r3, IPSR
 800d822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b0f      	cmp	r3, #15
 800d828:	d915      	bls.n	800d856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d82a:	4a18      	ldr	r2, [pc, #96]	@ (800d88c <vPortValidateInterruptPriority+0x74>)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4413      	add	r3, r2
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d834:	4b16      	ldr	r3, [pc, #88]	@ (800d890 <vPortValidateInterruptPriority+0x78>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	7afa      	ldrb	r2, [r7, #11]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d20b      	bcs.n	800d856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	607b      	str	r3, [r7, #4]
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	e7fd      	b.n	800d852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d856:	4b0f      	ldr	r3, [pc, #60]	@ (800d894 <vPortValidateInterruptPriority+0x7c>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d85e:	4b0e      	ldr	r3, [pc, #56]	@ (800d898 <vPortValidateInterruptPriority+0x80>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d90b      	bls.n	800d87e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	603b      	str	r3, [r7, #0]
}
 800d878:	bf00      	nop
 800d87a:	bf00      	nop
 800d87c:	e7fd      	b.n	800d87a <vPortValidateInterruptPriority+0x62>
	}
 800d87e:	bf00      	nop
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	e000e3f0 	.word	0xe000e3f0
 800d890:	240014f0 	.word	0x240014f0
 800d894:	e000ed0c 	.word	0xe000ed0c
 800d898:	240014f4 	.word	0x240014f4

0800d89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08a      	sub	sp, #40	@ 0x28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8a8:	f7fe fd50 	bl	800c34c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8ac:	4b5f      	ldr	r3, [pc, #380]	@ (800da2c <pvPortMalloc+0x190>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8b4:	f000 f92a 	bl	800db0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8b8:	4b5d      	ldr	r3, [pc, #372]	@ (800da30 <pvPortMalloc+0x194>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4013      	ands	r3, r2
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f040 8095 	bne.w	800d9f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01e      	beq.n	800d90a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d8cc:	2208      	movs	r2, #8
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f003 0307 	and.w	r3, r3, #7
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d015      	beq.n	800d90a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f023 0307 	bic.w	r3, r3, #7
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f003 0307 	and.w	r3, r3, #7
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00b      	beq.n	800d90a <pvPortMalloc+0x6e>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	617b      	str	r3, [r7, #20]
}
 800d904:	bf00      	nop
 800d906:	bf00      	nop
 800d908:	e7fd      	b.n	800d906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d06f      	beq.n	800d9f0 <pvPortMalloc+0x154>
 800d910:	4b48      	ldr	r3, [pc, #288]	@ (800da34 <pvPortMalloc+0x198>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	429a      	cmp	r2, r3
 800d918:	d86a      	bhi.n	800d9f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d91a:	4b47      	ldr	r3, [pc, #284]	@ (800da38 <pvPortMalloc+0x19c>)
 800d91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d91e:	4b46      	ldr	r3, [pc, #280]	@ (800da38 <pvPortMalloc+0x19c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d924:	e004      	b.n	800d930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d903      	bls.n	800d942 <pvPortMalloc+0xa6>
 800d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1f1      	bne.n	800d926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d942:	4b3a      	ldr	r3, [pc, #232]	@ (800da2c <pvPortMalloc+0x190>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d948:	429a      	cmp	r2, r3
 800d94a:	d051      	beq.n	800d9f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2208      	movs	r2, #8
 800d952:	4413      	add	r3, r2
 800d954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	1ad2      	subs	r2, r2, r3
 800d966:	2308      	movs	r3, #8
 800d968:	005b      	lsls	r3, r3, #1
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d920      	bls.n	800d9b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	f003 0307 	and.w	r3, r3, #7
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <pvPortMalloc+0xfc>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	613b      	str	r3, [r7, #16]
}
 800d992:	bf00      	nop
 800d994:	bf00      	nop
 800d996:	e7fd      	b.n	800d994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9aa:	69b8      	ldr	r0, [r7, #24]
 800d9ac:	f000 f912 	bl	800dbd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9b0:	4b20      	ldr	r3, [pc, #128]	@ (800da34 <pvPortMalloc+0x198>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	4a1e      	ldr	r2, [pc, #120]	@ (800da34 <pvPortMalloc+0x198>)
 800d9bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9be:	4b1d      	ldr	r3, [pc, #116]	@ (800da34 <pvPortMalloc+0x198>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	4b1e      	ldr	r3, [pc, #120]	@ (800da3c <pvPortMalloc+0x1a0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d203      	bcs.n	800d9d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9ca:	4b1a      	ldr	r3, [pc, #104]	@ (800da34 <pvPortMalloc+0x198>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a1b      	ldr	r2, [pc, #108]	@ (800da3c <pvPortMalloc+0x1a0>)
 800d9d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d4:	685a      	ldr	r2, [r3, #4]
 800d9d6:	4b16      	ldr	r3, [pc, #88]	@ (800da30 <pvPortMalloc+0x194>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9e6:	4b16      	ldr	r3, [pc, #88]	@ (800da40 <pvPortMalloc+0x1a4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	4a14      	ldr	r2, [pc, #80]	@ (800da40 <pvPortMalloc+0x1a4>)
 800d9ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9f0:	f7fe fcba 	bl	800c368 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d9fa:	f7f2 ff49 	bl	8000890 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	f003 0307 	and.w	r3, r3, #7
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00b      	beq.n	800da20 <pvPortMalloc+0x184>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	60fb      	str	r3, [r7, #12]
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	e7fd      	b.n	800da1c <pvPortMalloc+0x180>
	return pvReturn;
 800da20:	69fb      	ldr	r3, [r7, #28]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3728      	adds	r7, #40	@ 0x28
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	24065690 	.word	0x24065690
 800da30:	240656a4 	.word	0x240656a4
 800da34:	24065694 	.word	0x24065694
 800da38:	24065688 	.word	0x24065688
 800da3c:	24065698 	.word	0x24065698
 800da40:	2406569c 	.word	0x2406569c

0800da44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d04f      	beq.n	800daf6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da56:	2308      	movs	r3, #8
 800da58:	425b      	negs	r3, r3
 800da5a:	697a      	ldr	r2, [r7, #20]
 800da5c:	4413      	add	r3, r2
 800da5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	4b25      	ldr	r3, [pc, #148]	@ (800db00 <vPortFree+0xbc>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4013      	ands	r3, r2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10b      	bne.n	800da8a <vPortFree+0x46>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
 800da7e:	f3bf 8f4f 	dsb	sy
 800da82:	60fb      	str	r3, [r7, #12]
}
 800da84:	bf00      	nop
 800da86:	bf00      	nop
 800da88:	e7fd      	b.n	800da86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <vPortFree+0x66>
	__asm volatile
 800da92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	60bb      	str	r3, [r7, #8]
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop
 800daa8:	e7fd      	b.n	800daa6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	4b14      	ldr	r3, [pc, #80]	@ (800db00 <vPortFree+0xbc>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4013      	ands	r3, r2
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01e      	beq.n	800daf6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11a      	bne.n	800daf6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	4b0e      	ldr	r3, [pc, #56]	@ (800db00 <vPortFree+0xbc>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	43db      	mvns	r3, r3
 800daca:	401a      	ands	r2, r3
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dad0:	f7fe fc3c 	bl	800c34c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	4b0a      	ldr	r3, [pc, #40]	@ (800db04 <vPortFree+0xc0>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4413      	add	r3, r2
 800dade:	4a09      	ldr	r2, [pc, #36]	@ (800db04 <vPortFree+0xc0>)
 800dae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dae2:	6938      	ldr	r0, [r7, #16]
 800dae4:	f000 f876 	bl	800dbd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dae8:	4b07      	ldr	r3, [pc, #28]	@ (800db08 <vPortFree+0xc4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	3301      	adds	r3, #1
 800daee:	4a06      	ldr	r2, [pc, #24]	@ (800db08 <vPortFree+0xc4>)
 800daf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800daf2:	f7fe fc39 	bl	800c368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800daf6:	bf00      	nop
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	240656a4 	.word	0x240656a4
 800db04:	24065694 	.word	0x24065694
 800db08:	240656a0 	.word	0x240656a0

0800db0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db12:	4b29      	ldr	r3, [pc, #164]	@ (800dbb8 <prvHeapInit+0xac>)
 800db14:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db16:	4b29      	ldr	r3, [pc, #164]	@ (800dbbc <prvHeapInit+0xb0>)
 800db18:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f003 0307 	and.w	r3, r3, #7
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00c      	beq.n	800db3e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3307      	adds	r3, #7
 800db28:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f023 0307 	bic.w	r3, r3, #7
 800db30:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	4a20      	ldr	r2, [pc, #128]	@ (800dbbc <prvHeapInit+0xb0>)
 800db3a:	4413      	add	r3, r2
 800db3c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db42:	4a1f      	ldr	r2, [pc, #124]	@ (800dbc0 <prvHeapInit+0xb4>)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db48:	4b1d      	ldr	r3, [pc, #116]	@ (800dbc0 <prvHeapInit+0xb4>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	4413      	add	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db56:	2208      	movs	r2, #8
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f023 0307 	bic.w	r3, r3, #7
 800db64:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	4a16      	ldr	r2, [pc, #88]	@ (800dbc4 <prvHeapInit+0xb8>)
 800db6a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db6c:	4b15      	ldr	r3, [pc, #84]	@ (800dbc4 <prvHeapInit+0xb8>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2200      	movs	r2, #0
 800db72:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db74:	4b13      	ldr	r3, [pc, #76]	@ (800dbc4 <prvHeapInit+0xb8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2200      	movs	r2, #0
 800db7a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	1ad2      	subs	r2, r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc4 <prvHeapInit+0xb8>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	4a0c      	ldr	r2, [pc, #48]	@ (800dbc8 <prvHeapInit+0xbc>)
 800db98:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	4a0b      	ldr	r2, [pc, #44]	@ (800dbcc <prvHeapInit+0xc0>)
 800dba0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dba2:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd0 <prvHeapInit+0xc4>)
 800dba4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dba8:	601a      	str	r2, [r3, #0]
}
 800dbaa:	bf00      	nop
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	00064190 	.word	0x00064190
 800dbbc:	240014f8 	.word	0x240014f8
 800dbc0:	24065688 	.word	0x24065688
 800dbc4:	24065690 	.word	0x24065690
 800dbc8:	24065698 	.word	0x24065698
 800dbcc:	24065694 	.word	0x24065694
 800dbd0:	240656a4 	.word	0x240656a4

0800dbd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbdc:	4b28      	ldr	r3, [pc, #160]	@ (800dc80 <prvInsertBlockIntoFreeList+0xac>)
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	e002      	b.n	800dbe8 <prvInsertBlockIntoFreeList+0x14>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d8f7      	bhi.n	800dbe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d108      	bne.n	800dc16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	441a      	add	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	68ba      	ldr	r2, [r7, #8]
 800dc20:	441a      	add	r2, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d118      	bne.n	800dc5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	4b15      	ldr	r3, [pc, #84]	@ (800dc84 <prvInsertBlockIntoFreeList+0xb0>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d00d      	beq.n	800dc52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	441a      	add	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	e008      	b.n	800dc64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc52:	4b0c      	ldr	r3, [pc, #48]	@ (800dc84 <prvInsertBlockIntoFreeList+0xb0>)
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	e003      	b.n	800dc64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d002      	beq.n	800dc72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc72:	bf00      	nop
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	24065688 	.word	0x24065688
 800dc84:	24065690 	.word	0x24065690

0800dc88 <memset>:
 800dc88:	4402      	add	r2, r0
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d100      	bne.n	800dc92 <memset+0xa>
 800dc90:	4770      	bx	lr
 800dc92:	f803 1b01 	strb.w	r1, [r3], #1
 800dc96:	e7f9      	b.n	800dc8c <memset+0x4>

0800dc98 <_reclaim_reent>:
 800dc98:	4b29      	ldr	r3, [pc, #164]	@ (800dd40 <_reclaim_reent+0xa8>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4283      	cmp	r3, r0
 800dc9e:	b570      	push	{r4, r5, r6, lr}
 800dca0:	4604      	mov	r4, r0
 800dca2:	d04b      	beq.n	800dd3c <_reclaim_reent+0xa4>
 800dca4:	69c3      	ldr	r3, [r0, #28]
 800dca6:	b1ab      	cbz	r3, 800dcd4 <_reclaim_reent+0x3c>
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	b16b      	cbz	r3, 800dcc8 <_reclaim_reent+0x30>
 800dcac:	2500      	movs	r5, #0
 800dcae:	69e3      	ldr	r3, [r4, #28]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	5959      	ldr	r1, [r3, r5]
 800dcb4:	2900      	cmp	r1, #0
 800dcb6:	d13b      	bne.n	800dd30 <_reclaim_reent+0x98>
 800dcb8:	3504      	adds	r5, #4
 800dcba:	2d80      	cmp	r5, #128	@ 0x80
 800dcbc:	d1f7      	bne.n	800dcae <_reclaim_reent+0x16>
 800dcbe:	69e3      	ldr	r3, [r4, #28]
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	68d9      	ldr	r1, [r3, #12]
 800dcc4:	f000 f872 	bl	800ddac <_free_r>
 800dcc8:	69e3      	ldr	r3, [r4, #28]
 800dcca:	6819      	ldr	r1, [r3, #0]
 800dccc:	b111      	cbz	r1, 800dcd4 <_reclaim_reent+0x3c>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 f86c 	bl	800ddac <_free_r>
 800dcd4:	6961      	ldr	r1, [r4, #20]
 800dcd6:	b111      	cbz	r1, 800dcde <_reclaim_reent+0x46>
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f000 f867 	bl	800ddac <_free_r>
 800dcde:	69e1      	ldr	r1, [r4, #28]
 800dce0:	b111      	cbz	r1, 800dce8 <_reclaim_reent+0x50>
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 f862 	bl	800ddac <_free_r>
 800dce8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dcea:	b111      	cbz	r1, 800dcf2 <_reclaim_reent+0x5a>
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 f85d 	bl	800ddac <_free_r>
 800dcf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcf4:	b111      	cbz	r1, 800dcfc <_reclaim_reent+0x64>
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f000 f858 	bl	800ddac <_free_r>
 800dcfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dcfe:	b111      	cbz	r1, 800dd06 <_reclaim_reent+0x6e>
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 f853 	bl	800ddac <_free_r>
 800dd06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dd08:	b111      	cbz	r1, 800dd10 <_reclaim_reent+0x78>
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 f84e 	bl	800ddac <_free_r>
 800dd10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dd12:	b111      	cbz	r1, 800dd1a <_reclaim_reent+0x82>
 800dd14:	4620      	mov	r0, r4
 800dd16:	f000 f849 	bl	800ddac <_free_r>
 800dd1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd1c:	b111      	cbz	r1, 800dd24 <_reclaim_reent+0x8c>
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 f844 	bl	800ddac <_free_r>
 800dd24:	6a23      	ldr	r3, [r4, #32]
 800dd26:	b14b      	cbz	r3, 800dd3c <_reclaim_reent+0xa4>
 800dd28:	4620      	mov	r0, r4
 800dd2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd2e:	4718      	bx	r3
 800dd30:	680e      	ldr	r6, [r1, #0]
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 f83a 	bl	800ddac <_free_r>
 800dd38:	4631      	mov	r1, r6
 800dd3a:	e7bb      	b.n	800dcb4 <_reclaim_reent+0x1c>
 800dd3c:	bd70      	pop	{r4, r5, r6, pc}
 800dd3e:	bf00      	nop
 800dd40:	24000014 	.word	0x24000014

0800dd44 <__libc_init_array>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	4d0d      	ldr	r5, [pc, #52]	@ (800dd7c <__libc_init_array+0x38>)
 800dd48:	4c0d      	ldr	r4, [pc, #52]	@ (800dd80 <__libc_init_array+0x3c>)
 800dd4a:	1b64      	subs	r4, r4, r5
 800dd4c:	10a4      	asrs	r4, r4, #2
 800dd4e:	2600      	movs	r6, #0
 800dd50:	42a6      	cmp	r6, r4
 800dd52:	d109      	bne.n	800dd68 <__libc_init_array+0x24>
 800dd54:	4d0b      	ldr	r5, [pc, #44]	@ (800dd84 <__libc_init_array+0x40>)
 800dd56:	4c0c      	ldr	r4, [pc, #48]	@ (800dd88 <__libc_init_array+0x44>)
 800dd58:	f000 f87e 	bl	800de58 <_init>
 800dd5c:	1b64      	subs	r4, r4, r5
 800dd5e:	10a4      	asrs	r4, r4, #2
 800dd60:	2600      	movs	r6, #0
 800dd62:	42a6      	cmp	r6, r4
 800dd64:	d105      	bne.n	800dd72 <__libc_init_array+0x2e>
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
 800dd68:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd6c:	4798      	blx	r3
 800dd6e:	3601      	adds	r6, #1
 800dd70:	e7ee      	b.n	800dd50 <__libc_init_array+0xc>
 800dd72:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd76:	4798      	blx	r3
 800dd78:	3601      	adds	r6, #1
 800dd7a:	e7f2      	b.n	800dd62 <__libc_init_array+0x1e>
 800dd7c:	0800df50 	.word	0x0800df50
 800dd80:	0800df50 	.word	0x0800df50
 800dd84:	0800df50 	.word	0x0800df50
 800dd88:	0800df54 	.word	0x0800df54

0800dd8c <__retarget_lock_acquire_recursive>:
 800dd8c:	4770      	bx	lr

0800dd8e <__retarget_lock_release_recursive>:
 800dd8e:	4770      	bx	lr

0800dd90 <memcpy>:
 800dd90:	440a      	add	r2, r1
 800dd92:	4291      	cmp	r1, r2
 800dd94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd98:	d100      	bne.n	800dd9c <memcpy+0xc>
 800dd9a:	4770      	bx	lr
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dda6:	4291      	cmp	r1, r2
 800dda8:	d1f9      	bne.n	800dd9e <memcpy+0xe>
 800ddaa:	bd10      	pop	{r4, pc}

0800ddac <_free_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4605      	mov	r5, r0
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	d041      	beq.n	800de38 <_free_r+0x8c>
 800ddb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb8:	1f0c      	subs	r4, r1, #4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfb8      	it	lt
 800ddbe:	18e4      	addlt	r4, r4, r3
 800ddc0:	f000 f83e 	bl	800de40 <__malloc_lock>
 800ddc4:	4a1d      	ldr	r2, [pc, #116]	@ (800de3c <_free_r+0x90>)
 800ddc6:	6813      	ldr	r3, [r2, #0]
 800ddc8:	b933      	cbnz	r3, 800ddd8 <_free_r+0x2c>
 800ddca:	6063      	str	r3, [r4, #4]
 800ddcc:	6014      	str	r4, [r2, #0]
 800ddce:	4628      	mov	r0, r5
 800ddd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddd4:	f000 b83a 	b.w	800de4c <__malloc_unlock>
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d908      	bls.n	800ddee <_free_r+0x42>
 800dddc:	6820      	ldr	r0, [r4, #0]
 800ddde:	1821      	adds	r1, r4, r0
 800dde0:	428b      	cmp	r3, r1
 800dde2:	bf01      	itttt	eq
 800dde4:	6819      	ldreq	r1, [r3, #0]
 800dde6:	685b      	ldreq	r3, [r3, #4]
 800dde8:	1809      	addeq	r1, r1, r0
 800ddea:	6021      	streq	r1, [r4, #0]
 800ddec:	e7ed      	b.n	800ddca <_free_r+0x1e>
 800ddee:	461a      	mov	r2, r3
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	b10b      	cbz	r3, 800ddf8 <_free_r+0x4c>
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	d9fa      	bls.n	800ddee <_free_r+0x42>
 800ddf8:	6811      	ldr	r1, [r2, #0]
 800ddfa:	1850      	adds	r0, r2, r1
 800ddfc:	42a0      	cmp	r0, r4
 800ddfe:	d10b      	bne.n	800de18 <_free_r+0x6c>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	4401      	add	r1, r0
 800de04:	1850      	adds	r0, r2, r1
 800de06:	4283      	cmp	r3, r0
 800de08:	6011      	str	r1, [r2, #0]
 800de0a:	d1e0      	bne.n	800ddce <_free_r+0x22>
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	6053      	str	r3, [r2, #4]
 800de12:	4408      	add	r0, r1
 800de14:	6010      	str	r0, [r2, #0]
 800de16:	e7da      	b.n	800ddce <_free_r+0x22>
 800de18:	d902      	bls.n	800de20 <_free_r+0x74>
 800de1a:	230c      	movs	r3, #12
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	e7d6      	b.n	800ddce <_free_r+0x22>
 800de20:	6820      	ldr	r0, [r4, #0]
 800de22:	1821      	adds	r1, r4, r0
 800de24:	428b      	cmp	r3, r1
 800de26:	bf04      	itt	eq
 800de28:	6819      	ldreq	r1, [r3, #0]
 800de2a:	685b      	ldreq	r3, [r3, #4]
 800de2c:	6063      	str	r3, [r4, #4]
 800de2e:	bf04      	itt	eq
 800de30:	1809      	addeq	r1, r1, r0
 800de32:	6021      	streq	r1, [r4, #0]
 800de34:	6054      	str	r4, [r2, #4]
 800de36:	e7ca      	b.n	800ddce <_free_r+0x22>
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	240657e4 	.word	0x240657e4

0800de40 <__malloc_lock>:
 800de40:	4801      	ldr	r0, [pc, #4]	@ (800de48 <__malloc_lock+0x8>)
 800de42:	f7ff bfa3 	b.w	800dd8c <__retarget_lock_acquire_recursive>
 800de46:	bf00      	nop
 800de48:	240657e0 	.word	0x240657e0

0800de4c <__malloc_unlock>:
 800de4c:	4801      	ldr	r0, [pc, #4]	@ (800de54 <__malloc_unlock+0x8>)
 800de4e:	f7ff bf9e 	b.w	800dd8e <__retarget_lock_release_recursive>
 800de52:	bf00      	nop
 800de54:	240657e0 	.word	0x240657e0

0800de58 <_init>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	bf00      	nop
 800de5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5e:	bc08      	pop	{r3}
 800de60:	469e      	mov	lr, r3
 800de62:	4770      	bx	lr

0800de64 <_fini>:
 800de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de66:	bf00      	nop
 800de68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6a:	bc08      	pop	{r3}
 800de6c:	469e      	mov	lr, r3
 800de6e:	4770      	bx	lr
