
nucleo-H753ZI_Aula5_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a930  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acf8  0800acf8  0000bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ad04  0800ad04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ad08  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ad6c  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800adcc  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005210  24000124  0800ae2c  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005334  0800ae2c  0000c334  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa29  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537a  00000000  00000000  00036b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  0003bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000178d  00000000  00000000  0003dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb1d  00000000  00000000  0003f4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002666d  00000000  00000000  0007c00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177999  00000000  00000000  000a2677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021a010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000842c  00000000  00000000  0021a054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00222480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800abb8 	.word	0x0800abb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800abb8 	.word	0x0800abb8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f001 f90a 	bl	8001838 <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fcb9 	bl	8000fa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f00a f9d8 	bl	800a9e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fc91 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fc81 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fc70 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fc5f 	bl	80020a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8000808:	4812      	ldr	r0, [pc, #72]	@ (8000854 <MX_FREERTOS_Init+0x50>)
 800080a:	f006 ff84 	bl	8007716 <osMutexNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a11      	ldr	r2, [pc, #68]	@ (8000858 <MX_FREERTOS_Init+0x54>)
 8000812:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemPrintf */
  SemPrintfHandle = osSemaphoreNew(1, 0, &SemPrintf_attributes);
 8000814:	4a11      	ldr	r2, [pc, #68]	@ (800085c <MX_FREERTOS_Init+0x58>)
 8000816:	2100      	movs	r1, #0
 8000818:	2001      	movs	r0, #1
 800081a:	f007 f802 	bl	8007822 <osSemaphoreNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <MX_FREERTOS_Init+0x5c>)
 8000822:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(FncTask1, NULL, &Task1_attributes);
 8000824:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <MX_FREERTOS_Init+0x60>)
 8000826:	2100      	movs	r1, #0
 8000828:	480f      	ldr	r0, [pc, #60]	@ (8000868 <MX_FREERTOS_Init+0x64>)
 800082a:	f006 fdb9 	bl	80073a0 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <MX_FREERTOS_Init+0x68>)
 8000832:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(FncTask2, NULL, &Task2_attributes);
 8000834:	4a0e      	ldr	r2, [pc, #56]	@ (8000870 <MX_FREERTOS_Init+0x6c>)
 8000836:	2100      	movs	r1, #0
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MX_FREERTOS_Init+0x70>)
 800083a:	f006 fdb1 	bl	80073a0 <osThreadNew>
 800083e:	4603      	mov	r3, r0
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <MX_FREERTOS_Init+0x74>)
 8000842:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of FlagPrintf */
  FlagPrintfHandle = osEventFlagsNew(&FlagPrintf_attributes);
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <MX_FREERTOS_Init+0x78>)
 8000846:	f006 ff27 	bl	8007698 <osEventFlagsNew>
 800084a:	4603      	mov	r3, r0
 800084c:	4a0c      	ldr	r2, [pc, #48]	@ (8000880 <MX_FREERTOS_Init+0x7c>)
 800084e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	0800ac90 	.word	0x0800ac90
 8000858:	24000238 	.word	0x24000238
 800085c:	0800aca0 	.word	0x0800aca0
 8000860:	2400023c 	.word	0x2400023c
 8000864:	0800ac48 	.word	0x0800ac48
 8000868:	08000885 	.word	0x08000885
 800086c:	24000230 	.word	0x24000230
 8000870:	0800ac6c 	.word	0x0800ac6c
 8000874:	080008b1 	.word	0x080008b1
 8000878:	24000234 	.word	0x24000234
 800087c:	0800acb0 	.word	0x0800acb0
 8000880:	24000240 	.word	0x24000240

08000884 <FncTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FncTask1 */
void FncTask1(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FncTask1 */
  /* Infinite loop */
  osDelay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f006 fee8 	bl	8007662 <osDelay>

//	osEventFlagsSet(FlagPrintfHandle, 0x01);
//	osDelay(1000);
//	osEventFlagsSet(FlagPrintfHandle, 0x02);

	osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f006 fee4 	bl	8007662 <osDelay>
	osThreadFlagsSet(Task2Handle, 0x01);
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <FncTask1+0x28>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2101      	movs	r1, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fe0f 	bl	80074c4 <osThreadFlagsSet>
	osDelay(1000);
 80008a6:	bf00      	nop
 80008a8:	e7f3      	b.n	8000892 <FncTask1+0xe>
 80008aa:	bf00      	nop
 80008ac:	24000234 	.word	0x24000234

080008b0 <FncTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FncTask2 */
void FncTask2(void *argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

//	osEventFlagsWait(FlagPrintfHandle, 0x03, osFlagsWaitAll, osWaitForever);
//	printf_("A Task 2 recebeu a event flag.\n\r");
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008bc:	2100      	movs	r1, #0
 80008be:	2001      	movs	r0, #1
 80008c0:	f006 fe4e 	bl	8007560 <osThreadFlagsWait>
	printf_("A Task 2 adquiriu a thread flag.\n\r");
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <FncTask2+0x28>)
 80008c6:	f000 faaf 	bl	8000e28 <printf_>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008ca:	2102      	movs	r1, #2
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <FncTask2+0x2c>)
 80008ce:	f001 fdb0 	bl	8002432 <HAL_GPIO_TogglePin>
	osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80008d2:	bf00      	nop
 80008d4:	e7f0      	b.n	80008b8 <FncTask2+0x8>
 80008d6:	bf00      	nop
 80008d8:	0800ac04 	.word	0x0800ac04
 80008dc:	58021000 	.word	0x58021000

080008e0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	@ 0x30
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b62      	ldr	r3, [pc, #392]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	4a60      	ldr	r2, [pc, #384]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000906:	4b5e      	ldr	r3, [pc, #376]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000914:	4b5a      	ldr	r3, [pc, #360]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	4a59      	ldr	r2, [pc, #356]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000924:	4b56      	ldr	r3, [pc, #344]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b53      	ldr	r3, [pc, #332]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	4a51      	ldr	r2, [pc, #324]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000942:	4b4f      	ldr	r3, [pc, #316]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b4b      	ldr	r3, [pc, #300]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	4a4a      	ldr	r2, [pc, #296]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000960:	4b47      	ldr	r3, [pc, #284]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b44      	ldr	r3, [pc, #272]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	4a42      	ldr	r2, [pc, #264]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097e:	4b40      	ldr	r3, [pc, #256]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	4a3b      	ldr	r2, [pc, #236]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099c:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a33      	ldr	r2, [pc, #204]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009ce:	482d      	ldr	r0, [pc, #180]	@ (8000a84 <MX_GPIO_Init+0x1a4>)
 80009d0:	f001 fd16 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009da:	482b      	ldr	r0, [pc, #172]	@ (8000a88 <MX_GPIO_Init+0x1a8>)
 80009dc:	f001 fd10 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	4829      	ldr	r0, [pc, #164]	@ (8000a8c <MX_GPIO_Init+0x1ac>)
 80009e6:	f001 fd0b 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0x1b0>)
 8000a00:	f001 fb4e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a04:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <MX_GPIO_Init+0x1a4>)
 8000a1e:	f001 fb3f 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <MX_GPIO_Init+0x1a8>)
 8000a3c:	f001 fb30 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	@ (8000a94 <MX_GPIO_Init+0x1b4>)
 8000a56:	f001 fb23 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_GPIO_Init+0x1ac>)
 8000a72:	f001 fb15 	bl	80020a0 <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	@ 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58020c00 	.word	0x58020c00
 8000a8c:	58021000 	.word	0x58021000
 8000a90:	58020800 	.word	0x58020800
 8000a94:	58021800 	.word	0x58021800

08000a98 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	if (str) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00a      	beq.n	8000abe <printchar_+0x26>
		**str = (char)c;
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000abc:	e005      	b.n	8000aca <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000abe:	4639      	mov	r1, r7
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <printchar_+0x3c>)
 8000ac6:	f004 ffbb 	bl	8005a40 <HAL_UART_Transmit>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000290 	.word	0x24000290

08000ad8 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000ae8:	2400      	movs	r4, #0
 8000aea:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd17      	ble.n	8000b24 <prints_+0x4c>
		register int len = 0;
 8000af4:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000af6:	68be      	ldr	r6, [r7, #8]
 8000af8:	e001      	b.n	8000afe <prints_+0x26>
 8000afa:	3501      	adds	r5, #1
 8000afc:	3601      	adds	r6, #1
 8000afe:	7833      	ldrb	r3, [r6, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1fa      	bne.n	8000afa <prints_+0x22>
		if (len >= width) width = 0;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	429d      	cmp	r5, r3
 8000b08:	db02      	blt.n	8000b10 <prints_+0x38>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e002      	b.n	8000b16 <prints_+0x3e>
		else width -= len;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1b5b      	subs	r3, r3, r5
 8000b14:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <prints_+0x4c>
 8000b20:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d116      	bne.n	8000b5c <prints_+0x84>
		for ( ; width > 0; --width) {
 8000b2e:	e007      	b.n	8000b40 <prints_+0x68>
			printchar_(out, padchar);
 8000b30:	4641      	mov	r1, r8
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff ffb0 	bl	8000a98 <printchar_>
			++pc;
 8000b38:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dcf4      	bgt.n	8000b30 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000b46:	e009      	b.n	8000b5c <prints_+0x84>
		printchar_(out, *string);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff ffa2 	bl	8000a98 <printchar_>
		++pc;
 8000b54:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1f1      	bne.n	8000b48 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000b64:	e007      	b.n	8000b76 <prints_+0x9e>
		printchar_(out, padchar);
 8000b66:	4641      	mov	r1, r8
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff ff95 	bl	8000a98 <printchar_>
		++pc;
 8000b6e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dcf4      	bgt.n	8000b66 <prints_+0x8e>
	}

	return pc;
 8000b7c:	4623      	mov	r3, r4
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b88 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	b089      	sub	sp, #36	@ 0x24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000b98:	f04f 0900 	mov.w	r9, #0
 8000b9c:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000b9e:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <printi_+0x38>
		print_buf[0] = '0';
 8000ba6:	2330      	movs	r3, #48	@ 0x30
 8000ba8:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000baa:	2300      	movs	r3, #0
 8000bac:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000bae:	f107 0114 	add.w	r1, r7, #20
 8000bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <prints_>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	e04a      	b.n	8000c56 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <printi_+0x54>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d107      	bne.n	8000bdc <printi_+0x54>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da04      	bge.n	8000bdc <printi_+0x54>
		neg = 1;
 8000bd2:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	425b      	negs	r3, r3
 8000bda:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000bdc:	f107 0414 	add.w	r4, r7, #20
 8000be0:	340b      	adds	r4, #11
	*s = '\0';
 8000be2:	2300      	movs	r3, #0
 8000be4:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000be6:	e015      	b.n	8000c14 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	fbb5 f2f3 	udiv	r2, r5, r3
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	1aeb      	subs	r3, r5, r3
 8000bf4:	4698      	mov	r8, r3
		if( t >= 10 )
 8000bf6:	f1b8 0f09 	cmp.w	r8, #9
 8000bfa:	dd02      	ble.n	8000c02 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bfe:	3b3a      	subs	r3, #58	@ 0x3a
 8000c00:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000c02:	fa5f f388 	uxtb.w	r3, r8
 8000c06:	3c01      	subs	r4, #1
 8000c08:	3330      	adds	r3, #48	@ 0x30
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1e7      	bne.n	8000be8 <printi_+0x60>
	}

	if (neg) {
 8000c18:	f1b9 0f00 	cmp.w	r9, #0
 8000c1c:	d013      	beq.n	8000c46 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00d      	beq.n	8000c40 <printi_+0xb8>
 8000c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <printi_+0xb8>
			printchar_(out, '-');
 8000c2e:	212d      	movs	r1, #45	@ 0x2d
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff ff31 	bl	8000a98 <printchar_>
			++pc;
 8000c36:	3601      	adds	r6, #1
			--width;
 8000c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c3e:	e002      	b.n	8000c46 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000c40:	3c01      	subs	r4, #1
 8000c42:	232d      	movs	r3, #45	@ 0x2d
 8000c44:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff ff43 	bl	8000ad8 <prints_>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4433      	add	r3, r6
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c60 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c64:	b08a      	sub	sp, #40	@ 0x28
 8000c66:	af04      	add	r7, sp, #16
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000c6e:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000c70:	e0c4      	b.n	8000dfc <print_+0x19c>
		if (*format == '%') {
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b25      	cmp	r3, #37	@ 0x25
 8000c78:	f040 80b3 	bne.w	8000de2 <print_+0x182>
			++format;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000c82:	2600      	movs	r6, #0
 8000c84:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80bc 	beq.w	8000e08 <print_+0x1a8>
			if (*format == '%') goto out;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b25      	cmp	r3, #37	@ 0x25
 8000c96:	f000 80a6 	beq.w	8000de6 <print_+0x186>
			if (*format == '-') {
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000ca0:	d109      	bne.n	8000cb6 <print_+0x56>
				++format;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000ca8:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000caa:	e004      	b.n	8000cb6 <print_+0x56>
				++format;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000cb2:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b30      	cmp	r3, #48	@ 0x30
 8000cbc:	d0f6      	beq.n	8000cac <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000cbe:	e00b      	b.n	8000cd8 <print_+0x78>
				width *= 10;
 8000cc0:	462b      	mov	r3, r5
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	442b      	add	r3, r5
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	461d      	mov	r5, r3
				width += *format - '0';
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3b30      	subs	r3, #48	@ 0x30
 8000cd0:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cde:	d903      	bls.n	8000ce8 <print_+0x88>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b39      	cmp	r3, #57	@ 0x39
 8000ce6:	d9eb      	bls.n	8000cc0 <print_+0x60>
			}
			if( *format == 's' ) {
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b73      	cmp	r3, #115	@ 0x73
 8000cee:	d112      	bne.n	8000d16 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1d1a      	adds	r2, r3, #4
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000cfa:	f1b8 0f00 	cmp.w	r8, #0
 8000cfe:	d001      	beq.n	8000d04 <print_+0xa4>
 8000d00:	4641      	mov	r1, r8
 8000d02:	e000      	b.n	8000d06 <print_+0xa6>
 8000d04:	4947      	ldr	r1, [pc, #284]	@ (8000e24 <print_+0x1c4>)
 8000d06:	4633      	mov	r3, r6
 8000d08:	462a      	mov	r2, r5
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff fee4 	bl	8000ad8 <prints_>
 8000d10:	4603      	mov	r3, r0
 8000d12:	441c      	add	r4, r3
				continue;
 8000d14:	e06f      	b.n	8000df6 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b64      	cmp	r3, #100	@ 0x64
 8000d1c:	d10f      	bne.n	8000d3e <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	1d1a      	adds	r2, r3, #4
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	2361      	movs	r3, #97	@ 0x61
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	9601      	str	r6, [sp, #4]
 8000d2c:	9500      	str	r5, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	220a      	movs	r2, #10
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff ff28 	bl	8000b88 <printi_>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	441c      	add	r4, r3
				continue;
 8000d3c:	e05b      	b.n	8000df6 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b78      	cmp	r3, #120	@ 0x78
 8000d44:	d10f      	bne.n	8000d66 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	1d1a      	adds	r2, r3, #4
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	6819      	ldr	r1, [r3, #0]
 8000d4e:	2361      	movs	r3, #97	@ 0x61
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	9601      	str	r6, [sp, #4]
 8000d54:	9500      	str	r5, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2210      	movs	r2, #16
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f7ff ff14 	bl	8000b88 <printi_>
 8000d60:	4603      	mov	r3, r0
 8000d62:	441c      	add	r4, r3
				continue;
 8000d64:	e047      	b.n	8000df6 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b58      	cmp	r3, #88	@ 0x58
 8000d6c:	d10f      	bne.n	8000d8e <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1d1a      	adds	r2, r3, #4
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	2341      	movs	r3, #65	@ 0x41
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	9601      	str	r6, [sp, #4]
 8000d7c:	9500      	str	r5, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2210      	movs	r2, #16
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff ff00 	bl	8000b88 <printi_>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	441c      	add	r4, r3
				continue;
 8000d8c:	e033      	b.n	8000df6 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b75      	cmp	r3, #117	@ 0x75
 8000d94:	d10f      	bne.n	8000db6 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1d1a      	adds	r2, r3, #4
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	2361      	movs	r3, #97	@ 0x61
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	9601      	str	r6, [sp, #4]
 8000da4:	9500      	str	r5, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	220a      	movs	r2, #10
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff feec 	bl	8000b88 <printi_>
 8000db0:	4603      	mov	r3, r0
 8000db2:	441c      	add	r4, r3
				continue;
 8000db4:	e01f      	b.n	8000df6 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b63      	cmp	r3, #99	@ 0x63
 8000dbc:	d11b      	bne.n	8000df6 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000dca:	2300      	movs	r3, #0
 8000dcc:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000dce:	f107 0114 	add.w	r1, r7, #20
 8000dd2:	4633      	mov	r3, r6
 8000dd4:	462a      	mov	r2, r5
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fe7e 	bl	8000ad8 <prints_>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	441c      	add	r4, r3
				continue;
 8000de0:	e009      	b.n	8000df6 <print_+0x196>
			}
		}
		else {
		out:
 8000de2:	bf00      	nop
 8000de4:	e000      	b.n	8000de8 <print_+0x188>
			if (*format == '%') goto out;
 8000de6:	bf00      	nop
			printchar_(out, *format);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff fe52 	bl	8000a98 <printchar_>
			++pc;
 8000df4:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f af36 	bne.w	8000c72 <print_+0x12>
 8000e06:	e000      	b.n	8000e0a <print_+0x1aa>
			if (*format == '\0') break;
 8000e08:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <print_+0x1b8>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000e18:	4623      	mov	r3, r4
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e24:	0800ac28 	.word	0x0800ac28

08000e28 <printf_>:

int printf_(const char *format, ...)
{
 8000e28:	b40f      	push	{r0, r1, r2, r3}
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6939      	ldr	r1, [r7, #16]
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff ff10 	bl	8000c60 <print_>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fb70 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f810 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f7ff fd40 	bl	80008e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e60:	f7ff fbb6 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e64:	f000 f9da 	bl	800121c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e68:	f000 fa8e 	bl	8001388 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e6c:	f006 fa4e 	bl	800730c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e70:	f7ff fcc8 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e74:	f006 fa6e 	bl	8007354 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <main+0x28>

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	@ 0x70
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	224c      	movs	r2, #76	@ 0x4c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fdac 	bl	800a9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2220      	movs	r2, #32
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 fda6 	bl	800a9e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f001 fc13 	bl	80026c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <SystemClock_Config+0xf8>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eaa:	4a32      	ldr	r2, [pc, #200]	@ (8000f74 <SystemClock_Config+0xf8>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000eb2:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <SystemClock_Config+0xf8>)
 8000eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <SystemClock_Config+0xfc>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <SystemClock_Config+0xfc>)
 8000ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <SystemClock_Config+0xfc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ed8:	bf00      	nop
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <SystemClock_Config+0xfc>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ee6:	d1f8      	bne.n	8000eda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f06:	2318      	movs	r3, #24
 8000f08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f16:	230c      	movs	r3, #12
 8000f18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fc18 	bl	800275c <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f32:	f000 f835 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	233f      	movs	r3, #63	@ 0x3f
 8000f38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 f858 	bl	8003010 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f66:	f000 f81b 	bl	8000fa0 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3770      	adds	r7, #112	@ 0x70
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	58000400 	.word	0x58000400
 8000f78:	58024800 	.word	0x58024800

08000f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f8e:	f000 fb0f 	bl	80015b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <HAL_MspInit+0x38>)
 8000fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x38>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x38>)
 8000fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f06f 0001 	mvn.w	r0, #1
 8000fd8:	f000 fc06 	bl	80017e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	@ 0x40
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d827      	bhi.n	8001046 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	2036      	movs	r0, #54	@ 0x36
 8000ffc:	f000 fbf4 	bl	80017e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001000:	2036      	movs	r0, #54	@ 0x36
 8001002:	f000 fc0b 	bl	800181c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001006:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <HAL_InitTick+0xc4>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800100c:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <HAL_InitTick+0xc8>)
 800100e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001012:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <HAL_InitTick+0xc8>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <HAL_InitTick+0xc8>)
 800101e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102a:	f107 0210 	add.w	r2, r7, #16
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fb77 	bl	8003728 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800103a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800103e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001040:	2b00      	cmp	r3, #0
 8001042:	d106      	bne.n	8001052 <HAL_InitTick+0x6a>
 8001044:	e001      	b.n	800104a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e02b      	b.n	80010a2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800104a:	f002 fb41 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800104e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001050:	e004      	b.n	800105c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001052:	f002 fb3d 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8001056:	4603      	mov	r3, r0
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800105c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800105e:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <HAL_InitTick+0xcc>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0c9b      	lsrs	r3, r3, #18
 8001066:	3b01      	subs	r3, #1
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_InitTick+0xd0>)
 800106c:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <HAL_InitTick+0xd4>)
 800106e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_InitTick+0xd0>)
 8001072:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001076:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001078:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_InitTick+0xd0>)
 800107a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_InitTick+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_InitTick+0xd0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <HAL_InitTick+0xd0>)
 800108c:	f004 f9ba 	bl	8005404 <HAL_TIM_Base_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d104      	bne.n	80010a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <HAL_InitTick+0xd0>)
 8001098:	f004 fa16 	bl	80054c8 <HAL_TIM_Base_Start_IT>
 800109c:	4603      	mov	r3, r0
 800109e:	e000      	b.n	80010a2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3740      	adds	r7, #64	@ 0x40
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000008 	.word	0x24000008
 80010b0:	58024400 	.word	0x58024400
 80010b4:	431bde83 	.word	0x431bde83
 80010b8:	24000244 	.word	0x24000244
 80010bc:	40001000 	.word	0x40001000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <NMI_Handler+0x4>

080010c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <MemManage_Handler+0x4>

080010d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <TIM6_DAC_IRQHandler+0x10>)
 80010fe:	f004 fa5b 	bl	80055b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24000244 	.word	0x24000244

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001110:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <SystemInit+0xe4>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a36      	ldr	r2, [pc, #216]	@ (80011f0 <SystemInit+0xe4>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <SystemInit+0xe8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	2b06      	cmp	r3, #6
 800112a:	d807      	bhi.n	800113c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112c:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <SystemInit+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <SystemInit+0xe8>)
 8001136:	f043 0307 	orr.w	r3, r3, #7
 800113a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800113c:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <SystemInit+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <SystemInit+0xec>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <SystemInit+0xec>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4929      	ldr	r1, [pc, #164]	@ (80011f8 <SystemInit+0xec>)
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <SystemInit+0xf0>)
 8001156:	4013      	ands	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <SystemInit+0xe8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <SystemInit+0xe8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 030f 	bic.w	r3, r3, #15
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <SystemInit+0xe8>)
 8001170:	f043 0307 	orr.w	r3, r3, #7
 8001174:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <SystemInit+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <SystemInit+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <SystemInit+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <SystemInit+0xec>)
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <SystemInit+0xf4>)
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800118e:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <SystemInit+0xec>)
 8001190:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <SystemInit+0xf8>)
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <SystemInit+0xec>)
 8001196:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <SystemInit+0xfc>)
 8001198:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <SystemInit+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <SystemInit+0xec>)
 80011a2:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <SystemInit+0xfc>)
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <SystemInit+0xec>)
 80011ae:	4a16      	ldr	r2, [pc, #88]	@ (8001208 <SystemInit+0xfc>)
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <SystemInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <SystemInit+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <SystemInit+0xec>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <SystemInit+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <SystemInit+0x100>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <SystemInit+0x104>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011d6:	d202      	bcs.n	80011de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <SystemInit+0x108>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <SystemInit+0x10c>)
 80011e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	5c001000 	.word	0x5c001000
 8001210:	ffff0000 	.word	0xffff0000
 8001214:	51008108 	.word	0x51008108
 8001218:	52004000 	.word	0x52004000

0800121c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <MX_USART3_UART_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001266:	f004 fb9b 	bl	80059a0 <HAL_UART_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f7ff fe96 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001278:	f005 fc31 	bl	8006ade <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f7ff fe8d 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4808      	ldr	r0, [pc, #32]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800128a:	f005 fc66 	bl	8006b5a <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f7ff fe84 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800129a:	f005 fbe7 	bl	8006a6c <HAL_UARTEx_DisableFifoMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f7ff fe7c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000290 	.word	0x24000290
 80012b0:	40004800 	.word	0x40004800

080012b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ba      	sub	sp, #232	@ 0xe8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	22c0      	movs	r2, #192	@ 0xc0
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f009 fb87 	bl	800a9e8 <memset>
  if(uartHandle->Instance==USART3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a27      	ldr	r2, [pc, #156]	@ (800137c <HAL_UART_MspInit+0xc8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d146      	bne.n	8001372 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e4:	f04f 0202 	mov.w	r2, #2
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fa56 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001306:	f7ff fe4b 	bl	8000fa0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 800130c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 8001312:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001316:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 800131c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_UART_MspInit+0xcc>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800134a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001360:	2307      	movs	r3, #7
 8001362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001366:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_UART_MspInit+0xd0>)
 800136e:	f000 fe97 	bl	80020a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	37e8      	adds	r7, #232	@ 0xe8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40004800 	.word	0x40004800
 8001380:	58024400 	.word	0x58024400
 8001384:	58020c00 	.word	0x58020c00

08001388 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138e:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001390:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001394:	2209      	movs	r2, #9
 8001396:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139a:	2202      	movs	r2, #2
 800139c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013d0:	f001 f849 	bl	8002466 <HAL_PCD_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013da:	f7ff fde1 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000324 	.word	0x24000324
 80013e8:	40080000 	.word	0x40080000

080013ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ba      	sub	sp, #232	@ 0xe8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22c0      	movs	r2, #192	@ 0xc0
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f009 faeb 	bl	800a9e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a30      	ldr	r2, [pc, #192]	@ (80014d8 <HAL_PCD_MspInit+0xec>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d159      	bne.n	80014d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800141c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001428:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f002 f9b9 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001440:	f7ff fdae 	bl	8000fa0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001444:	f001 f97a 	bl	800273c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001466:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800146a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001480:	230a      	movs	r3, #10
 8001482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800148a:	4619      	mov	r1, r3
 800148c:	4814      	ldr	r0, [pc, #80]	@ (80014e0 <HAL_PCD_MspInit+0xf4>)
 800148e:	f000 fe07 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <HAL_PCD_MspInit+0xf4>)
 80014ae:	f000 fdf7 	bl	80020a0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 80014b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b8:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 80014ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_PCD_MspInit+0xf0>)
 80014c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	37e8      	adds	r7, #232	@ 0xe8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40080000 	.word	0x40080000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020000 	.word	0x58020000

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800151c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e8:	f7ff fe10 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	@ (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f009 fac7 	bl	800aaa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fc9b 	bl	8000e50 <main>
  bx  lr
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001520:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001524:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001528:	0800ad08 	.word	0x0800ad08
  ldr r2, =_sbss
 800152c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001530:	24005334 	.word	0x24005334

08001534 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC3_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f947 	bl	80017d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001544:	f001 ff1a 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	4913      	ldr	r1, [pc, #76]	@ (80015a4 <HAL_Init+0x6c>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_Init+0x68>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <HAL_Init+0x6c>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_Init+0x70>)
 800157a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800157c:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <HAL_Init+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fd30 	bl	8000fe8 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e002      	b.n	8001598 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001592:	f7ff fd0b 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	58024400 	.word	0x58024400
 80015a4:	0800acc0 	.word	0x0800acc0
 80015a8:	24000004 	.word	0x24000004
 80015ac:	24000000 	.word	0x24000000

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2400000c 	.word	0x2400000c
 80015d4:	24000808 	.word	0x24000808

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	24000808 	.word	0x24000808

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffde 	bl	80015d8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400000c 	.word	0x2400000c

08001638 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetREVID+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0c1b      	lsrs	r3, r3, #16
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	5c001000 	.word	0x5c001000

08001650 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001660:	4904      	ldr	r1, [pc, #16]	@ (8001674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	58000400 	.word	0x58000400

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	05fa0000 	.word	0x05fa0000

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	@ (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff4c 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f6:	f7ff ff63 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 80017fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	6978      	ldr	r0, [r7, #20]
 8001802:	f7ff ffb3 	bl	800176c <NVIC_EncodePriority>
 8001806:	4602      	mov	r2, r0
 8001808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff82 	bl	8001718 <__NVIC_SetPriority>
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff56 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0e3      	b.n	8001a12 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2223      	movs	r2, #35	@ 0x23
 8001858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe ff03 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b6e      	ldr	r3, [pc, #440]	@ (8001a1c <HAL_ETH_Init+0x1e4>)
 8001864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001868:	4a6c      	ldr	r2, [pc, #432]	@ (8001a1c <HAL_ETH_Init+0x1e4>)
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001872:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_ETH_Init+0x1e4>)
 8001874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7a1b      	ldrb	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fee1 	bl	8001650 <HAL_SYSCFG_ETHInterfaceSelect>
 800188e:	e003      	b.n	8001898 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001890:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001894:	f7ff fedc 	bl	8001650 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001898:	4b61      	ldr	r3, [pc, #388]	@ (8001a20 <HAL_ETH_Init+0x1e8>)
 800189a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff fe90 	bl	80015d8 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018ba:	e011      	b.n	80018e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018bc:	f7ff fe8c 	bl	80015d8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ca:	d909      	bls.n	80018e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2204      	movs	r2, #4
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	22e0      	movs	r2, #224	@ 0xe0
 80018d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e098      	b.n	8001a12 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e4      	bne.n	80018bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f89e 	bl	8001a34 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018f8:	f001 feba 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4a49      	ldr	r2, [pc, #292]	@ (8001a24 <HAL_ETH_Init+0x1ec>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9a      	lsrs	r2, r3, #18
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3a01      	subs	r2, #1
 800190c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fa81 	bl	8001e18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001922:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800192e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001932:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	22e0      	movs	r2, #224	@ 0xe0
 800194e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e05d      	b.n	8001a12 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_ETH_Init+0x1f0>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6952      	ldr	r2, [r2, #20]
 800196a:	0051      	lsls	r1, r2, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001976:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fae9 	bl	8001f52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fb2f 	bl	8001fe4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	3305      	adds	r3, #5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	021a      	lsls	r2, r3, #8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	3303      	adds	r3, #3
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	061a      	lsls	r2, r3, #24
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	3302      	adds	r3, #2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019d4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_ETH_Init+0x1f4>)
 80019e6:	430b      	orrs	r3, r1
 80019e8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_ETH_Init+0x1f8>)
 80019fa:	430b      	orrs	r3, r1
 80019fc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	58000400 	.word	0x58000400
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	ffff8001 	.word	0xffff8001
 8001a2c:	0c020060 	.word	0x0c020060
 8001a30:	0c20c000 	.word	0x0c20c000

08001a34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a4e:	f001 fe0f 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8001a52:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d804      	bhi.n	8001a66 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e022      	b.n	8001aac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d204      	bcs.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e019      	b.n	8001aac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d915      	bls.n	8001aac <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d804      	bhi.n	8001a92 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e00c      	b.n	8001aac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d804      	bhi.n	8001aa4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e003      	b.n	8001aac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	02160ebf 	.word	0x02160ebf
 8001ac4:	03938700 	.word	0x03938700
 8001ac8:	05f5e0ff 	.word	0x05f5e0ff
 8001acc:	08f0d17f 	.word	0x08f0d17f
 8001ad0:	0ee6b27f 	.word	0x0ee6b27f

08001ad4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b1b      	ldrb	r3, [r3, #12]
 8001af4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b5b      	ldrb	r3, [r3, #13]
 8001afc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7b9b      	ldrb	r3, [r3, #14]
 8001b04:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	7bdb      	ldrb	r3, [r3, #15]
 8001b0c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	7c12      	ldrb	r2, [r2, #16]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d102      	bne.n	8001b1e <ETH_SetMACConfig+0x4a>
 8001b18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1c:	e000      	b.n	8001b20 <ETH_SetMACConfig+0x4c>
 8001b1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	7c52      	ldrb	r2, [r2, #17]
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d102      	bne.n	8001b30 <ETH_SetMACConfig+0x5c>
 8001b2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b2e:	e000      	b.n	8001b32 <ETH_SetMACConfig+0x5e>
 8001b30:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	7c9b      	ldrb	r3, [r3, #18]
 8001b38:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b3a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b40:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7f1b      	ldrb	r3, [r3, #28]
 8001b4c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7f5b      	ldrb	r3, [r3, #29]
 8001b54:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	7f92      	ldrb	r2, [r2, #30]
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d102      	bne.n	8001b66 <ETH_SetMACConfig+0x92>
 8001b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b64:	e000      	b.n	8001b68 <ETH_SetMACConfig+0x94>
 8001b66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7fdb      	ldrb	r3, [r3, #31]
 8001b6e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d102      	bne.n	8001b82 <ETH_SetMACConfig+0xae>
 8001b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b80:	e000      	b.n	8001b84 <ETH_SetMACConfig+0xb0>
 8001b82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b84:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b92:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b94:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b56      	ldr	r3, [pc, #344]	@ (8001d00 <ETH_SetMACConfig+0x22c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bbe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bc8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bd2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d102      	bne.n	8001be6 <ETH_SetMACConfig+0x112>
 8001be0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0x114>
 8001be6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001be8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4b42      	ldr	r3, [pc, #264]	@ (8001d04 <ETH_SetMACConfig+0x230>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c0c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <ETH_SetMACConfig+0x234>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c30:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d101      	bne.n	8001c46 <ETH_SetMACConfig+0x172>
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0x174>
 8001c46:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c48:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c5a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c70:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c78:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c86:	f023 0103 	bic.w	r1, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c9e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d101      	bne.n	8001cc2 <ETH_SetMACConfig+0x1ee>
 8001cbe:	2240      	movs	r2, #64	@ 0x40
 8001cc0:	e000      	b.n	8001cc4 <ETH_SetMACConfig+0x1f0>
 8001cc2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ccc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001cd6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ce4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	00048083 	.word	0x00048083
 8001d04:	c0f88000 	.word	0xc0f88000
 8001d08:	fffffef0 	.word	0xfffffef0

08001d0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <ETH_SetDMAConfig+0xf8>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	6811      	ldr	r1, [r2, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	791b      	ldrb	r3, [r3, #4]
 8001d38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7b1b      	ldrb	r3, [r3, #12]
 8001d44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <ETH_SetDMAConfig+0xfc>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7b5b      	ldrb	r3, [r3, #13]
 8001d6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d80:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <ETH_SetDMAConfig+0x100>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d90:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	7d1b      	ldrb	r3, [r3, #20]
 8001d9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	7f5b      	ldrb	r3, [r3, #29]
 8001da4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <ETH_SetDMAConfig+0x104>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7f1b      	ldrb	r3, [r3, #28]
 8001dce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <ETH_SetDMAConfig+0x108>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	430b      	orrs	r3, r1
 8001df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001df4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	ffff87fd 	.word	0xffff87fd
 8001e08:	ffff2ffe 	.word	0xffff2ffe
 8001e0c:	fffec000 	.word	0xfffec000
 8001e10:	ffc0efef 	.word	0xffc0efef
 8001e14:	7fc0ffff 	.word	0x7fc0ffff

08001e18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0a4      	sub	sp, #144	@ 0x90
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e26:	2300      	movs	r3, #0
 8001e28:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e58:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e70:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e74:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e92:	2300      	movs	r3, #0
 8001e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ec2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ecc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fde6 	bl	8001ad4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f22:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f38:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fee1 	bl	8001d0c <ETH_SetDMAConfig>
}
 8001f4a:	bf00      	nop
 8001f4c:	3790      	adds	r7, #144	@ 0x90
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e01d      	b.n	8001f9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68d9      	ldr	r1, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	3206      	adds	r2, #6
 8001f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d9de      	bls.n	8001f60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e023      	b.n	800203a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6919      	ldr	r1, [r3, #16]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	3212      	adds	r2, #18
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d9d8      	bls.n	8001ff2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002066:	461a      	mov	r2, r3
 8002068:	2303      	movs	r3, #3
 800206a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ae:	4b89      	ldr	r3, [pc, #548]	@ (80022d4 <HAL_GPIO_Init+0x234>)
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020b2:	e194      	b.n	80023de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8186 	beq.w	80023d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d005      	beq.n	80020e4 <HAL_GPIO_Init+0x44>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	69b9      	ldr	r1, [r7, #24]
 80021d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0203 	and.w	r2, r3, #3
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80e0 	beq.w	80023d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <HAL_GPIO_Init+0x238>)
 800221a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221e:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <HAL_GPIO_Init+0x238>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002228:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <HAL_GPIO_Init+0x238>)
 800222a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <HAL_GPIO_Init+0x23c>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <HAL_GPIO_Init+0x240>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d052      	beq.n	8002308 <HAL_GPIO_Init+0x268>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1f      	ldr	r2, [pc, #124]	@ (80022e4 <HAL_GPIO_Init+0x244>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d031      	beq.n	80022ce <HAL_GPIO_Init+0x22e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_GPIO_Init+0x248>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d02b      	beq.n	80022ca <HAL_GPIO_Init+0x22a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_GPIO_Init+0x24c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d025      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_GPIO_Init+0x250>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01f      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_GPIO_Init+0x254>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d019      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <HAL_GPIO_Init+0x258>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0x21a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_GPIO_Init+0x25c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x216>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_GPIO_Init+0x260>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x212>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_GPIO_Init+0x264>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x20e>
 80022aa:	2309      	movs	r3, #9
 80022ac:	e02d      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022ae:	230a      	movs	r3, #10
 80022b0:	e02b      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022b2:	2308      	movs	r3, #8
 80022b4:	e029      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e027      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e025      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022be:	2305      	movs	r3, #5
 80022c0:	e023      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e021      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e01f      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e01d      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01b      	b.n	800230a <HAL_GPIO_Init+0x26a>
 80022d2:	bf00      	nop
 80022d4:	58000080 	.word	0x58000080
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58000400 	.word	0x58000400
 80022e0:	58020000 	.word	0x58020000
 80022e4:	58020400 	.word	0x58020400
 80022e8:	58020800 	.word	0x58020800
 80022ec:	58020c00 	.word	0x58020c00
 80022f0:	58021000 	.word	0x58021000
 80022f4:	58021400 	.word	0x58021400
 80022f8:	58021800 	.word	0x58021800
 80022fc:	58021c00 	.word	0x58021c00
 8002300:	58022000 	.word	0x58022000
 8002304:	58022400 	.word	0x58022400
 8002308:	2300      	movs	r3, #0
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	f002 0203 	and.w	r2, r2, #3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4093      	lsls	r3, r2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231a:	4938      	ldr	r1, [pc, #224]	@ (80023fc <HAL_GPIO_Init+0x35c>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800234e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800237c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	3301      	adds	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f ae63 	bne.w	80020b4 <HAL_GPIO_Init+0x14>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	3724      	adds	r7, #36	@ 0x24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	58000400 	.word	0x58000400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	041a      	lsls	r2, r3, #16
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43d9      	mvns	r1, r3
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	400b      	ands	r3, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	619a      	str	r2, [r3, #24]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af02      	add	r7, sp, #8
 800246c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0fe      	b.n	8002676 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe ffad 	bl	80013ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fc5a 	bl	8006d58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7c1a      	ldrb	r2, [r3, #16]
 80024ac:	f88d 2000 	strb.w	r2, [sp]
 80024b0:	3304      	adds	r3, #4
 80024b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b4:	f004 fbde 	bl	8006c74 <USB_CoreInit>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0d5      	b.n	8002676 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fc52 	bl	8006d7a <USB_SetCurrentMode>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0c6      	b.n	8002676 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e04a      	b.n	8002584 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3315      	adds	r3, #21
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3314      	adds	r3, #20
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	b298      	uxth	r0, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	332e      	adds	r3, #46	@ 0x2e
 800252a:	4602      	mov	r2, r0
 800252c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3318      	adds	r3, #24
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	331c      	adds	r3, #28
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3320      	adds	r3, #32
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3324      	adds	r3, #36	@ 0x24
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	3301      	adds	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3af      	bcc.n	80024ee <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e044      	b.n	800261e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	3301      	adds	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	791b      	ldrb	r3, [r3, #4]
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	429a      	cmp	r2, r3
 8002626:	d3b5      	bcc.n	8002594 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7c1a      	ldrb	r2, [r3, #16]
 8002630:	f88d 2000 	strb.w	r2, [sp]
 8002634:	3304      	adds	r3, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	f004 fbec 	bl	8006e14 <USB_DevInit>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e013      	b.n	8002676 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7b1b      	ldrb	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f80b 	bl	8002680 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f004 fda7 	bl	80071c2 <USB_DevDisconnect>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	10000003 	.word	0x10000003

080026c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_PWREx_ConfigSupply+0x70>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00a      	beq.n	80026f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_PWREx_ConfigSupply+0x70>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01f      	b.n	800272e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e01d      	b.n	800272e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_PWREx_ConfigSupply+0x70>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	490f      	ldr	r1, [pc, #60]	@ (8002738 <HAL_PWREx_ConfigSupply+0x70>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002702:	f7fe ff69 	bl	80015d8 <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002708:	e009      	b.n	800271e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800270a:	f7fe ff65 	bl	80015d8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002718:	d901      	bls.n	800271e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e007      	b.n	800272e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_PWREx_ConfigSupply+0x70>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272a:	d1ee      	bne.n	800270a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58024800 	.word	0x58024800

0800273c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	58024800 	.word	0x58024800

0800275c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	@ 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f000 bc48 	b.w	8003000 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8088 	beq.w	800288e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b99      	ldr	r3, [pc, #612]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002788:	4b96      	ldr	r3, [pc, #600]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	2b10      	cmp	r3, #16
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_OscConfig+0x48>
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	2b18      	cmp	r3, #24
 8002798:	d111      	bne.n	80027be <HAL_RCC_OscConfig+0x62>
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d06d      	beq.n	800288c <HAL_RCC_OscConfig+0x130>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d169      	bne.n	800288c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f000 bc21 	b.w	8003000 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x7a>
 80027c8:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a85      	ldr	r2, [pc, #532]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e02e      	b.n	8002834 <HAL_RCC_OscConfig+0xd8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x9c>
 80027de:	4b81      	ldr	r3, [pc, #516]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a80      	ldr	r2, [pc, #512]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b7e      	ldr	r3, [pc, #504]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a7d      	ldr	r2, [pc, #500]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80027f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xd8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0xc0>
 8002802:	4b78      	ldr	r3, [pc, #480]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a77      	ldr	r2, [pc, #476]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a74      	ldr	r2, [pc, #464]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xd8>
 800281c:	4b71      	ldr	r3, [pc, #452]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a70      	ldr	r2, [pc, #448]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a6d      	ldr	r2, [pc, #436]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fecc 	bl	80015d8 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fec8 	bl	80015d8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e3d4      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002856:	4b63      	ldr	r3, [pc, #396]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe feb8 	bl	80015d8 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe feb4 	bl	80015d8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e3c0      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800287e:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x110>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80ca 	beq.w	8002a30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289c:	4b51      	ldr	r3, [pc, #324]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a6:	4b4f      	ldr	r3, [pc, #316]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_RCC_OscConfig+0x166>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b18      	cmp	r3, #24
 80028b6:	d156      	bne.n	8002966 <HAL_RCC_OscConfig+0x20a>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d151      	bne.n	8002966 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c2:	4b48      	ldr	r3, [pc, #288]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x17e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e392      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028da:	4b42      	ldr	r3, [pc, #264]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0219 	bic.w	r2, r3, #25
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	493f      	ldr	r1, [pc, #252]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fe74 	bl	80015d8 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fe70 	bl	80015d8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e37c      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	f7fe fe91 	bl	8001638 <HAL_GetREVID>
 8002916:	4603      	mov	r3, r0
 8002918:	f241 0203 	movw	r2, #4099	@ 0x1003
 800291c:	4293      	cmp	r3, r2
 800291e:	d817      	bhi.n	8002950 <HAL_RCC_OscConfig+0x1f4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d108      	bne.n	800293a <HAL_RCC_OscConfig+0x1de>
 8002928:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002930:	4a2c      	ldr	r2, [pc, #176]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002936:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	e07a      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	031b      	lsls	r3, r3, #12
 8002948:	4926      	ldr	r1, [pc, #152]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294e:	e06f      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	4921      	ldr	r1, [pc, #132]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002964:	e064      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d047      	beq.n	80029fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0219 	bic.w	r2, r3, #25
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	491a      	ldr	r1, [pc, #104]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fe2a 	bl	80015d8 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fe26 	bl	80015d8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e332      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	f7fe fe47 	bl	8001638 <HAL_GetREVID>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d819      	bhi.n	80029e8 <HAL_RCC_OscConfig+0x28c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b40      	cmp	r3, #64	@ 0x40
 80029ba:	d108      	bne.n	80029ce <HAL_RCC_OscConfig+0x272>
 80029bc:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029c4:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	e030      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	031b      	lsls	r3, r3, #12
 80029dc:	4901      	ldr	r1, [pc, #4]	@ (80029e4 <HAL_RCC_OscConfig+0x288>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
 80029e2:	e025      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
 80029e4:	58024400 	.word	0x58024400
 80029e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4997      	ldr	r1, [pc, #604]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e018      	b.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b95      	ldr	r3, [pc, #596]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a94      	ldr	r2, [pc, #592]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fde5 	bl	80015d8 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fde1 	bl	80015d8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e2ed      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a24:	4b8b      	ldr	r3, [pc, #556]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a9 	beq.w	8002b90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3e:	4b85      	ldr	r3, [pc, #532]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a48:	4b82      	ldr	r3, [pc, #520]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d007      	beq.n	8002a64 <HAL_RCC_OscConfig+0x308>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	d13a      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x374>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d135      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a64:	4b7b      	ldr	r3, [pc, #492]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x320>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b80      	cmp	r3, #128	@ 0x80
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e2c1      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a7c:	f7fe fddc 	bl	8001638 <HAL_GetREVID>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d817      	bhi.n	8002aba <HAL_RCC_OscConfig+0x35e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x348>
 8002a92:	4b70      	ldr	r3, [pc, #448]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aa0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aa2:	e075      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	069b      	lsls	r3, r3, #26
 8002ab2:	4968      	ldr	r1, [pc, #416]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab8:	e06a      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aba:	4b66      	ldr	r3, [pc, #408]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	4962      	ldr	r1, [pc, #392]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ace:	e05f      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d042      	beq.n	8002b5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd78 	bl	80015d8 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aec:	f7fe fd74 	bl	80015d8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e280      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002afe:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0a:	f7fe fd95 	bl	8001638 <HAL_GetREVID>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d817      	bhi.n	8002b48 <HAL_RCC_OscConfig+0x3ec>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3d6>
 8002b20:	4b4c      	ldr	r3, [pc, #304]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b28:	4a4a      	ldr	r2, [pc, #296]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b2e:	6053      	str	r3, [r2, #4]
 8002b30:	e02e      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
 8002b32:	4b48      	ldr	r3, [pc, #288]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	069b      	lsls	r3, r3, #26
 8002b40:	4944      	ldr	r1, [pc, #272]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
 8002b46:	e023      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
 8002b48:	4b42      	ldr	r3, [pc, #264]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	493f      	ldr	r1, [pc, #252]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e018      	b.n	8002b90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3c      	ldr	r2, [pc, #240]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fd35 	bl	80015d8 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b72:	f7fe fd31 	bl	80015d8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e23d      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b84:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d036      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fd12 	bl	80015d8 <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fd0e 	bl	80015d8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e21a      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x45c>
 8002bd6:	e018      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe fcf8 	bl	80015d8 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe fcf4 	bl	80015d8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e200      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d039      	beq.n	8002c8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a0c      	ldr	r2, [pc, #48]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fcd5 	bl	80015d8 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c32:	f7fe fcd1 	bl	80015d8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e1dd      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c44:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_RCC_OscConfig+0x4f8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
 8002c50:	e01b      	b.n	8002c8a <HAL_RCC_OscConfig+0x52e>
 8002c52:	bf00      	nop
 8002c54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c58:	4b9b      	ldr	r3, [pc, #620]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9a      	ldr	r2, [pc, #616]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fcb8 	bl	80015d8 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6c:	f7fe fcb4 	bl	80015d8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1c0      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7e:	4b92      	ldr	r3, [pc, #584]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8081 	beq.w	8002d9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ecc <HAL_RCC_OscConfig+0x770>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8b      	ldr	r2, [pc, #556]	@ (8002ecc <HAL_RCC_OscConfig+0x770>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fc98 	bl	80015d8 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe fc94 	bl	80015d8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1a0      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	4b83      	ldr	r3, [pc, #524]	@ (8002ecc <HAL_RCC_OscConfig+0x770>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x584>
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cde:	e02d      	b.n	8002d3c <HAL_RCC_OscConfig+0x5e0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5a6>
 8002ce8:	4b77      	ldr	r3, [pc, #476]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a76      	ldr	r2, [pc, #472]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	4b74      	ldr	r3, [pc, #464]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	4a73      	ldr	r2, [pc, #460]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d00:	e01c      	b.n	8002d3c <HAL_RCC_OscConfig+0x5e0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5c8>
 8002d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d16:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0x5e0>
 8002d24:	4b68      	ldr	r3, [pc, #416]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a67      	ldr	r2, [pc, #412]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d30:	4b65      	ldr	r3, [pc, #404]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d34:	4a64      	ldr	r2, [pc, #400]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d36:	f023 0304 	bic.w	r3, r3, #4
 8002d3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe fc48 	bl	80015d8 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fc44 	bl	80015d8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e14e      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d62:	4b59      	ldr	r3, [pc, #356]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ee      	beq.n	8002d4c <HAL_RCC_OscConfig+0x5f0>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fc32 	bl	80015d8 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe fc2e 	bl	80015d8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e138      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ee      	bne.n	8002d78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 812d 	beq.w	8002ffe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002da4:	4b48      	ldr	r3, [pc, #288]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dac:	2b18      	cmp	r3, #24
 8002dae:	f000 80bd 	beq.w	8002f2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	f040 809e 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b42      	ldr	r3, [pc, #264]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a41      	ldr	r2, [pc, #260]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fc06 	bl	80015d8 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fc02 	bl	80015d8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e10e      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de2:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dee:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df2:	4b37      	ldr	r3, [pc, #220]	@ (8002ed0 <HAL_RCC_OscConfig+0x774>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	430a      	orrs	r2, r1
 8002e02:	4931      	ldr	r1, [pc, #196]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	3b01      	subs	r3, #1
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	3b01      	subs	r3, #1
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	3b01      	subs	r3, #1
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e38:	4923      	ldr	r1, [pc, #140]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a21      	ldr	r2, [pc, #132]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <HAL_RCC_OscConfig+0x778>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e56:	00d2      	lsls	r2, r2, #3
 8002e58:	491b      	ldr	r1, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	f023 020c 	bic.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4917      	ldr	r1, [pc, #92]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	f023 0202 	bic.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	4912      	ldr	r1, [pc, #72]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	4a10      	ldr	r2, [pc, #64]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb2:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fb8b 	bl	80015d8 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec4:	e011      	b.n	8002eea <HAL_RCC_OscConfig+0x78e>
 8002ec6:	bf00      	nop
 8002ec8:	58024400 	.word	0x58024400
 8002ecc:	58024800 	.word	0x58024800
 8002ed0:	fffffc0c 	.word	0xfffffc0c
 8002ed4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fb7e 	bl	80015d8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e08a      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eea:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x77c>
 8002ef6:	e082      	b.n	8002ffe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a42      	ldr	r2, [pc, #264]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fb68 	bl	80015d8 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe fb64 	bl	80015d8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e070      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x7b0>
 8002f2a:	e068      	b.n	8002ffe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f2c:	4b36      	ldr	r3, [pc, #216]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f32:	4b35      	ldr	r3, [pc, #212]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d031      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d12a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d122      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d11a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	0a5b      	lsrs	r3, r3, #9
 8002f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e02b      	b.n	8003000 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d01f      	beq.n	8002ffe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fbe:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	4a11      	ldr	r2, [pc, #68]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fca:	f7fe fb05 	bl	80015d8 <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fd0:	bf00      	nop
 8002fd2:	f7fe fb01 	bl	80015d8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d0f9      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <HAL_RCC_OscConfig+0x8b0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fea:	00d2      	lsls	r2, r2, #3
 8002fec:	4906      	ldr	r1, [pc, #24]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_RCC_OscConfig+0x8ac>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3730      	adds	r7, #48	@ 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400
 800300c:	ffff0007 	.word	0xffff0007

08003010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e19c      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b8a      	ldr	r3, [pc, #552]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b87      	ldr	r3, [pc, #540]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 020f 	bic.w	r2, r3, #15
 800303a:	4985      	ldr	r1, [pc, #532]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b83      	ldr	r3, [pc, #524]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e184      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	4b7b      	ldr	r3, [pc, #492]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003070:	4b78      	ldr	r3, [pc, #480]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	4975      	ldr	r1, [pc, #468]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 800307e:	4313      	orrs	r3, r2
 8003080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	4b70      	ldr	r3, [pc, #448]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800309a:	429a      	cmp	r2, r3
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	496a      	ldr	r1, [pc, #424]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	4b64      	ldr	r3, [pc, #400]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d908      	bls.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030cc:	4b61      	ldr	r3, [pc, #388]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	495e      	ldr	r1, [pc, #376]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d908      	bls.n	800310c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030fa:	4b56      	ldr	r3, [pc, #344]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4953      	ldr	r1, [pc, #332]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003108:	4313      	orrs	r3, r2
 800310a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4b4d      	ldr	r3, [pc, #308]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 020f 	bic.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4947      	ldr	r1, [pc, #284]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d055      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003146:	4b43      	ldr	r3, [pc, #268]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4940      	ldr	r1, [pc, #256]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003154:	4313      	orrs	r3, r2
 8003156:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003160:	4b3c      	ldr	r3, [pc, #240]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0f6      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003178:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0ea      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003190:	4b30      	ldr	r3, [pc, #192]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0de      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0d6      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f023 0207 	bic.w	r2, r3, #7
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4925      	ldr	r1, [pc, #148]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c2:	f7fe fa09 	bl	80015d8 <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	f7fe fa05 	bl	80015d8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0be      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d1eb      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d010      	beq.n	8003220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	429a      	cmp	r2, r3
 800320c:	d208      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320e:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	490e      	ldr	r1, [pc, #56]	@ (8003254 <HAL_RCC_ClockConfig+0x244>)
 800321c:	4313      	orrs	r3, r2
 800321e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d214      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	4906      	ldr	r1, [pc, #24]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e086      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
 8003250:	52002000 	.word	0x52002000
 8003254:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003270:	429a      	cmp	r2, r3
 8003272:	d208      	bcs.n	8003286 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003274:	4b3c      	ldr	r3, [pc, #240]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4939      	ldr	r1, [pc, #228]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003282:	4313      	orrs	r3, r2
 8003284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329e:	429a      	cmp	r2, r3
 80032a0:	d208      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032a2:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	492e      	ldr	r1, [pc, #184]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d208      	bcs.n	80032e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4922      	ldr	r1, [pc, #136]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d208      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4917      	ldr	r1, [pc, #92]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 800330c:	4313      	orrs	r3, r2
 800330e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003310:	f000 f834 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	4912      	ldr	r1, [pc, #72]	@ (800336c <HAL_RCC_ClockConfig+0x35c>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a0d      	ldr	r2, [pc, #52]	@ (800336c <HAL_RCC_ClockConfig+0x35c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <HAL_RCC_ClockConfig+0x360>)
 8003346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003348:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_RCC_ClockConfig+0x364>)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_ClockConfig+0x368>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fe48 	bl	8000fe8 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
 800336c:	0800acc0 	.word	0x0800acc0
 8003370:	24000004 	.word	0x24000004
 8003374:	24000000 	.word	0x24000000
 8003378:	24000008 	.word	0x24000008

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003382:	4bb3      	ldr	r3, [pc, #716]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800338a:	2b18      	cmp	r3, #24
 800338c:	f200 8155 	bhi.w	800363a <HAL_RCC_GetSysClockFreq+0x2be>
 8003390:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033fd 	.word	0x080033fd
 800339c:	0800363b 	.word	0x0800363b
 80033a0:	0800363b 	.word	0x0800363b
 80033a4:	0800363b 	.word	0x0800363b
 80033a8:	0800363b 	.word	0x0800363b
 80033ac:	0800363b 	.word	0x0800363b
 80033b0:	0800363b 	.word	0x0800363b
 80033b4:	0800363b 	.word	0x0800363b
 80033b8:	08003423 	.word	0x08003423
 80033bc:	0800363b 	.word	0x0800363b
 80033c0:	0800363b 	.word	0x0800363b
 80033c4:	0800363b 	.word	0x0800363b
 80033c8:	0800363b 	.word	0x0800363b
 80033cc:	0800363b 	.word	0x0800363b
 80033d0:	0800363b 	.word	0x0800363b
 80033d4:	0800363b 	.word	0x0800363b
 80033d8:	08003429 	.word	0x08003429
 80033dc:	0800363b 	.word	0x0800363b
 80033e0:	0800363b 	.word	0x0800363b
 80033e4:	0800363b 	.word	0x0800363b
 80033e8:	0800363b 	.word	0x0800363b
 80033ec:	0800363b 	.word	0x0800363b
 80033f0:	0800363b 	.word	0x0800363b
 80033f4:	0800363b 	.word	0x0800363b
 80033f8:	0800342f 	.word	0x0800342f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033fc:	4b94      	ldr	r3, [pc, #592]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003408:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	4a90      	ldr	r2, [pc, #576]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800341a:	e111      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800341c:	4b8d      	ldr	r3, [pc, #564]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800341e:	61bb      	str	r3, [r7, #24]
      break;
 8003420:	e10e      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003422:	4b8d      	ldr	r3, [pc, #564]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003424:	61bb      	str	r3, [r7, #24]
      break;
 8003426:	e10b      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003428:	4b8c      	ldr	r3, [pc, #560]	@ (800365c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800342a:	61bb      	str	r3, [r7, #24]
      break;
 800342c:	e108      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003438:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003442:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003444:	4b82      	ldr	r3, [pc, #520]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800344e:	4b80      	ldr	r3, [pc, #512]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80e1 	beq.w	8003634 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b02      	cmp	r3, #2
 8003476:	f000 8083 	beq.w	8003580 <HAL_RCC_GetSysClockFreq+0x204>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f200 80a1 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x114>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d056      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x1c0>
 800348e:	e099      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003490:	4b6f      	ldr	r3, [pc, #444]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02d      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800349c:	4b6c      	ldr	r3, [pc, #432]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b62      	ldr	r3, [pc, #392]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034f6:	e087      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003664 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a02 	vldr	s12, [r7, #8]
 800351e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800353a:	e065      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003562:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800357e:	e043      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800366c <HAL_RCC_GetSysClockFreq+0x2f0>
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035c2:	e021      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003668 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003606:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	0a5b      	lsrs	r3, r3, #9
 800360e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003612:	3301      	adds	r3, #1
 8003614:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003620:	edd7 6a07 	vldr	s13, [r7, #28]
 8003624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362c:	ee17 3a90 	vmov	r3, s15
 8003630:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003632:	e005      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
      break;
 8003638:	e002      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800363a:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800363c:	61bb      	str	r3, [r7, #24]
      break;
 800363e:	bf00      	nop
  }

  return sysclockfreq;
 8003640:	69bb      	ldr	r3, [r7, #24]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	03d09000 	.word	0x03d09000
 8003658:	003d0900 	.word	0x003d0900
 800365c:	007a1200 	.word	0x007a1200
 8003660:	46000000 	.word	0x46000000
 8003664:	4c742400 	.word	0x4c742400
 8003668:	4a742400 	.word	0x4a742400
 800366c:	4af42400 	.word	0x4af42400

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003676:	f7ff fe81 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490f      	ldr	r1, [pc, #60]	@ (80036c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	4a09      	ldr	r2, [pc, #36]	@ (80036c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a07      	ldr	r2, [pc, #28]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ae:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	0800acc0 	.word	0x0800acc0
 80036c8:	24000004 	.word	0x24000004
 80036cc:	24000000 	.word	0x24000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036d4:	f7ff ffcc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	58024400 	.word	0x58024400
 80036f8:	0800acc0 	.word	0x0800acc0

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003700:	f7ff ffb6 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4904      	ldr	r1, [pc, #16]	@ (8003724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	58024400 	.word	0x58024400
 8003724:	0800acc0 	.word	0x0800acc0

08003728 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	223f      	movs	r2, #63	@ 0x3f
 8003736:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0207 	and.w	r2, r3, #7
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003744:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003750:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003768:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003780:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_GetClockConfig+0x80>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	58024400 	.word	0x58024400
 80037a8:	52002000 	.word	0x52002000

080037ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b0:	b0ca      	sub	sp, #296	@ 0x128
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037d0:	2500      	movs	r5, #0
 80037d2:	ea54 0305 	orrs.w	r3, r4, r5
 80037d6:	d049      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037e2:	d02f      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037e8:	d828      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037ee:	d01a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037f4:	d822      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037fe:	d007      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003800:	e01c      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003802:	4bb8      	ldr	r3, [pc, #736]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	4ab7      	ldr	r2, [pc, #732]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800380e:	e01a      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	3308      	adds	r3, #8
 8003816:	2102      	movs	r1, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f001 fc8f 	bl	800513c <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003824:	e00f      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2102      	movs	r1, #2
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fd36 	bl	80052a0 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800383a:	e004      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800384e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385c:	4aa1      	ldr	r2, [pc, #644]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6513      	str	r3, [r2, #80]	@ 0x50
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003878:	f04f 0900 	mov.w	r9, #0
 800387c:	ea58 0309 	orrs.w	r3, r8, r9
 8003880:	d047      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	2b04      	cmp	r3, #4
 800388a:	d82a      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800388c:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038a9 	.word	0x080038a9
 8003898:	080038b7 	.word	0x080038b7
 800389c:	080038cd 	.word	0x080038cd
 80038a0:	080038eb 	.word	0x080038eb
 80038a4:	080038eb 	.word	0x080038eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	4a8d      	ldr	r2, [pc, #564]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b4:	e01a      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	3308      	adds	r3, #8
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fc3c 	bl	800513c <RCCEx_PLL2_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ca:	e00f      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	3328      	adds	r3, #40	@ 0x28
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fce3 	bl	80052a0 <RCCEx_PLL3_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e0:	e004      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f4:	4b7b      	ldr	r3, [pc, #492]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f8:	f023 0107 	bic.w	r1, r3, #7
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	4a78      	ldr	r2, [pc, #480]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003904:	430b      	orrs	r3, r1
 8003906:	6513      	str	r3, [r2, #80]	@ 0x50
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800391e:	f04f 0b00 	mov.w	fp, #0
 8003922:	ea5a 030b 	orrs.w	r3, sl, fp
 8003926:	d04c      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003932:	d030      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003938:	d829      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800393a:	2bc0      	cmp	r3, #192	@ 0xc0
 800393c:	d02d      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800393e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003940:	d825      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003942:	2b80      	cmp	r3, #128	@ 0x80
 8003944:	d018      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003946:	2b80      	cmp	r3, #128	@ 0x80
 8003948:	d821      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003952:	e01c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4a62      	ldr	r2, [pc, #392]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003960:	e01c      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	3308      	adds	r3, #8
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fbe6 	bl	800513c <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003976:	e011      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	3328      	adds	r3, #40	@ 0x28
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fc8d 	bl	80052a0 <RCCEx_PLL3_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800399a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039a4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80039b8:	e003      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d053      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ee:	d035      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039f4:	d82e      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039fa:	d031      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a00:	d828      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a06:	d01a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a0c:	d822      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a16:	d007      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a18:	e01c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	4a31      	ldr	r2, [pc, #196]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a26:	e01c      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fb83 	bl	800513c <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a3c:	e011      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a42:	3328      	adds	r3, #40	@ 0x28
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fc2a 	bl	80052a0 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a52:	e006      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003aa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ab2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ab6:	d038      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003abc:	d831      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003abe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ac2:	d034      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ac4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ac8:	d82b      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ace:	d01d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ad4:	d825      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ae0:	e01f      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ae2:	bf00      	nop
 8003ae4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae8:	4ba2      	ldr	r3, [pc, #648]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	4aa1      	ldr	r2, [pc, #644]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003af4:	e01c      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	3308      	adds	r3, #8
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fb1c 	bl	800513c <RCCEx_PLL2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3328      	adds	r3, #40	@ 0x28
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fbc3 	bl	80052a0 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b20:	e006      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e002      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b38:	4b8e      	ldr	r3, [pc, #568]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b48:	4a8a      	ldr	r2, [pc, #552]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d03a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7e:	2b30      	cmp	r3, #48	@ 0x30
 8003b80:	d01f      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b82:	2b30      	cmp	r3, #48	@ 0x30
 8003b84:	d819      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d815      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d019      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d111      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b96:	4b77      	ldr	r3, [pc, #476]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	4a76      	ldr	r2, [pc, #472]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fac5 	bl	800513c <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bd0:	4b68      	ldr	r3, [pc, #416]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	4a65      	ldr	r2, [pc, #404]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d051      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c18:	d035      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1e:	d82e      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c24:	d031      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c2a:	d828      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c30:	d01a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c36:	d822      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d007      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c42:	e01c      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c44:	4b4b      	ldr	r3, [pc, #300]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	4a4a      	ldr	r2, [pc, #296]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c50:	e01c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	3308      	adds	r3, #8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fa6e 	bl	800513c <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c66:	e011      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	3328      	adds	r3, #40	@ 0x28
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fb15 	bl	80052a0 <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c94:	4b37      	ldr	r3, [pc, #220]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	4a34      	ldr	r2, [pc, #208]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d056      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cdc:	d033      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ce2:	d82c      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce8:	d02f      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cee:	d826      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cf4:	d02b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cfa:	d820      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d00:	d012      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d06:	d81a      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d022      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d115      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3308      	adds	r3, #8
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fa0e 	bl	800513c <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d26:	e015      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	3328      	adds	r3, #40	@ 0x28
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fab5 	bl	80052a0 <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d46:	bf00      	nop
 8003d48:	e004      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d6a:	4a02      	ldr	r2, [pc, #8]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d70:	e006      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d055      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dac:	d033      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db2:	d82c      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db8:	d02f      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	d826      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc4:	d02b      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dca:	d820      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd0:	d012      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd6:	d81a      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d022      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003de0:	d115      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de6:	3308      	adds	r3, #8
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 f9a6 	bl	800513c <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003df6:	e015      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	3328      	adds	r3, #40	@ 0x28
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fa4d 	bl	80052a0 <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e16:	bf00      	nop
 8003e18:	e004      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e2c:	4ba3      	ldr	r3, [pc, #652]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e3c:	4a9f      	ldr	r2, [pc, #636]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d037      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e76:	d00e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e7c:	d816      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e86:	d111      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e88:	4b8c      	ldr	r3, [pc, #560]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f94c 	bl	800513c <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ecc:	4a7b      	ldr	r2, [pc, #492]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ef2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	d039      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d81c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f06:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f1d 	.word	0x08003f1d
 8003f14:	08003f2b 	.word	0x08003f2b
 8003f18:	08003f49 	.word	0x08003f49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1c:	4b67      	ldr	r3, [pc, #412]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	4a66      	ldr	r2, [pc, #408]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f28:	e00f      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	3308      	adds	r3, #8
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 f902 	bl	800513c <RCCEx_PLL2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f52:	4b5a      	ldr	r3, [pc, #360]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	f023 0103 	bic.w	r1, r3, #3
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f60:	4a56      	ldr	r2, [pc, #344]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f000 809f 	beq.w	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f92:	4b4b      	ldr	r3, [pc, #300]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4a      	ldr	r2, [pc, #296]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd fb1b 	bl	80015d8 <HAL_GetTick>
 8003fa2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa8:	f7fd fb16 	bl	80015d8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	@ 0x64
 8003fb6:	d903      	bls.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ed      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d179      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fd4:	4b39      	ldr	r3, [pc, #228]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe0:	4053      	eors	r3, r2
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d015      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fea:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff6:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004000:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004002:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	4a2d      	ldr	r2, [pc, #180]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800400c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800400e:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800401e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004022:	d118      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd fad8 	bl	80015d8 <HAL_GetTick>
 8004028:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402c:	e00d      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd fad3 	bl	80015d8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800403e:	429a      	cmp	r2, r3
 8004040:	d903      	bls.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004048:	e005      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800404a:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0eb      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d129      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800406e:	d10e      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004080:	091a      	lsrs	r2, r3, #4
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004084:	4013      	ands	r3, r2
 8004086:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6113      	str	r3, [r2, #16]
 800408c:	e005      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800408e:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004094:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004098:	6113      	str	r3, [r2, #16]
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b0:	e00e      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040bc:	58024400 	.word	0x58024400
 80040c0:	58024800 	.word	0x58024800
 80040c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f002 0301 	and.w	r3, r2, #1
 80040dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f000 8089 	beq.w	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f8:	2b28      	cmp	r3, #40	@ 0x28
 80040fa:	d86b      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	080041dd 	.word	0x080041dd
 8004108:	080041d5 	.word	0x080041d5
 800410c:	080041d5 	.word	0x080041d5
 8004110:	080041d5 	.word	0x080041d5
 8004114:	080041d5 	.word	0x080041d5
 8004118:	080041d5 	.word	0x080041d5
 800411c:	080041d5 	.word	0x080041d5
 8004120:	080041d5 	.word	0x080041d5
 8004124:	080041a9 	.word	0x080041a9
 8004128:	080041d5 	.word	0x080041d5
 800412c:	080041d5 	.word	0x080041d5
 8004130:	080041d5 	.word	0x080041d5
 8004134:	080041d5 	.word	0x080041d5
 8004138:	080041d5 	.word	0x080041d5
 800413c:	080041d5 	.word	0x080041d5
 8004140:	080041d5 	.word	0x080041d5
 8004144:	080041bf 	.word	0x080041bf
 8004148:	080041d5 	.word	0x080041d5
 800414c:	080041d5 	.word	0x080041d5
 8004150:	080041d5 	.word	0x080041d5
 8004154:	080041d5 	.word	0x080041d5
 8004158:	080041d5 	.word	0x080041d5
 800415c:	080041d5 	.word	0x080041d5
 8004160:	080041d5 	.word	0x080041d5
 8004164:	080041dd 	.word	0x080041dd
 8004168:	080041d5 	.word	0x080041d5
 800416c:	080041d5 	.word	0x080041d5
 8004170:	080041d5 	.word	0x080041d5
 8004174:	080041d5 	.word	0x080041d5
 8004178:	080041d5 	.word	0x080041d5
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041d5 	.word	0x080041d5
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041dd 	.word	0x080041dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	3308      	adds	r3, #8
 80041ae:	2101      	movs	r1, #1
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 ffc3 	bl	800513c <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3328      	adds	r3, #40	@ 0x28
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 f86a 	bl	80052a0 <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041e6:	4bbf      	ldr	r3, [pc, #764]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	4abb      	ldr	r2, [pc, #748]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 0302 	and.w	r3, r2, #2
 8004210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800421a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d041      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800422a:	2b05      	cmp	r3, #5
 800422c:	d824      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004281 	.word	0x08004281
 8004238:	0800424d 	.word	0x0800424d
 800423c:	08004263 	.word	0x08004263
 8004240:	08004281 	.word	0x08004281
 8004244:	08004281 	.word	0x08004281
 8004248:	08004281 	.word	0x08004281
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	3308      	adds	r3, #8
 8004252:	2101      	movs	r1, #1
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff71 	bl	800513c <RCCEx_PLL2_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004260:	e00f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	3328      	adds	r3, #40	@ 0x28
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f818 	bl	80052a0 <RCCEx_PLL3_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800428a:	4b96      	ldr	r3, [pc, #600]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428e:	f023 0107 	bic.w	r1, r3, #7
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004298:	4a92      	ldr	r2, [pc, #584]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800429a:	430b      	orrs	r3, r1
 800429c:	6553      	str	r3, [r2, #84]	@ 0x54
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f002 0304 	and.w	r3, r2, #4
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d044      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d825      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042d4:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004329 	.word	0x08004329
 80042e0:	080042f5 	.word	0x080042f5
 80042e4:	0800430b 	.word	0x0800430b
 80042e8:	08004329 	.word	0x08004329
 80042ec:	08004329 	.word	0x08004329
 80042f0:	08004329 	.word	0x08004329
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	3308      	adds	r3, #8
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ff1d 	bl	800513c <RCCEx_PLL2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	3328      	adds	r3, #40	@ 0x28
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f000 ffc4 	bl	80052a0 <RCCEx_PLL3_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004332:	4b6c      	ldr	r3, [pc, #432]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	f023 0107 	bic.w	r1, r3, #7
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004342:	4a68      	ldr	r2, [pc, #416]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004344:	430b      	orrs	r3, r1
 8004346:	6593      	str	r3, [r2, #88]	@ 0x58
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f002 0320 	and.w	r3, r2, #32
 800435e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d055      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800437e:	d033      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004384:	d82c      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d02f      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004390:	d826      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004396:	d02b      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800439c:	d820      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800439e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043a2:	d012      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80043a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043a8:	d81a      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d022      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043b2:	d115      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	3308      	adds	r3, #8
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 febd 	bl	800513c <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043c8:	e015      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	3328      	adds	r3, #40	@ 0x28
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 ff64 	bl	80052a0 <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043de:	e00a      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043e6:	e006      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e8:	bf00      	nop
 80043ea:	e004      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004402:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a35      	ldr	r2, [pc, #212]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6553      	str	r3, [r2, #84]	@ 0x54
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800442a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004434:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d058      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004446:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800444a:	d033      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800444c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004450:	d82c      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004456:	d02f      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445c:	d826      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004462:	d02b      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004468:	d820      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446e:	d012      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004474:	d81a      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d022      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447e:	d115      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	3308      	adds	r3, #8
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fe57 	bl	800513c <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004494:	e015      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fefe 	bl	80052a0 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044aa:	e00a      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b2:	e006      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b4:	bf00      	nop
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b8:	bf00      	nop
 80044ba:	e002      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044bc:	bf00      	nop
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10e      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ca:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044da:	4a02      	ldr	r2, [pc, #8]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004506:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d055      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004518:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800451c:	d033      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800451e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004522:	d82c      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004528:	d02f      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800452e:	d826      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004530:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004534:	d02b      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004536:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800453a:	d820      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800453c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004540:	d012      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004546:	d81a      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d022      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d115      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fdee 	bl	800513c <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004566:	e015      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3328      	adds	r3, #40	@ 0x28
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe95 	bl	80052a0 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800457c:	e00a      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004586:	bf00      	nop
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800459c:	4ba1      	ldr	r3, [pc, #644]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045ac:	4a9d      	ldr	r2, [pc, #628]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f002 0308 	and.w	r3, r2, #8
 80045c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d01e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	3328      	adds	r3, #40	@ 0x28
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fe54 	bl	80052a0 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004604:	4b87      	ldr	r3, [pc, #540]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004614:	4a83      	ldr	r2, [pc, #524]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f002 0310 	and.w	r3, r2, #16
 8004626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004630:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d01e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d10c      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3328      	adds	r3, #40	@ 0x28
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fe25 	bl	80052a0 <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004662:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004666:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004672:	4a6c      	ldr	r2, [pc, #432]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800468e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d03e      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046a4:	d022      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80046a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046aa:	d81b      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d00b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046b6:	e015      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	3308      	adds	r3, #8
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fd3b 	bl	800513c <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fde2 	bl	80052a0 <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004706:	4a47      	ldr	r2, [pc, #284]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6593      	str	r3, [r2, #88]	@ 0x58
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004722:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004724:	2300      	movs	r3, #0
 8004726:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004728:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d03b      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800473e:	d01f      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004740:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004744:	d818      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800474c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004750:	d007      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004752:	e011      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3328      	adds	r3, #40	@ 0x28
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fd98 	bl	80052a0 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800478a:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6553      	str	r3, [r2, #84]	@ 0x54
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047b8:	2300      	movs	r3, #0
 80047ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80047bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d034      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d007      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047e4:	e00e      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	3308      	adds	r3, #8
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fca4 	bl	800513c <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047fa:	e003      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004810:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481a:	4a02      	ldr	r2, [pc, #8]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481c:	430b      	orrs	r3, r1
 800481e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004822:	bf00      	nop
 8004824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800483c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483e:	2300      	movs	r3, #0
 8004840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004842:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d00c      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	3328      	adds	r3, #40	@ 0x28
 8004852:	2102      	movs	r1, #2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd23 	bl	80052a0 <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004872:	663b      	str	r3, [r7, #96]	@ 0x60
 8004874:	2300      	movs	r3, #0
 8004876:	667b      	str	r3, [r7, #100]	@ 0x64
 8004878:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800487c:	460b      	mov	r3, r1
 800487e:	4313      	orrs	r3, r2
 8004880:	d038      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800488a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800488e:	d018      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004894:	d811      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800489a:	d014      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d80b      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048aa:	d106      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ac:	4bc3      	ldr	r3, [pc, #780]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	4ac2      	ldr	r2, [pc, #776]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048d4:	4bb9      	ldr	r3, [pc, #740]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e4:	4ab5      	ldr	r2, [pc, #724]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004900:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004902:	2300      	movs	r3, #0
 8004904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004906:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004910:	4baa      	ldr	r3, [pc, #680]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004914:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491e:	4aa7      	ldr	r2, [pc, #668]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004920:	430b      	orrs	r3, r1
 8004922:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004930:	653b      	str	r3, [r7, #80]	@ 0x50
 8004932:	2300      	movs	r3, #0
 8004934:	657b      	str	r3, [r7, #84]	@ 0x54
 8004936:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004940:	4b9e      	ldr	r3, [pc, #632]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004950:	4a9a      	ldr	r2, [pc, #616]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004952:	430b      	orrs	r3, r1
 8004954:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004964:	2300      	movs	r3, #0
 8004966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004968:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004972:	4b92      	ldr	r3, [pc, #584]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004980:	4a8e      	ldr	r2, [pc, #568]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004982:	430b      	orrs	r3, r1
 8004984:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004992:	643b      	str	r3, [r7, #64]	@ 0x40
 8004994:	2300      	movs	r3, #0
 8004996:	647b      	str	r3, [r7, #68]	@ 0x44
 8004998:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049a2:	4b86      	ldr	r3, [pc, #536]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	4a85      	ldr	r2, [pc, #532]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049ac:	6113      	str	r3, [r2, #16]
 80049ae:	4b83      	ldr	r3, [pc, #524]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b0:	6919      	ldr	r1, [r3, #16]
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ba:	4a80      	ldr	r2, [pc, #512]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ce:	2300      	movs	r3, #0
 80049d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049dc:	4b77      	ldr	r3, [pc, #476]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	4a74      	ldr	r2, [pc, #464]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ec:	430b      	orrs	r3, r1
 80049ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a1c:	4a67      	ldr	r2, [pc, #412]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d011      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	3308      	adds	r3, #8
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb78 	bl	800513c <RCCEx_PLL2_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6239      	str	r1, [r7, #32]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	3308      	adds	r3, #8
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fb58 	bl	800513c <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	2100      	movs	r1, #0
 8004aac:	61b9      	str	r1, [r7, #24]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d011      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fb38 	bl	800513c <RCCEx_PLL2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	2100      	movs	r1, #0
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d011      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fbca 	bl	80052a0 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b42:	3328      	adds	r3, #40	@ 0x28
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fbaa 	bl	80052a0 <RCCEx_PLL3_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	3328      	adds	r3, #40	@ 0x28
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fb8a 	bl	80052a0 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ba2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bbc:	58024400 	.word	0x58024400

08004bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bc4:	f7fe fd54 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	58024400 	.word	0x58024400
 8004be8:	0800acc0 	.word	0x0800acc0

08004bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	@ 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	0b1b      	lsrs	r3, r3, #12
 8004c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c16:	4b99      	ldr	r3, [pc, #612]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8111 	beq.w	8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f000 8083 	beq.w	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	f200 80a1 	bhi.w	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d056      	beq.n	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c56:	e099      	b.n	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c58:	4b88      	ldr	r3, [pc, #544]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02d      	beq.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c64:	4b85      	ldr	r3, [pc, #532]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	4a84      	ldr	r2, [pc, #528]	@ (8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cbe:	e087      	b.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d02:	e065      	b.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b59      	ldr	r3, [pc, #356]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e043      	b.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b48      	ldr	r3, [pc, #288]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	e021      	b.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b37      	ldr	r3, [pc, #220]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd4:	0a5b      	lsrs	r3, r3, #9
 8004dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df6:	ee17 2a90 	vmov	r2, s15
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e24:	ee17 2a90 	vmov	r2, s15
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	0e1b      	lsrs	r3, r3, #24
 8004e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e52:	ee17 2a90 	vmov	r2, s15
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
}
 8004e6e:	bf00      	nop
 8004e70:	3724      	adds	r7, #36	@ 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	03d09000 	.word	0x03d09000
 8004e84:	46000000 	.word	0x46000000
 8004e88:	4c742400 	.word	0x4c742400
 8004e8c:	4a742400 	.word	0x4a742400
 8004e90:	4af42400 	.word	0x4af42400

08004e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	@ 0x24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	0d1b      	lsrs	r3, r3, #20
 8004eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ebe:	4b99      	ldr	r3, [pc, #612]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	08db      	lsrs	r3, r3, #3
 8004ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8111 	beq.w	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	f000 8083 	beq.w	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f200 80a1 	bhi.w	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d056      	beq.n	8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004efe:	e099      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f00:	4b88      	ldr	r3, [pc, #544]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d02d      	beq.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f0c:	4b85      	ldr	r3, [pc, #532]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	08db      	lsrs	r3, r3, #3
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	4a84      	ldr	r2, [pc, #528]	@ (8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b7b      	ldr	r3, [pc, #492]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f66:	e087      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004faa:	e065      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fee:	e043      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005002:	4b48      	ldr	r3, [pc, #288]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005012:	ed97 6a03 	vldr	s12, [r7, #12]
 8005016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800501a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005032:	e021      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005046:	4b37      	ldr	r3, [pc, #220]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005056:	ed97 6a03 	vldr	s12, [r7, #12]
 800505a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005078:	4b2a      	ldr	r3, [pc, #168]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	0a5b      	lsrs	r3, r3, #9
 800507e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800508e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005092:	edd7 6a07 	vldr	s13, [r7, #28]
 8005096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800509e:	ee17 2a90 	vmov	r2, s15
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050cc:	ee17 2a90 	vmov	r2, s15
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	0e1b      	lsrs	r3, r3, #24
 80050da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fa:	ee17 2a90 	vmov	r2, s15
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005102:	e008      	b.n	8005116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]
}
 8005116:	bf00      	nop
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400
 8005128:	03d09000 	.word	0x03d09000
 800512c:	46000000 	.word	0x46000000
 8005130:	4c742400 	.word	0x4c742400
 8005134:	4a742400 	.word	0x4a742400
 8005138:	4af42400 	.word	0x4af42400

0800513c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800514a:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d101      	bne.n	800515a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e099      	b.n	800528e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800515a:	4b4f      	ldr	r3, [pc, #316]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a4e      	ldr	r2, [pc, #312]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005166:	f7fc fa37 	bl	80015d8 <HAL_GetTick>
 800516a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800516c:	e008      	b.n	8005180 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800516e:	f7fc fa33 	bl	80015d8 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e086      	b.n	800528e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f0      	bne.n	800516e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800518c:	4b42      	ldr	r3, [pc, #264]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	031b      	lsls	r3, r3, #12
 800519a:	493f      	ldr	r1, [pc, #252]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	628b      	str	r3, [r1, #40]	@ 0x28
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	025b      	lsls	r3, r3, #9
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051d0:	4931      	ldr	r1, [pc, #196]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051d6:	4b30      	ldr	r3, [pc, #192]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	492d      	ldr	r1, [pc, #180]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	f023 0220 	bic.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	4928      	ldr	r1, [pc, #160]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051fa:	4b27      	ldr	r3, [pc, #156]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	4a26      	ldr	r2, [pc, #152]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005206:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800520a:	4b24      	ldr	r3, [pc, #144]	@ (800529c <RCCEx_PLL2_Config+0x160>)
 800520c:	4013      	ands	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	69d2      	ldr	r2, [r2, #28]
 8005212:	00d2      	lsls	r2, r2, #3
 8005214:	4920      	ldr	r1, [pc, #128]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800521a:	4b1f      	ldr	r3, [pc, #124]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005220:	f043 0310 	orr.w	r3, r3, #16
 8005224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800522c:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4a19      	ldr	r2, [pc, #100]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005238:	e00f      	b.n	800525a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d106      	bne.n	800524e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005240:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4a14      	ldr	r2, [pc, #80]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800524c:	e005      	b.n	800525a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800525a:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0e      	ldr	r2, [pc, #56]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005266:	f7fc f9b7 	bl	80015d8 <HAL_GetTick>
 800526a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800526c:	e008      	b.n	8005280 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800526e:	f7fc f9b3 	bl	80015d8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e006      	b.n	800528e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <RCCEx_PLL2_Config+0x15c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	ffff0007 	.word	0xffff0007

080052a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ae:	4b53      	ldr	r3, [pc, #332]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d101      	bne.n	80052be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e099      	b.n	80053f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052be:	4b4f      	ldr	r3, [pc, #316]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a4e      	ldr	r2, [pc, #312]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80052c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ca:	f7fc f985 	bl	80015d8 <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052d2:	f7fc f981 	bl	80015d8 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e086      	b.n	80053f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052e4:	4b45      	ldr	r3, [pc, #276]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052f0:	4b42      	ldr	r3, [pc, #264]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	051b      	lsls	r3, r3, #20
 80052fe:	493f      	ldr	r1, [pc, #252]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005300:	4313      	orrs	r3, r2
 8005302:	628b      	str	r3, [r1, #40]	@ 0x28
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	3b01      	subs	r3, #1
 800530a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	025b      	lsls	r3, r3, #9
 8005316:	b29b      	uxth	r3, r3
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	3b01      	subs	r3, #1
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005334:	4931      	ldr	r1, [pc, #196]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800533a:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	492d      	ldr	r1, [pc, #180]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005348:	4313      	orrs	r3, r2
 800534a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800534c:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	4928      	ldr	r1, [pc, #160]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800535e:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	4a26      	ldr	r2, [pc, #152]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800536a:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 800536c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800536e:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <RCCEx_PLL3_Config+0x160>)
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	69d2      	ldr	r2, [r2, #28]
 8005376:	00d2      	lsls	r2, r2, #3
 8005378:	4920      	ldr	r1, [pc, #128]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 800537a:	4313      	orrs	r3, r2
 800537c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800537e:	4b1f      	ldr	r3, [pc, #124]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 8005396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800539a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800539c:	e00f      	b.n	80053be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053a4:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4a14      	ldr	r2, [pc, #80]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053b0:	e005      	b.n	80053be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053b2:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053be:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a0e      	ldr	r2, [pc, #56]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ca:	f7fc f905 	bl	80015d8 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d0:	e008      	b.n	80053e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053d2:	f7fc f901 	bl	80015d8 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e006      	b.n	80053f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053e4:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <RCCEx_PLL3_Config+0x15c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	58024400 	.word	0x58024400
 8005400:	ffff0007 	.word	0xffff0007

08005404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e049      	b.n	80054aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f841 	bl	80054b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f000 f9e8 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e054      	b.n	800558a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <HAL_TIM_Base_Start_IT+0xd0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d01d      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	@ (800559c <HAL_TIM_Base_Start_IT+0xd4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_TIM_Base_Start_IT+0xe4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d115      	bne.n	8005574 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	4b19      	ldr	r3, [pc, #100]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b06      	cmp	r3, #6
 8005558:	d015      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d011      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	e008      	b.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e000      	b.n	8005588 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40010400 	.word	0x40010400
 80055ac:	40001800 	.word	0x40001800
 80055b0:	40014000 	.word	0x40014000
 80055b4:	00010007 	.word	0x00010007

080055b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0202 	mvn.w	r2, #2
 80055ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8e9 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8db 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8ec 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d020      	beq.n	8005668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0204 	mvn.w	r2, #4
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8c3 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8b5 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8c6 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d020      	beq.n	80056b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01b      	beq.n	80056b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0208 	mvn.w	r2, #8
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2204      	movs	r2, #4
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f89d 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f88f 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8a0 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d020      	beq.n	8005700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01b      	beq.n	8005700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0210 	mvn.w	r2, #16
 80056d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2208      	movs	r2, #8
 80056d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f877 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f869 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f87a 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0201 	mvn.w	r2, #1
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fc2c 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f913 	bl	8005978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800576e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f90b 	bl	800598c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f834 	bl	8005802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0220 	mvn.w	r2, #32
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8d3 	bl	8005964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a46      	ldr	r2, [pc, #280]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a43      	ldr	r2, [pc, #268]	@ (8005948 <TIM_Base_SetConfig+0x130>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a42      	ldr	r2, [pc, #264]	@ (800594c <TIM_Base_SetConfig+0x134>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <TIM_Base_SetConfig+0x138>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a40      	ldr	r2, [pc, #256]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a35      	ldr	r2, [pc, #212]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a32      	ldr	r2, [pc, #200]	@ (8005948 <TIM_Base_SetConfig+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a31      	ldr	r2, [pc, #196]	@ (800594c <TIM_Base_SetConfig+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a30      	ldr	r2, [pc, #192]	@ (8005950 <TIM_Base_SetConfig+0x138>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2f      	ldr	r2, [pc, #188]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2e      	ldr	r2, [pc, #184]	@ (8005958 <TIM_Base_SetConfig+0x140>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2d      	ldr	r2, [pc, #180]	@ (800595c <TIM_Base_SetConfig+0x144>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005960 <TIM_Base_SetConfig+0x148>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a16      	ldr	r2, [pc, #88]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <TIM_Base_SetConfig+0x140>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <TIM_Base_SetConfig+0x144>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <TIM_Base_SetConfig+0x148>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d105      	bne.n	8005936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]
  }
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e042      	b.n	8005a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fc75 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2224      	movs	r2, #36	@ 0x24
 80059ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fe1e 	bl	800662c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8b3 	bl	8005b5c <UART_SetConfig>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e01b      	b.n	8005a38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fe9d 	bl	8006770 <UART_CheckIdleState>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	@ 0x28
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d17b      	bne.n	8005b52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_UART_Transmit+0x26>
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e074      	b.n	8005b54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2221      	movs	r2, #33	@ 0x21
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7a:	f7fb fdad 	bl	80015d8 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a98:	d108      	bne.n	8005aac <HAL_UART_Transmit+0x6c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e003      	b.n	8005ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ab4:	e030      	b.n	8005b18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	@ 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 feff 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e03d      	b.n	8005b54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3302      	adds	r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e007      	b.n	8005b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1c8      	bne.n	8005ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2140      	movs	r1, #64	@ 0x40
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fec8 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e006      	b.n	8005b54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b60:	b092      	sub	sp, #72	@ 0x48
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005e84 <UART_SetConfig+0x328>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4ab3      	ldr	r2, [pc, #716]	@ (8005e88 <UART_SetConfig+0x32c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	4baf      	ldr	r3, [pc, #700]	@ (8005e8c <UART_SetConfig+0x330>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	f023 010f 	bic.w	r1, r3, #15
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4aa6      	ldr	r2, [pc, #664]	@ (8005e90 <UART_SetConfig+0x334>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d177      	bne.n	8005cec <UART_SetConfig+0x190>
 8005bfc:	4ba5      	ldr	r3, [pc, #660]	@ (8005e94 <UART_SetConfig+0x338>)
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c04:	2b28      	cmp	r3, #40	@ 0x28
 8005c06:	d86d      	bhi.n	8005ce4 <UART_SetConfig+0x188>
 8005c08:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <UART_SetConfig+0xb4>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005cb5 	.word	0x08005cb5
 8005c14:	08005ce5 	.word	0x08005ce5
 8005c18:	08005ce5 	.word	0x08005ce5
 8005c1c:	08005ce5 	.word	0x08005ce5
 8005c20:	08005ce5 	.word	0x08005ce5
 8005c24:	08005ce5 	.word	0x08005ce5
 8005c28:	08005ce5 	.word	0x08005ce5
 8005c2c:	08005ce5 	.word	0x08005ce5
 8005c30:	08005cbd 	.word	0x08005cbd
 8005c34:	08005ce5 	.word	0x08005ce5
 8005c38:	08005ce5 	.word	0x08005ce5
 8005c3c:	08005ce5 	.word	0x08005ce5
 8005c40:	08005ce5 	.word	0x08005ce5
 8005c44:	08005ce5 	.word	0x08005ce5
 8005c48:	08005ce5 	.word	0x08005ce5
 8005c4c:	08005ce5 	.word	0x08005ce5
 8005c50:	08005cc5 	.word	0x08005cc5
 8005c54:	08005ce5 	.word	0x08005ce5
 8005c58:	08005ce5 	.word	0x08005ce5
 8005c5c:	08005ce5 	.word	0x08005ce5
 8005c60:	08005ce5 	.word	0x08005ce5
 8005c64:	08005ce5 	.word	0x08005ce5
 8005c68:	08005ce5 	.word	0x08005ce5
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005ccd 	.word	0x08005ccd
 8005c74:	08005ce5 	.word	0x08005ce5
 8005c78:	08005ce5 	.word	0x08005ce5
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	08005ce5 	.word	0x08005ce5
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005ce5 	.word	0x08005ce5
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005ce5 	.word	0x08005ce5
 8005ca4:	08005ce5 	.word	0x08005ce5
 8005ca8:	08005ce5 	.word	0x08005ce5
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e222      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e21e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e21a      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e216      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e212      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005cdc:	2340      	movs	r3, #64	@ 0x40
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e20e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e20a      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a69      	ldr	r2, [pc, #420]	@ (8005e98 <UART_SetConfig+0x33c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d130      	bne.n	8005d58 <UART_SetConfig+0x1fc>
 8005cf6:	4b67      	ldr	r3, [pc, #412]	@ (8005e94 <UART_SetConfig+0x338>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d826      	bhi.n	8005d50 <UART_SetConfig+0x1f4>
 8005d02:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <UART_SetConfig+0x1ac>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d21 	.word	0x08005d21
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d31 	.word	0x08005d31
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e1ec      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e1e8      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e1e4      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e1e0      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e1dc      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d48:	2340      	movs	r3, #64	@ 0x40
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e1d8      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e1d4      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005e9c <UART_SetConfig+0x340>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d130      	bne.n	8005dc4 <UART_SetConfig+0x268>
 8005d62:	4b4c      	ldr	r3, [pc, #304]	@ (8005e94 <UART_SetConfig+0x338>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d826      	bhi.n	8005dbc <UART_SetConfig+0x260>
 8005d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0x218>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e1b6      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e1b2      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e1ae      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e1aa      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005dac:	2320      	movs	r3, #32
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e1a6      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005db4:	2340      	movs	r3, #64	@ 0x40
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e1a2      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e19e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a35      	ldr	r2, [pc, #212]	@ (8005ea0 <UART_SetConfig+0x344>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d130      	bne.n	8005e30 <UART_SetConfig+0x2d4>
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <UART_SetConfig+0x338>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d826      	bhi.n	8005e28 <UART_SetConfig+0x2cc>
 8005dda:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x284>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e180      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e17c      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e178      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e174      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e170      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e20:	2340      	movs	r3, #64	@ 0x40
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e16c      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e168      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <UART_SetConfig+0x348>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d142      	bne.n	8005ec0 <UART_SetConfig+0x364>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	@ (8005e94 <UART_SetConfig+0x338>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d838      	bhi.n	8005eb8 <UART_SetConfig+0x35c>
 8005e46:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <UART_SetConfig+0x2f0>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e14a      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e146      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e142      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e13e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005e84:	cfff69f3 	.word	0xcfff69f3
 8005e88:	58000c00 	.word	0x58000c00
 8005e8c:	11fff4ff 	.word	0x11fff4ff
 8005e90:	40011000 	.word	0x40011000
 8005e94:	58024400 	.word	0x58024400
 8005e98:	40004400 	.word	0x40004400
 8005e9c:	40004800 	.word	0x40004800
 8005ea0:	40004c00 	.word	0x40004c00
 8005ea4:	40005000 	.word	0x40005000
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e128      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005eb0:	2340      	movs	r3, #64	@ 0x40
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e124      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e120      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4acb      	ldr	r2, [pc, #812]	@ (80061f4 <UART_SetConfig+0x698>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d176      	bne.n	8005fb8 <UART_SetConfig+0x45c>
 8005eca:	4bcb      	ldr	r3, [pc, #812]	@ (80061f8 <UART_SetConfig+0x69c>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed2:	2b28      	cmp	r3, #40	@ 0x28
 8005ed4:	d86c      	bhi.n	8005fb0 <UART_SetConfig+0x454>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0x380>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005fb1 	.word	0x08005fb1
 8005ee4:	08005fb1 	.word	0x08005fb1
 8005ee8:	08005fb1 	.word	0x08005fb1
 8005eec:	08005fb1 	.word	0x08005fb1
 8005ef0:	08005fb1 	.word	0x08005fb1
 8005ef4:	08005fb1 	.word	0x08005fb1
 8005ef8:	08005fb1 	.word	0x08005fb1
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005fb1 	.word	0x08005fb1
 8005f04:	08005fb1 	.word	0x08005fb1
 8005f08:	08005fb1 	.word	0x08005fb1
 8005f0c:	08005fb1 	.word	0x08005fb1
 8005f10:	08005fb1 	.word	0x08005fb1
 8005f14:	08005fb1 	.word	0x08005fb1
 8005f18:	08005fb1 	.word	0x08005fb1
 8005f1c:	08005f91 	.word	0x08005f91
 8005f20:	08005fb1 	.word	0x08005fb1
 8005f24:	08005fb1 	.word	0x08005fb1
 8005f28:	08005fb1 	.word	0x08005fb1
 8005f2c:	08005fb1 	.word	0x08005fb1
 8005f30:	08005fb1 	.word	0x08005fb1
 8005f34:	08005fb1 	.word	0x08005fb1
 8005f38:	08005fb1 	.word	0x08005fb1
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005fb1 	.word	0x08005fb1
 8005f44:	08005fb1 	.word	0x08005fb1
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08005fb1 	.word	0x08005fb1
 8005f54:	08005fb1 	.word	0x08005fb1
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fa1 	.word	0x08005fa1
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005fb1 	.word	0x08005fb1
 8005f68:	08005fb1 	.word	0x08005fb1
 8005f6c:	08005fb1 	.word	0x08005fb1
 8005f70:	08005fb1 	.word	0x08005fb1
 8005f74:	08005fb1 	.word	0x08005fb1
 8005f78:	08005fb1 	.word	0x08005fb1
 8005f7c:	08005fa9 	.word	0x08005fa9
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e0bc      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e0b8      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e0b4      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e0b0      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e0ac      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005fa8:	2340      	movs	r3, #64	@ 0x40
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e0a8      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e0a4      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a8f      	ldr	r2, [pc, #572]	@ (80061fc <UART_SetConfig+0x6a0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d130      	bne.n	8006024 <UART_SetConfig+0x4c8>
 8005fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80061f8 <UART_SetConfig+0x69c>)
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d826      	bhi.n	800601c <UART_SetConfig+0x4c0>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <UART_SetConfig+0x478>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fed 	.word	0x08005fed
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	08005ffd 	.word	0x08005ffd
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e086      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e082      	b.n	8006102 <UART_SetConfig+0x5a6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e07e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e07a      	b.n	8006102 <UART_SetConfig+0x5a6>
 800600c:	2320      	movs	r3, #32
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e076      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006014:	2340      	movs	r3, #64	@ 0x40
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e072      	b.n	8006102 <UART_SetConfig+0x5a6>
 800601c:	2380      	movs	r3, #128	@ 0x80
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e06e      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a75      	ldr	r2, [pc, #468]	@ (8006200 <UART_SetConfig+0x6a4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d130      	bne.n	8006090 <UART_SetConfig+0x534>
 800602e:	4b72      	ldr	r3, [pc, #456]	@ (80061f8 <UART_SetConfig+0x69c>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b05      	cmp	r3, #5
 8006038:	d826      	bhi.n	8006088 <UART_SetConfig+0x52c>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <UART_SetConfig+0x4e4>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006059 	.word	0x08006059
 8006044:	08006061 	.word	0x08006061
 8006048:	08006069 	.word	0x08006069
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e050      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e04c      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e048      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e044      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006078:	2320      	movs	r3, #32
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e040      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006080:	2340      	movs	r3, #64	@ 0x40
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e03c      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e038      	b.n	8006102 <UART_SetConfig+0x5a6>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5b      	ldr	r2, [pc, #364]	@ (8006204 <UART_SetConfig+0x6a8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d130      	bne.n	80060fc <UART_SetConfig+0x5a0>
 800609a:	4b57      	ldr	r3, [pc, #348]	@ (80061f8 <UART_SetConfig+0x69c>)
 800609c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d826      	bhi.n	80060f4 <UART_SetConfig+0x598>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x550>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060d5 	.word	0x080060d5
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e01a      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e016      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e012      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e00e      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060e4:	2320      	movs	r3, #32
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e00a      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e006      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e002      	b.n	8006102 <UART_SetConfig+0x5a6>
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3f      	ldr	r2, [pc, #252]	@ (8006204 <UART_SetConfig+0x6a8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	f040 80f8 	bne.w	80062fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800610e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006112:	2b20      	cmp	r3, #32
 8006114:	dc46      	bgt.n	80061a4 <UART_SetConfig+0x648>
 8006116:	2b02      	cmp	r3, #2
 8006118:	f2c0 8082 	blt.w	8006220 <UART_SetConfig+0x6c4>
 800611c:	3b02      	subs	r3, #2
 800611e:	2b1e      	cmp	r3, #30
 8006120:	d87e      	bhi.n	8006220 <UART_SetConfig+0x6c4>
 8006122:	a201      	add	r2, pc, #4	@ (adr r2, 8006128 <UART_SetConfig+0x5cc>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	080061ab 	.word	0x080061ab
 800612c:	08006221 	.word	0x08006221
 8006130:	080061b3 	.word	0x080061b3
 8006134:	08006221 	.word	0x08006221
 8006138:	08006221 	.word	0x08006221
 800613c:	08006221 	.word	0x08006221
 8006140:	080061c3 	.word	0x080061c3
 8006144:	08006221 	.word	0x08006221
 8006148:	08006221 	.word	0x08006221
 800614c:	08006221 	.word	0x08006221
 8006150:	08006221 	.word	0x08006221
 8006154:	08006221 	.word	0x08006221
 8006158:	08006221 	.word	0x08006221
 800615c:	08006221 	.word	0x08006221
 8006160:	080061d3 	.word	0x080061d3
 8006164:	08006221 	.word	0x08006221
 8006168:	08006221 	.word	0x08006221
 800616c:	08006221 	.word	0x08006221
 8006170:	08006221 	.word	0x08006221
 8006174:	08006221 	.word	0x08006221
 8006178:	08006221 	.word	0x08006221
 800617c:	08006221 	.word	0x08006221
 8006180:	08006221 	.word	0x08006221
 8006184:	08006221 	.word	0x08006221
 8006188:	08006221 	.word	0x08006221
 800618c:	08006221 	.word	0x08006221
 8006190:	08006221 	.word	0x08006221
 8006194:	08006221 	.word	0x08006221
 8006198:	08006221 	.word	0x08006221
 800619c:	08006221 	.word	0x08006221
 80061a0:	08006213 	.word	0x08006213
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d037      	beq.n	8006218 <UART_SetConfig+0x6bc>
 80061a8:	e03a      	b.n	8006220 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061aa:	f7fe fd09 	bl	8004bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80061ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061b0:	e03c      	b.n	800622c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fd18 	bl	8004bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c0:	e034      	b.n	800622c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c2:	f107 0318 	add.w	r3, r7, #24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fe64 	bl	8004e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d0:	e02c      	b.n	800622c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d2:	4b09      	ldr	r3, [pc, #36]	@ (80061f8 <UART_SetConfig+0x69c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061de:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <UART_SetConfig+0x69c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	08db      	lsrs	r3, r3, #3
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	4a07      	ldr	r2, [pc, #28]	@ (8006208 <UART_SetConfig+0x6ac>)
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061f0:	e01c      	b.n	800622c <UART_SetConfig+0x6d0>
 80061f2:	bf00      	nop
 80061f4:	40011400 	.word	0x40011400
 80061f8:	58024400 	.word	0x58024400
 80061fc:	40007800 	.word	0x40007800
 8006200:	40007c00 	.word	0x40007c00
 8006204:	58000c00 	.word	0x58000c00
 8006208:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800620c:	4b9d      	ldr	r3, [pc, #628]	@ (8006484 <UART_SetConfig+0x928>)
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006210:	e00c      	b.n	800622c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006212:	4b9d      	ldr	r3, [pc, #628]	@ (8006488 <UART_SetConfig+0x92c>)
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006216:	e009      	b.n	800622c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621e:	e005      	b.n	800622c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800622a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 81de 	beq.w	80065f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	4a94      	ldr	r2, [pc, #592]	@ (800648c <UART_SetConfig+0x930>)
 800623a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623e:	461a      	mov	r2, r3
 8006240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006242:	fbb3 f3f2 	udiv	r3, r3, r2
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	4413      	add	r3, r2
 8006252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006254:	429a      	cmp	r2, r3
 8006256:	d305      	bcc.n	8006264 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800625e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800626a:	e1c1      	b.n	80065f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800626c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626e:	2200      	movs	r2, #0
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	60fa      	str	r2, [r7, #12]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	4a84      	ldr	r2, [pc, #528]	@ (800648c <UART_SetConfig+0x930>)
 800627a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627e:	b29b      	uxth	r3, r3
 8006280:	2200      	movs	r2, #0
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800628e:	f7fa f827 	bl	80002e0 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	020b      	lsls	r3, r1, #8
 80062a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062a8:	0202      	lsls	r2, r0, #8
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	6849      	ldr	r1, [r1, #4]
 80062ae:	0849      	lsrs	r1, r1, #1
 80062b0:	2000      	movs	r0, #0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4605      	mov	r5, r0
 80062b6:	eb12 0804 	adds.w	r8, r2, r4
 80062ba:	eb43 0905 	adc.w	r9, r3, r5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	469a      	mov	sl, r3
 80062c6:	4693      	mov	fp, r2
 80062c8:	4652      	mov	r2, sl
 80062ca:	465b      	mov	r3, fp
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	f7fa f806 	bl	80002e0 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4613      	mov	r3, r2
 80062da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e2:	d308      	bcc.n	80062f6 <UART_SetConfig+0x79a>
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ea:	d204      	bcs.n	80062f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e17c      	b.n	80065f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062fc:	e178      	b.n	80065f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006306:	f040 80c5 	bne.w	8006494 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800630a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800630e:	2b20      	cmp	r3, #32
 8006310:	dc48      	bgt.n	80063a4 <UART_SetConfig+0x848>
 8006312:	2b00      	cmp	r3, #0
 8006314:	db7b      	blt.n	800640e <UART_SetConfig+0x8b2>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d879      	bhi.n	800640e <UART_SetConfig+0x8b2>
 800631a:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <UART_SetConfig+0x7c4>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	080063ab 	.word	0x080063ab
 8006324:	080063b3 	.word	0x080063b3
 8006328:	0800640f 	.word	0x0800640f
 800632c:	0800640f 	.word	0x0800640f
 8006330:	080063bb 	.word	0x080063bb
 8006334:	0800640f 	.word	0x0800640f
 8006338:	0800640f 	.word	0x0800640f
 800633c:	0800640f 	.word	0x0800640f
 8006340:	080063cb 	.word	0x080063cb
 8006344:	0800640f 	.word	0x0800640f
 8006348:	0800640f 	.word	0x0800640f
 800634c:	0800640f 	.word	0x0800640f
 8006350:	0800640f 	.word	0x0800640f
 8006354:	0800640f 	.word	0x0800640f
 8006358:	0800640f 	.word	0x0800640f
 800635c:	0800640f 	.word	0x0800640f
 8006360:	080063db 	.word	0x080063db
 8006364:	0800640f 	.word	0x0800640f
 8006368:	0800640f 	.word	0x0800640f
 800636c:	0800640f 	.word	0x0800640f
 8006370:	0800640f 	.word	0x0800640f
 8006374:	0800640f 	.word	0x0800640f
 8006378:	0800640f 	.word	0x0800640f
 800637c:	0800640f 	.word	0x0800640f
 8006380:	0800640f 	.word	0x0800640f
 8006384:	0800640f 	.word	0x0800640f
 8006388:	0800640f 	.word	0x0800640f
 800638c:	0800640f 	.word	0x0800640f
 8006390:	0800640f 	.word	0x0800640f
 8006394:	0800640f 	.word	0x0800640f
 8006398:	0800640f 	.word	0x0800640f
 800639c:	0800640f 	.word	0x0800640f
 80063a0:	08006401 	.word	0x08006401
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d02e      	beq.n	8006406 <UART_SetConfig+0x8aa>
 80063a8:	e031      	b.n	800640e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063aa:	f7fd f991 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80063ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b0:	e033      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b2:	f7fd f9a3 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 80063b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b8:	e02f      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fc14 	bl	8004bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c8:	e027      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fd60 	bl	8004e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e01f      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063da:	4b2d      	ldr	r3, [pc, #180]	@ (8006490 <UART_SetConfig+0x934>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <UART_SetConfig+0x934>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	08db      	lsrs	r3, r3, #3
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	4a24      	ldr	r2, [pc, #144]	@ (8006484 <UART_SetConfig+0x928>)
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f8:	e00f      	b.n	800641a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <UART_SetConfig+0x928>)
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fe:	e00c      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006400:	4b21      	ldr	r3, [pc, #132]	@ (8006488 <UART_SetConfig+0x92c>)
 8006402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006404:	e009      	b.n	800641a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640c:	e005      	b.n	800641a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80e7 	beq.w	80065f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	4a19      	ldr	r2, [pc, #100]	@ (800648c <UART_SetConfig+0x930>)
 8006428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642c:	461a      	mov	r2, r3
 800642e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006430:	fbb3 f3f2 	udiv	r3, r3, r2
 8006434:	005a      	lsls	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d916      	bls.n	800647c <UART_SetConfig+0x920>
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006454:	d212      	bcs.n	800647c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	b29b      	uxth	r3, r3
 800645a:	f023 030f 	bic.w	r3, r3, #15
 800645e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	b29a      	uxth	r2, r3
 800646c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800646e:	4313      	orrs	r3, r2
 8006470:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e0b9      	b.n	80065f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006482:	e0b5      	b.n	80065f0 <UART_SetConfig+0xa94>
 8006484:	03d09000 	.word	0x03d09000
 8006488:	003d0900 	.word	0x003d0900
 800648c:	0800acd0 	.word	0x0800acd0
 8006490:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006494:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006498:	2b20      	cmp	r3, #32
 800649a:	dc49      	bgt.n	8006530 <UART_SetConfig+0x9d4>
 800649c:	2b00      	cmp	r3, #0
 800649e:	db7c      	blt.n	800659a <UART_SetConfig+0xa3e>
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d87a      	bhi.n	800659a <UART_SetConfig+0xa3e>
 80064a4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0x950>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	08006537 	.word	0x08006537
 80064b0:	0800653f 	.word	0x0800653f
 80064b4:	0800659b 	.word	0x0800659b
 80064b8:	0800659b 	.word	0x0800659b
 80064bc:	08006547 	.word	0x08006547
 80064c0:	0800659b 	.word	0x0800659b
 80064c4:	0800659b 	.word	0x0800659b
 80064c8:	0800659b 	.word	0x0800659b
 80064cc:	08006557 	.word	0x08006557
 80064d0:	0800659b 	.word	0x0800659b
 80064d4:	0800659b 	.word	0x0800659b
 80064d8:	0800659b 	.word	0x0800659b
 80064dc:	0800659b 	.word	0x0800659b
 80064e0:	0800659b 	.word	0x0800659b
 80064e4:	0800659b 	.word	0x0800659b
 80064e8:	0800659b 	.word	0x0800659b
 80064ec:	08006567 	.word	0x08006567
 80064f0:	0800659b 	.word	0x0800659b
 80064f4:	0800659b 	.word	0x0800659b
 80064f8:	0800659b 	.word	0x0800659b
 80064fc:	0800659b 	.word	0x0800659b
 8006500:	0800659b 	.word	0x0800659b
 8006504:	0800659b 	.word	0x0800659b
 8006508:	0800659b 	.word	0x0800659b
 800650c:	0800659b 	.word	0x0800659b
 8006510:	0800659b 	.word	0x0800659b
 8006514:	0800659b 	.word	0x0800659b
 8006518:	0800659b 	.word	0x0800659b
 800651c:	0800659b 	.word	0x0800659b
 8006520:	0800659b 	.word	0x0800659b
 8006524:	0800659b 	.word	0x0800659b
 8006528:	0800659b 	.word	0x0800659b
 800652c:	0800658d 	.word	0x0800658d
 8006530:	2b40      	cmp	r3, #64	@ 0x40
 8006532:	d02e      	beq.n	8006592 <UART_SetConfig+0xa36>
 8006534:	e031      	b.n	800659a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006536:	f7fd f8cb 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800653a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800653c:	e033      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800653e:	f7fd f8dd 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8006542:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006544:	e02f      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fb4e 	bl	8004bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006554:	e027      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006556:	f107 0318 	add.w	r3, r7, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fc9a 	bl	8004e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e01f      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006566:	4b2d      	ldr	r3, [pc, #180]	@ (800661c <UART_SetConfig+0xac0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006572:	4b2a      	ldr	r3, [pc, #168]	@ (800661c <UART_SetConfig+0xac0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	4a28      	ldr	r2, [pc, #160]	@ (8006620 <UART_SetConfig+0xac4>)
 800657e:	fa22 f303 	lsr.w	r3, r2, r3
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006584:	e00f      	b.n	80065a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006586:	4b26      	ldr	r3, [pc, #152]	@ (8006620 <UART_SetConfig+0xac4>)
 8006588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658a:	e00c      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <UART_SetConfig+0xac8>)
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006590:	e009      	b.n	80065a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006598:	e005      	b.n	80065a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065a4:	bf00      	nop
    }

    if (pclk != 0U)
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d021      	beq.n	80065f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <UART_SetConfig+0xacc>)
 80065b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	441a      	add	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d909      	bls.n	80065ea <UART_SetConfig+0xa8e>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065dc:	d205      	bcs.n	80065ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
 80065e8:	e002      	b.n	80065f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800660c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006610:	4618      	mov	r0, r3
 8006612:	3748      	adds	r7, #72	@ 0x48
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661a:	bf00      	nop
 800661c:	58024400 	.word	0x58024400
 8006620:	03d09000 	.word	0x03d09000
 8006624:	003d0900 	.word	0x003d0900
 8006628:	0800acd0 	.word	0x0800acd0

0800662c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800672a:	d10a      	bne.n	8006742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b098      	sub	sp, #96	@ 0x60
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006780:	f7fa ff2a 	bl	80015d8 <HAL_GetTick>
 8006784:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d12f      	bne.n	80067f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006794:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679c:	2200      	movs	r2, #0
 800679e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f88e 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d022      	beq.n	80067f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e063      	b.n	80068bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d149      	bne.n	8006896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006802:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800680a:	2200      	movs	r2, #0
 800680c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f857 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d03c      	beq.n	8006896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	623b      	str	r3, [r7, #32]
   return(result);
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30
 800683c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e6      	bne.n	800681c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60fb      	str	r3, [r7, #12]
   return(result);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686e:	61fa      	str	r2, [r7, #28]
 8006870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	69b9      	ldr	r1, [r7, #24]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	617b      	str	r3, [r7, #20]
   return(result);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e012      	b.n	80068bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3758      	adds	r7, #88	@ 0x58
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e04f      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068dc:	d04b      	beq.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fa fe7b 	bl	80015d8 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e04e      	b.n	8006996 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d037      	beq.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b80      	cmp	r3, #128	@ 0x80
 800690a:	d034      	beq.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d031      	beq.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b08      	cmp	r3, #8
 800691e:	d110      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2208      	movs	r2, #8
 8006926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f839 	bl	80069a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2208      	movs	r2, #8
 8006932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e029      	b.n	8006996 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800694c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006950:	d111      	bne.n	8006976 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800695a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f81f 	bl	80069a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e00f      	b.n	8006996 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	429a      	cmp	r2, r3
 8006984:	bf0c      	ite	eq
 8006986:	2301      	moveq	r3, #1
 8006988:	2300      	movne	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	429a      	cmp	r2, r3
 8006992:	d0a0      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b095      	sub	sp, #84	@ 0x54
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e6      	bne.n	80069a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <UART_EndRxTransfer+0xc8>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d118      	bne.n	8006a48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f023 0310 	bic.w	r3, r3, #16
 8006a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	613b      	str	r3, [r7, #16]
   return(result);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a5c:	bf00      	nop
 8006a5e:	3754      	adds	r7, #84	@ 0x54
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	effffffe 	.word	0xeffffffe

08006a6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e027      	b.n	8006ad2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	@ 0x24
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ab0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e02d      	b.n	8006b52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2224      	movs	r2, #36	@ 0x24
 8006b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f850 	bl	8006bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e02d      	b.n	8006bce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2224      	movs	r2, #36	@ 0x24
 8006b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f812 	bl	8006bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bf8:	e031      	b.n	8006c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bfa:	2310      	movs	r3, #16
 8006bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bfe:	2310      	movs	r3, #16
 8006c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	0e5b      	lsrs	r3, r3, #25
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	0f5b      	lsrs	r3, r3, #29
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	7b3a      	ldrb	r2, [r7, #12]
 8006c26:	4911      	ldr	r1, [pc, #68]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x94>)
 8006c28:	5c8a      	ldrb	r2, [r1, r2]
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c2e:	7b3a      	ldrb	r2, [r7, #12]
 8006c30:	490f      	ldr	r1, [pc, #60]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x98>)
 8006c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	7b7a      	ldrb	r2, [r7, #13]
 8006c44:	4909      	ldr	r1, [pc, #36]	@ (8006c6c <UARTEx_SetNbDataToProcess+0x94>)
 8006c46:	5c8a      	ldrb	r2, [r1, r2]
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c4c:	7b7a      	ldrb	r2, [r7, #13]
 8006c4e:	4908      	ldr	r1, [pc, #32]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x98>)
 8006c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	0800ace8 	.word	0x0800ace8
 8006c70:	0800acf0 	.word	0x0800acf0

08006c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c74:	b084      	sub	sp, #16
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 001c 	add.w	r0, r7, #28
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d121      	bne.n	8006cd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d50 <USB_CoreInit+0xdc>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d105      	bne.n	8006cc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 faaa 	bl	8007220 <USB_CoreReset>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
 8006cd0:	e01b      	b.n	8006d0a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa9e 	bl	8007220 <USB_CoreReset>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ce8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cfc:	e005      	b.n	8006d0a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d0a:	7fbb      	ldrb	r3, [r7, #30]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d116      	bne.n	8006d3e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <USB_CoreInit+0xe0>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f043 0206 	orr.w	r2, r3, #6
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f043 0220 	orr.w	r2, r3, #32
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4a:	b004      	add	sp, #16
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	ffbdffbf 	.word	0xffbdffbf
 8006d54:	03ee0000 	.word	0x03ee0000

08006d58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 0201 	bic.w	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d115      	bne.n	8006dc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006da8:	200a      	movs	r0, #10
 8006daa:	f7fa fc21 	bl	80015f0 <HAL_Delay>
      ms += 10U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	330a      	adds	r3, #10
 8006db2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa25 	bl	8007204 <USB_GetMode>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d01e      	beq.n	8006dfe <USB_SetCurrentMode+0x84>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dc4:	d9f0      	bls.n	8006da8 <USB_SetCurrentMode+0x2e>
 8006dc6:	e01a      	b.n	8006dfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d115      	bne.n	8006dfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dda:	200a      	movs	r0, #10
 8006ddc:	f7fa fc08 	bl	80015f0 <HAL_Delay>
      ms += 10U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	330a      	adds	r3, #10
 8006de4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa0c 	bl	8007204 <USB_GetMode>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <USB_SetCurrentMode+0x84>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006df6:	d9f0      	bls.n	8006dda <USB_SetCurrentMode+0x60>
 8006df8:	e001      	b.n	8006dfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e005      	b.n	8006e0a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e02:	d101      	bne.n	8006e08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e14:	b084      	sub	sp, #16
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e009      	b.n	8006e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3340      	adds	r3, #64	@ 0x40
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b0e      	cmp	r3, #14
 8006e4c:	d9f2      	bls.n	8006e34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11c      	bne.n	8006e90 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e64:	f043 0302 	orr.w	r3, r3, #2
 8006e68:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e005      	b.n	8006e9c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d10d      	bne.n	8006ecc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006eb8:	2100      	movs	r1, #0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f968 	bl	8007190 <USB_SetDevSpeed>
 8006ec0:	e008      	b.n	8006ed4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f963 	bl	8007190 <USB_SetDevSpeed>
 8006eca:	e003      	b.n	8006ed4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ecc:	2103      	movs	r1, #3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f95e 	bl	8007190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ed4:	2110      	movs	r1, #16
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8fa 	bl	80070d0 <USB_FlushTxFifo>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f924 	bl	8007134 <USB_FlushRxFifo>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f14:	461a      	mov	r2, r3
 8006f16:	2300      	movs	r3, #0
 8006f18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	e043      	b.n	8006fa8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f36:	d118      	bne.n	8006f6a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e013      	b.n	8006f7c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f60:	461a      	mov	r2, r3
 8006f62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e008      	b.n	8006f7c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fac:	461a      	mov	r2, r3
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d3b5      	bcc.n	8006f20 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	e043      	b.n	8007042 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fd0:	d118      	bne.n	8007004 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e013      	b.n	8007016 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e008      	b.n	8007016 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007010:	461a      	mov	r2, r3
 8007012:	2300      	movs	r3, #0
 8007014:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	2300      	movs	r3, #0
 8007026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	461a      	mov	r2, r3
 8007036:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800703a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3301      	adds	r3, #1
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007046:	461a      	mov	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4293      	cmp	r3, r2
 800704c:	d3b5      	bcc.n	8006fba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800705c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007060:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800706e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f043 0210 	orr.w	r2, r3, #16
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	4b0f      	ldr	r3, [pc, #60]	@ (80070c8 <USB_DevInit+0x2b4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007090:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f043 0208 	orr.w	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d105      	bne.n	80070b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	4b06      	ldr	r3, [pc, #24]	@ (80070cc <USB_DevInit+0x2b8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c4:	b004      	add	sp, #16
 80070c6:	4770      	bx	lr
 80070c8:	803c3800 	.word	0x803c3800
 80070cc:	40000004 	.word	0x40000004

080070d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ea:	d901      	bls.n	80070f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e01b      	b.n	8007128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	daf2      	bge.n	80070de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	019b      	lsls	r3, r3, #6
 8007100:	f043 0220 	orr.w	r2, r3, #32
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007114:	d901      	bls.n	800711a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e006      	b.n	8007128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b20      	cmp	r3, #32
 8007124:	d0f0      	beq.n	8007108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800714c:	d901      	bls.n	8007152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e018      	b.n	8007184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	daf2      	bge.n	8007140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2210      	movs	r2, #16
 8007162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007170:	d901      	bls.n	8007176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e006      	b.n	8007184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b10      	cmp	r3, #16
 8007180:	d0f0      	beq.n	8007164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071dc:	f023 0303 	bic.w	r3, r3, #3
 80071e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f003 0301 	and.w	r3, r3, #1
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007238:	d901      	bls.n	800723e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e01b      	b.n	8007276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	daf2      	bge.n	800722c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f043 0201 	orr.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007262:	d901      	bls.n	8007268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e006      	b.n	8007276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b01      	cmp	r3, #1
 8007272:	d0f0      	beq.n	8007256 <USB_CoreReset+0x36>

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <__NVIC_SetPriority>:
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	db0a      	blt.n	80072ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	490c      	ldr	r1, [pc, #48]	@ (80072d0 <__NVIC_SetPriority+0x4c>)
 800729e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072a2:	0112      	lsls	r2, r2, #4
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	440b      	add	r3, r1
 80072a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072ac:	e00a      	b.n	80072c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	4908      	ldr	r1, [pc, #32]	@ (80072d4 <__NVIC_SetPriority+0x50>)
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	3b04      	subs	r3, #4
 80072bc:	0112      	lsls	r2, r2, #4
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	440b      	add	r3, r1
 80072c2:	761a      	strb	r2, [r3, #24]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	e000e100 	.word	0xe000e100
 80072d4:	e000ed00 	.word	0xe000ed00

080072d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <SysTick_Handler+0x1c>)
 80072de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072e0:	f002 f8fa 	bl	80094d8 <xTaskGetSchedulerState>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d001      	beq.n	80072ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072ea:	f003 f8fd 	bl	800a4e8 <xPortSysTickHandler>
  }
}
 80072ee:	bf00      	nop
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000e010 	.word	0xe000e010

080072f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072fc:	2100      	movs	r1, #0
 80072fe:	f06f 0004 	mvn.w	r0, #4
 8007302:	f7ff ffbf 	bl	8007284 <__NVIC_SetPriority>
#endif
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007312:	f3ef 8305 	mrs	r3, IPSR
 8007316:	603b      	str	r3, [r7, #0]
  return(result);
 8007318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800731e:	f06f 0305 	mvn.w	r3, #5
 8007322:	607b      	str	r3, [r7, #4]
 8007324:	e00c      	b.n	8007340 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <osKernelInitialize+0x44>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d105      	bne.n	800733a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800732e:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <osKernelInitialize+0x44>)
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007334:	2300      	movs	r3, #0
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	e002      	b.n	8007340 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800733e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007340:	687b      	ldr	r3, [r7, #4]
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	2400080c 	.word	0x2400080c

08007354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735a:	f3ef 8305 	mrs	r3, IPSR
 800735e:	603b      	str	r3, [r7, #0]
  return(result);
 8007360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007366:	f06f 0305 	mvn.w	r3, #5
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	e010      	b.n	8007390 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800736e:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <osKernelStart+0x48>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d109      	bne.n	800738a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007376:	f7ff ffbf 	bl	80072f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800737a:	4b08      	ldr	r3, [pc, #32]	@ (800739c <osKernelStart+0x48>)
 800737c:	2202      	movs	r2, #2
 800737e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007380:	f001 fc46 	bl	8008c10 <vTaskStartScheduler>
      stat = osOK;
 8007384:	2300      	movs	r3, #0
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	e002      	b.n	8007390 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800738e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007390:	687b      	ldr	r3, [r7, #4]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	2400080c 	.word	0x2400080c

080073a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08e      	sub	sp, #56	@ 0x38
 80073a4:	af04      	add	r7, sp, #16
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b0:	f3ef 8305 	mrs	r3, IPSR
 80073b4:	617b      	str	r3, [r7, #20]
  return(result);
 80073b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d17e      	bne.n	80074ba <osThreadNew+0x11a>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d07b      	beq.n	80074ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073c2:	2380      	movs	r3, #128	@ 0x80
 80073c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073c6:	2318      	movs	r3, #24
 80073c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d045      	beq.n	8007466 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <osThreadNew+0x48>
        name = attr->name;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <osThreadNew+0x6e>
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2b38      	cmp	r3, #56	@ 0x38
 8007400:	d805      	bhi.n	800740e <osThreadNew+0x6e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <osThreadNew+0x72>
        return (NULL);
 800740e:	2300      	movs	r3, #0
 8007410:	e054      	b.n	80074bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00e      	beq.n	8007448 <osThreadNew+0xa8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007430:	d90a      	bls.n	8007448 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <osThreadNew+0xa8>
        mem = 1;
 8007442:	2301      	movs	r3, #1
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	e010      	b.n	800746a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <osThreadNew+0xca>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d108      	bne.n	800746a <osThreadNew+0xca>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <osThreadNew+0xca>
          mem = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	e001      	b.n	800746a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d110      	bne.n	8007492 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007478:	9202      	str	r2, [sp, #8]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 f9ce 	bl	8008828 <xTaskCreateStatic>
 800748c:	4603      	mov	r3, r0
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e013      	b.n	80074ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d110      	bne.n	80074ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	b29a      	uxth	r2, r3
 800749c:	f107 0310 	add.w	r3, r7, #16
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f001 fa1c 	bl	80088e8 <xTaskCreate>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <osThreadNew+0x11a>
            hTask = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074ba:	693b      	ldr	r3, [r7, #16]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3728      	adds	r7, #40	@ 0x28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <osThreadFlagsSet+0x1a>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da03      	bge.n	80074e6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80074de:	f06f 0303 	mvn.w	r3, #3
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e035      	b.n	8007552 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ec:	f3ef 8305 	mrs	r3, IPSR
 80074f0:	613b      	str	r3, [r7, #16]
  return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01f      	beq.n	8007538 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80074fc:	f107 0308 	add.w	r3, r7, #8
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	2300      	movs	r3, #0
 8007504:	2201      	movs	r2, #1
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6978      	ldr	r0, [r7, #20]
 800750a:	f002 f995 	bl	8009838 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800750e:	f107 030c 	add.w	r3, r7, #12
 8007512:	2200      	movs	r2, #0
 8007514:	9200      	str	r2, [sp, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	2100      	movs	r1, #0
 800751a:	6978      	ldr	r0, [r7, #20]
 800751c:	f002 f98c 	bl	8009838 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d015      	beq.n	8007552 <osThreadFlagsSet+0x8e>
 8007526:	4b0d      	ldr	r3, [pc, #52]	@ (800755c <osThreadFlagsSet+0x98>)
 8007528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	e00c      	b.n	8007552 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007538:	2300      	movs	r3, #0
 800753a:	2201      	movs	r2, #1
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6978      	ldr	r0, [r7, #20]
 8007540:	f002 f8b8 	bl	80096b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f002 f8b1 	bl	80096b4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	@ 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756c:	f3ef 8305 	mrs	r3, IPSR
 8007570:	617b      	str	r3, [r7, #20]
  return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8007578:	f06f 0305 	mvn.w	r3, #5
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800757e:	e06b      	b.n	8007658 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	da03      	bge.n	800758e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007586:	f06f 0303 	mvn.w	r3, #3
 800758a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800758c:	e064      	b.n	8007658 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800759c:	e001      	b.n	80075a2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80075aa:	f001 fc4d 	bl	8008e48 <xTaskGetTickCount>
 80075ae:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80075b0:	f107 0210 	add.w	r2, r7, #16
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075b8:	2000      	movs	r0, #0
 80075ba:	f002 f81b 	bl	80095f4 <xTaskNotifyWait>
 80075be:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d137      	bne.n	8007636 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80075c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4013      	ands	r3, r2
 80075cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d2:	4313      	orrs	r3, r2
 80075d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	4013      	ands	r3, r2
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d032      	beq.n	8007652 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10f      	bne.n	8007612 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80075f2:	f06f 0302 	mvn.w	r3, #2
 80075f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80075f8:	e02e      	b.n	8007658 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d128      	bne.n	8007656 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800760a:	f06f 0302 	mvn.w	r3, #2
 800760e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8007610:	e022      	b.n	8007658 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007612:	f001 fc19 	bl	8008e48 <xTaskGetTickCount>
 8007616:	4602      	mov	r2, r0
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	429a      	cmp	r2, r3
 8007624:	d902      	bls.n	800762c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
 800762a:	e00e      	b.n	800764a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800762c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
 8007634:	e009      	b.n	800764a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800763c:	f06f 0302 	mvn.w	r3, #2
 8007640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007642:	e002      	b.n	800764a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007644:	f06f 0301 	mvn.w	r3, #1
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1af      	bne.n	80075b0 <osThreadFlagsWait+0x50>
 8007650:	e002      	b.n	8007658 <osThreadFlagsWait+0xf8>
            break;
 8007652:	bf00      	nop
 8007654:	e000      	b.n	8007658 <osThreadFlagsWait+0xf8>
            break;
 8007656:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800765a:	4618      	mov	r0, r3
 800765c:	3730      	adds	r7, #48	@ 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800766a:	f3ef 8305 	mrs	r3, IPSR
 800766e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <osDelay+0x1c>
    stat = osErrorISR;
 8007676:	f06f 0305 	mvn.w	r3, #5
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e007      	b.n	800768e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fa8b 	bl	8008ba4 <vTaskDelay>
    }
  }

  return (stat);
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a4:	f3ef 8305 	mrs	r3, IPSR
 80076a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80076aa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d12d      	bne.n	800770c <osEventFlagsNew+0x74>
    mem = -1;
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076b4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d015      	beq.n	80076e8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d006      	beq.n	80076d2 <osEventFlagsNew+0x3a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b1f      	cmp	r3, #31
 80076ca:	d902      	bls.n	80076d2 <osEventFlagsNew+0x3a>
        mem = 1;
 80076cc:	2301      	movs	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	e00c      	b.n	80076ec <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d108      	bne.n	80076ec <osEventFlagsNew+0x54>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <osEventFlagsNew+0x54>
          mem = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	e001      	b.n	80076ec <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d106      	bne.n	8007700 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f950 	bl	800799c <xEventGroupCreateStatic>
 80076fc:	6178      	str	r0, [r7, #20]
 80076fe:	e005      	b.n	800770c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007706:	f000 f982 	bl	8007a0e <xEventGroupCreate>
 800770a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800770c:	697b      	ldr	r3, [r7, #20]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007722:	f3ef 8305 	mrs	r3, IPSR
 8007726:	60bb      	str	r3, [r7, #8]
  return(result);
 8007728:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800772a:	2b00      	cmp	r3, #0
 800772c:	d174      	bne.n	8007818 <osMutexNew+0x102>
    if (attr != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e001      	b.n	8007740 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <osMutexNew+0x3a>
      rmtx = 1U;
 800774a:	2301      	movs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e001      	b.n	8007754 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d15c      	bne.n	8007818 <osMutexNew+0x102>
      mem = -1;
 800775e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007762:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d015      	beq.n	8007796 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d006      	beq.n	8007780 <osMutexNew+0x6a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2b4f      	cmp	r3, #79	@ 0x4f
 8007778:	d902      	bls.n	8007780 <osMutexNew+0x6a>
          mem = 1;
 800777a:	2301      	movs	r3, #1
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	e00c      	b.n	800779a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <osMutexNew+0x84>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <osMutexNew+0x84>
            mem = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e001      	b.n	800779a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d112      	bne.n	80077c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2004      	movs	r0, #4
 80077ae:	f000 fb74 	bl	8007e9a <xQueueCreateMutexStatic>
 80077b2:	61f8      	str	r0, [r7, #28]
 80077b4:	e016      	b.n	80077e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2001      	movs	r0, #1
 80077be:	f000 fb6c 	bl	8007e9a <xQueueCreateMutexStatic>
 80077c2:	61f8      	str	r0, [r7, #28]
 80077c4:	e00e      	b.n	80077e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10b      	bne.n	80077e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80077d2:	2004      	movs	r0, #4
 80077d4:	f000 fb49 	bl	8007e6a <xQueueCreateMutex>
 80077d8:	61f8      	str	r0, [r7, #28]
 80077da:	e003      	b.n	80077e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80077dc:	2001      	movs	r0, #1
 80077de:	f000 fb44 	bl	8007e6a <xQueueCreateMutex>
 80077e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <osMutexNew+0xee>
        if (attr != NULL) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <osMutexNew+0xe2>
          name = attr->name;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e001      	b.n	80077fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80077fc:	68f9      	ldr	r1, [r7, #12]
 80077fe:	69f8      	ldr	r0, [r7, #28]
 8007800:	f000 ff8a 	bl	8008718 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <osMutexNew+0x102>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007818:	69fb      	ldr	r3, [r7, #28]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3720      	adds	r7, #32
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007822:	b580      	push	{r7, lr}
 8007824:	b08a      	sub	sp, #40	@ 0x28
 8007826:	af02      	add	r7, sp, #8
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007832:	f3ef 8305 	mrs	r3, IPSR
 8007836:	613b      	str	r3, [r7, #16]
  return(result);
 8007838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800783a:	2b00      	cmp	r3, #0
 800783c:	d175      	bne.n	800792a <osSemaphoreNew+0x108>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d072      	beq.n	800792a <osSemaphoreNew+0x108>
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	429a      	cmp	r2, r3
 800784a:	d86e      	bhi.n	800792a <osSemaphoreNew+0x108>
    mem = -1;
 800784c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d015      	beq.n	8007884 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <osSemaphoreNew+0x4c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b4f      	cmp	r3, #79	@ 0x4f
 8007866:	d902      	bls.n	800786e <osSemaphoreNew+0x4c>
        mem = 1;
 8007868:	2301      	movs	r3, #1
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	e00c      	b.n	8007888 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <osSemaphoreNew+0x66>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <osSemaphoreNew+0x66>
          mem = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	e001      	b.n	8007888 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800788e:	d04c      	beq.n	800792a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d128      	bne.n	80078e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d10a      	bne.n	80078b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2203      	movs	r2, #3
 80078a2:	9200      	str	r2, [sp, #0]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	2001      	movs	r0, #1
 80078aa:	f000 f9e9 	bl	8007c80 <xQueueGenericCreateStatic>
 80078ae:	61f8      	str	r0, [r7, #28]
 80078b0:	e005      	b.n	80078be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80078b2:	2203      	movs	r2, #3
 80078b4:	2100      	movs	r1, #0
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 fa5f 	bl	8007d7a <xQueueGenericCreate>
 80078bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d022      	beq.n	800790a <osSemaphoreNew+0xe8>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01f      	beq.n	800790a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078ca:	2300      	movs	r3, #0
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	69f8      	ldr	r0, [r7, #28]
 80078d2:	f000 fb6b 	bl	8007fac <xQueueGenericSend>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d016      	beq.n	800790a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80078dc:	69f8      	ldr	r0, [r7, #28]
 80078de:	f000 fde7 	bl	80084b0 <vQueueDelete>
            hSemaphore = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	e010      	b.n	800790a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d108      	bne.n	8007900 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	461a      	mov	r2, r3
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 faea 	bl	8007ed0 <xQueueCreateCountingSemaphoreStatic>
 80078fc:	61f8      	str	r0, [r7, #28]
 80078fe:	e004      	b.n	800790a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fb1d 	bl	8007f42 <xQueueCreateCountingSemaphore>
 8007908:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00c      	beq.n	800792a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e001      	b.n	8007922 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007922:	6979      	ldr	r1, [r7, #20]
 8007924:	69f8      	ldr	r0, [r7, #28]
 8007926:	f000 fef7 	bl	8008718 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800792a:	69fb      	ldr	r3, [r7, #28]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a07      	ldr	r2, [pc, #28]	@ (8007960 <vApplicationGetIdleTaskMemory+0x2c>)
 8007944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4a06      	ldr	r2, [pc, #24]	@ (8007964 <vApplicationGetIdleTaskMemory+0x30>)
 800794a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2280      	movs	r2, #128	@ 0x80
 8007950:	601a      	str	r2, [r3, #0]
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	24000810 	.word	0x24000810
 8007964:	240008b8 	.word	0x240008b8

08007968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4a07      	ldr	r2, [pc, #28]	@ (8007994 <vApplicationGetTimerTaskMemory+0x2c>)
 8007978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4a06      	ldr	r2, [pc, #24]	@ (8007998 <vApplicationGetTimerTaskMemory+0x30>)
 800797e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007986:	601a      	str	r2, [r3, #0]
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	24000ab8 	.word	0x24000ab8
 8007998:	24000b60 	.word	0x24000b60

0800799c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80079c2:	2320      	movs	r3, #32
 80079c4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d00b      	beq.n	80079e4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	60fb      	str	r3, [r7, #12]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f822 	bl	8007a42 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2201      	movs	r2, #1
 8007a02:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007a04:	697b      	ldr	r3, [r7, #20]
	}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007a14:	2020      	movs	r0, #32
 8007a16:	f002 fdf9 	bl	800a60c <pvPortMalloc>
 8007a1a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f808 	bl	8007a42 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007a38:	687b      	ldr	r3, [r7, #4]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f103 0208 	add.w	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f103 0208 	add.w	r2, r3, #8
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f103 0208 	add.w	r2, r3, #8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007afa:	d103      	bne.n	8007b04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e00c      	b.n	8007b1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3308      	adds	r3, #8
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e002      	b.n	8007b12 <vListInsert+0x2e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d2f6      	bcs.n	8007b0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6852      	ldr	r2, [r2, #4]
 8007b76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d103      	bne.n	8007b8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	1e5a      	subs	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <xQueueGenericReset+0x2c>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60bb      	str	r3, [r7, #8]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bd8:	f002 fbf6 	bl	800a3c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007be8:	fb01 f303 	mul.w	r3, r1, r3
 8007bec:	441a      	add	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	441a      	add	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	22ff      	movs	r2, #255	@ 0xff
 8007c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22ff      	movs	r2, #255	@ 0xff
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d114      	bne.n	8007c58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01a      	beq.n	8007c6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3310      	adds	r3, #16
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fa86 	bl	800914c <xTaskRemoveFromEventList>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d012      	beq.n	8007c6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c46:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <xQueueGenericReset+0xd0>)
 8007c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	e009      	b.n	8007c6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3310      	adds	r3, #16
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fef0 	bl	8007a42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3324      	adds	r3, #36	@ 0x24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff feeb 	bl	8007a42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c6c:	f002 fbde 	bl	800a42c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c70:	2301      	movs	r3, #1
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	@ 0x38
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop
 8007cc8:	e7fd      	b.n	8007cc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <xQueueGenericCreateStatic+0x56>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <xQueueGenericCreateStatic+0x5a>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueGenericCreateStatic+0x5c>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10b      	bne.n	8007cf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	623b      	str	r3, [r7, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <xQueueGenericCreateStatic+0x84>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <xQueueGenericCreateStatic+0x88>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <xQueueGenericCreateStatic+0x8a>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	61fb      	str	r3, [r7, #28]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d26:	2350      	movs	r3, #80	@ 0x50
 8007d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b50      	cmp	r3, #80	@ 0x50
 8007d2e:	d00b      	beq.n	8007d48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	61bb      	str	r3, [r7, #24]
}
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	e7fd      	b.n	8007d44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00d      	beq.n	8007d70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f840 	bl	8007df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3730      	adds	r7, #48	@ 0x30
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b08a      	sub	sp, #40	@ 0x28
 8007d7e:	af02      	add	r7, sp, #8
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4613      	mov	r3, r2
 8007d86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	613b      	str	r3, [r7, #16]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3350      	adds	r3, #80	@ 0x50
 8007db4:	4618      	mov	r0, r3
 8007db6:	f002 fc29 	bl	800a60c <pvPortMalloc>
 8007dba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	3350      	adds	r3, #80	@ 0x50
 8007dca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dd4:	79fa      	ldrb	r2, [r7, #7]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f805 	bl	8007df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007de6:	69bb      	ldr	r3, [r7, #24]
	}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e1e:	2101      	movs	r1, #1
 8007e20:	69b8      	ldr	r0, [r7, #24]
 8007e22:	f7ff fec3 	bl	8007bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e56:	2300      	movs	r3, #0
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f8a5 	bl	8007fac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	4603      	mov	r3, r0
 8007e72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e74:	2301      	movs	r3, #1
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6939      	ldr	r1, [r7, #16]
 8007e82:	6978      	ldr	r0, [r7, #20]
 8007e84:	f7ff ff79 	bl	8007d7a <xQueueGenericCreate>
 8007e88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff ffd3 	bl	8007e36 <prvInitialiseMutex>

		return xNewQueue;
 8007e90:	68fb      	ldr	r3, [r7, #12]
	}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b088      	sub	sp, #32
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	6039      	str	r1, [r7, #0]
 8007ea4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6939      	ldr	r1, [r7, #16]
 8007eb8:	6978      	ldr	r0, [r7, #20]
 8007eba:	f7ff fee1 	bl	8007c80 <xQueueGenericCreateStatic>
 8007ebe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff ffb8 	bl	8007e36 <prvInitialiseMutex>

		return xNewQueue;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	@ 0x28
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10b      	bne.n	8007efa <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	61bb      	str	r3, [r7, #24]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d90b      	bls.n	8007f1a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	617b      	str	r3, [r7, #20]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7ff feab 	bl	8007c80 <xQueueGenericCreateStatic>
 8007f2a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f38:	69fb      	ldr	r3, [r7, #28]
	}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	613b      	str	r3, [r7, #16]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d90b      	bls.n	8007f8a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60fb      	str	r3, [r7, #12]
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff fef3 	bl	8007d7a <xQueueGenericCreate>
 8007f94:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fa2:	697b      	ldr	r3, [r7, #20]
	}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	@ 0x38
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10b      	bne.n	8007fe0 <xQueueGenericSend+0x34>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	e7fd      	b.n	8007fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d103      	bne.n	8007fee <xQueueGenericSend+0x42>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <xQueueGenericSend+0x46>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueGenericSend+0x48>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10b      	bne.n	8008010 <xQueueGenericSend+0x64>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	e7fd      	b.n	800800c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d103      	bne.n	800801e <xQueueGenericSend+0x72>
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <xQueueGenericSend+0x76>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueGenericSend+0x78>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xQueueGenericSend+0x94>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008040:	f001 fa4a 	bl	80094d8 <xTaskGetSchedulerState>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <xQueueGenericSend+0xa4>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGenericSend+0xa8>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGenericSend+0xaa>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <xQueueGenericSend+0xc6>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61fb      	str	r3, [r7, #28]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008072:	f002 f9a9 	bl	800a3c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <xQueueGenericSend+0xdc>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d129      	bne.n	80080dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800808e:	f000 fa33 	bl	80084f8 <prvCopyDataToQueue>
 8008092:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d010      	beq.n	80080be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	3324      	adds	r3, #36	@ 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f853 	bl	800914c <xTaskRemoveFromEventList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d013      	beq.n	80080d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080ac:	4b3f      	ldr	r3, [pc, #252]	@ (80081ac <xQueueGenericSend+0x200>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	e00a      	b.n	80080d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080c4:	4b39      	ldr	r3, [pc, #228]	@ (80081ac <xQueueGenericSend+0x200>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080d4:	f002 f9aa 	bl	800a42c <vPortExitCritical>
				return pdPASS;
 80080d8:	2301      	movs	r3, #1
 80080da:	e063      	b.n	80081a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080e2:	f002 f9a3 	bl	800a42c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e05c      	b.n	80081a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f88d 	bl	8009214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080fe:	f002 f995 	bl	800a42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008102:	f000 fdf5 	bl	8008cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008106:	f002 f95f 	bl	800a3c8 <vPortEnterCritical>
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008110:	b25b      	sxtb	r3, r3
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008116:	d103      	bne.n	8008120 <xQueueGenericSend+0x174>
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008126:	b25b      	sxtb	r3, r3
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800812c:	d103      	bne.n	8008136 <xQueueGenericSend+0x18a>
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008136:	f002 f979 	bl	800a42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800813a:	1d3a      	adds	r2, r7, #4
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f001 f87c 	bl	8009240 <xTaskCheckForTimeOut>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d124      	bne.n	8008198 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800814e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008150:	f000 faca 	bl	80086e8 <prvIsQueueFull>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	3310      	adds	r3, #16
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ffa0 	bl	80090a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800816a:	f000 fa55 	bl	8008618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800816e:	f000 fdcd 	bl	8008d0c <xTaskResumeAll>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	f47f af7c 	bne.w	8008072 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800817a:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <xQueueGenericSend+0x200>)
 800817c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	e772      	b.n	8008072 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800818c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800818e:	f000 fa43 	bl	8008618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008192:	f000 fdbb 	bl	8008d0c <xTaskResumeAll>
 8008196:	e76c      	b.n	8008072 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800819a:	f000 fa3d 	bl	8008618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800819e:	f000 fdb5 	bl	8008d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3738      	adds	r7, #56	@ 0x38
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b090      	sub	sp, #64	@ 0x40
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80081c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d103      	bne.n	80081ee <xQueueGenericSendFromISR+0x3e>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <xQueueGenericSendFromISR+0x42>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <xQueueGenericSendFromISR+0x44>
 80081f2:	2300      	movs	r3, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	e7fd      	b.n	800820c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d103      	bne.n	800821e <xQueueGenericSendFromISR+0x6e>
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <xQueueGenericSendFromISR+0x72>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <xQueueGenericSendFromISR+0x74>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	623b      	str	r3, [r7, #32]
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	e7fd      	b.n	800823c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008240:	f002 f9a2 	bl	800a588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008244:	f3ef 8211 	mrs	r2, BASEPRI
 8008248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61fa      	str	r2, [r7, #28]
 800825a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800825c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <xQueueGenericSendFromISR+0xc2>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d12f      	bne.n	80082d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008288:	f000 f936 	bl	80084f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800828c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008294:	d112      	bne.n	80082bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829a:	2b00      	cmp	r3, #0
 800829c:	d016      	beq.n	80082cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	3324      	adds	r3, #36	@ 0x24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 ff52 	bl	800914c <xTaskRemoveFromEventList>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00e      	beq.n	80082cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e007      	b.n	80082cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80082c0:	3301      	adds	r3, #1
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	b25a      	sxtb	r2, r3
 80082c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80082cc:	2301      	movs	r3, #1
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80082d0:	e001      	b.n	80082d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3740      	adds	r7, #64	@ 0x40
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	@ 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <xQueueReceive+0x32>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	623b      	str	r3, [r7, #32]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <xQueueReceive+0x40>
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <xQueueReceive+0x44>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <xQueueReceive+0x46>
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <xQueueReceive+0x62>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	61fb      	str	r3, [r7, #28]
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834e:	f001 f8c3 	bl	80094d8 <xTaskGetSchedulerState>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <xQueueReceive+0x72>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueReceive+0x76>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueReceive+0x78>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <xQueueReceive+0x94>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	61bb      	str	r3, [r7, #24]
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008380:	f002 f822 	bl	800a3c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01f      	beq.n	80083d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008394:	f000 f91a 	bl	80085cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	1e5a      	subs	r2, r3, #1
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00f      	beq.n	80083c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083aa:	3310      	adds	r3, #16
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fecd 	bl	800914c <xTaskRemoveFromEventList>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083b8:	4b3c      	ldr	r3, [pc, #240]	@ (80084ac <xQueueReceive+0x1c0>)
 80083ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083c8:	f002 f830 	bl	800a42c <vPortExitCritical>
				return pdPASS;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e069      	b.n	80084a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083d6:	f002 f829 	bl	800a42c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083da:	2300      	movs	r3, #0
 80083dc:	e062      	b.n	80084a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e4:	f107 0310 	add.w	r3, r7, #16
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 ff13 	bl	8009214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f2:	f002 f81b 	bl	800a42c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083f6:	f000 fc7b 	bl	8008cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083fa:	f001 ffe5 	bl	800a3c8 <vPortEnterCritical>
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008404:	b25b      	sxtb	r3, r3
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800840a:	d103      	bne.n	8008414 <xQueueReceive+0x128>
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008420:	d103      	bne.n	800842a <xQueueReceive+0x13e>
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800842a:	f001 ffff 	bl	800a42c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800842e:	1d3a      	adds	r2, r7, #4
 8008430:	f107 0310 	add.w	r3, r7, #16
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f000 ff02 	bl	8009240 <xTaskCheckForTimeOut>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d123      	bne.n	800848a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008444:	f000 f93a 	bl	80086bc <prvIsQueueEmpty>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d017      	beq.n	800847e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	3324      	adds	r3, #36	@ 0x24
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fe26 	bl	80090a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800845c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845e:	f000 f8db 	bl	8008618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008462:	f000 fc53 	bl	8008d0c <xTaskResumeAll>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d189      	bne.n	8008380 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <xQueueReceive+0x1c0>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e780      	b.n	8008380 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800847e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008480:	f000 f8ca 	bl	8008618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008484:	f000 fc42 	bl	8008d0c <xTaskResumeAll>
 8008488:	e77a      	b.n	8008380 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800848a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800848c:	f000 f8c4 	bl	8008618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008490:	f000 fc3c 	bl	8008d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008496:	f000 f911 	bl	80086bc <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	f43f af6f 	beq.w	8008380 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3730      	adds	r7, #48	@ 0x30
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <vQueueDelete+0x2a>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60bb      	str	r3, [r7, #8]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f946 	bl	800876c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f002 f95c 	bl	800a7a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d14d      	bne.n	80085ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fff6 	bl	8009514 <xTaskPriorityDisinherit>
 8008528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e043      	b.n	80085ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d119      	bne.n	800856c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6858      	ldr	r0, [r3, #4]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	461a      	mov	r2, r3
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	f002 fad4 	bl	800aaf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008550:	441a      	add	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	d32b      	bcc.n	80085ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	e026      	b.n	80085ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68d8      	ldr	r0, [r3, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008574:	461a      	mov	r2, r3
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	f002 faba 	bl	800aaf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	425b      	negs	r3, r3
 8008586:	441a      	add	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d207      	bcs.n	80085a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a0:	425b      	negs	r3, r3
 80085a2:	441a      	add	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d105      	bne.n	80085ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085c2:	697b      	ldr	r3, [r7, #20]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d018      	beq.n	8008610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	441a      	add	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d303      	bcc.n	8008600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68d9      	ldr	r1, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	461a      	mov	r2, r3
 800860a:	6838      	ldr	r0, [r7, #0]
 800860c:	f002 fa70 	bl	800aaf0 <memcpy>
	}
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008620:	f001 fed2 	bl	800a3c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800862a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862c:	e011      	b.n	8008652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d012      	beq.n	800865c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3324      	adds	r3, #36	@ 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fd86 	bl	800914c <xTaskRemoveFromEventList>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008646:	f000 fe5f 	bl	8009308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	3b01      	subs	r3, #1
 800864e:	b2db      	uxtb	r3, r3
 8008650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008656:	2b00      	cmp	r3, #0
 8008658:	dce9      	bgt.n	800862e <prvUnlockQueue+0x16>
 800865a:	e000      	b.n	800865e <prvUnlockQueue+0x46>
					break;
 800865c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	22ff      	movs	r2, #255	@ 0xff
 8008662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008666:	f001 fee1 	bl	800a42c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800866a:	f001 fead 	bl	800a3c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008676:	e011      	b.n	800869c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3310      	adds	r3, #16
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fd61 	bl	800914c <xTaskRemoveFromEventList>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008690:	f000 fe3a 	bl	8009308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	3b01      	subs	r3, #1
 8008698:	b2db      	uxtb	r3, r3
 800869a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800869c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dce9      	bgt.n	8008678 <prvUnlockQueue+0x60>
 80086a4:	e000      	b.n	80086a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	22ff      	movs	r2, #255	@ 0xff
 80086ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 febc 	bl	800a42c <vPortExitCritical>
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c4:	f001 fe80 	bl	800a3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e001      	b.n	80086da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086da:	f001 fea7 	bl	800a42c <vPortExitCritical>

	return xReturn;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f0:	f001 fe6a 	bl	800a3c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d102      	bne.n	8008706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e001      	b.n	800870a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800870a:	f001 fe8f 	bl	800a42c <vPortExitCritical>

	return xReturn;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e014      	b.n	8008752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008728:	4a0f      	ldr	r2, [pc, #60]	@ (8008768 <vQueueAddToRegistry+0x50>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008734:	490c      	ldr	r1, [pc, #48]	@ (8008768 <vQueueAddToRegistry+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800873e:	4a0a      	ldr	r2, [pc, #40]	@ (8008768 <vQueueAddToRegistry+0x50>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4413      	add	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800874a:	e006      	b.n	800875a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b07      	cmp	r3, #7
 8008756:	d9e7      	bls.n	8008728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	24000f60 	.word	0x24000f60

0800876c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e016      	b.n	80087a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800877a:	4a10      	ldr	r2, [pc, #64]	@ (80087bc <vQueueUnregisterQueue+0x50>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d10b      	bne.n	80087a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800878a:	4a0c      	ldr	r2, [pc, #48]	@ (80087bc <vQueueUnregisterQueue+0x50>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2100      	movs	r1, #0
 8008790:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008794:	4a09      	ldr	r2, [pc, #36]	@ (80087bc <vQueueUnregisterQueue+0x50>)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	2200      	movs	r2, #0
 800879e:	605a      	str	r2, [r3, #4]
				break;
 80087a0:	e006      	b.n	80087b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b07      	cmp	r3, #7
 80087ac:	d9e5      	bls.n	800877a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	24000f60 	.word	0x24000f60

080087c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087d0:	f001 fdfa 	bl	800a3c8 <vPortEnterCritical>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e0:	d103      	bne.n	80087ea <vQueueWaitForMessageRestricted+0x2a>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087f0:	b25b      	sxtb	r3, r3
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087f6:	d103      	bne.n	8008800 <vQueueWaitForMessageRestricted+0x40>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008800:	f001 fe14 	bl	800a42c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	3324      	adds	r3, #36	@ 0x24
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fc6d 	bl	80090f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f7ff fefc 	bl	8008618 <prvUnlockQueue>
	}
 8008820:	bf00      	nop
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af04      	add	r7, sp, #16
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <xTaskCreateStatic+0x2c>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	623b      	str	r3, [r7, #32]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <xTaskCreateStatic+0x4a>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61fb      	str	r3, [r7, #28]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008872:	23a8      	movs	r3, #168	@ 0xa8
 8008874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2ba8      	cmp	r3, #168	@ 0xa8
 800887a:	d00b      	beq.n	8008894 <xTaskCreateStatic+0x6c>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	61bb      	str	r3, [r7, #24]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008894:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <xTaskCreateStatic+0xb2>
 800889c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01b      	beq.n	80088da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088b4:	2300      	movs	r3, #0
 80088b6:	9303      	str	r3, [sp, #12]
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	9302      	str	r3, [sp, #8]
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f851 	bl	8008974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088d4:	f000 f8f6 	bl	8008ac4 <prvAddNewTaskToReadyList>
 80088d8:	e001      	b.n	80088de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088de:	697b      	ldr	r3, [r7, #20]
	}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3728      	adds	r7, #40	@ 0x28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08c      	sub	sp, #48	@ 0x30
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fe85 	bl	800a60c <pvPortMalloc>
 8008902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00e      	beq.n	8008928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800890a:	20a8      	movs	r0, #168	@ 0xa8
 800890c:	f001 fe7e 	bl	800a60c <pvPortMalloc>
 8008910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	631a      	str	r2, [r3, #48]	@ 0x30
 800891e:	e005      	b.n	800892c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008920:	6978      	ldr	r0, [r7, #20]
 8008922:	f001 ff41 	bl	800a7a8 <vPortFree>
 8008926:	e001      	b.n	800892c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d017      	beq.n	8008962 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	2300      	movs	r3, #0
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f80f 	bl	8008974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008956:	69f8      	ldr	r0, [r7, #28]
 8008958:	f000 f8b4 	bl	8008ac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800895c:	2301      	movs	r3, #1
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e002      	b.n	8008968 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008968:	69bb      	ldr	r3, [r7, #24]
	}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	461a      	mov	r2, r3
 800898c:	21a5      	movs	r1, #165	@ 0xa5
 800898e:	f002 f82b 	bl	800a9e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800899c:	440b      	add	r3, r1
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	617b      	str	r3, [r7, #20]
}
 80089c8:	bf00      	nop
 80089ca:	bf00      	nop
 80089cc:	e7fd      	b.n	80089ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01f      	beq.n	8008a14 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089d4:	2300      	movs	r3, #0
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	e012      	b.n	8008a00 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	7819      	ldrb	r1, [r3, #0]
 80089e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	3334      	adds	r3, #52	@ 0x34
 80089ea:	460a      	mov	r2, r1
 80089ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d006      	beq.n	8008a08 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	3301      	adds	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b0f      	cmp	r3, #15
 8008a04:	d9e9      	bls.n	80089da <prvInitialiseNewTask+0x66>
 8008a06:	e000      	b.n	8008a0a <prvInitialiseNewTask+0x96>
			{
				break;
 8008a08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a12:	e003      	b.n	8008a1c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	2b37      	cmp	r3, #55	@ 0x37
 8008a20:	d901      	bls.n	8008a26 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a22:	2337      	movs	r3, #55	@ 0x37
 8008a24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	2200      	movs	r2, #0
 8008a36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff f820 	bl	8007a82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	3318      	adds	r3, #24
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff f81b 	bl	8007a82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a74:	3354      	adds	r3, #84	@ 0x54
 8008a76:	224c      	movs	r2, #76	@ 0x4c
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 ffb4 	bl	800a9e8 <memset>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab8 <prvInitialiseNewTask+0x144>)
 8008a84:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	4a0c      	ldr	r2, [pc, #48]	@ (8008abc <prvInitialiseNewTask+0x148>)
 8008a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ac0 <prvInitialiseNewTask+0x14c>)
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	68f9      	ldr	r1, [r7, #12]
 8008a96:	69b8      	ldr	r0, [r7, #24]
 8008a98:	f001 fb62 	bl	800a160 <pxPortInitialiseStack>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aae:	bf00      	nop
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	240051f4 	.word	0x240051f4
 8008abc:	2400525c 	.word	0x2400525c
 8008ac0:	240052c4 	.word	0x240052c4

08008ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008acc:	f001 fc7c 	bl	800a3c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8008b88 <prvAddNewTaskToReadyList+0xc4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b88 <prvAddNewTaskToReadyList+0xc4>)
 8008ad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ada:	4b2c      	ldr	r3, [pc, #176]	@ (8008b8c <prvAddNewTaskToReadyList+0xc8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b8c <prvAddNewTaskToReadyList+0xc8>)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ae8:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <prvAddNewTaskToReadyList+0xc4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d110      	bne.n	8008b12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008af0:	f000 fc2e 	bl	8009350 <prvInitialiseTaskLists>
 8008af4:	e00d      	b.n	8008b12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008af6:	4b26      	ldr	r3, [pc, #152]	@ (8008b90 <prvAddNewTaskToReadyList+0xcc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008afe:	4b23      	ldr	r3, [pc, #140]	@ (8008b8c <prvAddNewTaskToReadyList+0xc8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d802      	bhi.n	8008b12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <prvAddNewTaskToReadyList+0xc8>)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b12:	4b20      	ldr	r3, [pc, #128]	@ (8008b94 <prvAddNewTaskToReadyList+0xd0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a1e      	ldr	r2, [pc, #120]	@ (8008b94 <prvAddNewTaskToReadyList+0xd0>)
 8008b1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b94 <prvAddNewTaskToReadyList+0xd0>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b28:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <prvAddNewTaskToReadyList+0xd4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d903      	bls.n	8008b38 <prvAddNewTaskToReadyList+0x74>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b34:	4a18      	ldr	r2, [pc, #96]	@ (8008b98 <prvAddNewTaskToReadyList+0xd4>)
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a15      	ldr	r2, [pc, #84]	@ (8008b9c <prvAddNewTaskToReadyList+0xd8>)
 8008b46:	441a      	add	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f7fe ffa4 	bl	8007a9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b54:	f001 fc6a 	bl	800a42c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b58:	4b0d      	ldr	r3, [pc, #52]	@ (8008b90 <prvAddNewTaskToReadyList+0xcc>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00e      	beq.n	8008b7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b60:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <prvAddNewTaskToReadyList+0xc8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d207      	bcs.n	8008b7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba0 <prvAddNewTaskToReadyList+0xdc>)
 8008b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	24001474 	.word	0x24001474
 8008b8c:	24000fa0 	.word	0x24000fa0
 8008b90:	24001480 	.word	0x24001480
 8008b94:	24001490 	.word	0x24001490
 8008b98:	2400147c 	.word	0x2400147c
 8008b9c:	24000fa4 	.word	0x24000fa4
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d018      	beq.n	8008be8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bb6:	4b14      	ldr	r3, [pc, #80]	@ (8008c08 <vTaskDelay+0x64>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <vTaskDelay+0x32>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60bb      	str	r3, [r7, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bd6:	f000 f88b 	bl	8008cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bda:	2100      	movs	r1, #0
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 ff11 	bl	8009a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008be2:	f000 f893 	bl	8008d0c <xTaskResumeAll>
 8008be6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008bee:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <vTaskDelay+0x68>)
 8008bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	2400149c 	.word	0x2400149c
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	@ 0x28
 8008c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c1e:	463a      	mov	r2, r7
 8008c20:	1d39      	adds	r1, r7, #4
 8008c22:	f107 0308 	add.w	r3, r7, #8
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fe84 	bl	8007934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	9202      	str	r2, [sp, #8]
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	2300      	movs	r3, #0
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	4924      	ldr	r1, [pc, #144]	@ (8008cd0 <vTaskStartScheduler+0xc0>)
 8008c40:	4824      	ldr	r0, [pc, #144]	@ (8008cd4 <vTaskStartScheduler+0xc4>)
 8008c42:	f7ff fdf1 	bl	8008828 <xTaskCreateStatic>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4a23      	ldr	r2, [pc, #140]	@ (8008cd8 <vTaskStartScheduler+0xc8>)
 8008c4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c4c:	4b22      	ldr	r3, [pc, #136]	@ (8008cd8 <vTaskStartScheduler+0xc8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c54:	2301      	movs	r3, #1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e001      	b.n	8008c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d102      	bne.n	8008c6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c64:	f000 ff22 	bl	8009aac <xTimerCreateTimerTask>
 8008c68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d11b      	bne.n	8008ca8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c84:	4b15      	ldr	r3, [pc, #84]	@ (8008cdc <vTaskStartScheduler+0xcc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3354      	adds	r3, #84	@ 0x54
 8008c8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ce0 <vTaskStartScheduler+0xd0>)
 8008c8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ce4 <vTaskStartScheduler+0xd4>)
 8008c90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c96:	4b14      	ldr	r3, [pc, #80]	@ (8008ce8 <vTaskStartScheduler+0xd8>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c9c:	4b13      	ldr	r3, [pc, #76]	@ (8008cec <vTaskStartScheduler+0xdc>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ca2:	f001 faed 	bl	800a280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ca6:	e00f      	b.n	8008cc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cae:	d10b      	bne.n	8008cc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <vTaskStartScheduler+0xb4>
}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	0800ac30 	.word	0x0800ac30
 8008cd4:	08009321 	.word	0x08009321
 8008cd8:	24001498 	.word	0x24001498
 8008cdc:	24000fa0 	.word	0x24000fa0
 8008ce0:	24000014 	.word	0x24000014
 8008ce4:	24001494 	.word	0x24001494
 8008ce8:	24001480 	.word	0x24001480
 8008cec:	24001478 	.word	0x24001478

08008cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cf4:	4b04      	ldr	r3, [pc, #16]	@ (8008d08 <vTaskSuspendAll+0x18>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	4a03      	ldr	r2, [pc, #12]	@ (8008d08 <vTaskSuspendAll+0x18>)
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cfe:	bf00      	nop
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	2400149c 	.word	0x2400149c

08008d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d1a:	4b42      	ldr	r3, [pc, #264]	@ (8008e24 <xTaskResumeAll+0x118>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <xTaskResumeAll+0x2e>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	603b      	str	r3, [r7, #0]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d3a:	f001 fb45 	bl	800a3c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d3e:	4b39      	ldr	r3, [pc, #228]	@ (8008e24 <xTaskResumeAll+0x118>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	4a37      	ldr	r2, [pc, #220]	@ (8008e24 <xTaskResumeAll+0x118>)
 8008d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d48:	4b36      	ldr	r3, [pc, #216]	@ (8008e24 <xTaskResumeAll+0x118>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d162      	bne.n	8008e16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d50:	4b35      	ldr	r3, [pc, #212]	@ (8008e28 <xTaskResumeAll+0x11c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d05e      	beq.n	8008e16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d58:	e02f      	b.n	8008dba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5a:	4b34      	ldr	r3, [pc, #208]	@ (8008e2c <xTaskResumeAll+0x120>)
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3318      	adds	r3, #24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fef5 	bl	8007b56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fef0 	bl	8007b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8008e30 <xTaskResumeAll+0x124>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d903      	bls.n	8008d8a <xTaskResumeAll+0x7e>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4a2a      	ldr	r2, [pc, #168]	@ (8008e30 <xTaskResumeAll+0x124>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a27      	ldr	r2, [pc, #156]	@ (8008e34 <xTaskResumeAll+0x128>)
 8008d98:	441a      	add	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe fe7b 	bl	8007a9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008daa:	4b23      	ldr	r3, [pc, #140]	@ (8008e38 <xTaskResumeAll+0x12c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d302      	bcc.n	8008dba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008db4:	4b21      	ldr	r3, [pc, #132]	@ (8008e3c <xTaskResumeAll+0x130>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dba:	4b1c      	ldr	r3, [pc, #112]	@ (8008e2c <xTaskResumeAll+0x120>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1cb      	bne.n	8008d5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dc8:	f000 fb66 	bl	8009498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e40 <xTaskResumeAll+0x134>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d010      	beq.n	8008dfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dd8:	f000 f846 	bl	8008e68 <xTaskIncrementTick>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008de2:	4b16      	ldr	r3, [pc, #88]	@ (8008e3c <xTaskResumeAll+0x130>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1f1      	bne.n	8008dd8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008df4:	4b12      	ldr	r3, [pc, #72]	@ (8008e40 <xTaskResumeAll+0x134>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dfa:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <xTaskResumeAll+0x130>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e02:	2301      	movs	r3, #1
 8008e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e06:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <xTaskResumeAll+0x138>)
 8008e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e16:	f001 fb09 	bl	800a42c <vPortExitCritical>

	return xAlreadyYielded;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	2400149c 	.word	0x2400149c
 8008e28:	24001474 	.word	0x24001474
 8008e2c:	24001434 	.word	0x24001434
 8008e30:	2400147c 	.word	0x2400147c
 8008e34:	24000fa4 	.word	0x24000fa4
 8008e38:	24000fa0 	.word	0x24000fa0
 8008e3c:	24001488 	.word	0x24001488
 8008e40:	24001484 	.word	0x24001484
 8008e44:	e000ed04 	.word	0xe000ed04

08008e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e4e:	4b05      	ldr	r3, [pc, #20]	@ (8008e64 <xTaskGetTickCount+0x1c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e54:	687b      	ldr	r3, [r7, #4]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	24001478 	.word	0x24001478

08008e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e72:	4b4f      	ldr	r3, [pc, #316]	@ (8008fb0 <xTaskIncrementTick+0x148>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f040 8090 	bne.w	8008f9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb4 <xTaskIncrementTick+0x14c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3301      	adds	r3, #1
 8008e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e84:	4a4b      	ldr	r2, [pc, #300]	@ (8008fb4 <xTaskIncrementTick+0x14c>)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d121      	bne.n	8008ed4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e90:	4b49      	ldr	r3, [pc, #292]	@ (8008fb8 <xTaskIncrementTick+0x150>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	603b      	str	r3, [r7, #0]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <xTaskIncrementTick+0x46>
 8008eb2:	4b41      	ldr	r3, [pc, #260]	@ (8008fb8 <xTaskIncrementTick+0x150>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	4b40      	ldr	r3, [pc, #256]	@ (8008fbc <xTaskIncrementTick+0x154>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8008fb8 <xTaskIncrementTick+0x150>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fbc <xTaskIncrementTick+0x154>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc0 <xTaskIncrementTick+0x158>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8008fc0 <xTaskIncrementTick+0x158>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	f000 fae2 	bl	8009498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fc4 <xTaskIncrementTick+0x15c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d349      	bcc.n	8008f72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ede:	4b36      	ldr	r3, [pc, #216]	@ (8008fb8 <xTaskIncrementTick+0x150>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee8:	4b36      	ldr	r3, [pc, #216]	@ (8008fc4 <xTaskIncrementTick+0x15c>)
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eee:	601a      	str	r2, [r3, #0]
					break;
 8008ef0:	e03f      	b.n	8008f72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef2:	4b31      	ldr	r3, [pc, #196]	@ (8008fb8 <xTaskIncrementTick+0x150>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d203      	bcs.n	8008f12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8008fc4 <xTaskIncrementTick+0x15c>)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f10:	e02f      	b.n	8008f72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe fe1d 	bl	8007b56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3318      	adds	r3, #24
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe fe14 	bl	8007b56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f32:	4b25      	ldr	r3, [pc, #148]	@ (8008fc8 <xTaskIncrementTick+0x160>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d903      	bls.n	8008f42 <xTaskIncrementTick+0xda>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	4a22      	ldr	r2, [pc, #136]	@ (8008fc8 <xTaskIncrementTick+0x160>)
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fcc <xTaskIncrementTick+0x164>)
 8008f50:	441a      	add	r2, r3
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	3304      	adds	r3, #4
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f7fe fd9f 	bl	8007a9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f62:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <xTaskIncrementTick+0x168>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3b8      	bcc.n	8008ede <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f70:	e7b5      	b.n	8008ede <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f72:	4b17      	ldr	r3, [pc, #92]	@ (8008fd0 <xTaskIncrementTick+0x168>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f78:	4914      	ldr	r1, [pc, #80]	@ (8008fcc <xTaskIncrementTick+0x164>)
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d901      	bls.n	8008f8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f8e:	4b11      	ldr	r3, [pc, #68]	@ (8008fd4 <xTaskIncrementTick+0x16c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d007      	beq.n	8008fa6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e004      	b.n	8008fa6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd8 <xTaskIncrementTick+0x170>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8008fd8 <xTaskIncrementTick+0x170>)
 8008fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	2400149c 	.word	0x2400149c
 8008fb4:	24001478 	.word	0x24001478
 8008fb8:	2400142c 	.word	0x2400142c
 8008fbc:	24001430 	.word	0x24001430
 8008fc0:	2400148c 	.word	0x2400148c
 8008fc4:	24001494 	.word	0x24001494
 8008fc8:	2400147c 	.word	0x2400147c
 8008fcc:	24000fa4 	.word	0x24000fa4
 8008fd0:	24000fa0 	.word	0x24000fa0
 8008fd4:	24001488 	.word	0x24001488
 8008fd8:	24001484 	.word	0x24001484

08008fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8009090 <vTaskSwitchContext+0xb4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fea:	4b2a      	ldr	r3, [pc, #168]	@ (8009094 <vTaskSwitchContext+0xb8>)
 8008fec:	2201      	movs	r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ff0:	e047      	b.n	8009082 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008ff2:	4b28      	ldr	r3, [pc, #160]	@ (8009094 <vTaskSwitchContext+0xb8>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff8:	4b27      	ldr	r3, [pc, #156]	@ (8009098 <vTaskSwitchContext+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e011      	b.n	8009024 <vTaskSwitchContext+0x48>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <vTaskSwitchContext+0x42>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	607b      	str	r3, [r7, #4]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <vTaskSwitchContext+0x3e>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3b01      	subs	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	491d      	ldr	r1, [pc, #116]	@ (800909c <vTaskSwitchContext+0xc0>)
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0e3      	beq.n	8009000 <vTaskSwitchContext+0x24>
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4a16      	ldr	r2, [pc, #88]	@ (800909c <vTaskSwitchContext+0xc0>)
 8009044:	4413      	add	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	605a      	str	r2, [r3, #4]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3308      	adds	r3, #8
 800905a:	429a      	cmp	r2, r3
 800905c:	d104      	bne.n	8009068 <vTaskSwitchContext+0x8c>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	4a0c      	ldr	r2, [pc, #48]	@ (80090a0 <vTaskSwitchContext+0xc4>)
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	4a09      	ldr	r2, [pc, #36]	@ (8009098 <vTaskSwitchContext+0xbc>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009078:	4b09      	ldr	r3, [pc, #36]	@ (80090a0 <vTaskSwitchContext+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3354      	adds	r3, #84	@ 0x54
 800907e:	4a09      	ldr	r2, [pc, #36]	@ (80090a4 <vTaskSwitchContext+0xc8>)
 8009080:	6013      	str	r3, [r2, #0]
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	2400149c 	.word	0x2400149c
 8009094:	24001488 	.word	0x24001488
 8009098:	2400147c 	.word	0x2400147c
 800909c:	24000fa4 	.word	0x24000fa4
 80090a0:	24000fa0 	.word	0x24000fa0
 80090a4:	24000014 	.word	0x24000014

080090a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	60fb      	str	r3, [r7, #12]
}
 80090ca:	bf00      	nop
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090d0:	4b07      	ldr	r3, [pc, #28]	@ (80090f0 <vTaskPlaceOnEventList+0x48>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3318      	adds	r3, #24
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fe fd03 	bl	8007ae4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090de:	2101      	movs	r1, #1
 80090e0:	6838      	ldr	r0, [r7, #0]
 80090e2:	f000 fc8f 	bl	8009a04 <prvAddCurrentTaskToDelayedList>
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	24000fa0 	.word	0x24000fa0

080090f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10b      	bne.n	800911e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	617b      	str	r3, [r7, #20]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800911e:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <vTaskPlaceOnEventListRestricted+0x54>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3318      	adds	r3, #24
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7fe fcb8 	bl	8007a9c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009136:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	68b8      	ldr	r0, [r7, #8]
 800913c:	f000 fc62 	bl	8009a04 <prvAddCurrentTaskToDelayedList>
	}
 8009140:	bf00      	nop
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	24000fa0 	.word	0x24000fa0

0800914c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60fb      	str	r3, [r7, #12]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3318      	adds	r3, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fce9 	bl	8007b56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009184:	4b1d      	ldr	r3, [pc, #116]	@ (80091fc <xTaskRemoveFromEventList+0xb0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11d      	bne.n	80091c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3304      	adds	r3, #4
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fce0 	bl	8007b56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4b19      	ldr	r3, [pc, #100]	@ (8009200 <xTaskRemoveFromEventList+0xb4>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d903      	bls.n	80091aa <xTaskRemoveFromEventList+0x5e>
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a16      	ldr	r2, [pc, #88]	@ (8009200 <xTaskRemoveFromEventList+0xb4>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a13      	ldr	r2, [pc, #76]	@ (8009204 <xTaskRemoveFromEventList+0xb8>)
 80091b8:	441a      	add	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe fc6b 	bl	8007a9c <vListInsertEnd>
 80091c6:	e005      	b.n	80091d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3318      	adds	r3, #24
 80091cc:	4619      	mov	r1, r3
 80091ce:	480e      	ldr	r0, [pc, #56]	@ (8009208 <xTaskRemoveFromEventList+0xbc>)
 80091d0:	f7fe fc64 	bl	8007a9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <xTaskRemoveFromEventList+0xc0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091de:	429a      	cmp	r2, r3
 80091e0:	d905      	bls.n	80091ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091e2:	2301      	movs	r3, #1
 80091e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009210 <xTaskRemoveFromEventList+0xc4>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e001      	b.n	80091f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	2400149c 	.word	0x2400149c
 8009200:	2400147c 	.word	0x2400147c
 8009204:	24000fa4 	.word	0x24000fa4
 8009208:	24001434 	.word	0x24001434
 800920c:	24000fa0 	.word	0x24000fa0
 8009210:	24001488 	.word	0x24001488

08009214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <vTaskInternalSetTimeOutState+0x24>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <vTaskInternalSetTimeOutState+0x28>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	2400148c 	.word	0x2400148c
 800923c:	24001478 	.word	0x24001478

08009240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10b      	bne.n	8009268 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60fb      	str	r3, [r7, #12]
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	e7fd      	b.n	8009282 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009286:	f001 f89f 	bl	800a3c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800928a:	4b1d      	ldr	r3, [pc, #116]	@ (8009300 <xTaskCheckForTimeOut+0xc0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092a2:	d102      	bne.n	80092aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e023      	b.n	80092f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	4b15      	ldr	r3, [pc, #84]	@ (8009304 <xTaskCheckForTimeOut+0xc4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d007      	beq.n	80092c6 <xTaskCheckForTimeOut+0x86>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	e015      	b.n	80092f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d20b      	bcs.n	80092e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ff99 	bl	8009214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	e004      	b.n	80092f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092f2:	f001 f89b 	bl	800a42c <vPortExitCritical>

	return xReturn;
 80092f6:	69fb      	ldr	r3, [r7, #28]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	24001478 	.word	0x24001478
 8009304:	2400148c 	.word	0x2400148c

08009308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800930c:	4b03      	ldr	r3, [pc, #12]	@ (800931c <vTaskMissedYield+0x14>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
}
 8009312:	bf00      	nop
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	24001488 	.word	0x24001488

08009320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009328:	f000 f852 	bl	80093d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800932c:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <prvIdleTask+0x28>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d9f9      	bls.n	8009328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009334:	4b05      	ldr	r3, [pc, #20]	@ (800934c <prvIdleTask+0x2c>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009344:	e7f0      	b.n	8009328 <prvIdleTask+0x8>
 8009346:	bf00      	nop
 8009348:	24000fa4 	.word	0x24000fa4
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	e00c      	b.n	8009376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a12      	ldr	r2, [pc, #72]	@ (80093b0 <prvInitialiseTaskLists+0x60>)
 8009368:	4413      	add	r3, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fb69 	bl	8007a42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3301      	adds	r3, #1
 8009374:	607b      	str	r3, [r7, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b37      	cmp	r3, #55	@ 0x37
 800937a:	d9ef      	bls.n	800935c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800937c:	480d      	ldr	r0, [pc, #52]	@ (80093b4 <prvInitialiseTaskLists+0x64>)
 800937e:	f7fe fb60 	bl	8007a42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009382:	480d      	ldr	r0, [pc, #52]	@ (80093b8 <prvInitialiseTaskLists+0x68>)
 8009384:	f7fe fb5d 	bl	8007a42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009388:	480c      	ldr	r0, [pc, #48]	@ (80093bc <prvInitialiseTaskLists+0x6c>)
 800938a:	f7fe fb5a 	bl	8007a42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800938e:	480c      	ldr	r0, [pc, #48]	@ (80093c0 <prvInitialiseTaskLists+0x70>)
 8009390:	f7fe fb57 	bl	8007a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009394:	480b      	ldr	r0, [pc, #44]	@ (80093c4 <prvInitialiseTaskLists+0x74>)
 8009396:	f7fe fb54 	bl	8007a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800939a:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <prvInitialiseTaskLists+0x78>)
 800939c:	4a05      	ldr	r2, [pc, #20]	@ (80093b4 <prvInitialiseTaskLists+0x64>)
 800939e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093a0:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <prvInitialiseTaskLists+0x7c>)
 80093a2:	4a05      	ldr	r2, [pc, #20]	@ (80093b8 <prvInitialiseTaskLists+0x68>)
 80093a4:	601a      	str	r2, [r3, #0]
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	24000fa4 	.word	0x24000fa4
 80093b4:	24001404 	.word	0x24001404
 80093b8:	24001418 	.word	0x24001418
 80093bc:	24001434 	.word	0x24001434
 80093c0:	24001448 	.word	0x24001448
 80093c4:	24001460 	.word	0x24001460
 80093c8:	2400142c 	.word	0x2400142c
 80093cc:	24001430 	.word	0x24001430

080093d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093d6:	e019      	b.n	800940c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093d8:	f000 fff6 	bl	800a3c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093dc:	4b10      	ldr	r3, [pc, #64]	@ (8009420 <prvCheckTasksWaitingTermination+0x50>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fbb4 	bl	8007b56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <prvCheckTasksWaitingTermination+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009428 <prvCheckTasksWaitingTermination+0x58>)
 8009400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009402:	f001 f813 	bl	800a42c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f810 	bl	800942c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800940c:	4b06      	ldr	r3, [pc, #24]	@ (8009428 <prvCheckTasksWaitingTermination+0x58>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e1      	bne.n	80093d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	24001448 	.word	0x24001448
 8009424:	24001474 	.word	0x24001474
 8009428:	2400145c 	.word	0x2400145c

0800942c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3354      	adds	r3, #84	@ 0x54
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fadd 	bl	800a9f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009444:	2b00      	cmp	r3, #0
 8009446:	d108      	bne.n	800945a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944c:	4618      	mov	r0, r3
 800944e:	f001 f9ab 	bl	800a7a8 <vPortFree>
				vPortFree( pxTCB );
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 f9a8 	bl	800a7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009458:	e019      	b.n	800948e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009460:	2b01      	cmp	r3, #1
 8009462:	d103      	bne.n	800946c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 f99f 	bl	800a7a8 <vPortFree>
	}
 800946a:	e010      	b.n	800948e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009472:	2b02      	cmp	r3, #2
 8009474:	d00b      	beq.n	800948e <prvDeleteTCB+0x62>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60fb      	str	r3, [r7, #12]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <prvDeleteTCB+0x5e>
	}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800949e:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <prvResetNextTaskUnblockTime+0x38>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094a8:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <prvResetNextTaskUnblockTime+0x3c>)
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094b0:	e008      	b.n	80094c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b2:	4b07      	ldr	r3, [pc, #28]	@ (80094d0 <prvResetNextTaskUnblockTime+0x38>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a04      	ldr	r2, [pc, #16]	@ (80094d4 <prvResetNextTaskUnblockTime+0x3c>)
 80094c2:	6013      	str	r3, [r2, #0]
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	2400142c 	.word	0x2400142c
 80094d4:	24001494 	.word	0x24001494

080094d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094de:	4b0b      	ldr	r3, [pc, #44]	@ (800950c <xTaskGetSchedulerState+0x34>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d102      	bne.n	80094ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094e6:	2301      	movs	r3, #1
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	e008      	b.n	80094fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ec:	4b08      	ldr	r3, [pc, #32]	@ (8009510 <xTaskGetSchedulerState+0x38>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094f4:	2302      	movs	r3, #2
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	e001      	b.n	80094fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094fa:	2300      	movs	r3, #0
 80094fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094fe:	687b      	ldr	r3, [r7, #4]
	}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	24001480 	.word	0x24001480
 8009510:	2400149c 	.word	0x2400149c

08009514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009520:	2300      	movs	r3, #0
 8009522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d058      	beq.n	80095dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800952a:	4b2f      	ldr	r3, [pc, #188]	@ (80095e8 <xTaskPriorityDisinherit+0xd4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	429a      	cmp	r2, r3
 8009532:	d00b      	beq.n	800954c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60fb      	str	r3, [r7, #12]
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	e7fd      	b.n	8009548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60bb      	str	r3, [r7, #8]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009570:	1e5a      	subs	r2, r3, #1
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957e:	429a      	cmp	r2, r3
 8009580:	d02c      	beq.n	80095dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009586:	2b00      	cmp	r3, #0
 8009588:	d128      	bne.n	80095dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3304      	adds	r3, #4
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fae1 	bl	8007b56 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ac:	4b0f      	ldr	r3, [pc, #60]	@ (80095ec <xTaskPriorityDisinherit+0xd8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d903      	bls.n	80095bc <xTaskPriorityDisinherit+0xa8>
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b8:	4a0c      	ldr	r2, [pc, #48]	@ (80095ec <xTaskPriorityDisinherit+0xd8>)
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4a09      	ldr	r2, [pc, #36]	@ (80095f0 <xTaskPriorityDisinherit+0xdc>)
 80095ca:	441a      	add	r2, r3
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4619      	mov	r1, r3
 80095d2:	4610      	mov	r0, r2
 80095d4:	f7fe fa62 	bl	8007a9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095d8:	2301      	movs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095dc:	697b      	ldr	r3, [r7, #20]
	}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	24000fa0 	.word	0x24000fa0
 80095ec:	2400147c 	.word	0x2400147c
 80095f0:	24000fa4 	.word	0x24000fa4

080095f4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009602:	f000 fee1 	bl	800a3c8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009606:	4b29      	ldr	r3, [pc, #164]	@ (80096ac <xTaskNotifyWait+0xb8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d01c      	beq.n	800964e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009614:	4b25      	ldr	r3, [pc, #148]	@ (80096ac <xTaskNotifyWait+0xb8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	43d2      	mvns	r2, r2
 8009620:	400a      	ands	r2, r1
 8009622:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009626:	4b21      	ldr	r3, [pc, #132]	@ (80096ac <xTaskNotifyWait+0xb8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009636:	2101      	movs	r1, #1
 8009638:	6838      	ldr	r0, [r7, #0]
 800963a:	f000 f9e3 	bl	8009a04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800963e:	4b1c      	ldr	r3, [pc, #112]	@ (80096b0 <xTaskNotifyWait+0xbc>)
 8009640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800964e:	f000 feed 	bl	800a42c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009652:	f000 feb9 	bl	800a3c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800965c:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <xTaskNotifyWait+0xb8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009668:	4b10      	ldr	r3, [pc, #64]	@ (80096ac <xTaskNotifyWait+0xb8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d002      	beq.n	800967c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]
 800967a:	e00a      	b.n	8009692 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800967c:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <xTaskNotifyWait+0xb8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	43d2      	mvns	r2, r2
 8009688:	400a      	ands	r2, r1
 800968a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800968e:	2301      	movs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009692:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <xTaskNotifyWait+0xb8>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800969c:	f000 fec6 	bl	800a42c <vPortExitCritical>

		return xReturn;
 80096a0:	697b      	ldr	r3, [r7, #20]
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	24000fa0 	.word	0x24000fa0
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	@ 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	4613      	mov	r3, r2
 80096c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80096c4:	2301      	movs	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10b      	bne.n	80096e6 <xTaskGenericNotify+0x32>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	61bb      	str	r3, [r7, #24]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80096ea:	f000 fe6d 	bl	800a3c8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009704:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2202      	movs	r2, #2
 800970a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	2b04      	cmp	r3, #4
 8009712:	d82e      	bhi.n	8009772 <xTaskGenericNotify+0xbe>
 8009714:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <xTaskGenericNotify+0x68>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009797 	.word	0x08009797
 8009720:	08009731 	.word	0x08009731
 8009724:	08009743 	.word	0x08009743
 8009728:	08009753 	.word	0x08009753
 800972c:	0800975d 	.word	0x0800975d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	431a      	orrs	r2, r3
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009740:	e02c      	b.n	800979c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009750:	e024      	b.n	800979c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800975a:	e01f      	b.n	800979c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800975c:	7ffb      	ldrb	r3, [r7, #31]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d004      	beq.n	800976c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800976a:	e017      	b.n	800979c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009770:	e014      	b.n	800979c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800977c:	d00d      	beq.n	800979a <xTaskGenericNotify+0xe6>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	617b      	str	r3, [r7, #20]
}
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	e7fd      	b.n	8009792 <xTaskGenericNotify+0xde>
					break;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <xTaskGenericNotify+0xe8>

					break;
 800979a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800979c:	7ffb      	ldrb	r3, [r7, #31]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d13b      	bne.n	800981a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe f9d5 	bl	8007b56 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009828 <xTaskGenericNotify+0x174>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d903      	bls.n	80097c0 <xTaskGenericNotify+0x10c>
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009828 <xTaskGenericNotify+0x174>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a17      	ldr	r2, [pc, #92]	@ (800982c <xTaskGenericNotify+0x178>)
 80097ce:	441a      	add	r2, r3
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7fe f960 	bl	8007a9c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <xTaskGenericNotify+0x148>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	613b      	str	r3, [r7, #16]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009800:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <xTaskGenericNotify+0x17c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009806:	429a      	cmp	r2, r3
 8009808:	d907      	bls.n	800981a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800980a:	4b0a      	ldr	r3, [pc, #40]	@ (8009834 <xTaskGenericNotify+0x180>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800981a:	f000 fe07 	bl	800a42c <vPortExitCritical>

		return xReturn;
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009820:	4618      	mov	r0, r3
 8009822:	3728      	adds	r7, #40	@ 0x28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	2400147c 	.word	0x2400147c
 800982c:	24000fa4 	.word	0x24000fa4
 8009830:	24000fa0 	.word	0x24000fa0
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	@ 0x38
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009848:	2301      	movs	r3, #1
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10b      	bne.n	800986a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	e7fd      	b.n	8009866 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800986a:	f000 fe8d 	bl	800a588 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009872:	f3ef 8211 	mrs	r2, BASEPRI
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	623a      	str	r2, [r7, #32]
 8009888:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800988a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800988c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80098a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d82e      	bhi.n	8009914 <xTaskGenericNotifyFromISR+0xdc>
 80098b6:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <xTaskGenericNotifyFromISR+0x84>)
 80098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098bc:	08009939 	.word	0x08009939
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098e3 	.word	0x080098e3
 80098c8:	080098f3 	.word	0x080098f3
 80098cc:	080098fd 	.word	0x080098fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	431a      	orrs	r2, r3
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80098e0:	e02d      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80098f0:	e025      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80098fa:	e020      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80098fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009900:	2b02      	cmp	r3, #2
 8009902:	d004      	beq.n	800990e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800990c:	e017      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800990e:	2300      	movs	r3, #0
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009912:	e014      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800991e:	d00d      	beq.n	800993c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61bb      	str	r3, [r7, #24]
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009938:	bf00      	nop
 800993a:	e000      	b.n	800993e <xTaskGenericNotifyFromISR+0x106>
					break;
 800993c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800993e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009942:	2b01      	cmp	r3, #1
 8009944:	d147      	bne.n	80099d6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	617b      	str	r3, [r7, #20]
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009966:	4b21      	ldr	r3, [pc, #132]	@ (80099ec <xTaskGenericNotifyFromISR+0x1b4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d11d      	bne.n	80099aa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe f8ef 	bl	8007b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997c:	4b1c      	ldr	r3, [pc, #112]	@ (80099f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d903      	bls.n	800998c <xTaskGenericNotifyFromISR+0x154>
 8009984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	4a19      	ldr	r2, [pc, #100]	@ (80099f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4a16      	ldr	r2, [pc, #88]	@ (80099f4 <xTaskGenericNotifyFromISR+0x1bc>)
 800999a:	441a      	add	r2, r3
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999e:	3304      	adds	r3, #4
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fe f87a 	bl	8007a9c <vListInsertEnd>
 80099a8:	e005      	b.n	80099b6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	3318      	adds	r3, #24
 80099ae:	4619      	mov	r1, r3
 80099b0:	4811      	ldr	r0, [pc, #68]	@ (80099f8 <xTaskGenericNotifyFromISR+0x1c0>)
 80099b2:	f7fe f873 	bl	8007a9c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ba:	4b10      	ldr	r3, [pc, #64]	@ (80099fc <xTaskGenericNotifyFromISR+0x1c4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d908      	bls.n	80099d6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80099c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80099ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80099d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a00 <xTaskGenericNotifyFromISR+0x1c8>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f383 8811 	msr	BASEPRI, r3
}
 80099e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80099e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3738      	adds	r7, #56	@ 0x38
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	2400149c 	.word	0x2400149c
 80099f0:	2400147c 	.word	0x2400147c
 80099f4:	24000fa4 	.word	0x24000fa4
 80099f8:	24001434 	.word	0x24001434
 80099fc:	24000fa0 	.word	0x24000fa0
 8009a00:	24001488 	.word	0x24001488

08009a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a0e:	4b21      	ldr	r3, [pc, #132]	@ (8009a94 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a14:	4b20      	ldr	r3, [pc, #128]	@ (8009a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe f89b 	bl	8007b56 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a26:	d10a      	bne.n	8009a3e <prvAddCurrentTaskToDelayedList+0x3a>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4619      	mov	r1, r3
 8009a36:	4819      	ldr	r0, [pc, #100]	@ (8009a9c <prvAddCurrentTaskToDelayedList+0x98>)
 8009a38:	f7fe f830 	bl	8007a9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a3c:	e026      	b.n	8009a8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4413      	add	r3, r2
 8009a44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a46:	4b14      	ldr	r3, [pc, #80]	@ (8009a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d209      	bcs.n	8009a6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a56:	4b12      	ldr	r3, [pc, #72]	@ (8009aa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fe f83e 	bl	8007ae4 <vListInsert>
}
 8009a68:	e010      	b.n	8009a8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f7fe f834 	bl	8007ae4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d202      	bcs.n	8009a8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a86:	4a08      	ldr	r2, [pc, #32]	@ (8009aa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6013      	str	r3, [r2, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	24001478 	.word	0x24001478
 8009a98:	24000fa0 	.word	0x24000fa0
 8009a9c:	24001460 	.word	0x24001460
 8009aa0:	24001430 	.word	0x24001430
 8009aa4:	2400142c 	.word	0x2400142c
 8009aa8:	24001494 	.word	0x24001494

08009aac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	@ 0x28
 8009ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ab6:	f000 fb13 	bl	800a0e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aba:	4b1d      	ldr	r3, [pc, #116]	@ (8009b30 <xTimerCreateTimerTask+0x84>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d021      	beq.n	8009b06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009aca:	1d3a      	adds	r2, r7, #4
 8009acc:	f107 0108 	add.w	r1, r7, #8
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fd ff47 	bl	8007968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	460a      	mov	r2, r1
 8009aec:	4911      	ldr	r1, [pc, #68]	@ (8009b34 <xTimerCreateTimerTask+0x88>)
 8009aee:	4812      	ldr	r0, [pc, #72]	@ (8009b38 <xTimerCreateTimerTask+0x8c>)
 8009af0:	f7fe fe9a 	bl	8008828 <xTaskCreateStatic>
 8009af4:	4603      	mov	r3, r0
 8009af6:	4a11      	ldr	r2, [pc, #68]	@ (8009b3c <xTimerCreateTimerTask+0x90>)
 8009af8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009afa:	4b10      	ldr	r3, [pc, #64]	@ (8009b3c <xTimerCreateTimerTask+0x90>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b02:	2301      	movs	r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10b      	bne.n	8009b24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	613b      	str	r3, [r7, #16]
}
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
 8009b22:	e7fd      	b.n	8009b20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b24:	697b      	ldr	r3, [r7, #20]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	240014d0 	.word	0x240014d0
 8009b34:	0800ac38 	.word	0x0800ac38
 8009b38:	08009c79 	.word	0x08009c79
 8009b3c:	240014d4 	.word	0x240014d4

08009b40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	@ 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <xTimerGenericCommand+0x30>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	623b      	str	r3, [r7, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b70:	4b19      	ldr	r3, [pc, #100]	@ (8009bd8 <xTimerGenericCommand+0x98>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02a      	beq.n	8009bce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	dc18      	bgt.n	8009bbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b8a:	f7ff fca5 	bl	80094d8 <xTaskGetSchedulerState>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d109      	bne.n	8009ba8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b94:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <xTimerGenericCommand+0x98>)
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	f107 0110 	add.w	r1, r7, #16
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ba0:	f7fe fa04 	bl	8007fac <xQueueGenericSend>
 8009ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ba6:	e012      	b.n	8009bce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd8 <xTimerGenericCommand+0x98>)
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	f107 0110 	add.w	r1, r7, #16
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f7fe f9fa 	bl	8007fac <xQueueGenericSend>
 8009bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bba:	e008      	b.n	8009bce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bbc:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <xTimerGenericCommand+0x98>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	f107 0110 	add.w	r1, r7, #16
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	f7fe faf2 	bl	80081b0 <xQueueGenericSendFromISR>
 8009bcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3728      	adds	r7, #40	@ 0x28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	240014d0 	.word	0x240014d0

08009bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be6:	4b23      	ldr	r3, [pc, #140]	@ (8009c74 <prvProcessExpiredTimer+0x98>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fd ffae 	bl	8007b56 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d023      	beq.n	8009c50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	18d1      	adds	r1, r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	6978      	ldr	r0, [r7, #20]
 8009c16:	f000 f8d5 	bl	8009dc4 <prvInsertTimerInActiveList>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d020      	beq.n	8009c62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c20:	2300      	movs	r3, #0
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6978      	ldr	r0, [r7, #20]
 8009c2c:	f7ff ff88 	bl	8009b40 <xTimerGenericCommand>
 8009c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d114      	bne.n	8009c62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	60fb      	str	r3, [r7, #12]
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	6978      	ldr	r0, [r7, #20]
 8009c68:	4798      	blx	r3
}
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	240014c8 	.word	0x240014c8

08009c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f859 	bl	8009d3c <prvGetNextExpireTime>
 8009c8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f805 	bl	8009ca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c96:	f000 f8d7 	bl	8009e48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c9a:	bf00      	nop
 8009c9c:	e7f0      	b.n	8009c80 <prvTimerTask+0x8>
	...

08009ca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009caa:	f7ff f821 	bl	8008cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cae:	f107 0308 	add.w	r3, r7, #8
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f866 	bl	8009d84 <prvSampleTimeNow>
 8009cb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d130      	bne.n	8009d22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d806      	bhi.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cce:	f7ff f81d 	bl	8008d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ff81 	bl	8009bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cda:	e024      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ce2:	4b13      	ldr	r3, [pc, #76]	@ (8009d30 <prvProcessTimerOrBlockTask+0x90>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <prvProcessTimerOrBlockTask+0x50>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <prvProcessTimerOrBlockTask+0x52>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8009d34 <prvProcessTimerOrBlockTask+0x94>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	f7fe fd5d 	bl	80087c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d06:	f7ff f801 	bl	8008d0c <xTaskResumeAll>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d10:	4b09      	ldr	r3, [pc, #36]	@ (8009d38 <prvProcessTimerOrBlockTask+0x98>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
}
 8009d20:	e001      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d22:	f7fe fff3 	bl	8008d0c <xTaskResumeAll>
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	240014cc 	.word	0x240014cc
 8009d34:	240014d0 	.word	0x240014d0
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d44:	4b0e      	ldr	r3, [pc, #56]	@ (8009d80 <prvGetNextExpireTime+0x44>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <prvGetNextExpireTime+0x16>
 8009d4e:	2201      	movs	r2, #1
 8009d50:	e000      	b.n	8009d54 <prvGetNextExpireTime+0x18>
 8009d52:	2200      	movs	r2, #0
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d60:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <prvGetNextExpireTime+0x44>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	e001      	b.n	8009d70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d70:	68fb      	ldr	r3, [r7, #12]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	240014c8 	.word	0x240014c8

08009d84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d8c:	f7ff f85c 	bl	8008e48 <xTaskGetTickCount>
 8009d90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d92:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc0 <prvSampleTimeNow+0x3c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d205      	bcs.n	8009da8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d9c:	f000 f93a 	bl	800a014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e002      	b.n	8009dae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dae:	4a04      	ldr	r2, [pc, #16]	@ (8009dc0 <prvSampleTimeNow+0x3c>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009db4:	68fb      	ldr	r3, [r7, #12]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	240014d8 	.word	0x240014d8

08009dc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d812      	bhi.n	8009e10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d302      	bcc.n	8009dfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e01b      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dfe:	4b10      	ldr	r3, [pc, #64]	@ (8009e40 <prvInsertTimerInActiveList+0x7c>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3304      	adds	r3, #4
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7fd fe6b 	bl	8007ae4 <vListInsert>
 8009e0e:	e012      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d206      	bcs.n	8009e26 <prvInsertTimerInActiveList+0x62>
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d302      	bcc.n	8009e26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e007      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e26:	4b07      	ldr	r3, [pc, #28]	@ (8009e44 <prvInsertTimerInActiveList+0x80>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f7fd fe57 	bl	8007ae4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e36:	697b      	ldr	r3, [r7, #20]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	240014cc 	.word	0x240014cc
 8009e44:	240014c8 	.word	0x240014c8

08009e48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08e      	sub	sp, #56	@ 0x38
 8009e4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e4e:	e0ce      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da19      	bge.n	8009e8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e56:	1d3b      	adds	r3, r7, #4
 8009e58:	3304      	adds	r3, #4
 8009e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61fb      	str	r3, [r7, #28]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e80:	6850      	ldr	r0, [r2, #4]
 8009e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e84:	6892      	ldr	r2, [r2, #8]
 8009e86:	4611      	mov	r1, r2
 8009e88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f2c0 80ae 	blt.w	8009fee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd fe57 	bl	8007b56 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff ff6a 	bl	8009d84 <prvSampleTimeNow>
 8009eb0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	f200 8097 	bhi.w	8009fe8 <prvProcessReceivedCommands+0x1a0>
 8009eba:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <prvProcessReceivedCommands+0x78>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ee9 	.word	0x08009ee9
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009f5f 	.word	0x08009f5f
 8009ed0:	08009f73 	.word	0x08009f73
 8009ed4:	08009fbf 	.word	0x08009fbf
 8009ed8:	08009ee9 	.word	0x08009ee9
 8009edc:	08009ee9 	.word	0x08009ee9
 8009ee0:	08009f5f 	.word	0x08009f5f
 8009ee4:	08009f73 	.word	0x08009f73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eee:	f043 0301 	orr.w	r3, r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	18d1      	adds	r1, r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f08:	f7ff ff5c 	bl	8009dc4 <prvInsertTimerInActiveList>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d06c      	beq.n	8009fec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d061      	beq.n	8009fec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	441a      	add	r2, r3
 8009f30:	2300      	movs	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f3a:	f7ff fe01 	bl	8009b40 <xTimerGenericCommand>
 8009f3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d152      	bne.n	8009fec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	61bb      	str	r3, [r7, #24]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f70:	e03d      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	617b      	str	r3, [r7, #20]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	18d1      	adds	r1, r2, r3
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fb8:	f7ff ff04 	bl	8009dc4 <prvInsertTimerInActiveList>
					break;
 8009fbc:	e017      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fce:	f000 fbeb 	bl	800a7a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fd2:	e00c      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fda:	f023 0301 	bic.w	r3, r3, #1
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fe6:	e002      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009fe8:	bf00      	nop
 8009fea:	e000      	b.n	8009fee <prvProcessReceivedCommands+0x1a6>
					break;
 8009fec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fee:	4b08      	ldr	r3, [pc, #32]	@ (800a010 <prvProcessReceivedCommands+0x1c8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1d39      	adds	r1, r7, #4
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe f978 	bl	80082ec <xQueueReceive>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f af26 	bne.w	8009e50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	3730      	adds	r7, #48	@ 0x30
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	240014d0 	.word	0x240014d0

0800a014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a01a:	e049      	b.n	800a0b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a01c:	4b2e      	ldr	r3, [pc, #184]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a026:	4b2c      	ldr	r3, [pc, #176]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd fd8e 	bl	8007b56 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d02f      	beq.n	800a0b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4413      	add	r3, r2
 800a058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d90e      	bls.n	800a080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a06e:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fd fd33 	bl	8007ae4 <vListInsert>
 800a07e:	e017      	b.n	800a0b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a080:	2300      	movs	r3, #0
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	2100      	movs	r1, #0
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fd58 	bl	8009b40 <xTimerGenericCommand>
 800a090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	603b      	str	r3, [r7, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	bf00      	nop
 800a0ae:	e7fd      	b.n	800a0ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0b0:	4b09      	ldr	r3, [pc, #36]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1b0      	bne.n	800a01c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0ba:	4b07      	ldr	r3, [pc, #28]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0c0:	4b06      	ldr	r3, [pc, #24]	@ (800a0dc <prvSwitchTimerLists+0xc8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a04      	ldr	r2, [pc, #16]	@ (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a0c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0c8:	4a04      	ldr	r2, [pc, #16]	@ (800a0dc <prvSwitchTimerLists+0xc8>)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6013      	str	r3, [r2, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	240014c8 	.word	0x240014c8
 800a0dc:	240014cc 	.word	0x240014cc

0800a0e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0e6:	f000 f96f 	bl	800a3c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0ea:	4b15      	ldr	r3, [pc, #84]	@ (800a140 <prvCheckForValidListAndQueue+0x60>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d120      	bne.n	800a134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0f2:	4814      	ldr	r0, [pc, #80]	@ (800a144 <prvCheckForValidListAndQueue+0x64>)
 800a0f4:	f7fd fca5 	bl	8007a42 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0f8:	4813      	ldr	r0, [pc, #76]	@ (800a148 <prvCheckForValidListAndQueue+0x68>)
 800a0fa:	f7fd fca2 	bl	8007a42 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <prvCheckForValidListAndQueue+0x6c>)
 800a100:	4a10      	ldr	r2, [pc, #64]	@ (800a144 <prvCheckForValidListAndQueue+0x64>)
 800a102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a104:	4b12      	ldr	r3, [pc, #72]	@ (800a150 <prvCheckForValidListAndQueue+0x70>)
 800a106:	4a10      	ldr	r2, [pc, #64]	@ (800a148 <prvCheckForValidListAndQueue+0x68>)
 800a108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a10a:	2300      	movs	r3, #0
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4b11      	ldr	r3, [pc, #68]	@ (800a154 <prvCheckForValidListAndQueue+0x74>)
 800a110:	4a11      	ldr	r2, [pc, #68]	@ (800a158 <prvCheckForValidListAndQueue+0x78>)
 800a112:	2110      	movs	r1, #16
 800a114:	200a      	movs	r0, #10
 800a116:	f7fd fdb3 	bl	8007c80 <xQueueGenericCreateStatic>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4a08      	ldr	r2, [pc, #32]	@ (800a140 <prvCheckForValidListAndQueue+0x60>)
 800a11e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a120:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <prvCheckForValidListAndQueue+0x60>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <prvCheckForValidListAndQueue+0x60>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	490b      	ldr	r1, [pc, #44]	@ (800a15c <prvCheckForValidListAndQueue+0x7c>)
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe faf2 	bl	8008718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a134:	f000 f97a 	bl	800a42c <vPortExitCritical>
}
 800a138:	bf00      	nop
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	240014d0 	.word	0x240014d0
 800a144:	240014a0 	.word	0x240014a0
 800a148:	240014b4 	.word	0x240014b4
 800a14c:	240014c8 	.word	0x240014c8
 800a150:	240014cc 	.word	0x240014cc
 800a154:	2400157c 	.word	0x2400157c
 800a158:	240014dc 	.word	0x240014dc
 800a15c:	0800ac40 	.word	0x0800ac40

0800a160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3b04      	subs	r3, #4
 800a170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f023 0201 	bic.w	r2, r3, #1
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3b04      	subs	r3, #4
 800a18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a190:	4a0c      	ldr	r2, [pc, #48]	@ (800a1c4 <pxPortInitialiseStack+0x64>)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3b14      	subs	r3, #20
 800a19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f06f 0202 	mvn.w	r2, #2
 800a1ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3b20      	subs	r3, #32
 800a1b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	0800a1c9 	.word	0x0800a1c9

0800a1c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1d2:	4b13      	ldr	r3, [pc, #76]	@ (800a220 <prvTaskExitError+0x58>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1da:	d00b      	beq.n	800a1f4 <prvTaskExitError+0x2c>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60fb      	str	r3, [r7, #12]
}
 800a1ee:	bf00      	nop
 800a1f0:	bf00      	nop
 800a1f2:	e7fd      	b.n	800a1f0 <prvTaskExitError+0x28>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60bb      	str	r3, [r7, #8]
}
 800a206:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a208:	bf00      	nop
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0fc      	beq.n	800a20a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	24000010 	.word	0x24000010
	...

0800a230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a230:	4b07      	ldr	r3, [pc, #28]	@ (800a250 <pxCurrentTCBConst2>)
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	6808      	ldr	r0, [r1, #0]
 800a236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	f380 8809 	msr	PSP, r0
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f04f 0000 	mov.w	r0, #0
 800a246:	f380 8811 	msr	BASEPRI, r0
 800a24a:	4770      	bx	lr
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst2>:
 800a250:	24000fa0 	.word	0x24000fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop

0800a258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a258:	4808      	ldr	r0, [pc, #32]	@ (800a27c <prvPortStartFirstTask+0x24>)
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	6800      	ldr	r0, [r0, #0]
 800a25e:	f380 8808 	msr	MSP, r0
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f380 8814 	msr	CONTROL, r0
 800a26a:	b662      	cpsie	i
 800a26c:	b661      	cpsie	f
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	df00      	svc	0
 800a278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a27a:	bf00      	nop
 800a27c:	e000ed08 	.word	0xe000ed08

0800a280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a286:	4b47      	ldr	r3, [pc, #284]	@ (800a3a4 <xPortStartScheduler+0x124>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a47      	ldr	r2, [pc, #284]	@ (800a3a8 <xPortStartScheduler+0x128>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d10b      	bne.n	800a2a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	613b      	str	r3, [r7, #16]
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	e7fd      	b.n	800a2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3a4 <xPortStartScheduler+0x124>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a3ac <xPortStartScheduler+0x12c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d10b      	bne.n	800a2ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	60fb      	str	r3, [r7, #12]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2ca:	4b39      	ldr	r3, [pc, #228]	@ (800a3b0 <xPortStartScheduler+0x130>)
 800a2cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	22ff      	movs	r2, #255	@ 0xff
 800a2da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2e4:	78fb      	ldrb	r3, [r7, #3]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	4b31      	ldr	r3, [pc, #196]	@ (800a3b4 <xPortStartScheduler+0x134>)
 800a2f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2f2:	4b31      	ldr	r3, [pc, #196]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a2f4:	2207      	movs	r2, #7
 800a2f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2f8:	e009      	b.n	800a30e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	4a2d      	ldr	r2, [pc, #180]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a30e:	78fb      	ldrb	r3, [r7, #3]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a316:	2b80      	cmp	r3, #128	@ 0x80
 800a318:	d0ef      	beq.n	800a2fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a31a:	4b27      	ldr	r3, [pc, #156]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f1c3 0307 	rsb	r3, r3, #7
 800a322:	2b04      	cmp	r3, #4
 800a324:	d00b      	beq.n	800a33e <xPortStartScheduler+0xbe>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60bb      	str	r3, [r7, #8]
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	e7fd      	b.n	800a33a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a33e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a348:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a350:	4a19      	ldr	r2, [pc, #100]	@ (800a3b8 <xPortStartScheduler+0x138>)
 800a352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a35c:	4b17      	ldr	r3, [pc, #92]	@ (800a3bc <xPortStartScheduler+0x13c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a16      	ldr	r2, [pc, #88]	@ (800a3bc <xPortStartScheduler+0x13c>)
 800a362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a368:	4b14      	ldr	r3, [pc, #80]	@ (800a3bc <xPortStartScheduler+0x13c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a13      	ldr	r2, [pc, #76]	@ (800a3bc <xPortStartScheduler+0x13c>)
 800a36e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a374:	f000 f8da 	bl	800a52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a378:	4b11      	ldr	r3, [pc, #68]	@ (800a3c0 <xPortStartScheduler+0x140>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a37e:	f000 f8f9 	bl	800a574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a382:	4b10      	ldr	r3, [pc, #64]	@ (800a3c4 <xPortStartScheduler+0x144>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a0f      	ldr	r2, [pc, #60]	@ (800a3c4 <xPortStartScheduler+0x144>)
 800a388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a38c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a38e:	f7ff ff63 	bl	800a258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a392:	f7fe fe23 	bl	8008fdc <vTaskSwitchContext>
	prvTaskExitError();
 800a396:	f7ff ff17 	bl	800a1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	e000ed00 	.word	0xe000ed00
 800a3a8:	410fc271 	.word	0x410fc271
 800a3ac:	410fc270 	.word	0x410fc270
 800a3b0:	e000e400 	.word	0xe000e400
 800a3b4:	240015cc 	.word	0x240015cc
 800a3b8:	240015d0 	.word	0x240015d0
 800a3bc:	e000ed20 	.word	0xe000ed20
 800a3c0:	24000010 	.word	0x24000010
 800a3c4:	e000ef34 	.word	0xe000ef34

0800a3c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	607b      	str	r3, [r7, #4]
}
 800a3e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3e2:	4b10      	ldr	r3, [pc, #64]	@ (800a424 <vPortEnterCritical+0x5c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a424 <vPortEnterCritical+0x5c>)
 800a3ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a424 <vPortEnterCritical+0x5c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d110      	bne.n	800a416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a428 <vPortEnterCritical+0x60>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00b      	beq.n	800a416 <vPortEnterCritical+0x4e>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	603b      	str	r3, [r7, #0]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <vPortEnterCritical+0x4a>
	}
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	24000010 	.word	0x24000010
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a432:	4b12      	ldr	r3, [pc, #72]	@ (800a47c <vPortExitCritical+0x50>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <vPortExitCritical+0x26>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	607b      	str	r3, [r7, #4]
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	e7fd      	b.n	800a44e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a452:	4b0a      	ldr	r3, [pc, #40]	@ (800a47c <vPortExitCritical+0x50>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3b01      	subs	r3, #1
 800a458:	4a08      	ldr	r2, [pc, #32]	@ (800a47c <vPortExitCritical+0x50>)
 800a45a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a45c:	4b07      	ldr	r3, [pc, #28]	@ (800a47c <vPortExitCritical+0x50>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d105      	bne.n	800a470 <vPortExitCritical+0x44>
 800a464:	2300      	movs	r3, #0
 800a466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f383 8811 	msr	BASEPRI, r3
}
 800a46e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	24000010 	.word	0x24000010

0800a480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a480:	f3ef 8009 	mrs	r0, PSP
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	4b15      	ldr	r3, [pc, #84]	@ (800a4e0 <pxCurrentTCBConst>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	f01e 0f10 	tst.w	lr, #16
 800a490:	bf08      	it	eq
 800a492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49a:	6010      	str	r0, [r2, #0]
 800a49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a4a4:	f380 8811 	msr	BASEPRI, r0
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f7fe fd94 	bl	8008fdc <vTaskSwitchContext>
 800a4b4:	f04f 0000 	mov.w	r0, #0
 800a4b8:	f380 8811 	msr	BASEPRI, r0
 800a4bc:	bc09      	pop	{r0, r3}
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	6808      	ldr	r0, [r1, #0]
 800a4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c6:	f01e 0f10 	tst.w	lr, #16
 800a4ca:	bf08      	it	eq
 800a4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4d0:	f380 8809 	msr	PSP, r0
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	f3af 8000 	nop.w

0800a4e0 <pxCurrentTCBConst>:
 800a4e0:	24000fa0 	.word	0x24000fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop

0800a4e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	607b      	str	r3, [r7, #4]
}
 800a500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a502:	f7fe fcb1 	bl	8008e68 <xTaskIncrementTick>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a50c:	4b06      	ldr	r3, [pc, #24]	@ (800a528 <xPortSysTickHandler+0x40>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	2300      	movs	r3, #0
 800a516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f383 8811 	msr	BASEPRI, r3
}
 800a51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a530:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <vPortSetupTimerInterrupt+0x34>)
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a536:	4b0b      	ldr	r3, [pc, #44]	@ (800a564 <vPortSetupTimerInterrupt+0x38>)
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a53c:	4b0a      	ldr	r3, [pc, #40]	@ (800a568 <vPortSetupTimerInterrupt+0x3c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a0a      	ldr	r2, [pc, #40]	@ (800a56c <vPortSetupTimerInterrupt+0x40>)
 800a542:	fba2 2303 	umull	r2, r3, r2, r3
 800a546:	099b      	lsrs	r3, r3, #6
 800a548:	4a09      	ldr	r2, [pc, #36]	@ (800a570 <vPortSetupTimerInterrupt+0x44>)
 800a54a:	3b01      	subs	r3, #1
 800a54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a54e:	4b04      	ldr	r3, [pc, #16]	@ (800a560 <vPortSetupTimerInterrupt+0x34>)
 800a550:	2207      	movs	r2, #7
 800a552:	601a      	str	r2, [r3, #0]
}
 800a554:	bf00      	nop
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	e000e010 	.word	0xe000e010
 800a564:	e000e018 	.word	0xe000e018
 800a568:	24000000 	.word	0x24000000
 800a56c:	10624dd3 	.word	0x10624dd3
 800a570:	e000e014 	.word	0xe000e014

0800a574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a584 <vPortEnableVFP+0x10>
 800a578:	6801      	ldr	r1, [r0, #0]
 800a57a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a57e:	6001      	str	r1, [r0, #0]
 800a580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a582:	bf00      	nop
 800a584:	e000ed88 	.word	0xe000ed88

0800a588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a58e:	f3ef 8305 	mrs	r3, IPSR
 800a592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b0f      	cmp	r3, #15
 800a598:	d915      	bls.n	800a5c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a59a:	4a18      	ldr	r2, [pc, #96]	@ (800a5fc <vPortValidateInterruptPriority+0x74>)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5a4:	4b16      	ldr	r3, [pc, #88]	@ (800a600 <vPortValidateInterruptPriority+0x78>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	7afa      	ldrb	r2, [r7, #11]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d20b      	bcs.n	800a5c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a604 <vPortValidateInterruptPriority+0x7c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a608 <vPortValidateInterruptPriority+0x80>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d90b      	bls.n	800a5ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	603b      	str	r3, [r7, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vPortValidateInterruptPriority+0x62>
	}
 800a5ee:	bf00      	nop
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	e000e3f0 	.word	0xe000e3f0
 800a600:	240015cc 	.word	0x240015cc
 800a604:	e000ed0c 	.word	0xe000ed0c
 800a608:	240015d0 	.word	0x240015d0

0800a60c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08a      	sub	sp, #40	@ 0x28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a618:	f7fe fb6a 	bl	8008cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a61c:	4b5c      	ldr	r3, [pc, #368]	@ (800a790 <pvPortMalloc+0x184>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a624:	f000 f924 	bl	800a870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a628:	4b5a      	ldr	r3, [pc, #360]	@ (800a794 <pvPortMalloc+0x188>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 8095 	bne.w	800a760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01e      	beq.n	800a67a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a63c:	2208      	movs	r2, #8
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d015      	beq.n	800a67a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f023 0307 	bic.w	r3, r3, #7
 800a654:	3308      	adds	r3, #8
 800a656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f003 0307 	and.w	r3, r3, #7
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <pvPortMalloc+0x6e>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	617b      	str	r3, [r7, #20]
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	e7fd      	b.n	800a676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d06f      	beq.n	800a760 <pvPortMalloc+0x154>
 800a680:	4b45      	ldr	r3, [pc, #276]	@ (800a798 <pvPortMalloc+0x18c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	429a      	cmp	r2, r3
 800a688:	d86a      	bhi.n	800a760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a68a:	4b44      	ldr	r3, [pc, #272]	@ (800a79c <pvPortMalloc+0x190>)
 800a68c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a68e:	4b43      	ldr	r3, [pc, #268]	@ (800a79c <pvPortMalloc+0x190>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a694:	e004      	b.n	800a6a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d903      	bls.n	800a6b2 <pvPortMalloc+0xa6>
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1f1      	bne.n	800a696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6b2:	4b37      	ldr	r3, [pc, #220]	@ (800a790 <pvPortMalloc+0x184>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d051      	beq.n	800a760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2208      	movs	r2, #8
 800a6c2:	4413      	add	r3, r2
 800a6c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	1ad2      	subs	r2, r2, r3
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d920      	bls.n	800a720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00b      	beq.n	800a708 <pvPortMalloc+0xfc>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	613b      	str	r3, [r7, #16]
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a71a:	69b8      	ldr	r0, [r7, #24]
 800a71c:	f000 f90a 	bl	800a934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a720:	4b1d      	ldr	r3, [pc, #116]	@ (800a798 <pvPortMalloc+0x18c>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	4a1b      	ldr	r2, [pc, #108]	@ (800a798 <pvPortMalloc+0x18c>)
 800a72c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a72e:	4b1a      	ldr	r3, [pc, #104]	@ (800a798 <pvPortMalloc+0x18c>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a0 <pvPortMalloc+0x194>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d203      	bcs.n	800a742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a73a:	4b17      	ldr	r3, [pc, #92]	@ (800a798 <pvPortMalloc+0x18c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a18      	ldr	r2, [pc, #96]	@ (800a7a0 <pvPortMalloc+0x194>)
 800a740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4b13      	ldr	r3, [pc, #76]	@ (800a794 <pvPortMalloc+0x188>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a756:	4b13      	ldr	r3, [pc, #76]	@ (800a7a4 <pvPortMalloc+0x198>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3301      	adds	r3, #1
 800a75c:	4a11      	ldr	r2, [pc, #68]	@ (800a7a4 <pvPortMalloc+0x198>)
 800a75e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a760:	f7fe fad4 	bl	8008d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <pvPortMalloc+0x17a>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	e7fd      	b.n	800a782 <pvPortMalloc+0x176>
	return pvReturn;
 800a786:	69fb      	ldr	r3, [r7, #28]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3728      	adds	r7, #40	@ 0x28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	240051dc 	.word	0x240051dc
 800a794:	240051f0 	.word	0x240051f0
 800a798:	240051e0 	.word	0x240051e0
 800a79c:	240051d4 	.word	0x240051d4
 800a7a0:	240051e4 	.word	0x240051e4
 800a7a4:	240051e8 	.word	0x240051e8

0800a7a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d04f      	beq.n	800a85a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7ba:	2308      	movs	r3, #8
 800a7bc:	425b      	negs	r3, r3
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	4b25      	ldr	r3, [pc, #148]	@ (800a864 <vPortFree+0xbc>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <vPortFree+0x46>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00b      	beq.n	800a80e <vPortFree+0x66>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	60bb      	str	r3, [r7, #8]
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	e7fd      	b.n	800a80a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	4b14      	ldr	r3, [pc, #80]	@ (800a864 <vPortFree+0xbc>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4013      	ands	r3, r2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01e      	beq.n	800a85a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d11a      	bne.n	800a85a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <vPortFree+0xbc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	43db      	mvns	r3, r3
 800a82e:	401a      	ands	r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a834:	f7fe fa5c 	bl	8008cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <vPortFree+0xc0>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4413      	add	r3, r2
 800a842:	4a09      	ldr	r2, [pc, #36]	@ (800a868 <vPortFree+0xc0>)
 800a844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a846:	6938      	ldr	r0, [r7, #16]
 800a848:	f000 f874 	bl	800a934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <vPortFree+0xc4>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3301      	adds	r3, #1
 800a852:	4a06      	ldr	r2, [pc, #24]	@ (800a86c <vPortFree+0xc4>)
 800a854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a856:	f7fe fa59 	bl	8008d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a85a:	bf00      	nop
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	240051f0 	.word	0x240051f0
 800a868:	240051e0 	.word	0x240051e0
 800a86c:	240051ec 	.word	0x240051ec

0800a870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a876:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a87a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a87c:	4b27      	ldr	r3, [pc, #156]	@ (800a91c <prvHeapInit+0xac>)
 800a87e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0307 	and.w	r3, r3, #7
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00c      	beq.n	800a8a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3307      	adds	r3, #7
 800a88e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0307 	bic.w	r3, r3, #7
 800a896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	4a1f      	ldr	r2, [pc, #124]	@ (800a91c <prvHeapInit+0xac>)
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a920 <prvHeapInit+0xb0>)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a920 <prvHeapInit+0xb0>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8bc:	2208      	movs	r2, #8
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	1a9b      	subs	r3, r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0307 	bic.w	r3, r3, #7
 800a8ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4a15      	ldr	r2, [pc, #84]	@ (800a924 <prvHeapInit+0xb4>)
 800a8d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8d2:	4b14      	ldr	r3, [pc, #80]	@ (800a924 <prvHeapInit+0xb4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8da:	4b12      	ldr	r3, [pc, #72]	@ (800a924 <prvHeapInit+0xb4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a924 <prvHeapInit+0xb4>)
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a928 <prvHeapInit+0xb8>)
 800a8fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a09      	ldr	r2, [pc, #36]	@ (800a92c <prvHeapInit+0xbc>)
 800a906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a908:	4b09      	ldr	r3, [pc, #36]	@ (800a930 <prvHeapInit+0xc0>)
 800a90a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a90e:	601a      	str	r2, [r3, #0]
}
 800a910:	bf00      	nop
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	240015d4 	.word	0x240015d4
 800a920:	240051d4 	.word	0x240051d4
 800a924:	240051dc 	.word	0x240051dc
 800a928:	240051e4 	.word	0x240051e4
 800a92c:	240051e0 	.word	0x240051e0
 800a930:	240051f0 	.word	0x240051f0

0800a934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a93c:	4b28      	ldr	r3, [pc, #160]	@ (800a9e0 <prvInsertBlockIntoFreeList+0xac>)
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	e002      	b.n	800a948 <prvInsertBlockIntoFreeList+0x14>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d8f7      	bhi.n	800a942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	4413      	add	r3, r2
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d108      	bne.n	800a976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	441a      	add	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	441a      	add	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d118      	bne.n	800a9bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b15      	ldr	r3, [pc, #84]	@ (800a9e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d00d      	beq.n	800a9b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	e008      	b.n	800a9c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	e003      	b.n	800a9c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d002      	beq.n	800a9d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	240051d4 	.word	0x240051d4
 800a9e4:	240051dc 	.word	0x240051dc

0800a9e8 <memset>:
 800a9e8:	4402      	add	r2, r0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d100      	bne.n	800a9f2 <memset+0xa>
 800a9f0:	4770      	bx	lr
 800a9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9f6:	e7f9      	b.n	800a9ec <memset+0x4>

0800a9f8 <_reclaim_reent>:
 800a9f8:	4b29      	ldr	r3, [pc, #164]	@ (800aaa0 <_reclaim_reent+0xa8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4283      	cmp	r3, r0
 800a9fe:	b570      	push	{r4, r5, r6, lr}
 800aa00:	4604      	mov	r4, r0
 800aa02:	d04b      	beq.n	800aa9c <_reclaim_reent+0xa4>
 800aa04:	69c3      	ldr	r3, [r0, #28]
 800aa06:	b1ab      	cbz	r3, 800aa34 <_reclaim_reent+0x3c>
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	b16b      	cbz	r3, 800aa28 <_reclaim_reent+0x30>
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	69e3      	ldr	r3, [r4, #28]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	5959      	ldr	r1, [r3, r5]
 800aa14:	2900      	cmp	r1, #0
 800aa16:	d13b      	bne.n	800aa90 <_reclaim_reent+0x98>
 800aa18:	3504      	adds	r5, #4
 800aa1a:	2d80      	cmp	r5, #128	@ 0x80
 800aa1c:	d1f7      	bne.n	800aa0e <_reclaim_reent+0x16>
 800aa1e:	69e3      	ldr	r3, [r4, #28]
 800aa20:	4620      	mov	r0, r4
 800aa22:	68d9      	ldr	r1, [r3, #12]
 800aa24:	f000 f872 	bl	800ab0c <_free_r>
 800aa28:	69e3      	ldr	r3, [r4, #28]
 800aa2a:	6819      	ldr	r1, [r3, #0]
 800aa2c:	b111      	cbz	r1, 800aa34 <_reclaim_reent+0x3c>
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 f86c 	bl	800ab0c <_free_r>
 800aa34:	6961      	ldr	r1, [r4, #20]
 800aa36:	b111      	cbz	r1, 800aa3e <_reclaim_reent+0x46>
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 f867 	bl	800ab0c <_free_r>
 800aa3e:	69e1      	ldr	r1, [r4, #28]
 800aa40:	b111      	cbz	r1, 800aa48 <_reclaim_reent+0x50>
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 f862 	bl	800ab0c <_free_r>
 800aa48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa4a:	b111      	cbz	r1, 800aa52 <_reclaim_reent+0x5a>
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 f85d 	bl	800ab0c <_free_r>
 800aa52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa54:	b111      	cbz	r1, 800aa5c <_reclaim_reent+0x64>
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 f858 	bl	800ab0c <_free_r>
 800aa5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aa5e:	b111      	cbz	r1, 800aa66 <_reclaim_reent+0x6e>
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 f853 	bl	800ab0c <_free_r>
 800aa66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aa68:	b111      	cbz	r1, 800aa70 <_reclaim_reent+0x78>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 f84e 	bl	800ab0c <_free_r>
 800aa70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aa72:	b111      	cbz	r1, 800aa7a <_reclaim_reent+0x82>
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 f849 	bl	800ab0c <_free_r>
 800aa7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aa7c:	b111      	cbz	r1, 800aa84 <_reclaim_reent+0x8c>
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f844 	bl	800ab0c <_free_r>
 800aa84:	6a23      	ldr	r3, [r4, #32]
 800aa86:	b14b      	cbz	r3, 800aa9c <_reclaim_reent+0xa4>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa8e:	4718      	bx	r3
 800aa90:	680e      	ldr	r6, [r1, #0]
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 f83a 	bl	800ab0c <_free_r>
 800aa98:	4631      	mov	r1, r6
 800aa9a:	e7bb      	b.n	800aa14 <_reclaim_reent+0x1c>
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	bf00      	nop
 800aaa0:	24000014 	.word	0x24000014

0800aaa4 <__libc_init_array>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	4d0d      	ldr	r5, [pc, #52]	@ (800aadc <__libc_init_array+0x38>)
 800aaa8:	4c0d      	ldr	r4, [pc, #52]	@ (800aae0 <__libc_init_array+0x3c>)
 800aaaa:	1b64      	subs	r4, r4, r5
 800aaac:	10a4      	asrs	r4, r4, #2
 800aaae:	2600      	movs	r6, #0
 800aab0:	42a6      	cmp	r6, r4
 800aab2:	d109      	bne.n	800aac8 <__libc_init_array+0x24>
 800aab4:	4d0b      	ldr	r5, [pc, #44]	@ (800aae4 <__libc_init_array+0x40>)
 800aab6:	4c0c      	ldr	r4, [pc, #48]	@ (800aae8 <__libc_init_array+0x44>)
 800aab8:	f000 f87e 	bl	800abb8 <_init>
 800aabc:	1b64      	subs	r4, r4, r5
 800aabe:	10a4      	asrs	r4, r4, #2
 800aac0:	2600      	movs	r6, #0
 800aac2:	42a6      	cmp	r6, r4
 800aac4:	d105      	bne.n	800aad2 <__libc_init_array+0x2e>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aacc:	4798      	blx	r3
 800aace:	3601      	adds	r6, #1
 800aad0:	e7ee      	b.n	800aab0 <__libc_init_array+0xc>
 800aad2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad6:	4798      	blx	r3
 800aad8:	3601      	adds	r6, #1
 800aada:	e7f2      	b.n	800aac2 <__libc_init_array+0x1e>
 800aadc:	0800ad00 	.word	0x0800ad00
 800aae0:	0800ad00 	.word	0x0800ad00
 800aae4:	0800ad00 	.word	0x0800ad00
 800aae8:	0800ad04 	.word	0x0800ad04

0800aaec <__retarget_lock_acquire_recursive>:
 800aaec:	4770      	bx	lr

0800aaee <__retarget_lock_release_recursive>:
 800aaee:	4770      	bx	lr

0800aaf0 <memcpy>:
 800aaf0:	440a      	add	r2, r1
 800aaf2:	4291      	cmp	r1, r2
 800aaf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aaf8:	d100      	bne.n	800aafc <memcpy+0xc>
 800aafa:	4770      	bx	lr
 800aafc:	b510      	push	{r4, lr}
 800aafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab06:	4291      	cmp	r1, r2
 800ab08:	d1f9      	bne.n	800aafe <memcpy+0xe>
 800ab0a:	bd10      	pop	{r4, pc}

0800ab0c <_free_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4605      	mov	r5, r0
 800ab10:	2900      	cmp	r1, #0
 800ab12:	d041      	beq.n	800ab98 <_free_r+0x8c>
 800ab14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab18:	1f0c      	subs	r4, r1, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfb8      	it	lt
 800ab1e:	18e4      	addlt	r4, r4, r3
 800ab20:	f000 f83e 	bl	800aba0 <__malloc_lock>
 800ab24:	4a1d      	ldr	r2, [pc, #116]	@ (800ab9c <_free_r+0x90>)
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	b933      	cbnz	r3, 800ab38 <_free_r+0x2c>
 800ab2a:	6063      	str	r3, [r4, #4]
 800ab2c:	6014      	str	r4, [r2, #0]
 800ab2e:	4628      	mov	r0, r5
 800ab30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab34:	f000 b83a 	b.w	800abac <__malloc_unlock>
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	d908      	bls.n	800ab4e <_free_r+0x42>
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	1821      	adds	r1, r4, r0
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf01      	itttt	eq
 800ab44:	6819      	ldreq	r1, [r3, #0]
 800ab46:	685b      	ldreq	r3, [r3, #4]
 800ab48:	1809      	addeq	r1, r1, r0
 800ab4a:	6021      	streq	r1, [r4, #0]
 800ab4c:	e7ed      	b.n	800ab2a <_free_r+0x1e>
 800ab4e:	461a      	mov	r2, r3
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	b10b      	cbz	r3, 800ab58 <_free_r+0x4c>
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d9fa      	bls.n	800ab4e <_free_r+0x42>
 800ab58:	6811      	ldr	r1, [r2, #0]
 800ab5a:	1850      	adds	r0, r2, r1
 800ab5c:	42a0      	cmp	r0, r4
 800ab5e:	d10b      	bne.n	800ab78 <_free_r+0x6c>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	4401      	add	r1, r0
 800ab64:	1850      	adds	r0, r2, r1
 800ab66:	4283      	cmp	r3, r0
 800ab68:	6011      	str	r1, [r2, #0]
 800ab6a:	d1e0      	bne.n	800ab2e <_free_r+0x22>
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	6053      	str	r3, [r2, #4]
 800ab72:	4408      	add	r0, r1
 800ab74:	6010      	str	r0, [r2, #0]
 800ab76:	e7da      	b.n	800ab2e <_free_r+0x22>
 800ab78:	d902      	bls.n	800ab80 <_free_r+0x74>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	e7d6      	b.n	800ab2e <_free_r+0x22>
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	1821      	adds	r1, r4, r0
 800ab84:	428b      	cmp	r3, r1
 800ab86:	bf04      	itt	eq
 800ab88:	6819      	ldreq	r1, [r3, #0]
 800ab8a:	685b      	ldreq	r3, [r3, #4]
 800ab8c:	6063      	str	r3, [r4, #4]
 800ab8e:	bf04      	itt	eq
 800ab90:	1809      	addeq	r1, r1, r0
 800ab92:	6021      	streq	r1, [r4, #0]
 800ab94:	6054      	str	r4, [r2, #4]
 800ab96:	e7ca      	b.n	800ab2e <_free_r+0x22>
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	bf00      	nop
 800ab9c:	24005330 	.word	0x24005330

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff bfa3 	b.w	800aaec <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	2400532c 	.word	0x2400532c

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff bf9e 	b.w	800aaee <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	2400532c 	.word	0x2400532c

0800abb8 <_init>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr

0800abc4 <_fini>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr
